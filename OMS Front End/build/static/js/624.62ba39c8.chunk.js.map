{"version":3,"file":"static/js/624.62ba39c8.chunk.js","mappings":"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","sources":["utils/RandomColors/RandomColors.js","components/ui/timeline/TimeLine.js","common/features/component/Note/feature/NoteList.js"],"sourcesContent":["const colorlist = [\"lightGray\", \"lightGreen\", \"lightYellow\", \"lightBlue\", \"lightPink\", \"lightPurple\", \"lightOrange\"]\r\n\r\nexport const getRandomColor = (value) => {\r\n    return colorlist[value % colorlist.length]\r\n};\r\n","import React from \"react\";\r\nimport \"./TimeLine.scss\";\r\nimport { getRandomColor } from \"../../../utils/RandomColors/RandomColors\";\r\nimport formatDate from \"../../../lib/formatDate\";\r\n\r\nimport { formatDateInShort } from \"../../../lib/formatDate\";\r\nimport { TimeSplit } from \"../../FinalMolGrid/libs/formatDate\";\r\nimport NoRecordFound from \"../noRecordFound/NoRecordFound\";\r\n\r\nconst TimeLine = ({ notesData }) => {\r\n  return (\r\n    <div className=\"timeline-section\">\r\n      <div className=\"timeline-ui\">\r\n        <div className=\"msg-desc\">\r\n          <ul>\r\n            {notesData.length > 0 ? (\r\n              notesData.map((note, index) => (\r\n                <li key={index} className={`${getRandomColor(index)}`}>\r\n                  <div className=\"notes-desc\">\r\n                    <div className=\"desc-sec\">\r\n                      <div className=\"notes-sec\">\r\n                        <div\r\n                          className=\"html-render\"\r\n                          dangerouslySetInnerHTML={{ __html: note.newNote }}\r\n                        ></div>\r\n                      </div>\r\n                      <div className=\"name-time\">\r\n                        <span className=\"name\">\r\n                          Updated By: <span>{note.updatedBy}</span>\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"date-time-sec\">\r\n                      <div className=\"date\">\r\n                        {formatDateInShort(formatDate(note.updatedAt))}\r\n                      </div>\r\n                      <div className=\"time\">\r\n                        {TimeSplit(note.updatedAt, \"MM/DD/YYYY hh:mm\")}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </li>\r\n              ))\r\n            ) : (\r\n              <NoRecordFound />\r\n            )}\r\n          </ul>\r\n        </div>\r\n        <div className=\"center-line\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeLine;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { forwardRef, useEffect, useImperativeHandle, useState } from \"react\";\r\n//** Lib's */\r\nimport formatDate from \"../../../../../lib/formatDate\";\r\nimport { AppIcons } from \"../../../../../data/appIcons\";\r\nimport Buttons from \"../../../../../components/ui/button/Buttons\";\r\nimport DataLoader from \"../../../../../components/ui/dataLoader/DataLoader\";\r\nimport { getRandomColor } from \"../../../../../utils/RandomColors/RandomColors\";\r\nimport NoRecordFound from \"../../../../../components/ui/noRecordFound/NoRecordFound\";\r\nimport PropTypes from \"prop-types\";\r\nimport Iconify from \"../../../../../components/ui/iconify/Iconify\";\r\nimport TimeLine from \"../../../../../components/ui/timeline/TimeLine\";\r\nimport SidebarModel from \"../../../../../components/ui/sidebarModel/SidebarModel\";\r\nimport Tooltip from \"../../../../../components/ui/tooltip/Tooltip\";\r\nimport { useLazyGetNotesHistoryQuery } from \"../../../../../app/services/commonAPI\";\r\nimport { NoteTypes, OwnerType } from \"../../../../../utils/Enums/commonEnums\";\r\n\r\nconst NoteList = forwardRef(\r\n  ({ keyId, handleEditClick, onGetByIdNotes, showEditIcon, listRef ,isSupplier}) => {\r\n    //** States */\r\n    const [notesFormData, setNotesFormData] = useState([]);\r\n    const [isModelOpen, setIsModelOpen] = useState(false);\r\n    const[noteTimeLineList,setNoteTimeLineList]=useState([]);\r\n\r\n    //** API Call's */\r\n    /**\r\n     * This hook dynamically sets the API call based on the module (customer or supplier).\r\n     * The API endpoint and parameters are configured within the SupplierNoteDetail OR CustomerNoteDetail component.\r\n     */\r\n    const [\r\n      getNoteById,\r\n      {\r\n        isFetching: isGetNotesFetching,\r\n        isSuccess: isGetNotesSuccess,\r\n        data: isGetNotesData,\r\n      },\r\n    ] = onGetByIdNotes();\r\n    const [\r\n      getNotesHistory,\r\n      {\r\n        isFetching: isGetNotesHistoryFetching,\r\n        isSuccess: isGetNotesHistorySuccess,\r\n        data: isGetNotesHistoryData,\r\n      },\r\n    ] = useLazyGetNotesHistoryQuery();\r\n\r\n    const handleHistory=(noteId)=>{\r\n      let req = {\r\n         entityId:noteId,\r\n         ownerId: keyId,\r\n         ownerTypeId:isSupplier ? OwnerType.Supplier:OwnerType.Customer,\r\n         noteType:NoteTypes.DefaultNote,\r\n\r\n       };\r\n       getNotesHistory(req);\r\n    }\r\n\r\n    //** UseEffect */\r\n    useEffect(() => {\r\n      keyId && onGetNote(keyId);\r\n    }, [keyId]);\r\n\r\n    useEffect(() => {\r\n      \r\n      if ( !isGetNotesHistoryFetching &&isGetNotesHistorySuccess && isGetNotesHistoryData ) {\r\n        if(isGetNotesHistoryData){\r\n          setNoteTimeLineList(isGetNotesHistoryData);\r\n        }\r\n      }\r\n    }, [isGetNotesHistoryFetching, isGetNotesHistorySuccess, isGetNotesHistoryData,]);\r\n\r\n    useEffect(() => { \r\n    \r\n      if (!isGetNotesFetching && isGetNotesSuccess && isGetNotesData) {\r\n      \r\n        if (Array.isArray(isGetNotesData)) {\r\n          setNotesFormData(isGetNotesData);\r\n         \r\n        }\r\n      }\r\n    }, [isGetNotesFetching, isGetNotesSuccess, isGetNotesData]);\r\n\r\n    //** Handle Changes */\r\n    const onGetNote = (keyId) => {\r\n      getNoteById(keyId);\r\n    };\r\n\r\n    //** UseImperativeHandle */\r\n    useImperativeHandle(listRef, () => ({\r\n      callListFunction: onGetNote,\r\n    }));\r\n    //** Handle Changes */\r\n    const handleToggleModal = (NoteId) => {\r\n\r\n      handleHistory(NoteId);\r\n      setIsModelOpen(true);\r\n    };\r\n    const onSidebarClose = () => {\r\n      setIsModelOpen(false);\r\n    };\r\n    return (\r\n      <div className=\"row\">\r\n        {!isGetNotesFetching ? (\r\n          <>\r\n            {\" \"}\r\n            {notesFormData.length > 0 ? (\r\n              notesFormData.map((notes, noteIndex) => (\r\n                <div\r\n                  className=\"col-xxl-4 col-xl-4 col-md-4 col-12 mb-2\"\r\n                  key={noteIndex}\r\n                >\r\n                  <div\r\n                    className={`notes-card randomColor ${getRandomColor(\r\n                      noteIndex\r\n                    )}`}\r\n                  >\r\n                    <div className=\"card-content\">\r\n                      <div className=\"bottom-info\">\r\n                        <div className=\"note-text editor-section\">\r\n                          <div\r\n                            dangerouslySetInnerHTML={{ __html: notes.note }}\r\n                          ></div>\r\n                          <div\r\n                            className=\"history-btn\"\r\n                            onClick={() =>handleToggleModal(isSupplier ? notes.supplierNoteId : notes.customerNoteId)}\r\n                          >\r\n                            <Iconify\r\n                              icon=\"iconamoon:history-bold\"\r\n                              className=\"history-btn\"\r\n                            />\r\n                            <Tooltip text=\"History\"/>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"card-notes \">\r\n                          <div className=\"note-label\">\r\n                            Created on{\" \"}\r\n                            {formatDate(notes.noteDate, \"MM/DD/YYYY hh:mm A\")}{\" \"}\r\n                            by {notes.fullName}\r\n                          </div>\r\n                          <div className=\"edit-button\">\r\n                            {showEditIcon ? (\r\n                              <Buttons\r\n                                buttonTypeClassName=\"edit-btn\"\r\n                                onClick={() => handleEditClick(notes)}\r\n                                textWithIcon={true}\r\n                                imagePath={AppIcons.editThemeIcon}\r\n                              ></Buttons>\r\n                            ) : null}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <NoRecordFound />\r\n            )}\r\n          </>\r\n        ) : (\r\n          <DataLoader />\r\n        )}\r\n        <SidebarModel\r\n          modalTitle=\"History\"\r\n          contentClass=\"content-50\"\r\n          onClose={onSidebarClose}\r\n          modalTitleIcon={AppIcons.AddIcon}\r\n          isOpen={isModelOpen}\r\n        >\r\n          <TimeLine notesData={noteTimeLineList} />\r\n        </SidebarModel>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nNoteList.propTypes = {\r\n  keyId: PropTypes.number.isRequired,\r\n  handleEditClick: PropTypes.func.isRequired,\r\n  onGetByIdNotes: PropTypes.func.isRequired,\r\n  showEditIcon: PropTypes.bool.isRequired,\r\n  listRef: PropTypes.shape({\r\n    current: PropTypes.shape({\r\n      callListFunction: PropTypes.func,\r\n    }),\r\n  }),\r\n};\r\n\r\nexport default NoteList;\r\n"],"names":["colorlist","getRandomColor","value","length","_ref","notesData","_jsx","className","children","_jsxs","map","note","index","dangerouslySetInnerHTML","__html","newNote","updatedBy","formatDateInShort","formatDate","updatedAt","TimeSplit","NoRecordFound","forwardRef","keyId","handleEditClick","onGetByIdNotes","showEditIcon","listRef","isSupplier","notesFormData","setNotesFormData","useState","isModelOpen","setIsModelOpen","noteTimeLineList","setNoteTimeLineList","getNoteById","isFetching","isGetNotesFetching","isSuccess","isGetNotesSuccess","data","isGetNotesData","getNotesHistory","isGetNotesHistoryFetching","isGetNotesHistorySuccess","isGetNotesHistoryData","useLazyGetNotesHistoryQuery","useEffect","onGetNote","Array","isArray","useImperativeHandle","callListFunction","handleToggleModal","NoteId","noteId","req","entityId","ownerId","ownerTypeId","OwnerType","Supplier","Customer","noteType","NoteTypes","DefaultNote","handleHistory","DataLoader","_Fragment","notes","noteIndex","onClick","supplierNoteId","customerNoteId","Iconify","icon","Tooltip","text","noteDate","fullName","Buttons","buttonTypeClassName","textWithIcon","imagePath","AppIcons","editThemeIcon","SidebarModel","modalTitle","contentClass","onClose","onSidebarClose","modalTitleIcon","AddIcon","isOpen","TimeLine"],"sourceRoot":""}