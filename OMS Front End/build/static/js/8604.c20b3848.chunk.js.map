{"version":3,"file":"static/js/8604.c20b3848.chunk.js","mappings":"6KAYA,MAAMA,EAAoBC,EAAAA,MAAW,IAAM,oEAoJ3C,GAlJoBC,EAAAA,EAAAA,aAClBC,IAYO,IAZN,MACCC,EAAK,WACLC,EAAU,aACVC,EAAY,WACZC,EAAU,kBACVC,EAAiB,sBACjBC,EAAqB,OACrBC,EAAM,WACNC,EAAU,mBACVC,EAAkB,eAClBC,EAAc,YACdC,GACDX,EACC,MAAMY,GAA+BC,EAAAA,EAAAA,WAC9BC,EAAgBC,IAAqBC,EAAAA,EAAAA,UAAS,KAC9CC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,OAQ7CG,GAEEC,WAAYC,EACZC,UAAWC,EACXC,KAAMC,IAENpB,KAWJqB,EAAAA,EAAAA,YAAU,KARaC,EAACC,EAAMC,KAC5B,GAAID,EAAKE,SAAWD,EAAKC,OAAQ,OAAO,EACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAKE,OAAQC,IAC/B,GAAIH,EAAKG,KAAOF,EAAKE,GAAI,OAAO,EAElC,OAAO,CAAI,EAINJ,CAAef,EAA6BoB,SAAW,GAAI1B,IAC9D2B,IACArB,EAA6BoB,QAAU1B,CAAqB,GAC7D,CAACL,EAAOK,IAEX,MAAM4B,GAAYrB,EAAAA,EAAAA,QAAO,IAEnBsB,EAAsBC,IAExBnB,GACAiB,EAAUF,QAAQf,KACjBiB,EAAUF,QAAQf,GAAaoB,SAASD,EAAME,SAE/CpB,EAAe,KACjB,GAGFQ,EAAAA,EAAAA,YAAU,KACRa,SAASC,iBAAiB,YAAaL,GAChC,KACLI,SAASE,oBAAoB,YAAaN,EAAmB,IAE9D,CAAClB,IAGJ,MAAMgB,EAAmBA,KAOvBS,EANU,CACRC,GAAI1C,EACJ2C,WAAY,GACZC,YAAavC,GAAgD,IAG/C,EAGZoC,EAAeI,IACnB,IAAIC,EAAU,IACTD,EACHD,YAAavC,GAEfL,GAASkB,EAAe4B,EAAQ,EAclC,OAVAC,EAAAA,EAAAA,qBAAoB5C,GAAY,MAC9B6C,sBAAuBP,OAGzBhB,EAAAA,EAAAA,YAAU,MACHL,GAAwBE,GAAsBE,GACjDV,EAAkBU,EACpB,GACC,CAACJ,EAAsBE,EAAoBE,KAG5CyB,EAAAA,EAAAA,KAACpD,EAAAA,SAAc,CAAAqD,SACX9B,GA0BA6B,EAAAA,EAAAA,KAACE,EAAAA,EAAU,KAzBXF,EAAAA,EAAAA,KAAAG,EAAAA,SAAA,CAAAF,SACGrC,GAAkBA,EAAegB,OAAS,GACzCoB,EAAAA,EAAAA,KAAA,OAAKI,UAAU,wCAAuCH,SACnDrC,EAAeyC,KAAI,CAACC,EAAaC,KAChCP,EAAAA,EAAAA,KAACrD,EAAiB,CAEhB2D,YAAaA,EACbtD,WAAYA,EACZC,aAAcA,EACdc,YAAaA,EACbC,eAAgBA,EAChBV,WAAYA,EACZyB,iBAAkBA,EAClBxB,mBAAoBA,EACpBC,eAAgBA,EAChBC,YAAaA,EACb+C,IAAMC,GAAQzB,EAAUF,QAAQwB,EAAYI,WAAaD,GAXpDH,EAAYI,gBAgBvBV,EAAAA,EAAAA,KAACW,EAAAA,EAAa,OAML,G","sources":["common/features/component/Contact/feature/ContactList.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, {\r\n  forwardRef,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport DataLoader from \"../../../../../components/ui/dataLoader/DataLoader\";\r\nimport NoRecordFound from \"../../../../../components/ui/noRecordFound/NoRecordFound\";\r\nimport PropTypes from \"prop-types\";\r\n//** Component's */\r\nconst ContactDetailCard = React.lazy(() => import(\"./ContactDetailCard\"));\r\n\r\nconst ContactList = forwardRef(\r\n  ({\r\n    keyId,\r\n    handleEdit,\r\n    showEditIcon,\r\n    getListRef,\r\n    getContactByKeyId,\r\n    selectedContactTypeId,\r\n    search,\r\n    isSupplier,\r\n    getCompletionCount,\r\n    isEditablePage,\r\n    SecurityKey\r\n  }) => {\r\n    const prevSelectedContactTypeIdRef = useRef();\r\n    const [contactDetails, setContactDetails] = useState([]);\r\n    const [openModalId, setOpenModalId] = useState(null);\r\n\r\n    /**\r\n     * This hook dynamically sets the API call based on the module (customer or supplier).\r\n     * The API endpoint and parameters are configured within the SupplierContactDetail OR CustomerContactDetail component.\r\n     * It fetches Contact details by the customer or supplier ID.\r\n     */\r\n    const [\r\n      getContactList,\r\n      {\r\n        isFetching: isGetContactFetching,\r\n        isSuccess: isGetContactSucess,\r\n        data: isGetcontactItem,\r\n      },\r\n    ] = getContactByKeyId();\r\n\r\n    //** UseEffect */\r\n    const arraysAreEqual = (arr1, arr2) => {\r\n      if (arr1.length !== arr2.length) return false;\r\n      for (let i = 0; i < arr1.length; i++) {\r\n        if (arr1[i] !== arr2[i]) return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (!arraysAreEqual(prevSelectedContactTypeIdRef.current || [], selectedContactTypeId)) {\r\n        onGetContactList();\r\n      } prevSelectedContactTypeIdRef.current = selectedContactTypeId;\r\n    }, [keyId, selectedContactTypeId]);\r\n\r\n    const modalRefs = useRef([]);\r\n\r\n    const handleOutsideClick = (event) => {\r\n      if (\r\n        openModalId &&\r\n        modalRefs.current[openModalId] &&\r\n        !modalRefs.current[openModalId].contains(event.target)\r\n      ) {\r\n        setOpenModalId(null);\r\n      }\r\n    };\r\n\r\n    useEffect(() => {\r\n      document.addEventListener(\"mousedown\", handleOutsideClick);\r\n      return () => {\r\n        document.removeEventListener(\"mousedown\", handleOutsideClick);\r\n      };\r\n    }, [openModalId]);\r\n\r\n    //** Get Contact List */\r\n    const onGetContactList = () => {\r\n      let req = {\r\n        id: keyId,\r\n        searchText: \"\", // Initial call: no search text provided.\r\n        contactType: selectedContactTypeId ? selectedContactTypeId : \"\",\r\n        //contactType: selectedContactTypeId || \"\"\r\n      };\r\n      contactList(req);\r\n    };\r\n\r\n    const contactList = (req) => {\r\n      let request = {\r\n        ...req,\r\n        contactType: selectedContactTypeId,\r\n      };\r\n      keyId && getContactList(request);\r\n    };\r\n\r\n    //** Use Imperative Handle */\r\n    useImperativeHandle(getListRef, () => ({\r\n      callChildListFunction: contactList,\r\n    }));\r\n\r\n    useEffect(() => {\r\n      if (!isGetContactFetching && isGetContactSucess && isGetcontactItem) {\r\n        setContactDetails(isGetcontactItem);\r\n      }\r\n    }, [isGetContactFetching, isGetContactSucess, isGetcontactItem]);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {!isGetContactFetching ? (\r\n          <>\r\n            {contactDetails && contactDetails.length > 0 ? (\r\n              <div className=\"contact-card-list custom-contact-card\">\r\n                {contactDetails.map((contactItem, childIndex) => (\r\n                  <ContactDetailCard\r\n                    key={contactItem.contactId}\r\n                    contactItem={contactItem}\r\n                    handleEdit={handleEdit}\r\n                    showEditIcon={showEditIcon}\r\n                    openModalId={openModalId}\r\n                    setOpenModalId={setOpenModalId}\r\n                    isSupplier={isSupplier}\r\n                    onGetContactList={onGetContactList}\r\n                    getCompletionCount={getCompletionCount}\r\n                    isEditablePage={isEditablePage}\r\n                    SecurityKey={SecurityKey}\r\n                    ref={(el) => (modalRefs.current[contactItem.contactId] = el)}\r\n                  />\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              <NoRecordFound />\r\n            )}\r\n          </>\r\n        ) : (\r\n          <DataLoader />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n);\r\nContactList.propTypes = {\r\n  keyId: PropTypes.number.isRequired,\r\n  handleEdit: PropTypes.func.isRequired,\r\n  showEditIcon: PropTypes.bool.isRequired,\r\n  getListRef: PropTypes.shape({\r\n    current: PropTypes.shape({\r\n      callChildListFunction: PropTypes.func,\r\n    }),\r\n  }).isRequired,\r\n  getContactByKeyId: PropTypes.func.isRequired,\r\n  selectedContactTypeId: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.array,\r\n  ]),\r\n  search: PropTypes.string.isRequired,\r\n};\r\nexport default ContactList;\r\n"],"names":["ContactDetailCard","React","forwardRef","_ref","keyId","handleEdit","showEditIcon","getListRef","getContactByKeyId","selectedContactTypeId","search","isSupplier","getCompletionCount","isEditablePage","SecurityKey","prevSelectedContactTypeIdRef","useRef","contactDetails","setContactDetails","useState","openModalId","setOpenModalId","getContactList","isFetching","isGetContactFetching","isSuccess","isGetContactSucess","data","isGetcontactItem","useEffect","arraysAreEqual","arr1","arr2","length","i","current","onGetContactList","modalRefs","handleOutsideClick","event","contains","target","document","addEventListener","removeEventListener","contactList","id","searchText","contactType","req","request","useImperativeHandle","callChildListFunction","_jsx","children","DataLoader","_Fragment","className","map","contactItem","childIndex","ref","el","contactId","NoRecordFound"],"sourceRoot":""}