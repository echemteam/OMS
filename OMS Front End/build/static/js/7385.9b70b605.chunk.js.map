{"version":3,"file":"static/js/7385.9b70b605.chunk.js","mappings":"kQAiBE,MAyLA,EAzLqBA,IAAW,IAADC,EAC7B,MACMC,GADWC,EAAAA,EAAAA,MACOC,MAAMF,QACvBG,EAASC,IAAcC,EAAAA,EAAAA,UAAS,WAChCC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,OACpCG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,KACxCK,EAAkBC,IAAuBN,EAAAA,EAAAA,UAAS,KAClDO,EAAgBC,IAAqBR,EAAAA,EAAAA,UACvB,QAD+BN,EAClDD,EAAMgB,WAAW,UAAE,IAAAf,OAAA,EAAnBA,EAAqBgB,WAIrBC,GACA,UACEC,EACAC,UAAWC,EACXC,KAAMC,KAENC,EAAAA,EAAAA,OAEJC,EAAAA,EAAAA,YAAU,KACJvB,GAAUF,EAAMgB,YAAchB,EAAMgB,WAAWU,OAAS,GAC1DC,GACF,GACC,CAACzB,EAAQF,EAAMgB,cAElBS,EAAAA,EAAAA,YAAU,KAaE,IAADG,EAXPP,GACAE,IAEAZ,EAAeY,GAEZA,GACiD,KAAb,OAArCA,QAAqC,IAArCA,OAAqC,EAArCA,EAAuCG,QAMvCG,EAC0C,QAD5BD,EACZL,EAAsC,UAAE,IAAAK,OAAA,EAAxCA,EAA0CE,mBALxC9B,EAAM+B,uBACR/B,EAAM+B,wBAOZ,GACC,CACDV,EACAE,IAGF,MAAMI,EAAgBA,CAACK,EAAKC,KAAW,IAADC,EACpC,MAAMC,EAAU,CACdC,OAAQ,CAACC,EAAAA,GAAaC,OAAQD,EAAAA,GAAaE,QAAQC,KAAK,KACxDtC,OAAQF,EAAME,OACduC,UAAWpC,GAAW,SACtBqC,SAAUC,MAAMC,QAAQhC,GACpBA,EAAiBiC,IAAIC,QAAQN,KAAK,KAClC5B,EACJK,SAAUH,IAAqC,QAAvBoB,EAAIlC,EAAMgB,WAAW,UAAE,IAAAkB,OAAA,EAAnBA,EAAqBjB,WAG/Ce,IACFG,EAAQH,GAAOC,GAEL,aAARD,IACFG,EAAQH,GAAOW,MAAMC,QAAQX,GAASA,EAAMY,IAAIC,QAAQN,KAAK,KAAOP,GAGtEf,EAAgCiB,EAAQ,EAGpCN,EAAkBkB,IAEtBtC,EAAasC,GACT/C,EAAMgD,WACRhD,EAAMgD,UAAUD,EAClB,EAkBF,OACEE,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKF,SAAA,EAElBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,6BAA4BF,UACzCF,EAAAA,EAAAA,KAACK,EAAAA,EAAU,CACTtC,WAAYhB,EAAMgB,WAAYuC,WAAW,EAAOC,cAAexD,EAAMwD,cACrEC,eAvBiBxC,IACzBF,EAAkBE,GAClBU,EAAc,WAAYV,GACtBjB,EAAM+B,uBACR/B,EAAM+B,uBACR,OAqBIkB,EAAAA,EAAAA,KAAA,OAAKI,UAAU,kBAAiBF,UAC9BF,EAAAA,EAAAA,KAACS,EAAAA,QAAW,CACVC,UAAU,SACVC,aAAa,EACbC,SAAS,EACTC,eAAgB9D,EAAM+D,UACtBC,sBArBqBC,IAC7BpD,EAAoBoD,GACpBtC,EAAc,WAAYsC,EAAqB,EAoBvCC,kBA1BiB7D,IACzBC,EAAWD,GACXsB,EAAc,YAAatB,EAAQ,EAwBU8C,UAErCF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,gBAAeF,SAC3BhC,GACC8B,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,KAEXlB,EAAAA,EAAAA,KAAA,OAAKI,UAAU,OAAMF,SAClBzC,GAAeA,EAAYgB,OAAS,EACnChB,EAAYmC,KAAKuB,IACfnB,EAAAA,EAAAA,KAAA,UAEEI,UAAW,eACT7C,IAAc4D,EAAItC,kBAAoB,SAAW,IAEnDuC,QAASA,IAAMxC,EAAeuC,EAAItC,mBAAmBqB,UAErDC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iCAAgCF,SAAA,EAC7CC,EAAAA,EAAAA,MAAA,QAAMC,UAAU,eAAcF,SAAA,CAC3B,KACAmB,EAAAA,EAAAA,GAAkBF,EAAIG,WAAY,QAErCnB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBF,SAAA,EAC9BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOF,SAAA,CACnBiB,EAAIG,WACLtB,EAAAA,EAAAA,KAAA,OAAKI,UAAU,OAAMF,SAClBiB,EAAII,eACDC,EAAAA,EAAAA,IACEL,EAAII,cACJ,sBAEF,gBAGRvB,EAAAA,EAAAA,KAAA,OAAKI,UAAU,WAAUF,UAIvBC,EAAAA,EAAAA,MAAA,OACEC,UAAW,sBACM,WAAfe,EAAIhC,OACA,eACe,WAAfgC,EAAIhC,OACJ,eACA,IACHe,SAAA,CAEFiB,EAAIhC,OAAO,OAAKgC,EAAIM,mBAAmB,MAAI,KAC3CD,EAAAA,EAAAA,IACCL,EAAIO,aACJ,kCAvCLP,EAAItC,sBAgDbmB,EAAAA,EAAAA,KAAC2B,EAAAA,EAAa,gBAQ3B,C,iFC5LT,MAmDA,EAnDmBC,IAA0E,IAAzE,WAAE7D,EAAU,eAAEyC,EAAc,UAAEF,EAAS,cAAEC,EAAa,UAAER,GAAW6B,EACnF,MAAOC,EAAcC,IAAmBxE,EAAAA,EAAAA,UAAS,OAC1CyE,GAAwC5D,UAAW6D,EAA8C3D,KAAM4D,KAAkDC,EAAAA,EAAAA,OAGhK1D,EAAAA,EAAAA,YAAU,KACNuD,EAAqCzB,EAAU,GAChD,CAACyB,EAAsChC,KAE1CvB,EAAAA,EAAAA,YAAU,KACFwD,GAAgDC,GAChD1B,EAAc0B,EAClB,GACD,CAACD,EAA8CC,KAElDzD,EAAAA,EAAAA,YAAU,KACFT,GAAcA,EAAWU,OAAS,GAClCqD,EAAgB/D,EAAW,GAAGC,SAClC,GACD,CAACD,IASJ,OACIiC,EAAAA,EAAAA,KAACS,EAAAA,QAAW,CAACC,UAAU,UAASR,UAC5BF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,iBAAgBF,UAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SACKnC,GAAcA,EAAW6B,KAAI,CAACvB,EAAM8D,KACjCnC,EAAAA,EAAAA,KAAA,MAAII,UAAWyB,IAAiBxD,EAAKL,SAAW,SAAW,GACvDoD,QAASA,KAAMgB,OAZnCN,GADuBO,EAa8BhE,GAZ1BL,eACvBwC,GACAA,EAAe6B,EAAWrE,WAHPqE,KAaoC,EAAAnC,UACvCC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAO7B,EAAKiE,WAAW,IAAEjE,EAAKkE,aAAe,GAAIpC,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,CAAE,KAACF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAAcF,SAAE7B,EAAKkE,kBAAyB,SADpEJ,UAOnD,C","sources":["pages/mytask/feature/ArchiveTask.js","pages/mytask/feature/ModuleList.js"],"sourcesContent":["  /* eslint-disable react-hooks/exhaustive-deps */\r\n  import React, { useEffect, useState } from \"react\";\r\n  //** Lib's */\r\n  import PropTypes from \"prop-types\";\r\n  import \"../../mytask/MyTask.scss\";\r\n  import formatDate from \"../../../lib/formatDate\";\r\n  import CardSection from \"../../../components/ui/card/CardSection\";\r\n  import { getAuthProps } from \"../../../lib/authenticationLibrary\";\r\n  import DataLoader from \"../../../components/ui/dataLoader/DataLoader\";\r\n  import NoRecordFound from \"../../../components/ui/noRecordFound/NoRecordFound\";\r\n  import { FirstSecondLetter } from \"../../../utils/FirstSecLetter/FirstSecondLetter\";\r\n  //** Service's */\r\n  import { useGetApprovalRequestsListByStatusAndRoleIdMutation } from \"../../../app/services/ApprovalAPI\";\r\n  //** Component's */\r\n  import ModuleList from \"./ModuleList\";\r\n  import { MyTaskStatus } from \"../../../utils/Enums/commonEnums\";\r\n\r\n  const ArchiveTask = (props) => {\r\n    const authData = getAuthProps();\r\n    const roleId = authData.roles.roleId;\r\n    const [orderBy, setOrderBy] = useState(\"Newest\");\r\n    const [activeTab, setActiveTab] = useState(null);\r\n    const [archiveData, setArchiveData] = useState([]);\r\n    const [selectedfilterBy, setSelectedFilterBy] = useState([]);\r\n    const [selectedModule, setSelectedModule] = useState(\r\n      props.moduleList[0]?.moduleId\r\n    );\r\n  \r\n    const [\r\n      getApprovalRequestsListByStatus,\r\n      {\r\n        isLoading,\r\n        isSuccess: isGetApprovalRequestsListByStatusSuccess,\r\n        data: isGetApprovalRequestsListByStatusData,\r\n      },\r\n    ] = useGetApprovalRequestsListByStatusAndRoleIdMutation();\r\n\r\n    useEffect(() => {\r\n      if (roleId && props.moduleList && props.moduleList.length > 0) {\r\n        handleRequest();\r\n      }\r\n    }, [roleId, props.moduleList]);\r\n\r\n    useEffect(() => {\r\n      if (\r\n        isGetApprovalRequestsListByStatusSuccess &&\r\n        isGetApprovalRequestsListByStatusData\r\n      ) {\r\n        setArchiveData(isGetApprovalRequestsListByStatusData);\r\n        if (\r\n          !isGetApprovalRequestsListByStatusData ||\r\n          isGetApprovalRequestsListByStatusData?.length === 0\r\n        ) {\r\n          if (props.handleRestEventDetail) {\r\n            props.handleRestEventDetail();\r\n          }\r\n        } else {\r\n          handleTabClick(\r\n            isGetApprovalRequestsListByStatusData[0]?.approvalRequestId\r\n          );\r\n        }\r\n      }\r\n    }, [\r\n      isGetApprovalRequestsListByStatusSuccess,\r\n      isGetApprovalRequestsListByStatusData,\r\n    ]);\r\n\r\n    const handleRequest = (key, value) => {\r\n      const request = {\r\n        status: [MyTaskStatus.Accept, MyTaskStatus.Reject].join(\",\"),\r\n        roleId: props.roleId,\r\n        sortOrder: orderBy || \"Newest\",\r\n        eventIds: Array.isArray(selectedfilterBy)\r\n          ? selectedfilterBy.map(String).join(\",\")\r\n          : selectedfilterBy,\r\n        moduleId: selectedModule || props.moduleList[0]?.moduleId,\r\n      };\r\n\r\n      if (key) {\r\n        request[key] = value; // Add or update the specific key-value pair\r\n      }\r\n      if (key === \"eventIds\") {\r\n        request[key] = Array.isArray(value) ? value.map(String).join(\",\") : value;\r\n      }\r\n\r\n      getApprovalRequestsListByStatus(request);\r\n    };\r\n\r\n    const handleTabClick = (id) => {\r\n  \r\n      setActiveTab(id);\r\n      if (props.onGetById) {\r\n        props.onGetById(id);\r\n      }\r\n    };\r\n    const handleModuleClick = (moduleId) => {\r\n      setSelectedModule(moduleId);\r\n      handleRequest(\"moduleId\", moduleId);\r\n      if (props.handleRestEventDetail) {\r\n        props.handleRestEventDetail();\r\n      }\r\n    };\r\n    const selectedSortOrder = (orderBy) => {\r\n      setOrderBy(orderBy);\r\n      handleRequest(\"sortOrder\", orderBy);\r\n    };\r\n    const selectedFilterOptions = (selectedFilterOption) => {\r\n      setSelectedFilterBy(selectedFilterOption);\r\n      handleRequest(\"eventIds\", selectedFilterOption);\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <div className=\"row\">\r\n        \r\n          <div className=\"col-5 pr-0 left-modual-sec\">\r\n            <ModuleList\r\n              moduleList={props.moduleList} isPending={false} setModuleList={props.setModuleList}\r\n              onModuleChange={handleModuleClick}\r\n            />\r\n          </div>\r\n          <div className=\"col-7 pl-1 pr-1\">\r\n            <CardSection\r\n              cardTitle=\"Events\"\r\n              rightButton={true}\r\n              isShort={true}\r\n              filtersOptions={props.eventList}\r\n              selectedFilterOptions={selectedFilterOptions}\r\n              selectedSortOrder={selectedSortOrder}\r\n            >\r\n              <div className=\"customer-info\">\r\n                {isLoading ? (\r\n                  <DataLoader />\r\n                ) : (\r\n                  <div className=\"tabs\">\r\n                    {archiveData && archiveData.length > 0 ? (\r\n                      archiveData.map((tab) => (\r\n                        <button\r\n                          key={tab.approvalRequestId} // Use a unique key\r\n                          className={`tab-button ${\r\n                            activeTab === tab.approvalRequestId ? \"active\" : \"\"\r\n                          }`}\r\n                          onClick={() => handleTabClick(tab.approvalRequestId)}\r\n                        >\r\n                          <div className=\"d-flex align-items-start w-100\">\r\n                            <span className=\"profile-icon\">\r\n                              {\" \"}\r\n                              {FirstSecondLetter(tab.eventName)}{\" \"}\r\n                            </span>\r\n                            <div className=\"right-name-desc\">\r\n                              <div className=\"title\">\r\n                                {tab.eventName}\r\n                                <div className=\"date\">\r\n                                  {tab.requestedDate\r\n                                    ? formatDate(\r\n                                        tab.requestedDate,\r\n                                        \"MM/DD/YYYY hh:mm A\"\r\n                                      )\r\n                                    : \"No Date\"}\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"bage-fix\">\r\n                                {/* <span className=\"sub-title\">\r\n                                  {tab.moduleName}\r\n                                </span> */}\r\n                                <div\r\n                                  className={`mytask-type-badge ${\r\n                                    tab.status === \"Accept\"\r\n                                      ? \"badge-accept\"\r\n                                      : tab.status === \"Reject\"\r\n                                      ? \"badge-reject\"\r\n                                      : \"\"\r\n                                  }`}\r\n                                >\r\n                                  {tab.status} by {tab.approvedByUserName} on{\" \"}\r\n                                  {formatDate(\r\n                                    tab.approvedDate,\r\n                                    \"MM/DD/YYYY hh:mm A\"\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </button>\r\n                      ))\r\n                    ) : (\r\n                      <NoRecordFound />\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </CardSection>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n  ArchiveTask.propTypes = {\r\n    Accept: PropTypes.string,\r\n    roleId: PropTypes.number.isRequired,\r\n    onGetById: PropTypes.func,\r\n  };\r\n  export default ArchiveTask;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CardSection from \"../../../components/ui/card/CardSection\";\r\nimport { useLazyGetAllModulesWithPendingRequestCountQuery } from \"../../../app/services/commonAPI\";\r\n\r\nconst ModuleList = ({ moduleList, onModuleChange, isPending, setModuleList, onGetById }) => {\r\n    const [activeModule, setActiveModule] = useState(null);\r\n    const [getAllModulesWithPendingRequestCount, { isSuccess: isGetAllModulesWithPendingRequestCountSucess, data: allGetAllModulesWithPendingRequestCountData },] = useLazyGetAllModulesWithPendingRequestCountQuery();\r\n\r\n    // Set the first module as active by default when the component mounts\r\n    useEffect(() => {\r\n        getAllModulesWithPendingRequestCount(isPending);\r\n    }, [getAllModulesWithPendingRequestCount, onGetById]);\r\n\r\n    useEffect(() => {\r\n        if (isGetAllModulesWithPendingRequestCountSucess && allGetAllModulesWithPendingRequestCountData) {\r\n            setModuleList(allGetAllModulesWithPendingRequestCountData);\r\n        }\r\n    }, [isGetAllModulesWithPendingRequestCountSucess, allGetAllModulesWithPendingRequestCountData]);\r\n\r\n    useEffect(() => {\r\n        if (moduleList && moduleList.length > 0) {\r\n            setActiveModule(moduleList[0].moduleId);\r\n        }\r\n    }, [moduleList]);\r\n\r\n    const handleModuleClick = (moduleData) => {\r\n        setActiveModule(moduleData.moduleId);\r\n        if (onModuleChange) {\r\n            onModuleChange(moduleData.moduleId);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <CardSection cardTitle=\"Modules\">\r\n            <div className=\"module-listing\">\r\n                <ul>\r\n                    {moduleList && moduleList.map((data, index) => (\r\n                        <li className={activeModule === data.moduleId ? \"active\" : \"\"}\r\n                            onClick={() => handleModuleClick(data)} key={index}>\r\n                            <span>{data.moduleName} {data.requestCount > 0 ? <> <div className=\"module-count\">{data.requestCount}</div></> : null}</span>\r\n\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </CardSection>\r\n    );\r\n};\r\n\r\nModuleList.propTypes = {\r\n    moduleList: PropTypes.array.isRequired,\r\n    data: PropTypes.array.isRequired,\r\n    onModuleChange: PropTypes.func,\r\n};\r\n\r\nexport default ModuleList;\r\n"],"names":["props","_props$moduleList$","roleId","getAuthProps","roles","orderBy","setOrderBy","useState","activeTab","setActiveTab","archiveData","setArchiveData","selectedfilterBy","setSelectedFilterBy","selectedModule","setSelectedModule","moduleList","moduleId","getApprovalRequestsListByStatus","isLoading","isSuccess","isGetApprovalRequestsListByStatusSuccess","data","isGetApprovalRequestsListByStatusData","useGetApprovalRequestsListByStatusAndRoleIdMutation","useEffect","length","handleRequest","_isGetApprovalRequest","handleTabClick","approvalRequestId","handleRestEventDetail","key","value","_props$moduleList$2","request","status","MyTaskStatus","Accept","Reject","join","sortOrder","eventIds","Array","isArray","map","String","id","onGetById","_jsx","_Fragment","children","_jsxs","className","ModuleList","isPending","setModuleList","onModuleChange","CardSection","cardTitle","rightButton","isShort","filtersOptions","eventList","selectedFilterOptions","selectedFilterOption","selectedSortOrder","DataLoader","tab","onClick","FirstSecondLetter","eventName","requestedDate","formatDate","approvedByUserName","approvedDate","NoRecordFound","_ref","activeModule","setActiveModule","getAllModulesWithPendingRequestCount","isGetAllModulesWithPendingRequestCountSucess","allGetAllModulesWithPendingRequestCountData","useLazyGetAllModulesWithPendingRequestCountQuery","index","handleModuleClick","moduleData","moduleName","requestCount"],"sourceRoot":""}