{"version":3,"file":"static/js/8668.8106bef8.chunk.js","mappings":"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","sources":["components/ApprovalCheckList/feature/ApprovalInformation/BasicInfo.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Checkbox from \"../../../ui/inputs/checkBox/CheckBox\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useLazyGetSupplierBasicInformationByIdQuery } from \"../../../../app/services/supplierAPI\";\r\nimport Iconify from \"../../../ui/iconify/Iconify\";\r\n\r\nconst BasicInformation = ({\r\n  isModelOpen,\r\n  mainId,\r\n  getBasicInformationById,\r\n  approvalChekedData,\r\n  handleCheckbox,\r\n  isSupplierApproval,\r\n}) => {\r\n  const [customerBasicInformation, setCustomerBasicInformation] = useState();\r\n  const [supplierBasicInformation, setSupplierBasicInformation] = useState();\r\n  const [isChecked, setIsChecked] = useState(\r\n    approvalChekedData?.isChecked || false\r\n  );\r\n\r\n  const [openSections, setOpenSections] = useState([true]);\r\n\r\n  //** API Call's */\r\n  const [\r\n    getCustomerBasicInfoById,\r\n    {\r\n      isFetching: isGetCustomerBasicInfoByIdFetching,\r\n      isSuccess: isGetCustomerBasicInfoByIdSuccess,\r\n      data: isGetCustomerBasicInfoByIdData,\r\n    },\r\n  ] = getBasicInformationById();\r\n\r\n  const [\r\n    getSupplierBasicInformationById,\r\n    {\r\n      isFetching: isGetSupplierBasicInformationByIdFetching,\r\n      isSuccess: isGetSupplierBasicInformationById,\r\n      data: GetSupplierBasicInformationByIdData,\r\n    },\r\n  ] = useLazyGetSupplierBasicInformationByIdQuery();\r\n\r\n  useEffect(() => {\r\n    if (isModelOpen && mainId && !isSupplierApproval) {\r\n      getCustomerBasicInfoById(mainId);\r\n    } else if (isSupplierApproval) {\r\n      getSupplierBasicInformationById(mainId);\r\n    }\r\n  }, [isModelOpen, mainId]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isGetCustomerBasicInfoByIdFetching &&\r\n      isGetCustomerBasicInfoByIdSuccess &&\r\n      isGetCustomerBasicInfoByIdData\r\n    ) {\r\n      setCustomerBasicInformation(isGetCustomerBasicInfoByIdData);\r\n    }\r\n  }, [\r\n    isGetCustomerBasicInfoByIdFetching,\r\n    isGetCustomerBasicInfoByIdSuccess,\r\n    isGetCustomerBasicInfoByIdData,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isGetSupplierBasicInformationByIdFetching &&\r\n      isGetSupplierBasicInformationById &&\r\n      GetSupplierBasicInformationByIdData\r\n    ) {\r\n      setSupplierBasicInformation(GetSupplierBasicInformationByIdData);\r\n    }\r\n  }, [\r\n    isGetSupplierBasicInformationByIdFetching,\r\n    isGetSupplierBasicInformationById,\r\n    GetSupplierBasicInformationByIdData,\r\n  ]);\r\n\r\n  const handleChange = (checkedValue, newValue) => {\r\n    setIsChecked(newValue);\r\n    handleCheckbox(checkedValue, newValue);\r\n  };\r\n\r\n  // Determine which basic information to use\r\n  const basicInformation = isSupplierApproval\r\n    ? supplierBasicInformation\r\n    : customerBasicInformation;\r\n\r\n  // Toggle active section\r\n  const toggleSection = (index) => {\r\n    const updatedSections = [...openSections];\r\n    updatedSections[index] = !updatedSections[index]; // Toggle the clicked section\r\n    setOpenSections(updatedSections);\r\n  };\r\n  return (\r\n    <>\r\n      <div className={`card-top-title ${openSections[0] ? 'active' : ''}`} onClick={() => toggleSection(0)}>\r\n        <div className=\"d-flex align-items-center mr-2\">\r\n          <span>\r\n            <Iconify icon=\"ep:arrow-down-bold\" className=\"open-bar\" />\r\n          </span>\r\n          <h5> Basic Information </h5>\r\n        </div>\r\n\r\n        <div className=\"checkbox-part\">\r\n          <Checkbox\r\n            name={\"basicInformation\"}\r\n            dataField={\"basicInformation\"}\r\n            checked={isChecked || false}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n      </div>\r\n      {openSections[0] && (\r\n        <div className=\"card-info-checklist\">\r\n          {basicInformation && (\r\n            <div className=\"card-part\">\r\n              <h6 className=\"name-title\">\r\n                <span className=\"label\">\r\n                  {!isSupplierApproval ? \"Customer\" : \"Supplier\"} Name:\r\n                </span>\r\n                <p className=\"name-desc\">{basicInformation.name} </p>\r\n              </h6>\r\n              <h6 className=\"name-title\">\r\n                <span className=\"label\">Tax Id:</span>\r\n                <p className=\"name-desc\">{basicInformation.taxId}</p>\r\n              </h6>\r\n              <h6 className=\"name-title\">\r\n                <span className=\"label\">Email:</span>\r\n                <p className=\"name-desc\">{basicInformation.emailAddress}</p>\r\n              </h6>\r\n              <h6 className=\"name-title\">\r\n                <span className=\"label\">Country:</span>\r\n                <p className=\"name-desc\">{basicInformation.countryName}</p>\r\n              </h6>\r\n              {!isSupplierApproval && (\r\n                <h6 className=\"name-title\">\r\n                  <span className=\"label\">Is Sub Customer:</span>\r\n                  <p className=\"name-desc\">\r\n                    {basicInformation && basicInformation.isSubCustomer ? (\r\n                      <i className=\"fa fa-check green-color\"></i>\r\n                    ) : (\r\n                      <i className=\"fa fa-times red-color\"></i>\r\n                    )}\r\n                  </p>\r\n                </h6>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n// Define PropTypes for BasicInformation\r\nBasicInformation.propTypes = {\r\n  isModelOpen: PropTypes.bool.isRequired,\r\n  mainId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  getBasicInformationById: PropTypes.func.isRequired,\r\n  approvalChekedData: PropTypes.shape({\r\n    isChecked: PropTypes.bool,\r\n  }),\r\n  handleCheckbox: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default BasicInformation;\r\n"],"names":["_ref","isModelOpen","mainId","getBasicInformationById","approvalChekedData","handleCheckbox","isSupplierApproval","customerBasicInformation","setCustomerBasicInformation","useState","supplierBasicInformation","setSupplierBasicInformation","isChecked","setIsChecked","openSections","setOpenSections","getCustomerBasicInfoById","isFetching","isGetCustomerBasicInfoByIdFetching","isSuccess","isGetCustomerBasicInfoByIdSuccess","data","isGetCustomerBasicInfoByIdData","getSupplierBasicInformationById","isGetSupplierBasicInformationByIdFetching","isGetSupplierBasicInformationById","GetSupplierBasicInformationByIdData","useLazyGetSupplierBasicInformationByIdQuery","useEffect","basicInformation","_jsxs","_Fragment","children","className","onClick","index","updatedSections","toggleSection","_jsx","Iconify","icon","Checkbox","name","dataField","checked","onChange","handleChange","checkedValue","newValue","taxId","emailAddress","countryName","isSubCustomer"],"sourceRoot":""}