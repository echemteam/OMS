{"version":3,"file":"static/js/9786.947ed34a.chunk.js","mappings":"mMAUA,MAyIA,EAzIoBA,IAab,IAbc,KACjBC,EAAOC,EAAAA,EAAcC,KAAI,KACzBC,EAAO,GAAE,YACTC,EAAc,gBAAgBD,IAAM,SACpCE,EAAQ,SACRC,EAAQ,QACRC,EAAO,OACPC,EAAM,SACNC,EAAW,cAAa,UACxBC,EAAS,gBACTC,EAAe,cACfC,EAAa,sBACbC,GACHd,EAEG,MAAMe,GAAWC,EAAAA,EAAAA,WACVC,EAAcC,IAAmBC,EAAAA,EAAAA,YAalCC,EAAmBA,KACjBZ,IACAO,EAASM,QAAQC,MAAQ,KACzBhB,EAAW,KACXY,EAAgB,MAChBV,IACJ,EAgBJ,OAbAe,EAAAA,EAAAA,YAAU,KACN,GAAIjB,GAAgC,kBAAbA,EAAuB,CAC1C,MAAMkB,EAAWlB,EAASmB,WAAanB,EAASmB,WAAcnB,EAASF,MAAQE,EAASoB,SACxFR,EAAgBM,EACpB,MAAWlB,EACPY,EAAgBZ,IAEhBS,EAASM,QAAQC,MAAQ,KACzBJ,EAAgB,MAChBE,IACJ,GACD,CAACd,KAGAqB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAW,oCAAmCpB,EAAY,iBAAmB,IAAKkB,SAAA,EACnFF,EAAAA,EAAAA,KAAA,SACIK,IAAKjB,EACLkB,GAAI7B,EACJA,KAAMA,EACNE,SAAUW,GAA8B,KACxChB,KAAMA,GAAc,OACpB8B,UAAWrB,EACXL,YAAaA,EACbE,SA5CW2B,IACnB3B,GACAA,EAAS2B,GAEb,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcH,EAAEI,OAAOC,MAAM,IACpCJ,EAAOK,OAAUC,IACbvB,EAAgBiB,EAAOO,OAAO,CACjC,EAqCWjC,OAAQA,EACRkC,SAAUhC,EACViC,OAAQ/B,KAEZiB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BF,SAAA,CACtCZ,EAGC,MAFHU,EAAAA,EAAAA,KAACkB,EAAAA,EAAK,CAACC,UAAWC,EAAAA,EAASC,mBAAoBC,QAAQ,uBAGtDhC,GACGU,EAAAA,EAAAA,KAAA,OAAKuB,IAAKjC,EAAckC,IAAI,mBAE5BrB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeF,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,2BACgB,KAAlBhB,GACGc,EAAAA,EAAAA,KAAA,QAAMI,UAAU,YAAWF,SAAC,iCAE5BC,EAAAA,EAAAA,MAAA,QAAMC,UAAU,YAAWF,SAAA,CACtBhB,EAAc,2BAM9BC,IACGa,EAAAA,EAAAA,KAAA,OAAKI,UAAU,kCAAiCF,SAC3CZ,IACGU,EAAAA,EAAAA,KAACyB,EAAAA,EAAO,CACJC,oBAAoB,eACpBC,WAAW,QACXC,QAASnC,SAM5BR,IACGe,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,oBAAmBF,SAC7BZ,IACGU,EAAAA,EAAAA,KAAA,QAAMI,UAAU,WAAWwB,QAASnC,EAAiBS,SAAC,cAQ3E,C","sources":["components/ui/inputs/imageUpload/ImageUpload.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport PropTypes from \"prop-types\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n//** Lib's */\r\nimport \"./ImagesUpload.scss\";\r\nimport Image from \"../../../image/Image\";\r\nimport Buttons from \"../../button/Buttons\";\r\nimport { AppIcons } from \"../../../../data/appIcons\";\r\nimport { TextInputType } from \"../../../../data/formControlTypes\";\r\n\r\nconst ImageUpload = ({\r\n    type = TextInputType.FILE,\r\n    name = \"\",\r\n    placeholder = `Please Enter ${name}`,\r\n    filename,\r\n    onChange,\r\n    onClear,\r\n    onBlur,\r\n    cssClass = \"input-field\",\r\n    isDisable,\r\n    isButtonVisible,\r\n    acceptedFiles,\r\n    isCustomButtonVisible,\r\n}) => {\r\n\r\n    const imageRef = useRef();\r\n    const [imagePreview, setImagePreview] = useState();\r\n\r\n    const handleInputChange = (e) => {\r\n        if (onChange) {\r\n            onChange(e);\r\n        }\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(e.target.files[0]);\r\n        reader.onload = (_event) => {\r\n            setImagePreview(reader.result);\r\n        };\r\n    };\r\n\r\n    const handleClearClick = () => {\r\n        if (onClear) {\r\n            imageRef.current.value = null;\r\n            filename = null;\r\n            setImagePreview(null); // Clear file preview image\r\n            onClear();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (filename && typeof filename === \"object\") {\r\n            const fileData = filename.base64Data ? filename.base64Data : (filename.name || filename.fileName)\r\n            setImagePreview(fileData);\r\n        } else if (filename) {\r\n            setImagePreview(filename);\r\n        } else {\r\n            imageRef.current.value = null;\r\n            setImagePreview(null);\r\n            handleClearClick();\r\n        }\r\n    }, [filename]);\r\n\r\n    return (\r\n        <>\r\n            <div className={`form-field custom-file-uploader ${isDisable ? \"field-disabled\" : \"\"}`}>\r\n                <input\r\n                    ref={imageRef}\r\n                    id={name}\r\n                    name={name}\r\n                    filename={imagePreview ? imagePreview : null}\r\n                    type={type ? type : \"file\"}\r\n                    className={cssClass}\r\n                    placeholder={placeholder}\r\n                    onChange={handleInputChange}\r\n                    onBlur={onBlur}\r\n                    disabled={isDisable}\r\n                    accept={acceptedFiles}\r\n                />\r\n                <div className=\"custom-file-selector-design\">\r\n                    {!imagePreview ? \r\n                    <Image imagePath={AppIcons.Uploaddocumenticon} altText=\"Please Upload File\"></Image>\r\n                    // <Iconify icon=\"iconamoon:file-document-thin\" />\r\n                     : null}\r\n                    {imagePreview ?\r\n                        <img src={imagePreview} alt=\"Uploaded File\" />\r\n                        :\r\n                        <div className=\"drag-drop-txt\">\r\n                            <p>Drag & Drop Your Image</p>\r\n                            {acceptedFiles === \"\" ?\r\n                                <span className=\"small-txt\">All File Formats we support</span>\r\n                                :\r\n                                <span className=\"small-txt\">\r\n                                    {acceptedFiles}\r\n                                    Formats we support\r\n                                </span>\r\n                            }\r\n                        </div>\r\n                    }\r\n                    {isCustomButtonVisible && (\r\n                        <div className=\"row clear-buttons clear-btn-sec\">\r\n                            {imagePreview && (\r\n                                <Buttons\r\n                                    buttonTypeClassName=\"btn dark-btn\"\r\n                                    buttonText=\"Clear\"\r\n                                    onClick={handleClearClick}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                {isButtonVisible && (\r\n                    <>\r\n                        <div className=\"row clear-buttons\">\r\n                            {imagePreview && (\r\n                                <span className=\"dark-btn\" onClick={handleClearClick}>\r\n                                    X\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nImageUpload.propTypes = {\r\n    type: PropTypes.oneOf([TextInputType.FILE]),\r\n    name: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    filename: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.shape({\r\n            base64Data: PropTypes.string,\r\n            name: PropTypes.string,\r\n            fileName: PropTypes.string\r\n        })\r\n    ]),\r\n    onChange: PropTypes.func.isRequired,\r\n    onClear: PropTypes.func,\r\n    onBlur: PropTypes.func,\r\n    cssClass: PropTypes.string,\r\n    isDisable: PropTypes.bool,\r\n    isButtonVisible: PropTypes.bool,\r\n    acceptedFiles: PropTypes.string,\r\n    isCustomButtonVisible: PropTypes.bool\r\n};\r\n\r\nexport default ImageUpload;\r\n"],"names":["_ref","type","TextInputType","FILE","name","placeholder","filename","onChange","onClear","onBlur","cssClass","isDisable","isButtonVisible","acceptedFiles","isCustomButtonVisible","imageRef","useRef","imagePreview","setImagePreview","useState","handleClearClick","current","value","useEffect","fileData","base64Data","fileName","_jsx","_Fragment","children","_jsxs","className","ref","id","e","reader","FileReader","readAsDataURL","target","files","onload","_event","result","disabled","accept","Image","imagePath","AppIcons","Uploaddocumenticon","altText","src","alt","Buttons","buttonTypeClassName","buttonText","onClick"],"sourceRoot":""}