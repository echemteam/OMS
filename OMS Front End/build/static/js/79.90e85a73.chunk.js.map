{"version":3,"file":"static/js/79.90e85a73.chunk.js","mappings":"wPAeA,MAAMA,EAAmBC,EAAAA,MAAW,IAAM,kCAyG1C,EAvGoBC,KAGlB,MAAMC,GAAWC,EAAAA,EAAAA,WACX,GAAEC,IAAOC,EAAAA,EAAAA,KACTC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,EAASN,GAAKO,EAAAA,EAAAA,IAAeP,GAAM,GAClCQ,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCC,EAAgBC,IAAqBF,EAAAA,EAAAA,UAASJ,IAC9CO,EAAeC,IAAoBJ,EAAAA,EAAAA,UAASJ,IAC5CS,EAAsBC,IAA2BN,EAAAA,EAAAA,WAAS,IAG1DO,GAAeC,KAAMC,EAAgBC,UAAWC,EAAmBC,WAAYC,KAAwBC,EAAAA,EAAAA,OAgB9GC,EAAAA,EAAAA,YAAU,KACRR,GAAa,GACb,CAACX,KAEHmB,EAAAA,EAAAA,YAAU,KACR,GAAIJ,GAAqBF,IAAmBI,EAAoB,CAC9D,MAAMG,EAAWP,EAAeQ,KAAKC,IAAI,CACvCC,MAAOD,EAAKtB,OACZwB,MAAOF,EAAKG,aAEdtB,EAAaiB,EACf,IACC,CAACL,EAAmBF,EAAgBI,KACvCE,EAAAA,EAAAA,YAAU,KACHzB,IACHY,EAAkB,GAClBI,GAAwB,GAC1B,GACC,CAAChB,EAAII,EAAS4B,YACjBP,EAAAA,EAAAA,YAAU,KACJnB,EAAS,IACXM,EAAkBN,GAClBU,GAAwB,GAC1B,GACC,CAACV,IAOJ,OACE2B,EAAAA,EAAAA,KAACrC,EAAAA,SAAc,CAAAsC,UACbC,EAAAA,EAAAA,MAACC,EAAAA,EAA2BC,SAAQ,CAACR,MAAO,CAAEd,uBAAsBJ,iBAAgBb,YAAWoC,SAAA,EAC7FD,EAAAA,EAAAA,KAAA,OAAKK,UAAU,OAAMJ,UACrBD,EAAAA,EAAAA,KAACM,EAAAA,QAAW,CACVC,UAAU,4BACVC,aAAa,EACbC,WAAW,UACXC,gBAAgB,eAChBC,iBAbWC,KACjB3C,EAAS,0BAA0B,EAa7B4C,cAAc,EACdC,QAASC,EAAAA,EAASC,cAAcf,UAChCD,EAAAA,EAAAA,KAAA,OAAKK,UAAU,aAAYJ,UACzBD,EAAAA,EAAAA,KAAA,OAAKK,UAAU,MAAKJ,UAClBD,EAAAA,EAAAA,KAAA,OAAKK,UAAU,gBAAeJ,UAC5BC,EAAAA,EAAAA,MAAA,OAAKG,UAAU,yBAAwBJ,SAAA,EACrCC,EAAAA,EAAAA,MAAA,OAAKG,UAAU,mBAAkBJ,SAAA,EAC/BD,EAAAA,EAAAA,KAACiB,EAAAA,QAAK,CAACC,UAAU,WACjBlB,EAAAA,EAAAA,KAACmB,EAAAA,QAAQ,CACPC,QAAS7C,EACTqB,MAAOhB,EACPyC,YAAY,qBACZC,SAlEUC,IAC5B1C,EAAiB0C,EAAe3B,MAAM,QAmExBI,EAAAA,EAAAA,KAAA,OAAKK,UAAU,iBAAgBJ,UAC7BD,EAAAA,EAAAA,KAACwB,EAAAA,EAAO,CACNC,oBAAoB,eACpBhB,WAAW,mBACXiB,QArEAC,KACd/C,IACFG,GAAwB,GACpBlB,EAAS+D,SACX/D,EAAS+D,QAAQC,kBAAkBjD,GAEvC,oBAuEIoB,EAAAA,EAAAA,KAACtC,EAAgB,QAEJ,C,mCCjHd,MAAMyC,GAA6B2B,E,SAAAA,gB","sources":["pages/Security/permissions/Permissions.js","utils/ContextAPIs/SecurityPermissions/SecurityPermissionsContext.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\r\n//** Lib's */\r\nimport \"./Permission.scss\";\r\nimport { AppIcons } from \"../../../data/appIcons\";\r\nimport Label from \"../../../components/ui/label/Label\";\r\nimport Buttons from \"../../../components/ui/button/Buttons\";\r\nimport DropDown from \"../../../components/ui/dropdown/DropDrown\";\r\nimport CardSection from \"../../../components/ui/card/CardSection\";\r\n//** Service's */\r\nimport { decryptUrlData } from \"../../../services/CryptoService\";\r\nimport { useLazyGetAllRolesQuery } from \"../../../app/services/securityPermissionsAPI\";\r\nimport { SecurityPermissionsContext } from \"../../../utils/ContextAPIs/SecurityPermissions/SecurityPermissionsContext\";\r\n//** Component's */\r\nconst ManagePermission = React.lazy(() => import(\"./features/ManagePermission\"));\r\n\r\nconst Permissions = () => {\r\n\r\n  //** State */\r\n  const childRef = useRef();\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const roleId = id ? decryptUrlData(id) : 0;\r\n  const [rolesList, setRolesList] = useState([]);\r\n  const [selectedRoleId, setSelectedRoleId] = useState(roleId);\r\n  const [selecteRoleId, setSelecteRoleId] = useState(roleId);\r\n  const [togglePermissionCard, setTogglePermissionCard] = useState(false);\r\n\r\n  //** API Call's */\r\n  const [getAllRoles, { data: isAllRolesData, isSuccess: isSuccessAllRoles, isFetching: isFetchingAllRoles }] = useLazyGetAllRolesQuery();\r\n\r\n  //** Handle Change's */\r\n  const handleDropdownChange = (selectedOption) => {\r\n    setSelecteRoleId(selectedOption.value);\r\n  };\r\n  const handleClick = () => {\r\n    if (selecteRoleId) {\r\n      setTogglePermissionCard(true);\r\n      if (childRef.current) {\r\n        childRef.current.callChildFunction(selecteRoleId);\r\n      }\r\n    }\r\n  };\r\n\r\n  //** Use Effect's */\r\n  useEffect(() => {\r\n    getAllRoles();\r\n  },[roleId]);\r\n\r\n  useEffect(() => {\r\n    if (isSuccessAllRoles && isAllRolesData && !isFetchingAllRoles) {\r\n      const roleList = isAllRolesData.map((item) => ({\r\n        value: item.roleId,\r\n        label: item.roleName,\r\n      }));\r\n      setRolesList(roleList);\r\n    }\r\n  }, [isSuccessAllRoles, isAllRolesData, isFetchingAllRoles]);\r\n  useEffect(() => {\r\n    if (!id) {\r\n      setSelectedRoleId(0);\r\n      setTogglePermissionCard(false);\r\n    }\r\n  }, [id, location.pathname]);\r\n  useEffect(() => {\r\n    if (roleId > 0) {\r\n      setSelectedRoleId(roleId);\r\n      setTogglePermissionCard(true);\r\n    }\r\n  }, [roleId]);\r\n\r\n  //** Back Button */\r\n  const BackButton = () => {\r\n    navigate(\"/SecurityRoleManagement\");\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <SecurityPermissionsContext.Provider value={{ togglePermissionCard, selectedRoleId, childRef }}>\r\n        <div className=\"mt-2\">\r\n        <CardSection\r\n          cardTitle=\"Security Permissions Role\"\r\n          rightButton={true}\r\n          buttonText=\"Go Back\"\r\n          buttonClassName=\"btn dark-btn\"\r\n          titleButtonClick={BackButton}\r\n          textWithIcon={true}\r\n          iconImg={AppIcons.BackArrowIcon}>\r\n          <div className=\"top-filter\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-7 mb-2\">\r\n                <div className=\"d-flex align-items-end\">\r\n                  <div className=\"input-label-part\">\r\n                    <Label labelName=\"Roles\" />\r\n                    <DropDown\r\n                      options={rolesList}\r\n                      value={selecteRoleId}\r\n                      placeholder=\"Please Select Role\"\r\n                      onChange={handleDropdownChange} />\r\n                  </div>\r\n                  <div className=\"apply-btn ml-5\">\r\n                    <Buttons\r\n                      buttonTypeClassName=\"theme-button\"\r\n                      buttonText=\"Show Permissions\"\r\n                      onClick={handleClick} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardSection>\r\n        </div>\r\n        <ManagePermission />\r\n      </SecurityPermissionsContext.Provider>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Permissions;\r\n","import { createContext } from 'react';\r\n\r\n// Create the context\r\nexport const SecurityPermissionsContext = createContext();\r\n"],"names":["ManagePermission","React","Permissions","childRef","useRef","id","useParams","navigate","useNavigate","location","useLocation","roleId","decryptUrlData","rolesList","setRolesList","useState","selectedRoleId","setSelectedRoleId","selecteRoleId","setSelecteRoleId","togglePermissionCard","setTogglePermissionCard","getAllRoles","data","isAllRolesData","isSuccess","isSuccessAllRoles","isFetching","isFetchingAllRoles","useLazyGetAllRolesQuery","useEffect","roleList","map","item","value","label","roleName","pathname","_jsx","children","_jsxs","SecurityPermissionsContext","Provider","className","CardSection","cardTitle","rightButton","buttonText","buttonClassName","titleButtonClick","BackButton","textWithIcon","iconImg","AppIcons","BackArrowIcon","Label","labelName","DropDown","options","placeholder","onChange","selectedOption","Buttons","buttonTypeClassName","onClick","handleClick","current","callChildFunction","createContext"],"sourceRoot":""}