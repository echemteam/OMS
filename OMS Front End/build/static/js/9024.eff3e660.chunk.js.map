{"version":3,"file":"static/js/9024.eff3e660.chunk.js","mappings":"8OAcA,MAAMA,EAAoBC,EAAAA,MAAW,IAAM,kCACrCC,EAAuBD,EAAAA,MAAW,IAAM,qEAsI9C,EApI2BE,IAAuG,IAAtG,UAAEC,EAAS,gBAAEC,EAAe,mBAAEC,EAAkB,gBAAEC,EAAe,aAAEC,EAAY,cAAGC,GAAcN,EAGxH,MAAMO,GAAaC,EAAAA,EAAAA,UACbC,GAAaD,EAAAA,EAAAA,WACb,QAAEE,IAAYC,EAAAA,EAAAA,MACbC,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,IAC9BC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAcC,IAAmBJ,EAAAA,EAAAA,aACjCK,EAAcC,IAAmBN,EAAAA,EAAAA,UAAS,KAG1CO,GAAmBC,UAAWC,EAAyBC,KAAMC,KAAqBC,EAAAA,EAAAA,OAClFC,GAAiBL,UAAWM,EAA0BJ,KAAMK,KAAsBC,EAAAA,EAAAA,OAClFC,GAAqBC,WAAYC,EAAkBX,UAAWY,EAAgBV,KAAMW,KAAkBC,EAAAA,EAAAA,OAG7GC,EAAAA,EAAAA,YAAU,KACNV,IACAN,GAAiB,GAClB,CAACpB,KAEJoC,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAeC,EAAAA,GAAkBC,QAAQC,MAAKC,GAA0B,WAAhBA,EAAOC,OACjEvC,GAAmBkC,GACnBA,EAAaM,cAAcC,WAAY,EACvCP,EAAaM,cAAcE,aAAc,GAClCR,IACPA,EAAaM,cAAcC,WAAY,EACvCP,EAAaM,cAAcE,aAAc,EAC7C,GACD,CAAC1C,KAEJiC,EAAAA,EAAAA,YAAU,KACN,GAAId,GAA2BE,KAC3BsB,EAAAA,EAAAA,IAAuBtB,EAAiB,YAAa,YAAauB,EAAAA,GAAyB,aACvF3C,GAAc,CACd,MAAM4C,EAAkBxB,EAAgBgB,MAAKS,GAAWA,EAAQC,YAAc9C,IAC1E4C,GACA7B,EAAgB6B,EAAgBG,UAExC,CACJ,GACD,CAAC7B,EAAyBE,EAAiBpB,KAG9CgC,EAAAA,EAAAA,YAAU,KACFT,GAA4BC,IAC5BkB,EAAAA,EAAAA,IAAuBlB,EAAkB,cAAe,OAAQmB,EAAAA,GAAyB,cAC7F,GACD,CAACpB,EAA0BC,KAE9BQ,EAAAA,EAAAA,YAAU,KACFH,GAAkBC,IAAiBF,GACnCoB,EAAAA,EAAaC,QAAQnB,EAAaoB,aACtC,GACD,CAACrB,EAAgBC,EAAcF,IAGlC,MAAMuB,EAAoBA,MACH,OAAftD,QAAe,IAAfA,OAAe,EAAfA,EAAiBuD,QAAS,GAC1BzC,GAAcD,GACdF,GAAU,IAENE,EACAC,GAAcD,GAEdsC,EAAAA,EAAaK,QAAQ,8GAE7B,EA+BEC,EAAgB,CAClBC,KAhBqBpC,IACrBR,GAAcD,GACdF,GAAU,GACVK,EAAgBM,EAAK,EAcrBqC,OAZuBrC,IACvBd,EAAQ,UACJ,mCACA,SAAU,UACZoD,MAAMC,IACAA,IACAC,EAAAA,EAAAA,IAAWxC,EAAKyC,QAASzC,EAAK0C,GAAInC,EAAmB7B,EAAiBC,EAAoBgE,EAAAA,EAAQC,qBAAqB,EAC3H,GACF,GAON,OACIC,EAAAA,EAAAA,MAACvE,EAAAA,SAAc,CAAAwE,SAAA,EACXC,EAAAA,EAAAA,KAAC1E,EAAiB,CAACU,WAAYA,EAAYiD,kBAAmBA,EAAmBG,cAAeA,EAC5FvD,gBAAiBA,EAAiBF,gBAAiBA,EAAiBsE,qBApClDC,IACtBhE,EAAWiE,SACXjE,EAAWiE,QAAQC,kBAAkBF,EACzC,KAmCIF,EAAAA,EAAAA,KAACxE,EAAoB,CAACyD,kBAAmBA,EAAmBoB,UA/BlDA,KACd5D,GAAcD,GACdF,GAAU,EAAM,EA6BsEE,UAAWA,EAAWN,WAAYA,EAChHQ,aAAcA,EAAcL,OAAQA,EAAQX,UAAWA,EAAWC,gBAAiBA,EAAiBC,mBAAoBA,EACxHgB,aAAcA,EAAcb,cAAeA,MAElC,C,gFChIlB,MAAMuE,EAAwB,CACnCC,MAAO,OACPC,MAAO,GAII/B,EAA0B,CACrCL,KAAM,qBACNqC,aAAc,CACZ5B,UAAW,GACX6B,YAAa,GACbC,YAAaL,EAAsBE,MACnCI,UAAW,EACXjB,GAAI,EACJkB,sBAAsB,GAExBC,WAAY,CACV,CACEnB,GAAI,cACJoB,MAAO,aACPC,WAAY,YACZC,UAAWC,EAAAA,EAAeC,OAC1BC,UAAW,cACXC,aAAc,CACZC,YAAa,mBACbC,kBAAkB,GAEpBC,WAAY,CAAC,CAAEC,KAAM,YACrBC,MAAO,CACLC,aAAc,4CAkBlB,CACEhC,GAAI,cACJoB,MAAO,iBACPC,WAAY,eACZC,UAAWC,EAAAA,EAAeU,MAC1BR,UAAW,cACXC,aAAc,CACZC,YAAa,qBACbO,YAAY,EACZC,UAAW,IAEbN,WAAY,CAAC,CAAEC,KAAM,YACrBC,MAAO,CACLC,aAAc,2CAGlB,CACEhC,GAAI,YACJoB,MAAO,GACPC,WAAY,YACZC,UAAWC,EAAAA,EAAea,QAC1BX,UAAW,YACXC,aAAc,CACZC,YAAa,YACbO,YAAY,EACZG,UAAW,EACXF,UAAW,GAEbJ,MAAO,CACLC,aAAc,4CAGlB,CACEhC,GAAI,uBACJoB,MAAO,aACPC,WAAY,uBACZC,UAAWC,EAAAA,EAAee,SAC1Bb,UAAW,uBACXC,aAAc,CACZC,YAAa,GACbO,YAAY,GAEdH,MAAO,CACLC,aACE,gFAQG3D,EAAoB,CAC/BC,QAAS,CACP,CACEG,KAAM,OACN8D,UAAW,YACXC,SAAU,CACRC,MAAO,OAETC,gBAAkBnC,GACT,IAAW,OAAPA,QAAO,IAAPA,OAAO,EAAPA,EAAqB,cAAa,OAAPA,QAAO,IAAPA,OAAO,EAAPA,EAAuB,eAGjE,CACE9B,KAAM,eACN8D,UAAW,cAEXC,SAAU,CACRC,MAAO,OAETC,gBAAkBnC,GACT,IAAW,OAAPA,QAAO,IAAPA,OAAO,EAAPA,EAAqB,cAAa,OAAPA,QAAO,IAAPA,OAAO,EAAPA,EAAuB,eAGjE,CACE9B,KAAM,YACN+D,SAAU,CACRC,MAAO,OAETF,UAAW,aAEb,CACE9D,KAAM,aACN8D,UAAW,YACXC,SAAU,CACRC,MAAO,OAETE,QAASC,EAAAA,EAAeN,SACxBO,YAAa,CACXC,eAAe,EACfC,cAAc,IAGlB,CACEtE,KAAM,SACN+D,SAAU,CACRC,MAAO,OAETE,QAASC,EAAAA,EAAeI,OACxBtE,cAAe,CACbC,WAAW,EACXC,aAAa,K,qECtJd,MAAMkB,EAAaA,CAACmD,EAAQC,EAAOC,EAAeC,EAAUC,EAAaC,EAAUC,KACtF,GAAIN,EAAQ,CAER,IAAIO,EADJL,EAAcF,GAGVO,EADAD,EACeH,EAASK,QAAOC,GAAQA,EAAKC,UAAYV,IAEzCG,EAASK,QAAOC,GAAQA,EAAK3D,UAAYkD,IAE5DI,EAAYG,EAChB,KAAO,CAMHH,EALqBD,EAASK,QAAOC,GAAQA,EAAK1D,KAAOkD,IACtBU,KAAI,CAACF,EAAMR,KAAK,IAC5CQ,EACH1D,GAAIkD,EAAQ,OAGhB/D,EAAAA,EAAaC,QAAQkE,EACzB,GAGSO,EAAUA,CAACvG,EAAMvB,EAAWqH,EAAUC,EAAaS,EAAgBC,EAAkBC,EAAkBC,EAAavD,KAC7H,IAAIwD,EAAU,IACP5G,EACHvB,UAAWA,EACXoI,UAAgC,KAAb,OAARf,QAAQ,IAARA,OAAQ,EAARA,EAAU7D,SAAsBjC,EAAK8G,eAChDpE,GAAIoD,GAAmB,OAARA,QAAQ,IAARA,OAAQ,EAARA,EAAU7D,QAAS,EAAI,GAE1C,GAAI6D,GAAgC,IAApBA,EAAS7D,OAIrB,OAHAJ,EAAAA,EAAaK,QAAQuE,GACrBE,SACAvD,IAIJ,GAD4B,OAAR0C,QAAQ,IAARA,OAAQ,EAARA,EAAUiB,MAAKX,GAAQA,EAAKY,aAAaC,gBAAkBjH,EAAKgH,aAAaC,gBAmB7FpF,EAAAA,EAAaK,QAAQwE,OAlBP,CACd,IAAIH,EACAT,GACAS,EAAU,IAAIT,GACV9F,EAAK8G,iBACLP,EAAUA,EAAQD,KAAIF,IAAI,IAAUA,EAAMS,WAAW,OAEzDN,EAAQW,KAAKN,IAEbL,EAAU,CAACK,GAEXL,EAAQtE,QAAU,IAClB8D,EAAYQ,GACZ1E,EAAAA,EAAaC,QAAQ0E,GACrBG,IACAvD,IAER,CAEA,EAIS+D,EAAaA,CAACnH,EAAM8F,EAAUC,EAAaS,EAAgBE,EAAkBU,EAAaT,EAAavD,KAChH,GAAI0C,GAAY9F,EAAK0C,GAAK,EAAG,CAEzB,GADoBoD,EAASiB,MAAMX,GAASA,EAAKY,aAAaC,gBAAkBjH,EAAKgH,aAAaC,eAAiBb,EAAK1D,KAAO1C,EAAK0C,KAwBhIb,EAAAA,EAAaK,QAAQwE,OAvBP,CAkBdX,EAjBkBD,EAASQ,KAAIF,GACvBA,EAAK1D,KAAO1C,EAAK0C,GACV,IACA0D,EACHY,aAAchH,EAAKgH,aACnBH,UAAW7G,EAAK8G,gBAEb9G,EAAK8G,eACL,IACAV,EACHS,WAAW,GAGRT,KAKfvE,EAAAA,EAAaC,QAAQ0E,GACV,OAAXG,QAAW,IAAXA,GAAAA,IACS,OAATvD,QAAS,IAATA,GAAAA,GACJ,CAIJ,MACIvB,EAAAA,EAAaC,QAAQsF,GACrBT,IACAvD,GACJ,C,mCC7FG,MAAMT,EAAU,CACnB0E,YAAa,yBACbC,WAAY,uBACZC,aAAc,yBACdC,eAAgB,gEAChBC,eAAgB,oDAChBC,YAAa,sCAEb9E,oBAAqB,0BACrB+E,mBAAoB,wBACpBC,qBAAsB,0BACtBC,uBAAwB,+DACxBC,uBAAwB,qD","sources":["common/features/component/ContactNumber/ContactNumbersGrid.js","common/features/component/ContactNumber/config/AddEditContactsForm.data.js","common/features/component/EmailAddress/utils/ContactEmailAddressUtil.js","common/features/component/EmailAddress/utils/ContactMessages.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n//** Lib's */\r\nimport { Message } from \"../EmailAddress/utils/ContactMessages\";\r\nimport { deleteData } from \"../EmailAddress/utils/ContactEmailAddressUtil\";\r\nimport { addEditContactsFormData, phoneNumberConfig } from \"./config/AddEditContactsForm.data\";\r\nimport { setDropDownOptionField } from \"../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\n//** Service's */\r\nimport SwalAlert from \"../../../../services/swalService/SwalService\";\r\nimport ToastService from \"../../../../services/toastService/ToastService\";\r\nimport { useLazyGetAllCountriesQuery } from \"../../../../app/services/basicdetailAPI\";\r\nimport { useDeleteContactPhoneMutation, useLazyGetAllPhoneTypesQuery } from \"../../../../app/services/phoneNumberAPI\";\r\n//** Component's */\r\nconst ContactNumberList = React.lazy(() => import(\"./feature/ContactNumberList\"));\r\nconst AddEditContactNumber = React.lazy(() => import(\"./feature/AddEditContactNumber\"));\r\n\r\nconst ContactNumbersGrid = ({ contactId, phoneNumberList, setPhoneNumberList, isButtonDisable, contryIdCode , isOrderManage}) => {\r\n\r\n    //** State */\r\n    const molGridRef = useRef();\r\n    const addeditRef = useRef();\r\n    const { confirm } = SwalAlert();\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [editFormData, setEditFormData] = useState();\r\n    const [newPhoneCode, setNewPhoneCode] = useState(\"\");\r\n\r\n    //** API Call's */\r\n    const [getAllCountries, { isSuccess: isGetAllCountriesSucess, data: isCountriesData }] = useLazyGetAllCountriesQuery();\r\n    const [getPhoneTypes, { isSuccess: isGetAllPhoneTypesSucess, data: isPhoneTypesData }] = useLazyGetAllPhoneTypesQuery();\r\n    const [deletePhoneNumber, { isFetching: isDeleteFetching, isSuccess: isDeleteSucess, data: isDeleteData }] = useDeleteContactPhoneMutation();\r\n\r\n    //** UseEffect */\r\n    useEffect(() => {\r\n        getPhoneTypes();\r\n        getAllCountries();\r\n    }, [contactId]);\r\n\r\n    useEffect(() => {\r\n        const actionColumn = phoneNumberConfig.columns.find(column => column.name === \"Action\");\r\n        if (isButtonDisable && actionColumn) {\r\n            actionColumn.defaultAction.allowEdit = false;\r\n            actionColumn.defaultAction.allowDelete = false;\r\n        } else if (actionColumn) {\r\n            actionColumn.defaultAction.allowEdit = true;\r\n            actionColumn.defaultAction.allowDelete = true;\r\n        }\r\n    }, [isButtonDisable]);\r\n\r\n    useEffect(() => {\r\n        if (isGetAllCountriesSucess && isCountriesData) {\r\n            setDropDownOptionField(isCountriesData, 'countryId', 'phoneCode', addEditContactsFormData, 'phoneCode');\r\n            if (contryIdCode) {\r\n                const selectedCountry = isCountriesData.find(country => country.countryId === contryIdCode);\r\n                if (selectedCountry) {\r\n                    setNewPhoneCode(selectedCountry.phoneCode);\r\n                }\r\n            }\r\n        }\r\n    }, [isGetAllCountriesSucess, isCountriesData, contryIdCode]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (isGetAllPhoneTypesSucess && isPhoneTypesData) {\r\n            setDropDownOptionField(isPhoneTypesData, 'phoneTypeId', 'type', addEditContactsFormData, 'phoneTypeId');\r\n        }\r\n    }, [isGetAllPhoneTypesSucess, isPhoneTypesData])\r\n\r\n    useEffect(() => {\r\n        if (isDeleteSucess && isDeleteData && !isDeleteFetching) {\r\n            ToastService.success(isDeleteData.errorMessage);\r\n        }\r\n    }, [isDeleteSucess, isDeleteData, isDeleteFetching]);\r\n\r\n    //** Handle Changes */\r\n    const handleToggleModal = () => {\r\n        if (phoneNumberList?.length < 5) {\r\n            setShowModal(!showModal);\r\n            setIsEdit(false);\r\n        } else {\r\n            if (showModal) {\r\n                setShowModal(!showModal);\r\n            } else {\r\n                ToastService.warning(\"You have reached the maximum number of contacts. Please remove an existing contact before adding a new one.\")\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCheckBoxChange = (rowData) => {\r\n        if (addeditRef.current) {\r\n            addeditRef.current.callChildFunction(rowData);\r\n        }\r\n    }\r\n\r\n    //** Success */\r\n    const onSuccess = () => {\r\n        setShowModal(!showModal);\r\n        setIsEdit(false);\r\n    };\r\n\r\n    //** Action Handler */\r\n    const handleEditModal = (data) => {\r\n        setShowModal(!showModal);\r\n        setIsEdit(true);\r\n        setEditFormData(data)\r\n    }\r\n    const handleDeleteClick = (data) => {\r\n        confirm(\"Delete?\",\r\n            \"Are you sure you want to Delete?\",\r\n            \"Delete\", \"Cancel\"\r\n        ).then((confirmed) => {\r\n            if (confirmed) {\r\n                deleteData(data.phoneId, data.id, deletePhoneNumber, phoneNumberList, setPhoneNumberList, Message.ContactNumberDelete, false)\r\n            }\r\n        });\r\n    }\r\n    const actionHandler = {\r\n        EDIT: handleEditModal,\r\n        DELETE: handleDeleteClick,\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ContactNumberList molGridRef={molGridRef} handleToggleModal={handleToggleModal} actionHandler={actionHandler}\r\n                isButtonDisable={isButtonDisable} phoneNumberList={phoneNumberList} handleCheckBoxChange={handleCheckBoxChange} />\r\n            {/* {showModal && ( */}\r\n            <AddEditContactNumber handleToggleModal={handleToggleModal} onSuccess={onSuccess} showModal={showModal} addeditRef={addeditRef}\r\n                editFormData={editFormData} isEdit={isEdit} contactId={contactId} phoneNumberList={phoneNumberList} setPhoneNumberList={setPhoneNumberList}\r\n                newPhoneCode={newPhoneCode} isOrderManage={isOrderManage} />\r\n            {/* )} */}\r\n        </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\nContactNumbersGrid.propTypes = {\r\n    contactId: PropTypes.number.isRequired,\r\n    phoneNumberList: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            phoneId: PropTypes.number,\r\n            id: PropTypes.number,\r\n\r\n        })\r\n    ).isRequired,\r\n    setPhoneNumberList: PropTypes.func.isRequired,\r\n    isButtonDisable: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default ContactNumbersGrid;","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\nimport { GridColumnType } from \"../../../../../data/gridColumnType\";\r\n\r\nexport const initialPhoneTypeState = {\r\n  label: 'Work',\r\n  value: 2\r\n}\r\n\r\n\r\nexport const addEditContactsFormData = {\r\n  name: \"Add Edit Role Form\",\r\n  initialState: {\r\n    phoneCode: '',\r\n    phoneNumber: '',\r\n    phoneTypeId: initialPhoneTypeState.value,\r\n    extension: 0,\r\n    id: 0,\r\n    isPrimaryPhoneNumber: false\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"phoneTypeId\",\r\n      lable: \"Phone Type\",\r\n      Field_Name: \"phoneType\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"phoneTypeId\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Phone Type\",\r\n        isEnableOnChange: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 mb-input\",\r\n      },\r\n    },\r\n    // {\r\n    //   id: \"phoneCode\",\r\n    //   lable: \"Contact Number \",\r\n    //   Field_Name: \"Phone Code\",\r\n    //   fieldType: FormFieldTypes.SELECT,\r\n    //   dataField: \"phoneCode\",\r\n    //   fieldSetting: {\r\n    //     placeholder: \"\",\r\n    //     isEnableOnChange: true\r\n    //   },\r\n    //   validation: [{ type: \"require\" }],\r\n    //   style: {\r\n    //     containerCss: \"col-xxl-3 col-xl-3 col-md-4 mb-input pr-0 border-right-0\",\r\n    //   },\r\n    // },\r\n    {\r\n      id: \"phoneNumber\",\r\n      lable: \"Contact Number\",\r\n      Field_Name: \"Phone Number\",\r\n      fieldType: FormFieldTypes.PHONE,\r\n      dataField: \"phoneNumber\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Phone Number\",\r\n        allowSpace: true,\r\n        maxLength: 15,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"extension\",\r\n      lable: \"\",\r\n      Field_Name: \"Extension\",\r\n      fieldType: FormFieldTypes.NUMERIC,\r\n      dataField: \"extension\",\r\n      fieldSetting: {\r\n        placeholder: \"Extension\",\r\n        allowSpace: true,\r\n        minLength: 0,\r\n        maxLength: 6,\r\n      },\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-12 col-md-12 mb-input \",\r\n      },\r\n    },\r\n    {\r\n      id: \"isPrimaryPhoneNumber\",\r\n      lable: \"Is Primary\",\r\n      Field_Name: \"isPrimaryPhoneNumber\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isPrimaryPhoneNumber\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n        allowSpace: true,\r\n      },\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-6 col-xl-6 col-md-12 col-12 col-12 mb-input margin-left0-checkbox\",\r\n      },\r\n    },\r\n\r\n  ],\r\n};\r\n\r\n\r\nexport const phoneNumberConfig = {\r\n  columns: [\r\n    {\r\n      name: \"Type\",\r\n      fieldName: \"phoneType\",\r\n      colStyle: {\r\n        width: \"15%\",\r\n      },\r\n      renderCustomCol: (rowData) => {\r\n        return `(${rowData?.[\"phoneCode\"]}) ${rowData?.[\"phoneNumber\"]}`;\r\n      },\r\n    },\r\n    {\r\n      name: \"Phone Number\",\r\n      fieldName: \"phoneNumber\",\r\n     // colType: GridColumnType.CUSTOM,\r\n      colStyle: {\r\n        width: \"30%\",\r\n      },\r\n      renderCustomCol: (rowData) => {\r\n        return `(${rowData?.[\"phoneCode\"]}) ${rowData?.[\"phoneNumber\"]}`;\r\n      },\r\n    },\r\n    {\r\n      name: \"Extension\",\r\n      colStyle: {\r\n        width: \"20%\",\r\n      },\r\n      fieldName: \"extension\"\r\n    },\r\n    {\r\n      name: \"Is Primary\",\r\n      fieldName: \"isPrimary\",\r\n      colStyle: {\r\n        width: \"15%\",\r\n      },\r\n      colType: GridColumnType.CHECKBOX,\r\n      colSettings: {\r\n        allowCheckbox: true,\r\n        allowDisable: true\r\n      },\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      colStyle: {\r\n        width: \"15%\",\r\n      },\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n        allowDelete: true,\r\n      },\r\n    },\r\n  ]\r\n}","import ToastService from \"../../../../../services/toastService/ToastService\";\r\n\r\nexport const deleteData = (mainId, index, deleteAPICall, listData, setListData, messages, isEmailDelete) => {\r\n    if (mainId) {\r\n        deleteAPICall(mainId);\r\n        let filteredData;\r\n        if (isEmailDelete) {\r\n            filteredData = listData.filter(item => item.emailId !== mainId);\r\n        } else {\r\n            filteredData = listData.filter(item => item.phoneId !== mainId);\r\n        }\r\n        setListData(filteredData);\r\n    } else {\r\n        const filteredData = listData.filter(item => item.id !== index);\r\n        const reindexedData = filteredData.map((item, index) => ({\r\n            ...item,\r\n            id: index + 1\r\n        }));\r\n        setListData(reindexedData);\r\n        ToastService.success(messages);\r\n    }\r\n}\r\n\r\nexport const addData = (data, contactId, listData, setListData, successMessage, maxLengthMessage, duplicateMessage, onResetData, onSuccess) => {\r\n    let request = {\r\n        ...data,\r\n        contactId: contactId,\r\n        isPrimary: listData?.length === 0 ? true : data.isEmailPrimary,\r\n        id: listData ? listData?.length + 1 : 1\r\n    }\r\n    if (listData && listData.length === 2) {\r\n        ToastService.warning(maxLengthMessage);\r\n        onResetData();\r\n        onSuccess();\r\n        return;\r\n    }\r\n    const isDuplicate = listData?.some(item => item.emailAddress.toLowerCase() === data.emailAddress.toLowerCase());\r\n    if (!isDuplicate) {\r\n        let addData;\r\n        if (listData) {\r\n            addData = [...listData];\r\n            if (data.isEmailPrimary) {\r\n                addData = addData.map(item => ({ ...item, isPrimary: false }));\r\n            }\r\n            addData.push(request);\r\n        } else {\r\n            addData = [request];\r\n        }\r\n        if (addData.length <= 5) {\r\n            setListData(addData);\r\n            ToastService.success(successMessage);\r\n            onResetData();\r\n            onSuccess();\r\n        }\r\n    } else {\r\n        ToastService.warning(duplicateMessage);\r\n    }\r\n\r\n}\r\n\r\nexport const updateData = (data, listData, setListData, successMessage, duplicateMessage, inValidDate, onResetData, onSuccess) => {\r\n    if (listData && data.id > 0) {\r\n        const isDuplicate = listData.some((item) => item.emailAddress.toLowerCase() === data.emailAddress.toLowerCase() && item.id !== data.id);\r\n        if (!isDuplicate) {\r\n            let updatedData = listData.map(item => {\r\n                if (item.id === data.id) {\r\n                    return {\r\n                        ...item,\r\n                        emailAddress: data.emailAddress,\r\n                        isPrimary: data.isEmailPrimary,\r\n                    };\r\n                } else if (data.isEmailPrimary) {\r\n                    return {\r\n                        ...item,\r\n                        isPrimary: false,\r\n                    };\r\n                } else {\r\n                    return item;\r\n                }\r\n            });\r\n\r\n            setListData(updatedData);\r\n            ToastService.success(successMessage);\r\n            onResetData?.();\r\n            onSuccess?.();\r\n        } else {\r\n            ToastService.warning(duplicateMessage);\r\n        }\r\n\r\n    } else {\r\n        ToastService.success(inValidDate);\r\n        onResetData();\r\n        onSuccess();\r\n    }\r\n}","export const Message = {\r\n    EmailDelete: 'Email address Deleted.',\r\n    EmailAdded: 'Email address added.',\r\n    EmailUpdated: 'Email address updated.',\r\n    EmailMaxLength: 'Maximum number of email addresses reached. Request not added.',\r\n    DuplicateEmail: 'Duplicate email address found. Request not added.',\r\n    InvalidData: 'Invalid data. Update not performed.',\r\n\r\n    ContactNumberDelete: 'Contact Number Deleted.',\r\n    ContactNumberAdded: 'Contact Number added.',\r\n    ContactNumberUpdated: 'Contact Number updated.',\r\n    ContactNumberMaxLength: 'Maximum number of Contact Number reached. Request not added.',\r\n    ContactNumberDuplicate: 'Duplicate Contact Number found. Request not added.',\r\n}"],"names":["ContactNumberList","React","AddEditContactNumber","_ref","contactId","phoneNumberList","setPhoneNumberList","isButtonDisable","contryIdCode","isOrderManage","molGridRef","useRef","addeditRef","confirm","SwalAlert","isEdit","setIsEdit","useState","showModal","setShowModal","editFormData","setEditFormData","newPhoneCode","setNewPhoneCode","getAllCountries","isSuccess","isGetAllCountriesSucess","data","isCountriesData","useLazyGetAllCountriesQuery","getPhoneTypes","isGetAllPhoneTypesSucess","isPhoneTypesData","useLazyGetAllPhoneTypesQuery","deletePhoneNumber","isFetching","isDeleteFetching","isDeleteSucess","isDeleteData","useDeleteContactPhoneMutation","useEffect","actionColumn","phoneNumberConfig","columns","find","column","name","defaultAction","allowEdit","allowDelete","setDropDownOptionField","addEditContactsFormData","selectedCountry","country","countryId","phoneCode","ToastService","success","errorMessage","handleToggleModal","length","warning","actionHandler","EDIT","DELETE","then","confirmed","deleteData","phoneId","id","Message","ContactNumberDelete","_jsxs","children","_jsx","handleCheckBoxChange","rowData","current","callChildFunction","onSuccess","initialPhoneTypeState","label","value","initialState","phoneNumber","phoneTypeId","extension","isPrimaryPhoneNumber","formFields","lable","Field_Name","fieldType","FormFieldTypes","SELECT","dataField","fieldSetting","placeholder","isEnableOnChange","validation","type","style","containerCss","PHONE","allowSpace","maxLength","NUMERIC","minLength","CHECKBOX","fieldName","colStyle","width","renderCustomCol","colType","GridColumnType","colSettings","allowCheckbox","allowDisable","ACTION","mainId","index","deleteAPICall","listData","setListData","messages","isEmailDelete","filteredData","filter","item","emailId","map","addData","successMessage","maxLengthMessage","duplicateMessage","onResetData","request","isPrimary","isEmailPrimary","some","emailAddress","toLowerCase","push","updateData","inValidDate","EmailDelete","EmailAdded","EmailUpdated","EmailMaxLength","DuplicateEmail","InvalidData","ContactNumberAdded","ContactNumberUpdated","ContactNumberMaxLength","ContactNumberDuplicate"],"sourceRoot":""}