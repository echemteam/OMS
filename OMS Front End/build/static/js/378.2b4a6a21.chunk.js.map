{"version":3,"file":"static/js/378.2b4a6a21.chunk.js","mappings":"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","sources":["components/ApprovalCheckList/feature/ApprovalInformation/SettingInfo.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { PaymentMethodTypes } from \"../../../../utils/Enums/commonEnums\";\r\nimport Checkbox from \"../../../ui/inputs/checkBox/CheckBox\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useLazyGetAllPaymentTermsQuery } from \"../../../../app/services/customerSettingsAPI\";\r\nimport Iconify from \"../../../ui/iconify/Iconify\";\r\n\r\nconst SettingInformation = ({\r\n  isModelOpen,\r\n  mainId,\r\n  getFinacialSettingById,\r\n  approvalChekedData,\r\n  handleCheckbox,\r\n}) => {\r\n  //** State */\r\n  const [finacialInformation, setFinacialInformation] = useState();\r\n  const [isChecked, setIsChecked] = useState(\r\n    approvalChekedData?.isChecked || false\r\n  );\r\n  const [paymentTermsData, setPaymentTermsData] = useState([]);\r\n\r\n  const [openSections, setOpenSections] = useState([true]);\r\n\r\n  //** API Call's */\r\n  const [\r\n    getFinacialSetting,\r\n    {\r\n      isFetching: isFinacialSettingFetching,\r\n      isSuccess: isFinacialSettingSuccess,\r\n      data: isFinacialSettingData,\r\n    },\r\n  ] = getFinacialSettingById();\r\n  const [\r\n    getAllPaymentTerms,\r\n    {\r\n      isFetching: isGetAllPaymentTermsFetching,\r\n      isSuccess: isGetAllPaymentTermsSuccess,\r\n      data: isGetAllPaymentTermsData,\r\n    },\r\n  ] = useLazyGetAllPaymentTermsQuery();\r\n\r\n  useEffect(() => {\r\n    if (isModelOpen && mainId) {\r\n      getFinacialSetting(mainId);\r\n      getAllPaymentTerms();\r\n    }\r\n  }, [isModelOpen, mainId]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isGetAllPaymentTermsFetching &&\r\n      isGetAllPaymentTermsSuccess &&\r\n      isGetAllPaymentTermsData\r\n    ) {\r\n      setPaymentTermsData(isGetAllPaymentTermsData);\r\n    }\r\n  }, [\r\n    isGetAllPaymentTermsFetching,\r\n    isGetAllPaymentTermsSuccess,\r\n    isGetAllPaymentTermsData,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isFinacialSettingFetching &&\r\n      isFinacialSettingSuccess &&\r\n      isFinacialSettingData\r\n    ) {\r\n      setFinacialInformation(isFinacialSettingData);\r\n    }\r\n  }, [\r\n    isFinacialSettingFetching,\r\n    isFinacialSettingSuccess,\r\n    isFinacialSettingData,\r\n  ]);\r\n\r\n  const getPaymentTerm = (Id) => {\r\n    let find = paymentTermsData?.find((item) => item.paymentTermId === Id);\r\n    return find?.paymentTerm;\r\n  };\r\n\r\n  const getPaymentMethodName = (methodId) => {\r\n    switch (methodId) {\r\n      case PaymentMethodTypes.CHECK:\r\n        return \"Check\";\r\n      case PaymentMethodTypes.ACHECHECK:\r\n        return \"ACH / Echeck\";\r\n      case PaymentMethodTypes.WIRE:\r\n        return \"Wire\";\r\n      case PaymentMethodTypes.CREDITCARD:\r\n        return \"Credit Card\";\r\n      case PaymentMethodTypes.OTHERWITHNOTEDIELD:\r\n        return \"Other - With noted field\";\r\n      default:\r\n        return \"Unknown Method\";\r\n    }\r\n  };\r\n  const handleChange = (checkedValue, newValue) => {\r\n    setIsChecked(newValue);\r\n    handleCheckbox(checkedValue, newValue);\r\n  };\r\n\r\n  // Toggle active section\r\n  const toggleSection = (index) => {\r\n    const updatedSections = [...openSections];\r\n    updatedSections[index] = !updatedSections[index]; // Toggle the clicked section\r\n    setOpenSections(updatedSections);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={`card-top-title ${openSections[0] ? 'active' : ''}`} onClick={() => toggleSection(0)}>\r\n        <div className=\"d-flex align-items-center mr-2\">\r\n          <span>\r\n            <Iconify icon=\"ep:arrow-down-bold\" className=\"open-bar\" />\r\n          </span>\r\n          <h5> Finacial Information </h5>\r\n        </div>\r\n        <div className=\"checkbox-part\">\r\n          <Checkbox\r\n            name={\"settingInformation\"}\r\n            dataField={\"settingInformation\"}\r\n            checked={isChecked || false}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n      </div>\r\n      {openSections[0] && (\r\n        <div className=\"card-info-checklist\">\r\n          {finacialInformation && (\r\n            <div className=\"card-part\">\r\n              <h6 className=\"name-title\">\r\n                <span className=\"label\">Payment Method:</span>\r\n                <p className=\"name-desc\">\r\n                  {getPaymentMethodName(finacialInformation.paymentMethodId)}\r\n                </p>\r\n              </h6>\r\n              <h6 className=\"name-title\">\r\n                <span className=\"label\">Credit Limit:</span>\r\n                <p className=\"name-desc\">{finacialInformation.creditLimit}</p>\r\n              </h6>\r\n              <h6 className=\"name-title\">\r\n                <span className=\"label\">Billing Currency:</span>\r\n                <p className=\"name-desc\">\r\n                  {finacialInformation.billingCurrency}\r\n                </p>\r\n              </h6>\r\n              <h6 className=\"name-title\">\r\n                <span className=\"label\">Payment Terms:</span>\r\n                <p className=\"name-desc\">\r\n                  {getPaymentTerm(finacialInformation.paymentTermId)}\r\n                </p>\r\n              </h6>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nSettingInformation.propTypes = {\r\n  isModelOpen: PropTypes.bool.isRequired,\r\n  mainId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  getFinacialSettingById: PropTypes.func.isRequired,\r\n  approvalChekedData: PropTypes.shape({\r\n    isChecked: PropTypes.bool,\r\n  }),\r\n  handleCheckbox: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SettingInformation;\r\n"],"names":["_ref","isModelOpen","mainId","getFinacialSettingById","approvalChekedData","handleCheckbox","finacialInformation","setFinacialInformation","useState","isChecked","setIsChecked","paymentTermsData","setPaymentTermsData","openSections","setOpenSections","getFinacialSetting","isFetching","isFinacialSettingFetching","isSuccess","isFinacialSettingSuccess","data","isFinacialSettingData","getAllPaymentTerms","isGetAllPaymentTermsFetching","isGetAllPaymentTermsSuccess","isGetAllPaymentTermsData","useLazyGetAllPaymentTermsQuery","useEffect","_jsxs","_Fragment","children","className","onClick","index","updatedSections","toggleSection","_jsx","Iconify","icon","Checkbox","name","dataField","checked","onChange","handleChange","checkedValue","newValue","methodId","PaymentMethodTypes","CHECK","ACHECHECK","WIRE","CREDITCARD","OTHERWITHNOTEDIELD","getPaymentMethodName","paymentMethodId","creditLimit","billingCurrency","Id","find","item","paymentTermId","paymentTerm","getPaymentTerm"],"sourceRoot":""}