{"version":3,"file":"static/js/5698.9e5ec8b9.chunk.js","mappings":"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","sources":["components/ApprovalCheckList/feature/ApprovalInformation/AddressInfo.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { AddressType } from \"../../../../utils/Enums/commonEnums\";\r\nimport PropTypes from \"prop-types\";\r\nimport Checkbox from \"../../../ui/inputs/checkBox/CheckBox\";\r\nimport Iconify from \"../../../ui/iconify/Iconify\";\r\n\r\nconst AddressInformation = ({\r\n  isModelOpen,\r\n  mainId,\r\n  getAddressById,\r\n  isSubCustomer,\r\n  approvalChekedData,\r\n  handleCheckbox,\r\n  isSupplierApproval,\r\n}) => {\r\n  //** State */\r\n  const [openSections, setOpenSections] = useState([true]);\r\n  const [addressInformation, setAddressInformation] = useState([]);\r\n  const [isChecked, setIsChecked] = useState(approvalChekedData?.isChecked || false);\r\n\r\n  //** API Call's */\r\n  const [\r\n    getAddressInfoById,\r\n    {\r\n      isFetching: isGetAddressByIdFetching,\r\n      isSuccess: isGetAddressByIdSuccess,\r\n      data: isGetAddressByIdData,\r\n    },\r\n  ] = getAddressById();\r\n\r\n  useEffect(() => {\r\n    if (isModelOpen && mainId) {\r\n      getAddressInfoById(mainId);\r\n    }\r\n  }, [isModelOpen, mainId]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isGetAddressByIdFetching &&\r\n      isGetAddressByIdSuccess &&\r\n      isGetAddressByIdData\r\n    ) {\r\n      const addressTypeArray = !isSupplierApproval\r\n        ? isSubCustomer\r\n          ? [AddressType.SHIPPING]\r\n          : [AddressType.BILLING, AddressType.SHIPPING]\r\n        : [AddressType.PHYSICALADDRESSHQ, AddressType.REMITTANCEADDRESS];\r\n\r\n      const modifyData = isGetAddressByIdData.map((data) => ({\r\n        ...data,\r\n        isChecked: false\r\n      }))\r\n\r\n      const customerFilteredData = modifyData.filter((address) => addressTypeArray.includes(address.addressTypeId)\r\n        // && (address.isPreferredBilling === true || address.isPreferredShipping === true)\r\n      );\r\n      const supplierFilteredData = isGetAddressByIdData.filter((address) => addressTypeArray.includes(address.addressTypeId));\r\n      setAddressInformation(!isSupplierApproval ? customerFilteredData : supplierFilteredData);\r\n    }\r\n  }, [isGetAddressByIdFetching, isGetAddressByIdSuccess, isGetAddressByIdData]);\r\n\r\n  useEffect(() => {\r\n    if (addressInformation && addressInformation.length > 0) {\r\n      const allChildChecked = addressInformation.every(data => data.isChecked);\r\n      if (allChildChecked) {\r\n        handleCheckbox(\"addressInformation\", true);\r\n        setIsChecked(true);\r\n      } else {\r\n        setIsChecked(false);\r\n        handleCheckbox(\"addressInformation\", false);\r\n      }\r\n    }\r\n  }, [addressInformation])\r\n\r\n  const handleChange = (name, value) => {\r\n    const modifyData = addressInformation.map((item) =>\r\n      item.addressId === name ? { ...item, isChecked: value } : item\r\n    )\r\n    setAddressInformation(modifyData);\r\n  };\r\n\r\n  // Toggle active section\r\n  const toggleSection = (index) => {\r\n    const updatedSections = [...openSections];\r\n    updatedSections[index] = !updatedSections[index]; // Toggle the clicked section\r\n    setOpenSections(updatedSections);\r\n  };\r\n  return (\r\n    <>\r\n      <div className={`card-top-title ${openSections[0] ? 'active' : ''}`} onClick={() => toggleSection(0)}>\r\n        <div className=\"d-flex align-items-center mr-2\">\r\n          <span>\r\n            <Iconify icon=\"ep:arrow-down-bold\" className=\"open-bar\" />\r\n          </span>\r\n          <h5> Address Information </h5>\r\n        </div>\r\n        {/* <div className=\"checkbox-part\">\r\n          <Checkbox\r\n            name={\"addressInformation\"}\r\n            dataField={\"addressInformation\"}\r\n            checked={isChecked || false}\r\n            // onChange={handleChange}\r\n            isDisable={true}\r\n          />\r\n        </div> */}\r\n      </div>\r\n      {openSections[0] && (\r\n        <div className=\"card-info-checklist\">\r\n          {addressInformation &&\r\n            addressInformation.map((address, index) => (\r\n              <div className=\"address-card-part\" key={index}>\r\n                <div className=\"d-flex justify-content-between\">\r\n                  <h6 className=\"title\">{address.type}</h6>\r\n                  <Checkbox\r\n                    name={address.addressId}\r\n                    dataField={address.addressId}\r\n                    checked={address.isChecked}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <h6 className=\"add-line-desc\">{address.addressLine1}</h6>\r\n                <p className=\"add-line-desc\">{address.isPreferredBilling}</p>\r\n                <p className=\"add-line-desc\">\r\n                  {address.cityName},{\" \"}\r\n                  {address.stateCode ? address.stateCode : address.stateName}{\" \"}\r\n                  {address.zipCode}\r\n                  <div>{address.countryName}</div>\r\n                </p>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nAddressInformation.propTypes = {\r\n  isModelOpen: PropTypes.bool.isRequired,\r\n  mainId: PropTypes.string.isRequired,\r\n  getAddressById: PropTypes.func.isRequired,\r\n  isSubCustomer: PropTypes.bool.isRequired,\r\n  approvalChekedData: PropTypes.shape({\r\n    isChecked: PropTypes.bool,\r\n  }).isRequired,\r\n  handleCheckbox: PropTypes.func.isRequired,\r\n};\r\nexport default AddressInformation;\r\n"],"names":["_ref","isModelOpen","mainId","getAddressById","isSubCustomer","approvalChekedData","handleCheckbox","isSupplierApproval","openSections","setOpenSections","useState","addressInformation","setAddressInformation","isChecked","setIsChecked","getAddressInfoById","isFetching","isGetAddressByIdFetching","isSuccess","isGetAddressByIdSuccess","data","isGetAddressByIdData","useEffect","addressTypeArray","AddressType","PHYSICALADDRESSHQ","REMITTANCEADDRESS","SHIPPING","BILLING","customerFilteredData","map","filter","address","includes","addressTypeId","supplierFilteredData","length","every","handleChange","name","value","modifyData","item","addressId","_jsxs","_Fragment","children","_jsx","className","onClick","index","updatedSections","toggleSection","Iconify","icon","type","Checkbox","dataField","checked","onChange","addressLine1","isPreferredBilling","cityName","stateCode","stateName","zipCode","countryName"],"sourceRoot":""}