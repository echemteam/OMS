{"version":3,"file":"static/js/5922.7766f803.chunk.js","mappings":"oOAWA,MAuFA,EAvFoBA,IACiE,IADhE,WAAEC,EAAU,mBAAEC,EAAkB,cAAEC,EAAa,kBAAEC,EAAiB,iBAAEC,EAAgB,aAAEC,EAAY,WAAEC,EAAU,qBAC/HC,EAAoB,kBAAEC,EAAiB,eAAEC,EAAc,iBAAEC,GAAkBX,EAE3E,MAAOY,EAAYC,IAAiBC,EAAAA,EAAAA,UAASZ,IACvC,YAAEa,EAAW,2BAAEC,IAA+BC,EAAAA,EAAAA,YAAWC,EAAAA,IACxDC,GAAUC,UAAWC,EAAiBC,KAAMC,KAAkBC,EAAAA,EAAAA,OAErEC,EAAAA,EAAAA,YAAU,MACDpB,GAAoBH,GACrBW,EAAc,IAAIX,GACtB,GACD,CAACA,EAAoBG,IAExB,MAAMqB,EAAkBC,MAAOL,EAAMM,KAAc,IAADC,EAC9C,MAAMC,EAAM,CACRvB,WAAYA,EACZwB,UAAWT,EAAKS,UAChBC,cAAeV,EAAKU,cACpBC,0BAA2BX,EAAKW,2BAA6B,EAC7DC,WAAuB,QAAZL,EAAAP,EAAKa,eAAO,IAAAN,OAAA,EAAZA,EAAcO,QAASd,EAAKY,UACvCG,YAAaf,EAAKe,YAClBC,YAAiB,OAAJhB,QAAI,IAAJA,OAAI,EAAJA,EAAMa,SAEvB,IAAII,EAAc,IAAI3B,GACtB2B,EAAYX,GAAY,IAAKhB,EAAWgB,MAAcN,GACtDT,EAAc0B,GACdpB,EAAOW,EAAI,GAGfL,EAAAA,EAAAA,YAAU,KACN,GAAIJ,GAAmBE,EAAc,CACjC,GAAIA,EAAaiB,aAAaC,SAAS,UAEnC,YADAC,EAAAA,EAAaC,QAAQpB,EAAaiB,cAGtChC,IACAkC,EAAAA,EAAaE,QAAQrB,EAAaiB,cAClCxB,EAA2BT,EAAYQ,EAC3C,IACD,CAACM,EAAiBE,IAQrB,OACIsB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,UACvBF,EAAAA,EAAAA,KAACG,EAAAA,QAAW,CACRC,UAAU,kBACVC,aAAa,EACbC,gBAAgB,gBAChBC,WAAW,MACXC,cAAc,EACdC,QAASC,EAAAA,EAASC,SAClBC,iBAAkBrD,EAAkB2C,UACpCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mCAAkCC,UAC7CF,EAAAA,EAAAA,KAACa,EAAAA,EAAY,CAETC,IAAK1D,EACL2D,cAAeC,EAAAA,EACfjD,WAAYA,EACZkD,iBAAiB,EACjBC,eAAgB5D,EAChB6D,UAAW3D,EACX4D,gBAAiBvC,EACjBwC,gBAAiBzD,EACjB0D,eA3BaC,CAACC,EAAWC,EAAY1C,KACnC,cAAdyC,GACA3C,EAAgB4C,EAAY1C,EAChC,GAeqB2C,KAAKC,UAAU5D,SAa9B,C","sources":["pages/customerDetail/feature/customerSettingDetail/features/Carrier/feature/CarrierList.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { useUpdateShppingDeliveryCarriersMutation } from \"../../../../../../../app/services/customerSettingsAPI\";\r\nimport FinalMolGrid from \"../../../../../../../components/FinalMolGrid/FinalMolGrid\";\r\nimport CardSection from \"../../../../../../../components/ui/card/CardSection\";\r\nimport { AppIcons } from \"../../../../../../../data/appIcons\";\r\nimport { AccountGridConfig } from \"../config/CarrierConfig\";\r\nimport PropTypes from 'prop-types';\r\nimport ToastService from \"../../../../../../../services/toastService/ToastService\";\r\nimport BasicDetailContext from \"../../../../../../../utils/ContextAPIs/Customer/BasicDetailContext\";\r\n\r\nconst CarrierList = ({ molGridRef, collectAccountData, actionHandler, handleToggleModal, isGetDataLoading, isShowButton, customerId,\r\n    handleGetDefaultList, handleDeleteClick, isEditablePage, customerStatusId }) => {\r\n\r\n    const [dataSource, setDataSource] = useState(collectAccountData);\r\n    const { subCustomer, getCustomerCompletionCount } = useContext(BasicDetailContext);\r\n    const [update, { isSuccess: isUpdateSuccess, data: isUpdateData }] = useUpdateShppingDeliveryCarriersMutation();\r\n\r\n    useEffect(() => {\r\n        if (!isGetDataLoading && collectAccountData) {\r\n            setDataSource([...collectAccountData]);\r\n        }\r\n    }, [collectAccountData, isGetDataLoading]);\r\n\r\n    const handleEditClick = async (data, rowIndex) => {\r\n        const req = {\r\n            customerId: customerId,\r\n            isPrimary: data.isPrimary,\r\n            accountNumber: data.accountNumber,\r\n            customerDeliveryCarrierId: data.customerDeliveryCarrierId || 0,\r\n            carrierId: data.carrier?.value || data.carrierId,\r\n            handlingFee: data.handlingFee,\r\n            carrierName: data?.carrier\r\n        };\r\n        let newGridData = [...dataSource]\r\n        newGridData[rowIndex] = { ...dataSource[rowIndex], ...data };\r\n        setDataSource(newGridData);\r\n        update(req);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isUpdateSuccess && isUpdateData) {\r\n            if (isUpdateData.errorMessage.includes('EXISTS')) {\r\n                ToastService.warning(isUpdateData.errorMessage);\r\n                return;\r\n            }\r\n            handleGetDefaultList()\r\n            ToastService.success(isUpdateData.errorMessage);\r\n            getCustomerCompletionCount(customerId, subCustomer);\r\n        }\r\n    }, [isUpdateSuccess, isUpdateData]);\r\n\r\n    const handleGridCheckBoxChange = (fieldName, newRowData, rowIndex) => {\r\n        if (fieldName === 'isPrimary') {\r\n            handleEditClick(newRowData, rowIndex);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"first-card\">\r\n            <CardSection\r\n                cardTitle=\"Carrier Details\"\r\n                rightButton={false}\r\n                buttonClassName=\"theme-button \"\r\n                buttonText=\"Add\"\r\n                textWithIcon={true}\r\n                iconImg={AppIcons.PlusIcon}\r\n                titleButtonClick={handleToggleModal}>\r\n                <div className=\"account-table table-striped mb-3\">\r\n                    <FinalMolGrid\r\n                        key={JSON.stringify(dataSource)}\r\n                        ref={molGridRef}\r\n                        configuration={AccountGridConfig}\r\n                        dataSource={dataSource}\r\n                        allowPagination={false}\r\n                        onActionChange={actionHandler}\r\n                        isLoading={isGetDataLoading}\r\n                        onRowDataUpdate={handleEditClick}\r\n                        onRowDataDelete={handleDeleteClick}\r\n                        onColumnChange={handleGridCheckBoxChange}\r\n                    />\r\n                </div>\r\n            </CardSection>\r\n        </div>\r\n    )\r\n}\r\n\r\nCarrierList.propTypes = {\r\n    molGridRef: PropTypes.object.isRequired,\r\n    collectAccountData: PropTypes.array.isRequired,\r\n    actionHandler: PropTypes.object.isRequired,\r\n    handleToggleModal: PropTypes.func.isRequired,\r\n    isGetDataLoading: PropTypes.bool.isRequired,\r\n    isShowButton: PropTypes.bool.isRequired,\r\n    customerId: PropTypes.number.isRequired,\r\n    handleGetDefaultList: PropTypes.func.isRequired\r\n};\r\n\r\nexport default CarrierList;"],"names":["_ref","molGridRef","collectAccountData","actionHandler","handleToggleModal","isGetDataLoading","isShowButton","customerId","handleGetDefaultList","handleDeleteClick","isEditablePage","customerStatusId","dataSource","setDataSource","useState","subCustomer","getCustomerCompletionCount","useContext","BasicDetailContext","update","isSuccess","isUpdateSuccess","data","isUpdateData","useUpdateShppingDeliveryCarriersMutation","useEffect","handleEditClick","async","rowIndex","_data$carrier","req","isPrimary","accountNumber","customerDeliveryCarrierId","carrierId","carrier","value","handlingFee","carrierName","newGridData","errorMessage","includes","ToastService","warning","success","_jsx","className","children","CardSection","cardTitle","rightButton","buttonClassName","buttonText","textWithIcon","iconImg","AppIcons","PlusIcon","titleButtonClick","FinalMolGrid","ref","configuration","AccountGridConfig","allowPagination","onActionChange","isLoading","onRowDataUpdate","onRowDataDelete","onColumnChange","handleGridCheckBoxChange","fieldName","newRowData","JSON","stringify"],"sourceRoot":""}