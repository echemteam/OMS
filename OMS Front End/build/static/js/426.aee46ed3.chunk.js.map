{"version":3,"file":"static/js/426.aee46ed3.chunk.js","mappings":"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","sources":["common/features/component/ExistingInfo/Config/Existing.data.js","common/features/component/ExistingInfo/ExistingCustomerSupplierInfo.js","common/features/component/ExistingInfo/ValidateCustomerSupplierInfo.js","pages/customerDetail/feature/customerBasicDetail/AddEditCustomerBasicDetail.js","pages/customerDetail/feature/customerBasicDetail/CustomerBasicDetail.js","pages/customerDetail/feature/customerBasicDetail/config/CustomerBasicDetail.data.js","pages/customerDetail/feature/customerBasicDetail/config/TaxIdValidator.js","utils/CustomerSupplier/CustomerSupplierUtils.js","utils/ResponsibleUser/validateRUser.js","utils/StatusColors/StatusColors.js"],"sourcesContent":["import { GridColumnType } from \"../../../../../data/gridColumnType\";\r\nimport { getLabelClass } from \"../../../../../utils/StatusColors/StatusColors\";\r\n\r\nexport const basicInfoData = {\r\n    columns: [\r\n        {\r\n            name: \"Search Match (%)\",\r\n            fieldName: \"matchPercentage\",\r\n            colType: GridColumnType.CUSTOM,\r\n            colStyle: {\r\n                width: \"10%\",\r\n            },\r\n            renderCustomCol: (rowData) => {\r\n                return (\r\n                    <>\r\n                        {rowData?.matchPercentage ? `${rowData.matchPercentage} %` : 'N/A'}\r\n                    </>\r\n                );\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Name\",\r\n            fieldName: \"name\",\r\n            colStyle: {\r\n                width: \"20%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Tax Id\",\r\n            fieldName: \"taxId\",\r\n            colStyle: {\r\n                width: \"10%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Country\",\r\n            fieldName: \"countryName\",\r\n            colStyle: {\r\n                width: \"15%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n\r\n        {\r\n            name: \"Email\",\r\n            fieldName: \"emailAddress\",\r\n            colStyle: {\r\n                width: \"15%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Group Type\",\r\n            fieldName: \"groupType\",\r\n            colStyle: {\r\n                width: \"15%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Status\",\r\n            fieldName: \"status\",\r\n            allowShort: false,\r\n            colType: GridColumnType.LABLE,\r\n            colStyle: {\r\n                width: \"14%\",\r\n            },\r\n            colSettings: {\r\n                valueField: \"status\",\r\n                getLableClass: getLabelClass,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: \"Action\",\r\n            colStyle: {\r\n                width: \"8%\",\r\n            },\r\n            colType: GridColumnType.ACTION,\r\n            defaultAction: {\r\n                allowEdit: true,\r\n                allowDisable: false,\r\n            },\r\n        },\r\n    ],\r\n};\r\n\r\nexport const OrderBasicInfoData = {\r\n    columns: [\r\n        {\r\n            name: \"Customer Name\",\r\n            fieldName: \"customerName\",\r\n            colStyle: {\r\n                width: \"25%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Po Number\",\r\n            fieldName: \"poNumber\",\r\n            colStyle: {\r\n                width: \"25%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Order Received Date\",\r\n            colStyle: {\r\n                width: \"25%\",\r\n            },\r\n            fieldName: \"orderReceivedDate\",\r\n            colType: GridColumnType.DATE,\r\n            colSettings: {\r\n                isUTC: true,\r\n                format: \"MM/DD/YYYY hh:mm A \",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n\r\n        {\r\n            name: \"Action\",\r\n            colStyle: {\r\n                width: \"25%\",\r\n                textAlign: \"center\",\r\n                justifyContent: \"center\"\r\n            },\r\n            colType: GridColumnType.ACTION,\r\n            defaultAction: {\r\n                allowEdit: true,\r\n                allowDisable: false,\r\n            },\r\n        },\r\n    ],\r\n};\r\n\r\nexport const validateNameEmailWebsiteGrid = {\r\n    columns: [\r\n\r\n        {\r\n            name: \"Name\",\r\n            fieldName: \"name\",\r\n            colStyle: {\r\n                width: \"10%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Tax Id\",\r\n            fieldName: \"taxId\",\r\n            colStyle: {\r\n                width: \"10%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Website\",\r\n            fieldName: \"website\",\r\n            colStyle: {\r\n                width: \"10%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        // {\r\n        //     name: \"Country\",\r\n        //     fieldName: \"countryName\",\r\n        //     colStyle: {\r\n        //         width: \"15%\",\r\n        //     },\r\n        // },\r\n\r\n        {\r\n            name: \"Email\",\r\n            fieldName: \"emailAddress\",\r\n            colStyle: {\r\n                width: \"15%\",\r\n            },\r\n        },\r\n        {\r\n            name: \"Reason\",\r\n            fieldName: \"reason\",\r\n            colStyle: {\r\n                width: \"30%\",\r\n            },\r\n        },\r\n        {\r\n            name: \"Status\",\r\n            fieldName: \"status\",\r\n            allowShort: false,\r\n            colType: GridColumnType.LABLE,\r\n            colStyle: {\r\n                width: \"12%\",\r\n            },\r\n            colSettings: {\r\n                valueField: \"status\",\r\n                getLableClass: getLabelClass,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: \"Action\",\r\n            colStyle: {\r\n                width: \"8%\",\r\n            },\r\n            colType: GridColumnType.ACTION,\r\n            defaultAction: {\r\n                allowEdit: true,\r\n                allowDisable: false,\r\n            },\r\n        },\r\n    ],\r\n};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n//** Libs's */\r\nimport { OrderBasicInfoData, basicInfoData } from './Config/Existing.data';\r\nimport CardSection from '../../../../components/ui/card/CardSection';\r\nimport SidebarModel from '../../../../components/ui/sidebarModel/SidebarModel';\r\n//** Service's */\r\nimport { encryptUrlData } from '../../../../services/CryptoService';\r\nimport ToastService from '../../../../services/toastService/ToastService';\r\nimport { ErrorMessage } from '../../../../data/appMessages';\r\nimport FinalMolGrid from '../../../../components/FinalMolGrid/FinalMolGrid';\r\n\r\nconst ExistingCustomerSupplierInfo = forwardRef(({ parentRef, isSupplier, getExistingInfoByName, isOrderManage }) => {\r\n\r\n    //** State */\r\n    const molGridRef = useRef();\r\n    const [isExistingModel, setIsExistingModel] = useState(false);\r\n    const [existingInfoData, setExistingInfoData] = useState([]);\r\n    const [isClickOpenModle, setIsClickOpenModle] = useState(false);\r\n\r\n    //** API Call's */\r\n    const [checkExistingInformation, { isFetching: isGetSupplierDetailsBySupplierNameFetching, isSuccess: isGetSupplierDetailsBySupplierNameSucess,\r\n        data: isGetSupplierDetailsBySupplierNameData, }] = getExistingInfoByName();\r\n\r\n    //** UseEffect's */\r\n    useEffect(() => {\r\n        setIsClickOpenModle(false);\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!isGetSupplierDetailsBySupplierNameFetching && isGetSupplierDetailsBySupplierNameSucess && isGetSupplierDetailsBySupplierNameData) {\r\n            if (isClickOpenModle) {\r\n                if (isGetSupplierDetailsBySupplierNameData.length > 0) {\r\n                    setIsExistingModel(true);\r\n                    setExistingInfoData(isGetSupplierDetailsBySupplierNameData);\r\n                } else {\r\n                    ToastService.info(ErrorMessage.NoFound);\r\n                }\r\n            }\r\n        }\r\n    }, [isGetSupplierDetailsBySupplierNameFetching, isGetSupplierDetailsBySupplierNameSucess, isGetSupplierDetailsBySupplierNameData]);\r\n\r\n    //** Handle Function's */\r\n    const handleEditClick = (data) => {\r\n        let url;\r\n        if (!isSupplier) {\r\n            url = `/CustomerDetails/${encryptUrlData(data.customerId)}`;\r\n        } else {\r\n            url = `/SupplierDetails/${encryptUrlData(data.supplierId)}`;\r\n        }\r\n        window.open(url, \"_blank\");\r\n    };\r\n    const onHandleExistingInfo = (name) => {\r\n        checkExistingInformation(name);\r\n        setIsClickOpenModle(true);\r\n    };\r\n\r\n    //** Action Handler */\r\n    const actionHandler = {\r\n        EDIT: handleEditClick,\r\n    };\r\n\r\n    const sidebarClose = () => {\r\n        setIsExistingModel(false);\r\n        setIsClickOpenModle(false);\r\n        // setIsDialogOpen(false);\r\n    }\r\n\r\n    //** Use Imperative Handle */\r\n    useImperativeHandle(parentRef, () => ({\r\n        callChildFunction: onHandleExistingInfo\r\n    }));\r\n\r\n    return (\r\n        <SidebarModel modalTitle={isOrderManage ? \"Order Information\" : !isSupplier ? \"Existing Customer Information\" : \" Existing Supplier Information\"} contentClass=\"content-75 basic-info-model\"\r\n            onClose={sidebarClose} isOpen={isExistingModel}>\r\n            <div className='pop-up-input-btn mt-3'>\r\n                <CardSection>\r\n                    <div className=\"row input-list-button\">\r\n                        <div className=\"col-lg-12 table-striped\">\r\n                            <FinalMolGrid\r\n                                ref={molGridRef}\r\n                                configuration={isOrderManage ? OrderBasicInfoData : basicInfoData}\r\n                                dataSource={existingInfoData}\r\n                                onActionChange={actionHandler}\r\n                                isLoading={isGetSupplierDetailsBySupplierNameFetching} />\r\n                        </div>\r\n                    </div>\r\n                </CardSection>\r\n            </div>\r\n        </SidebarModel>\r\n    )\r\n});\r\n\r\nExistingCustomerSupplierInfo.propTypes = {\r\n    parentRef: PropTypes.shape({\r\n        current: PropTypes.shape({\r\n            callChildFunction: PropTypes.func\r\n        })\r\n    }).isRequired,\r\n    isSupplier: PropTypes.bool.isRequired,\r\n    getExistingInfoByName: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ExistingCustomerSupplierInfo;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { forwardRef, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n//** Libs's */\r\nimport CardSection from '../../../../components/ui/card/CardSection';\r\nimport SidebarModel from '../../../../components/ui/sidebarModel/SidebarModel';\r\n//** Service's */\r\nimport { encryptUrlData } from '../../../../services/CryptoService';\r\nimport FinalMolGrid from '../../../../components/FinalMolGrid/FinalMolGrid';\r\nimport Buttons from '../../../../components/ui/button/Buttons';\r\n\r\nconst ValidateCustomerSupplierInfo = forwardRef(({ onAdd, isSupplier, onSidebarClose, isModalOpen, gridCnfiguration, gridData, isGridLoading }) => {\r\n\r\n    //** State */\r\n    const molGridRef = useRef();\r\n    const [isOpen, setIsOpen] = useState(isModalOpen);\r\n\r\n    const handleEditClick = (data) => {\r\n        let url;\r\n        if (!isSupplier) {\r\n            url = `/CustomerDetails/${encryptUrlData(data.customerId)}`;\r\n        } else {\r\n            url = `/SupplierDetails/${encryptUrlData(data.supplierId)}`;\r\n        }\r\n        window.open(url, \"_blank\");\r\n    };\r\n\r\n\r\n\r\n    const actionHandler = {\r\n        EDIT: handleEditClick,\r\n    };\r\n\r\n    const sidebarClose = () => {\r\n        setIsOpen(false);\r\n    }\r\n\r\n    const onAddData = () => {\r\n        onAdd();\r\n        setIsOpen(false);\r\n    }\r\n\r\n    return (\r\n        <SidebarModel\r\n            modalTitle=\"Matching Details\"\r\n            contentClass=\"content-80\"\r\n            onClose={sidebarClose} isOpen={isOpen}>\r\n            <div className='pop-up-input-btn mt-3'>\r\n                <CardSection>\r\n                    <div className=\"row input-list-button\">\r\n                        <div className=\"col-lg-12 table-striped\">\r\n                            <FinalMolGrid\r\n                                ref={molGridRef}\r\n                                configuration={gridCnfiguration}\r\n                                dataSource={gridData}\r\n                                onActionChange={actionHandler}\r\n                                isLoading={isGridLoading} />\r\n                        </div>\r\n                    </div>\r\n                </CardSection>\r\n                <div className='d-flex justify-content-end'>\r\n                    <Buttons\r\n                        buttonTypeClassName=\"theme-button mr-5\"\r\n                        buttonText=\"Create a customer\"\r\n                        onClick={onAddData}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </SidebarModel>\r\n    )\r\n});\r\n\r\nValidateCustomerSupplierInfo.propTypes = {\r\n    // parentRef: PropTypes.shape({\r\n    //     current: PropTypes.shape({\r\n    //         callChildFunction: PropTypes.func\r\n    //     })\r\n    // }).isRequired,\r\n    // isSupplier: PropTypes.bool.isRequired,\r\n    // getExistingInfoByName: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ValidateCustomerSupplierInfo;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useContext, useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\n//** Libs's */\r\nimport { securityKey } from \"../../../../data/SecurityKey\";\r\nimport Buttons from \"../../../../components/ui/button/Buttons\";\r\nimport { getTaxIdMinMaxLength } from \"./config/TaxIdValidator\";\r\nimport FormCreator from \"../../../../components/Forms/FormCreator\";\r\nimport CardSection from \"../../../../components/ui/card/CardSection\";\r\nimport BasicDetailContext from \"../../../../utils/ContextAPIs/Customer/BasicDetailContext\";\r\nimport { hasFunctionalPermission } from \"../../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\n//** Service's */\r\nimport ToastService from \"../../../../services/toastService/ToastService\";\r\nimport { useLazyGetAllIncotermQuery, useLazyGetAllUserQuery } from \"../../../../app/services/commonAPI\";\r\nimport { useAddEditCustomersBasicInformationMutation, useCheckCustomerNameExistMutation, useGetSearchCustomersDetailsByNameEmailWebsiteMutation, useLazyGetAllCountriesQuery, useLazyGetAllGroupTypesQuery, useLazyGetAllTerritoriesQuery, useLazyGetCustomersBasicInformationByIdQuery, useLazyGetCustomersDetailsByCutomerNameQuery } from \"../../../../app/services/basicdetailAPI\";\r\nimport { FieldSettingType } from \"../../../../utils/Enums/commonEnums\";\r\nimport { customerbasicData, excludingRoles } from \"./config/CustomerBasicDetail.data\";\r\nimport ExistingCustomerSupplierInfo from \"../../../../common/features/component/ExistingInfo/ExistingCustomerSupplierInfo\";\r\nimport { setDropDownOptionField, setFieldSetting } from \"../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport DataLoader from \"../../../../components/ui/dataLoader/DataLoader\";\r\nimport { removeFormFields } from \"../../../../utils/FormFields/RemoveFields/handleRemoveFields\";\r\nimport PropTypes from 'prop-types';\r\nimport SwalAlert from \"../../../../services/swalService/SwalService\";\r\nimport { validateResponsibleUserId } from \"../../../../utils/ResponsibleUser/validateRUser\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { isCustomerOrSupplierApprovedStatus } from \"../../../../utils/CustomerSupplier/CustomerSupplierUtils\";\r\nimport { SuccessMessage } from \"../../../../data/appMessages\";\r\nimport ValidateCustomerSupplierInfo from \"../../../../common/features/component/ExistingInfo/ValidateCustomerSupplierInfo\";\r\nimport { validateNameEmailWebsiteGrid } from \"../../../../common/features/component/ExistingInfo/Config/Existing.data\";\r\n\r\n\r\nconst AddEditCustomerBasicDetail = ({ keyId, getCustomerById, isOpen, onSidebarClose, isEditablePage, setSubCustomer, customerStatusId }) => {\r\n\r\n    //** State */\r\n    const parentRef = useRef();\r\n    const basicDetailRef = useRef();\r\n    const { confirm } = SwalAlert();\r\n    const [noteId, setNoteId] = useState(0);\r\n    const { formSetting } = customerbasicData;\r\n    const authState = useSelector((state) => state.auth);\r\n    const [customerName, setCustomerName] = useState('');\r\n    const [formData, setFormData] = useState(customerbasicData);\r\n    const [isButtonDisable, setIsButtonDisable] = useState(false);\r\n    const [isResponsibleUser, setIsResponsibleUser] = useState(false);\r\n    const [validateCustomerSupplierInfoModal, setValidateCustomerSupplierInfoModal] = useState(false);\r\n    const [validateCustomerSupplierData, setValidateCustomerSupplierData] = useState([]);\r\n    const [isRemoveFields, setIsRemoveFields] = useState(false);\r\n    const { nextRef, customerId, setCustomerId, moveNextPage, setCustomerCountryId } = useContext(BasicDetailContext);\r\n\r\n    //** API Call's */\r\n    const [getAllUser, { isSuccess: isGetAllUserSucess, data: allGetAllUserData }] = useLazyGetAllUserQuery();\r\n    const [getAllCountries, { isSuccess: isGetAllCountriesSucess, data: allGetAllCountriesData }] = useLazyGetAllCountriesQuery();\r\n    const [getAllGroupTypes, { isSuccess: isGetAllGroupTypesSucess, data: allGetAllGroupTypesData }] = useLazyGetAllGroupTypesQuery();\r\n    const [getAllTerritories, { isSuccess: isGetAllTerritoriesSucess, data: allGetAllTerritoriesData }] = useLazyGetAllTerritoriesQuery();\r\n    const [getAllIncoterm, { isSuccess: isGetAllIncotermSucess, data: allGetAllIncotermData }] = useLazyGetAllIncotermQuery();\r\n    const [CheckCustomerNameExist, { isSuccess: isCustomerNameExistSucess, data: isCustomerNameExistData, }] = useCheckCustomerNameExistMutation();\r\n    const [getCustomersBasicInformationById, { isFetching: isGetCustomersBasicInformationByIdFetching, isSuccess: isGetCustomersBasicInformationById,\r\n        data: GetCustomersBasicInformationByIdData }] = useLazyGetCustomersBasicInformationByIdQuery();\r\n    const [addEditCustomersBasicInformation, { isLoading: isAddEditCustomersBasicInformationLoading, isSuccess: isAddEditCustomersBasicInformationSuccess,\r\n        data: isAddEditCustomersBasicInformationData }] = useAddEditCustomersBasicInformationMutation();\r\n    const [validateCustomerNameEmailWebsite, { isSuccess: isValidateCustomerNameEmailWebsiteSucess, data: isValidateCustomerNameEmailWebsiteData, isLoading }] = useGetSearchCustomersDetailsByNameEmailWebsiteMutation();\r\n\r\n    //** Security Key */\r\n    const hasEditPermission = hasFunctionalPermission(securityKey.EDITBASICCUSTOMERDETAILS);\r\n\r\n    //** UseEffect's */\r\n    useEffect(() => {\r\n        if (isEditablePage) {\r\n            if (!isResponsibleUser) {\r\n                if (hasEditPermission.isViewOnly === true) {\r\n                    formSetting.isViewOnly = true;\r\n                    setIsButtonDisable(true);\r\n                    setFieldSetting(formData, 'responsibleUserId', FieldSettingType.DISABLED, true);\r\n                } else if (hasEditPermission.isEditable === true) {\r\n                    formSetting.isViewOnly = false;\r\n                    setIsButtonDisable(false);\r\n                    setFieldSetting(formData, 'responsibleUserId', FieldSettingType.DISABLED, false);\r\n                } else {\r\n                    formSetting.isViewOnly = true;\r\n                    setIsButtonDisable(true);\r\n                    setFieldSetting(formData, 'responsibleUserId', FieldSettingType.DISABLED, false);\r\n                }\r\n            }\r\n            if (isResponsibleUser) {\r\n                formSetting.isViewOnly = false;\r\n                setIsButtonDisable(false);\r\n                setFieldSetting(formData, 'responsibleUserId', FieldSettingType.DISABLED, true);\r\n            }\r\n        } else {\r\n            formSetting.isViewOnly = false;\r\n        }\r\n    }, [isEditablePage, hasEditPermission, isResponsibleUser]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await Promise.all([\r\n                getAllUser(),\r\n                getAllCountries(),\r\n                getAllGroupTypes(),\r\n                getAllTerritories(),\r\n                getAllIncoterm()\r\n            ]);\r\n            if (!isOpen) {\r\n                const modifyFormFields = removeFormFields(formData, ['responsibleUserId']);\r\n                setFormData(modifyFormFields);\r\n                setIsRemoveFields(true);\r\n                setFieldSetting(customerbasicData, 'name', FieldSettingType.ISINFOBUTTONVISIBLE, true);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [keyId, isOpen]);\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            if (customerId > 0) {\r\n                getCustomersBasicInformationById(customerId);\r\n                setFieldSetting(customerbasicData, 'name', FieldSettingType.ISINFOBUTTONVISIBLE);\r\n            }\r\n        }\r\n    }, [isOpen, customerId, getCustomersBasicInformationById]);\r\n\r\n    useEffect(() => {\r\n        if (isGetAllGroupTypesSucess && allGetAllGroupTypesData) {\r\n            setDropDownOptionField(allGetAllGroupTypesData, 'groupTypeId', 'type', customerbasicData, 'groupTypeId');\r\n        }\r\n        if (isGetAllUserSucess && allGetAllUserData) {\r\n            const filterData = allGetAllUserData.filter((item) => {\r\n                return (item.roleName === null || !excludingRoles.map((role) => role.toLowerCase()).includes(item.roleName.toLowerCase()));\r\n            });\r\n            // Remove duplicates based on fullName\r\n            const uniqueData = Array.from(new Map(filterData.map((item) => [item.fullName, item])).values());\r\n            setDropDownOptionField(uniqueData, 'userId', 'fullName', customerbasicData, 'responsibleUserId');\r\n        }\r\n        if (isGetAllCountriesSucess && allGetAllCountriesData) {\r\n            setDropDownOptionField(allGetAllCountriesData, 'countryId', 'name', customerbasicData, 'countryId');\r\n        }\r\n        if (isGetAllTerritoriesSucess && allGetAllTerritoriesData) {\r\n            setDropDownOptionField(allGetAllTerritoriesData, 'territoryId', 'territory', customerbasicData, 'territoryId');\r\n        }\r\n        if (isGetAllIncotermSucess && allGetAllIncotermData) {\r\n            setDropDownOptionField(allGetAllIncotermData, 'incotermId', 'incotermName', customerbasicData, 'incotermId');\r\n        }\r\n    }, [isGetAllGroupTypesSucess, allGetAllGroupTypesData, isGetAllUserSucess, allGetAllUserData, isGetAllCountriesSucess, allGetAllCountriesData,\r\n        isGetAllTerritoriesSucess, allGetAllTerritoriesData, isGetAllIncotermSucess, allGetAllIncotermData]);\r\n\r\n    useEffect(() => {\r\n        if (isAddEditCustomersBasicInformationSuccess && isAddEditCustomersBasicInformationData) {\r\n            if (isAddEditCustomersBasicInformationData.errorMessage.includes('exists')) {\r\n                ToastService.warning(isAddEditCustomersBasicInformationData.errorMessage);\r\n                return;\r\n            }\r\n            setNoteId(isAddEditCustomersBasicInformationData.noteId)\r\n            if (keyId > 0) {\r\n                getCustomerById()\r\n                onreset();\r\n                if (!isCustomerOrSupplierApprovedStatus(customerStatusId)) {\r\n                    ToastService.success(isAddEditCustomersBasicInformationData.errorMessage);\r\n                }\r\n            } else {\r\n                setCustomerId(isAddEditCustomersBasicInformationData.keyValue)\r\n                if (!isCustomerOrSupplierApprovedStatus(customerStatusId)) {\r\n                    ToastService.success(isAddEditCustomersBasicInformationData.errorMessage);\r\n                }\r\n                moveNextPage();\r\n            }\r\n        }\r\n    }, [isAddEditCustomersBasicInformationSuccess, isAddEditCustomersBasicInformationData]);\r\n\r\n    const onreset = () => {\r\n        onSidebarClose()\r\n        let restData = { ...customerbasicData };\r\n        restData.initialState = { ...formData };\r\n        setFormData(restData);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isGetCustomersBasicInformationById && GetCustomersBasicInformationByIdData && !isGetCustomersBasicInformationByIdFetching) {\r\n            if (isCustomerOrSupplierApprovedStatus(GetCustomersBasicInformationByIdData.statusId)) {\r\n                setFieldSetting(customerbasicData, 'name', FieldSettingType.DISABLED, true);\r\n                setFieldSetting(formData, 'taxId', 'isDisabled', true);\r\n            } else {\r\n                setFieldSetting(customerbasicData, 'name', FieldSettingType.DISABLED, false);\r\n                setFieldSetting(formData, 'taxId', 'isDisabled');\r\n            }\r\n            const newFrom = { ...customerbasicData };\r\n            const { formFields } = getTaxIdMinMaxLength(GetCustomersBasicInformationByIdData.countryId, customerbasicData.formFields, 'taxId');\r\n            newFrom.formFields = formFields;\r\n            newFrom.initialState = { ...GetCustomersBasicInformationByIdData, attachmentName: GetCustomersBasicInformationByIdData?.base64File };\r\n            newFrom.formFields = customerbasicData.formFields.filter(field => field.dataField !== \"note\" && field.dataField !== \"isSubCustomer\" && field.dataField !== \"responsibleUserId\");\r\n            newFrom.formFields = newFrom.formFields.filter((field) => field.dataField !== 'attachment' && field.dataField !== '');\r\n            setFormData(newFrom);\r\n            setCustomerCountryId(GetCustomersBasicInformationByIdData.countryId);\r\n            setIsResponsibleUser(validateResponsibleUserId(GetCustomersBasicInformationByIdData.responsibleUserId, authState?.user?.userID));\r\n        }\r\n    }, [isGetCustomersBasicInformationById, GetCustomersBasicInformationByIdData, isGetCustomersBasicInformationByIdFetching]);\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            customerId && getCustomersBasicInformationById(customerId);\r\n        }\r\n    }, [isOpen]);\r\n\r\n    useImperativeHandle(nextRef, () => ({\r\n        handleAddBasicDetails,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (isValidateCustomerNameEmailWebsiteSucess && isValidateCustomerNameEmailWebsiteData) {\r\n            if (isValidateCustomerNameEmailWebsiteData && isValidateCustomerNameEmailWebsiteData.length > 0 && !customerId > 0) {\r\n                setValidateCustomerSupplierData(isValidateCustomerNameEmailWebsiteData);\r\n                setValidateCustomerSupplierInfoModal(true);\r\n            } else {\r\n                setValidateCustomerSupplierInfoModal(false);\r\n                addCustomerCountine();\r\n            }\r\n        }\r\n    }, [isValidateCustomerNameEmailWebsiteSucess, isValidateCustomerNameEmailWebsiteData]);\r\n\r\n    const handleAddBasicDetails = async () => {\r\n        let data = basicDetailRef.current.getFormData();\r\n        if (data) {\r\n            if (!isOpen) {\r\n                let req = {\r\n                    CustomerName: data?.name,\r\n                    Website: data?.website,\r\n                    EmailAddress: data?.emailAddress\r\n                }\r\n                await validateCustomerNameEmailWebsite(req).unwrap();\r\n            } else {\r\n                addCustomerCountine();\r\n            }\r\n        } else {\r\n            ToastService.warning('Please fill up all the required fields');\r\n        }\r\n    };\r\n\r\n    const addCustomerCountine = () => {\r\n        let data = basicDetailRef.current.getFormData();\r\n        setSubCustomer && setSubCustomer(data.isSubCustomer);\r\n        let countryId = data.countryId && typeof data.countryId === \"object\" ? data.countryId.value : data.countryId;\r\n        let req = {\r\n            ...data,\r\n            groupTypeId: data.groupTypeId && typeof data.groupTypeId === \"object\" ? data.groupTypeId.value : data.groupTypeId,\r\n            territoryId: data.territoryId && typeof data.territoryId === \"object\" ? data.territoryId.value : data.territoryId,\r\n            incotermId: data.incotermId && typeof data.incotermId === \"object\" ? data.incotermId.value : data.incotermId,\r\n            countryId: data.countryId && typeof data.countryId === \"object\" ? data.countryId.value : data.countryId,\r\n            responsibleUserId: data.responsibleUserId && typeof data.responsibleUserId === \"object\" ? data.responsibleUserId.value : data.responsibleUserId,\r\n            customerId: keyId ? keyId : customerId,\r\n            customerNoteId: noteId ? noteId : 0,\r\n            attachmentName: data.attachment ? data.attachment?.fileName : null,\r\n            base64File: data.attachment ? data.attachment?.base64Data : null,\r\n            storagePath: 'CustomerProfilePic'\r\n        };\r\n        if (data.taxId === \"\") {\r\n            let value = {\r\n                ...req,\r\n                responsibleUserId: data.responsibleUserId === \"\" ? 0 : data.responsibleUserId && typeof data.responsibleUserId === \"object\" ? data.responsibleUserId.value : data.responsibleUserId,\r\n            }\r\n            addEditCustomersBasicInformation(value);\r\n        } else {\r\n            if (data.taxId) {\r\n                const { message: validateTaxIdMessage, minLength, maxLength } = getTaxIdMinMaxLength(countryId ? countryId : 0, customerbasicData.formFields, 'taxId');\r\n                if (data.taxId.length >= minLength || data.taxId.length <= maxLength) {\r\n                    let value = {\r\n                        ...req,\r\n                        attachmentName: data.attachment ? data.attachment?.fileName : null,\r\n                        base64File: data.attachment ? data.attachment?.base64Data : null,\r\n                        storagePath: 'CustomerProfilePic',\r\n                        responsibleUserId: data.responsibleUserId === \"\" ? 0 : data.responsibleUserId && typeof data.responsibleUserId === \"object\" ? data.responsibleUserId.value : data.responsibleUserId,\r\n                    }\r\n                    addEditCustomersBasicInformation(value);\r\n                } else {\r\n                    ToastService.warning(validateTaxIdMessage);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleValidateTextId = (data, dataField) => {\r\n        if (dataField === 'countryId') {\r\n            const { formFields } = getTaxIdMinMaxLength(data.value, customerbasicData.formFields, 'taxId');\r\n            const updatedForm = { ...formData };\r\n            updatedForm.formFields = formFields;\r\n            if (isOpen) {\r\n                updatedForm.formFields = customerbasicData.formFields.filter(field => field.dataField !== \"note\" && field.dataField !== \"isSubCustomer\" && field.dataField !== \"responsibleUserId\");\r\n            } else {\r\n                updatedForm.formFields = customerbasicData.formFields.filter(field => field.dataField !== \"responsibleUserId\");\r\n            }\r\n            setFormData(updatedForm);\r\n        }\r\n    }\r\n    const handleCheckboxchange = (data, datafield) => {\r\n        if (customerId) {\r\n            if (datafield === \"isBuyingForThirdParty\" && GetCustomersBasicInformationByIdData.isBuyingForThirdParty === true) {\r\n                confirm(\r\n                    \"Warning?\",\r\n                    SuccessMessage.Confirm_Update.replace(\"{0}\", \"Is Buying For ThirdParty\"),\r\n                    \"Yes\",\r\n                    \"Cancel\"\r\n                ).then((confirmed) => {\r\n                    if (confirmed) {\r\n                        let request = {\r\n                            ...formData,\r\n                            isBuyingForThirdParty: data,\r\n                        };\r\n                        setFormData(request);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    const formActionHandler = {\r\n        DDL_CHANGED: handleValidateTextId,\r\n        CHECK_CHANGE: handleCheckboxchange\r\n    };\r\n    const handleInputFields = (data, dataField) => {\r\n        if (dataField === 'name') {\r\n            const newName = data.replace(/[.,]/g, '')\r\n            const trimName = newName.replace(/\\s+/g, ' ').trim();\r\n            setCustomerName(trimName);\r\n            basicDetailRef.current.updateFormFieldValue({\r\n                name: newName\r\n            });\r\n        }\r\n        if (dataField === 'website') {\r\n            const trimmedUrl = data.replace(/\\/$/, \"\");\r\n            const newUrl = trimmedUrl.replace(/^(https?:\\/\\/)?www\\./, '$1');\r\n            basicDetailRef.current.updateFormFieldValue({\r\n                website: newUrl\r\n            });\r\n        }\r\n    }\r\n    const formInputHandler = {\r\n        INPUT_CHANGED: handleInputFields,\r\n    }\r\n    const handleInputGroupButton = () => {\r\n        if (customerName !== '') {\r\n            let request = {\r\n                name: customerName\r\n            }\r\n            CheckCustomerNameExist(request);\r\n        }\r\n    }\r\n    const handleExistingInfo = () => {\r\n        if (customerName !== '' && customerName.length >= 3) {\r\n            if (parentRef.current) {\r\n                parentRef.current.callChildFunction(customerName);\r\n            }\r\n        } else {\r\n            ToastService.warning('Please enter at least three characters.');\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (isCustomerNameExistSucess && isCustomerNameExistData) {\r\n            if (isCustomerNameExistData.errorMessage.includes('exists')) {\r\n                ToastService.warning(isCustomerNameExistData.errorMessage);\r\n                return;\r\n            }\r\n            ToastService.info(isCustomerNameExistData.errorMessage);\r\n        }\r\n    }, [isCustomerNameExistSucess, isCustomerNameExistData]);\r\n\r\n    return (\r\n        <div className=\"basic-info-sec half-sec\">\r\n            <CardSection buttonClassName=\"theme-button\">\r\n                <div className=\"row basic-info-step\">\r\n                    {!isGetCustomersBasicInformationByIdFetching && isRemoveFields ?\r\n                        <FormCreator\r\n                            config={formData}\r\n                            ref={basicDetailRef}\r\n                            {...formData}\r\n                            onActionChange={formActionHandler}\r\n                            onCheckBoxChange={formActionHandler}\r\n                            onInputChange={formInputHandler}\r\n                            handleInputGroupButton={handleInputGroupButton}\r\n                            handleInputShowInfo={handleExistingInfo}\r\n\r\n                        />\r\n                        : <DataLoader />}\r\n                </div>\r\n\r\n                {isOpen &&\r\n                    <div className=\"col-md-12\">\r\n                        <div className=\"d-flex align-item-end justify-content-end\">\r\n                            <Buttons\r\n                                buttonTypeClassName=\"theme-button\"\r\n                                buttonText=\"Update\"\r\n                                onClick={handleAddBasicDetails}\r\n                                isLoading={isAddEditCustomersBasicInformationLoading}\r\n                                isDisable={isButtonDisable}\r\n                            />\r\n                            <Buttons\r\n                                buttonTypeClassName=\"dark-btn ml-5\"\r\n                                buttonText=\"Cancel\"\r\n                                onClick={onSidebarClose}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                }\r\n\r\n            </CardSection>\r\n\r\n            {!isOpen ?\r\n                <ExistingCustomerSupplierInfo parentRef={parentRef} isOrderManage={false} isSupplier={false}\r\n                    getExistingInfoByName={useLazyGetCustomersDetailsByCutomerNameQuery} />\r\n                : null}\r\n\r\n            {validateCustomerSupplierInfoModal && isValidateCustomerNameEmailWebsiteSucess ?\r\n                <ValidateCustomerSupplierInfo\r\n                    isSupplier={false}\r\n                    isModalOpen={validateCustomerSupplierInfoModal}\r\n                    gridCnfiguration={validateNameEmailWebsiteGrid}\r\n                    gridData={validateCustomerSupplierData}\r\n                    isGridLoading={isLoading}\r\n                    onAdd={addCustomerCountine}\r\n                />\r\n                : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nAddEditCustomerBasicDetail.propTypes = {\r\n    keyId: PropTypes.number,\r\n    getCustomerById: PropTypes.func,\r\n    isOpen: PropTypes.bool,\r\n    onSidebarClose: PropTypes.func,\r\n    isEditablePage: PropTypes.bool,\r\n};\r\nexport default AddEditCustomerBasicDetail;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React from \"react\";\r\n//** Lib's */\r\nimport CardSection from \"../../../../components/ui/card/CardSection\";\r\nimport AddEditCustomerBasicDetail from \"./AddEditCustomerBasicDetail\";\r\nimport PropTypes from \"prop-types\";\r\n//** Component */\r\n\r\nconst CustomerBasicDetail = (props) => {\r\n  const { isOpen, getCustomerById, onSidebarClose, keyId, isEditablePage, setSubCustomer,customerStatusId } = props;\r\n\r\n  return (\r\n    <div className=\"basic-info-sec half-sec\">\r\n      <CardSection buttonClassName=\"theme-button\">\r\n        <AddEditCustomerBasicDetail\r\n          keyId={keyId}\r\n          getCustomerById={getCustomerById}\r\n          isOpen={isOpen}\r\n          isEditablePage={isEditablePage}\r\n          onSidebarClose={onSidebarClose}\r\n          setSubCustomer={setSubCustomer}\r\n          customerStatusId={customerStatusId}\r\n        />\r\n      </CardSection>\r\n    </div>\r\n  );\r\n};\r\n\r\nCustomerBasicDetail.propTypes = {\r\n  isOpen: PropTypes.bool,\r\n  getCustomerById: PropTypes.func,\r\n  onSidebarClose: PropTypes.func,\r\n  keyId: PropTypes.number,\r\n};\r\nexport default CustomerBasicDetail;\r\n","import { SuccessMessage } from \"../../../../../data/appMessages\";\r\nimport { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\nimport { GridColumnType } from \"../../../../../data/gridColumnType\";\r\nimport { getLabelClass } from \"../../../../../utils/StatusColors/StatusColors\";\r\n\r\nexport const excludingRoles = [\"Admin\", \"manager\"];\r\n\r\nexport const customerbasicData = {\r\n  initialState: {\r\n    name: \"\",\r\n    groupTypeId: 1,\r\n    countryId: 233,\r\n    territoryId: 2,\r\n    emailAddress: \"\",\r\n    website: \"\",\r\n    note: \"\",\r\n    isSubCustomer: false,\r\n    taxId: \"\",\r\n    isBuyingForThirdParty: false,\r\n    responsibleUserId: \"\",\r\n    customerNoteId: \"\",\r\n    incotermId: 11,\r\n    attachment: \"\",\r\n    base64File: \"\",\r\n    storagePath: \"\",\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"attachment\",\r\n      lable: \"Customer Logo \",\r\n      Field_Name: \"Attachment\",\r\n      fieldType: FormFieldTypes.IMAGE,\r\n      dataField: \"attachment\",\r\n      fieldSetting: {\r\n        placeholder: \"Upload Attachment\",\r\n        allowSpace: true,\r\n        isImageUpload: true,\r\n        isButtonVisible: true,\r\n        isCustomButtonVisible: false,\r\n        acceptedFiles: \".png , .jpg \",\r\n      },\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-4 col-xl-4 col-md-4 col-12 mb-input mb-0 custom-file-upload-section validation-image-uploader customer-logo-sec\",\r\n      },\r\n    },\r\n    // {\r\n    //   id: \"\",\r\n    //   lable: \"\",\r\n    //   Field_Name: \"\",\r\n    //   dataField: \"\",\r\n    //   style: {\r\n    //     containerCss: \"col-xxl-4 col-xl-4 col-md-4 col-4 col-4 remove-line\",\r\n    //   },\r\n    // },\r\n    {\r\n      id: \"name\",\r\n      lable: \"Customer Name \",\r\n      Field_Name: \"Customer Name\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"name\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Customer Name\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n        exemptBoundarySpaces: true,\r\n      },\r\n      validation: [{ type: \"require\" }, { type: \"uniqueName\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-8 col-xl-8 col-md-8 col-12 mb-input\",\r\n      },\r\n      inputButtonGroupConfig: {\r\n        isPrimaryButtonVisible: false,\r\n        // primaryButtonText: 'Verify',\r\n        infoButtonConfig: {\r\n          isInfoButtonVisible: true,\r\n          infoButtonIcon: \"fa-search\",\r\n          infoButtonTooltip: \"Customer Information\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      id: \"emailAddress\",\r\n      lable: \"Email \",\r\n      Field_Name: \"Email\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"emailAddress\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Email\",\r\n        allowSpace: false,\r\n        maxLength: 65,\r\n        exemptBoundarySpaces: true,\r\n      },\r\n      validation: [{ type: \"require\" }, { type: \"email\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"website\",\r\n      lable: \"Website \",\r\n      Field_Name: \"Website\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"website\",\r\n      fieldSetting: {\r\n        placeholder: \"https://www.xyz.com\",\r\n        allowSpace: false,\r\n        maxLength: 250,\r\n      },\r\n      validation: [{ type: \"require\" }, { type: \"website\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n\r\n    {\r\n      id: \"groupTypeId\",\r\n      lable: \"Group Type \",\r\n      Field_Name: \"Group Type\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"groupTypeId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Group Type\",\r\n        isEnableOnChange: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-4 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n\r\n    {\r\n      id: \"countryId\",\r\n      lable: \"Country \",\r\n      Field_Name: \"Country\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"countryId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Country\",\r\n        isEnableOnChange: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-4 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"territoryId\",\r\n      lable: \"Territory \",\r\n      Field_Name: \"Territory\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"territoryId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Territory\",\r\n        isEnableOnChange: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-4 col-md-4 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"incotermId\",\r\n      lable: \"Incoterm\",\r\n      Field_Name: \"Incoterm\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"incotermId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Incoterm\",\r\n        isEnableOnChange: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-4 col-md-4 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"taxId\",\r\n      lable: \"Tax Id \",\r\n      Field_Name: \"Tax Id\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"taxId\",\r\n      fieldSetting: {\r\n        placeholder: \"Tax Id\",\r\n        allowSpace: false,\r\n        minLength: 10,\r\n        maxLength: 10,\r\n        exemptBoundarySpaces: true,\r\n      },\r\n      inputIcon: {\r\n        isIconShow: true,\r\n        faIcon: \"fa-info-circle\",\r\n        message: SuccessMessage.DefaultUSATaxId,\r\n      },\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-4 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"responsibleUserId\",\r\n      lable: \"Responsible User \",\r\n      Field_Name: \"Responsible User\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"responsibleUserId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Responsible User\",\r\n        isEnableOnChange: true,\r\n        isDisabled: false,\r\n      },\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-4 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"isBuyingForThirdParty\",\r\n      lable: \"Is Buying for Third Party\",\r\n      Field_Name: \"Is Buying for Third Party\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isBuyingForThirdParty\",\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-2 col-xl-2 col-md-3 col-12 pt-2 mb-input margin-top-checkbox mt-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"isSubCustomer\",\r\n      lable: \"Is Sub Customer\",\r\n      Field_Name: \"Is Sub Customer\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isSubCustomer\",\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-2 col-xl-2 col-md-3 col-12 md-pt-0 pt-2 mb-input margin-top-checkbox margin-left0-checkbox mt-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"note\",\r\n      lable: \"Notes \",\r\n      Field_Name: \"Notes\",\r\n      fieldType: FormFieldTypes.CKEDITOR,\r\n      dataField: \"note\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Notes\",\r\n        maxLength: 1000,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-5 col-xl-5 col-md-12 col-12 mb-input mb-0\",\r\n      },\r\n    },\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false,\r\n  },\r\n};\r\n\r\nexport const basicInfoData = {\r\n  columns: [\r\n    {\r\n      name: \"Name\",\r\n      fieldName: \"name\",\r\n      width: \"15%\",\r\n      // allowShort: true,\r\n    },\r\n    {\r\n      name: \"Tax Id\",\r\n      fieldName: \"taxId\",\r\n      width: \"15%\",\r\n      // allowShort: true,\r\n    },\r\n    {\r\n      name: \"Country\",\r\n      fieldName: \"countryName\",\r\n      width: \"15%\",\r\n      // allowShort: true,\r\n    },\r\n\r\n    {\r\n      name: \"Email\",\r\n      fieldName: \"emailAddress\",\r\n      width: \"15%\",\r\n      // allowShort: true,\r\n    },\r\n    {\r\n      name: \"Group Type\",\r\n      fieldName: \"groupType\",\r\n      width: \"15%\",\r\n      // allowShort: true,\r\n    },\r\n    {\r\n      name: \"Status\",\r\n      fieldName: \"status\",\r\n      allowShort: false,\r\n      colType: GridColumnType.LABLE,\r\n      width: \"15%\",\r\n      colSettings: {\r\n        valueField: \"status\",\r\n        getLableClass: getLabelClass,\r\n      },\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      width: \"10%\",\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n        allowDisable: false,\r\n      },\r\n    },\r\n  ],\r\n};\r\n","import { SuccessMessage } from \"../../../../../data/appMessages\";\r\n\r\nexport const getTaxIdMinMaxLength = (countryId, formFields, formFieldsId) => {\r\n    let minLength, maxLength, message, formField;\r\n\r\n    switch (countryId) {\r\n        case 1:\r\n            minLength = 3;\r\n            maxLength = 10;\r\n            break;\r\n        case 2:\r\n            minLength = 10;\r\n            maxLength = 15;\r\n            break;\r\n        case 82: //** GE\r\n            minLength = 11;\r\n            maxLength = 11;\r\n            break;\r\n        case 233: //** US\r\n            minLength = 10;\r\n            maxLength = 10;\r\n            break;\r\n        default:\r\n            minLength = 0;\r\n            maxLength = 20;\r\n            break;\r\n    }\r\n\r\n    if (minLength !== undefined && maxLength !== undefined) {\r\n        message = SuccessMessage.TaxId.replace(\"{0}\", minLength).replace(\"{1}\", maxLength);\r\n        formField = formFields.find((data) => data.id === formFieldsId);\r\n        if (formField) {\r\n            // const validation = formField.validation;\r\n            formField.fieldSetting.minLength = minLength;\r\n            formField.fieldSetting.maxLength = maxLength;\r\n            formField.inputIcon.message = SuccessMessage.TaxId.replace(\"{0}\", minLength).replace(\"{1}\", maxLength);\r\n            // validation.minLength = minLength;\r\n            // validation.maxLength = maxLength;\r\n        }\r\n    }\r\n    return { message, maxLength, minLength, formFields };\r\n}\r\n","import { CustomerSupplierStatus } from \"../Enums/commonEnums\";\r\n\r\nexport const isCustomerOrSupplierApprovedStatus = (status) => {\r\n    // It's For Customer OR Supplier\r\n    return status === CustomerSupplierStatus.APPROVED;\r\n}","/**\r\n * Checks if a user ID is included in a comma-separated string of IDs.\r\n * @param {string} userIdsString - Comma-separated string of IDs.\r\n * @param {number} loginUserId - The login user ID to check for.\r\n * @returns {boolean} - Returns true if the login user ID is included in the string, otherwise false.\r\n */\r\nexport const validateResponsibleUserId = (userIdsString, loginUserId) => {\r\n    if (!userIdsString || !loginUserId) return false;\r\n\r\n    const idsArray = userIdsString.toString().split(',').map(id => id.trim());\r\n    const loginUserIdStr = loginUserId.toString();\r\n    return idsArray.includes(loginUserIdStr);\r\n}","export const getLabelClass = (value) => {\r\n    switch (value) {\r\n      case \"Active\":\r\n        return \"status-btn badge-gradient-success\";\r\n      case \"Open\":\r\n        return \"status-btn badge-gradient-info\";\r\n      case \"In Active\":\r\n        return \"status-btn badge-gradient-danger\";\r\n      case \"Pending\":\r\n        return \"status-btn badge-gradient-Pending\";\r\n      case \"In progress\":\r\n        return \"status-btn badge-gradient-theme\";\r\n      case \"Submitted\":\r\n        return \"status-btn badge-gradient-Submitted\";\r\n      case \"Approved\":\r\n        return \"status-btn badge-gradient-Approved\";\r\n      case \"Freeze\":\r\n        return \"status-btn badge-gradient-Frozen\";\r\n      case \"Block\":\r\n        return \"status-btn badge-gradient-Blocked\";\r\n      case \"Reject\":\r\n        return \"status-btn badge-gradient-reject\";\r\n      case \"Disable\":\r\n        return \"status-btn badge-gradient-disabled\";\r\n      default:\r\n        return \"status-btn badge-gradient-info\";\r\n    }\r\n  };"],"names":["basicInfoData","columns","name","fieldName","colType","GridColumnType","CUSTOM","colStyle","width","renderCustomCol","rowData","_jsx","_Fragment","children","matchPercentage","allowShort","LABLE","colSettings","valueField","getLableClass","getLabelClass","ACTION","defaultAction","allowEdit","allowDisable","OrderBasicInfoData","DATE","isUTC","format","textAlign","justifyContent","validateNameEmailWebsiteGrid","forwardRef","_ref","parentRef","isSupplier","getExistingInfoByName","isOrderManage","molGridRef","useRef","isExistingModel","setIsExistingModel","useState","existingInfoData","setExistingInfoData","isClickOpenModle","setIsClickOpenModle","checkExistingInformation","isFetching","isGetSupplierDetailsBySupplierNameFetching","isSuccess","isGetSupplierDetailsBySupplierNameSucess","data","isGetSupplierDetailsBySupplierNameData","useEffect","length","ToastService","info","ErrorMessage","NoFound","onHandleExistingInfo","actionHandler","EDIT","url","encryptUrlData","supplierId","customerId","window","open","useImperativeHandle","callChildFunction","SidebarModel","modalTitle","contentClass","onClose","sidebarClose","isOpen","className","CardSection","FinalMolGrid","ref","configuration","dataSource","onActionChange","isLoading","onAdd","onSidebarClose","isModalOpen","gridCnfiguration","gridData","isGridLoading","setIsOpen","_jsxs","Buttons","buttonTypeClassName","buttonText","onClick","onAddData","keyId","getCustomerById","isEditablePage","setSubCustomer","customerStatusId","basicDetailRef","confirm","SwalAlert","noteId","setNoteId","formSetting","customerbasicData","authState","useSelector","state","auth","customerName","setCustomerName","formData","setFormData","isButtonDisable","setIsButtonDisable","isResponsibleUser","setIsResponsibleUser","validateCustomerSupplierInfoModal","setValidateCustomerSupplierInfoModal","validateCustomerSupplierData","setValidateCustomerSupplierData","isRemoveFields","setIsRemoveFields","nextRef","setCustomerId","moveNextPage","setCustomerCountryId","useContext","BasicDetailContext","getAllUser","isGetAllUserSucess","allGetAllUserData","useLazyGetAllUserQuery","getAllCountries","isGetAllCountriesSucess","allGetAllCountriesData","useLazyGetAllCountriesQuery","getAllGroupTypes","isGetAllGroupTypesSucess","allGetAllGroupTypesData","useLazyGetAllGroupTypesQuery","getAllTerritories","isGetAllTerritoriesSucess","allGetAllTerritoriesData","useLazyGetAllTerritoriesQuery","getAllIncoterm","isGetAllIncotermSucess","allGetAllIncotermData","useLazyGetAllIncotermQuery","CheckCustomerNameExist","isCustomerNameExistSucess","isCustomerNameExistData","useCheckCustomerNameExistMutation","getCustomersBasicInformationById","isGetCustomersBasicInformationByIdFetching","isGetCustomersBasicInformationById","GetCustomersBasicInformationByIdData","useLazyGetCustomersBasicInformationByIdQuery","addEditCustomersBasicInformation","isAddEditCustomersBasicInformationLoading","isAddEditCustomersBasicInformationSuccess","isAddEditCustomersBasicInformationData","useAddEditCustomersBasicInformationMutation","validateCustomerNameEmailWebsite","isValidateCustomerNameEmailWebsiteSucess","isValidateCustomerNameEmailWebsiteData","useGetSearchCustomersDetailsByNameEmailWebsiteMutation","hasEditPermission","hasFunctionalPermission","securityKey","EDITBASICCUSTOMERDETAILS","isViewOnly","setFieldSetting","FieldSettingType","DISABLED","isEditable","async","Promise","all","modifyFormFields","removeFormFields","ISINFOBUTTONVISIBLE","fetchData","setDropDownOptionField","filterData","filter","item","roleName","excludingRoles","map","role","toLowerCase","includes","uniqueData","Array","from","Map","fullName","values","errorMessage","warning","onreset","isCustomerOrSupplierApprovedStatus","success","keyValue","restData","initialState","_authState$user","statusId","newFrom","formFields","getTaxIdMinMaxLength","countryId","attachmentName","base64File","field","dataField","validateResponsibleUserId","responsibleUserId","user","userID","handleAddBasicDetails","addCustomerCountine","current","getFormData","req","CustomerName","Website","website","EmailAddress","emailAddress","unwrap","_data$attachment","_data$attachment2","isSubCustomer","value","groupTypeId","territoryId","incotermId","customerNoteId","attachment","fileName","base64Data","storagePath","taxId","message","validateTaxIdMessage","minLength","maxLength","_data$attachment3","_data$attachment4","formActionHandler","DDL_CHANGED","handleValidateTextId","updatedForm","CHECK_CHANGE","handleCheckboxchange","datafield","isBuyingForThirdParty","SuccessMessage","Confirm_Update","replace","then","confirmed","request","formInputHandler","INPUT_CHANGED","handleInputFields","newName","trimName","trim","updateFormFieldValue","newUrl","buttonClassName","FormCreator","config","onCheckBoxChange","onInputChange","handleInputGroupButton","handleInputShowInfo","handleExistingInfo","DataLoader","isDisable","ExistingCustomerSupplierInfo","useLazyGetCustomersDetailsByCutomerNameQuery","ValidateCustomerSupplierInfo","props","AddEditCustomerBasicDetail","note","id","lable","Field_Name","fieldType","FormFieldTypes","IMAGE","fieldSetting","placeholder","allowSpace","isImageUpload","isButtonVisible","isCustomButtonVisible","acceptedFiles","style","containerCss","INPUT","exemptBoundarySpaces","validation","type","inputButtonGroupConfig","isPrimaryButtonVisible","infoButtonConfig","isInfoButtonVisible","infoButtonIcon","infoButtonTooltip","SELECT","isEnableOnChange","inputIcon","isIconShow","faIcon","DefaultUSATaxId","isDisabled","CHECKBOX","CKEDITOR","formFieldsId","formField","undefined","TaxId","find","status","CustomerSupplierStatus","APPROVED","userIdsString","loginUserId","idsArray","toString","split","loginUserIdStr"],"sourceRoot":""}