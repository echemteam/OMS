{"version":3,"file":"static/js/1822.f16ab221.chunk.js","mappings":"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","sources":["pages/configuration/dictionary/config/Dictionary.Data.js","pages/configuration/dictionary/features/DictionaryList.js","pages/configuration/dictionary/features/AddEditDictionary.js","pages/configuration/dictionary/Dictionary.js"],"sourcesContent":["import { FormFieldTypes } from \"../../../../data/formFieldType\";\r\nimport { GridColumnType } from \"../../../../data/gridColumnType\";\r\n\r\nexport const dictionaryFormData = {\r\n  initialState: {\r\n    key: \"\",\r\n    value: \"\",\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"key\",\r\n      lable: \"Key \",\r\n      Field_Name: \"key\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"key\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Key\",\r\n        allowSpace: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-2 \",\r\n      },\r\n    },\r\n    {\r\n      id: \"value\",\r\n      lable: \"Value\",\r\n      Field_Name: \"Value\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"value\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Value\",\r\n        allowSpace: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-2\",\r\n      },\r\n    }, \r\n  ],\r\n}\r\nexport const DictionaryGridConfig = {\r\n  columns: [\r\n    {\r\n      name: \"Key\",\r\n      fieldName: \"key\",\r\n      colStyle: {\r\n        width: \"35%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Value\",\r\n      fieldName: \"value\",\r\n      colStyle: {\r\n        width: \"35%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      colStyle: {\r\n        width: \"30%\",\r\n      },\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n        allowDelete: true,\r\n      },\r\n    },\r\n  ],\r\n\r\n};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useEffect, useRef, useState , useImperativeHandle} from \"react\";\r\nimport { DictionaryGridConfig } from \"../config/Dictionary.Data\";\r\nimport ToastService from \"../../../../services/toastService/ToastService\";\r\nimport SwalAlert from \"../../../../services/swalService/SwalService\";\r\nimport FinalMolGrid from \"../../../../components/FinalMolGrid/FinalMolGrid\";\r\nimport { useDeleteDictionaryMutation, useGetAllDictionaryMutation } from \"../../../../app/services/dictionaryAPI\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DictionaryList = ({ handleEditClick, getDataRef  }) => {\r\n\r\n  const molGridRef = useRef();\r\n  const [listData, setListData] = useState([]);\r\n  const [totalRowCount, setTotalRowCount] = useState(0);\r\n  const { confirm } = SwalAlert();\r\n  const [deleteDictionary, { isSuccess: isDeleteDictionarySuccess, data: isDeleteDictionaryData },] = useDeleteDictionaryMutation();\r\n  const [GetAllDictionary, { isLoading: isDictionaryLoading, isSuccess: isDictionarySuccess, data: isDictionaryData },] = useGetAllDictionaryMutation();\r\n\r\n  useEffect(() => {\r\n    onGetData()\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isDictionarySuccess && isDictionaryData) {\r\n      if (isDictionaryData) {\r\n        setListData(isDictionaryData.dataSource);\r\n      }\r\n      if (isDictionaryData.totalRecord) {\r\n        setTotalRowCount(isDictionaryData.totalRecord);\r\n      }\r\n    }\r\n  }, [isDictionarySuccess, isDictionaryData]);\r\n\r\n  useEffect(() => {\r\n    if (isDeleteDictionarySuccess && isDeleteDictionaryData) {\r\n      ToastService.success(isDeleteDictionaryData.errorMessage);\r\n      const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n      handlePageChange(currentPageObject)\r\n    }\r\n  }, [isDeleteDictionarySuccess, isDeleteDictionaryData]);\r\n\r\n\r\n  const getLists = (pageObject, sortingString) => {\r\n    const request = {\r\n      pagination: {\r\n        pageNumber: pageObject.pageNumber,\r\n        pageSize: pageObject.pageSize,\r\n      },\r\n      filters: { searchText: \"\" },\r\n      sortString: sortingString,\r\n    };\r\n    GetAllDictionary(request);\r\n  };\r\n\r\n  const handlePageChange = (page) => {\r\n    getLists(page, molGridRef.current.generateSortingString());\r\n  };\r\n\r\n  const handleSorting = (shortString) => {\r\n    getLists(molGridRef.current.getCurrentPageObject(), shortString);\r\n  }\r\n  const onGetData = () => {\r\n\r\n    if (molGridRef.current) {\r\n      const defaultPageObject = molGridRef.current.getCurrentPageObject();\r\n      getLists(defaultPageObject, molGridRef.current.generateSortingString());\r\n    }\r\n  }\r\n\r\n  const handleDeleteClick = (data) => {\r\n    confirm(\"Delete?\", \"Are you sure you want to Delete?\", \"Delete\", \"Cancel\")\r\n      .then((confirmed) => {\r\n        if (confirmed) {\r\n          deleteDictionary(data.dictionaryId);\r\n        }\r\n      });\r\n  };\r\n\r\n  const actionHandler = {\r\n    EDIT: handleEditClick,\r\n    DELETE: handleDeleteClick,\r\n  };\r\n\r\n\r\n  useImperativeHandle(getDataRef, () => ({\r\n    callChildFunction: onGetData\r\n  }));\r\n  return (\r\n\r\n    <div className=\"row\">\r\n      <div className=\"col-md-12 table-striped\">\r\n        <FinalMolGrid\r\n          ref={molGridRef}\r\n          configuration={DictionaryGridConfig}\r\n          dataSource={listData}\r\n          allowPagination={true}\r\n          pagination={{\r\n            totalCount: totalRowCount,\r\n            pageSize: 25,\r\n            currentPage: 1,\r\n          }}\r\n          onPageChange={handlePageChange}\r\n          onSorting={handleSorting}\r\n          isLoading={isDictionaryLoading}\r\n          onActionChange={actionHandler}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nDictionaryList.propTypes = {\r\n  handleEditClick: PropTypes.func.isRequired,\r\n  getDataRef: PropTypes.shape({ current: PropTypes.any }).isRequired,\r\n  handleListData: PropTypes.func.isRequired,\r\n};\r\nexport default DictionaryList;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport FormCreator from \"../../../../components/Forms/FormCreator\";\r\nimport Buttons from \"../../../../components/ui/button/Buttons\";\r\nimport { onResetForm } from \"../../../../utils/FormFields/ResetForm/handleResetForm\";\r\nimport ToastService from \"../../../../services/toastService/ToastService\";\r\nimport { dictionaryFormData } from \"../config/Dictionary.Data\";\r\nimport { useAddEditDictionaryMutation, useLazyGetDictionaryByDictonaryIdQuery } from \"../../../../app/services/dictionaryAPI\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddEditDictionary = (props) => {\r\n  const dictionaryRef = useRef();\r\n  const dictionaryId = props.initData?.dictionaryId;\r\n  const [dictionaryData, setDictionaryData] = useState(dictionaryFormData);\r\n  const [addEditDictionary, { isLoading: isAddEditDictionaryLoading, isSuccess: isAddEditDictionarySuccess, data: addEditDictionaryData }] = useAddEditDictionaryMutation();\r\n  const [getDictionaryByDictonaryId, { isFetching: isGetDictionaryByDictonaryIdFetching, isSuccess: isGetDictionaryByDictonaryIdSuccess, data: isGetDictionaryByDictonaryIdData }] = useLazyGetDictionaryByDictonaryIdQuery();\r\n\r\n  useEffect(() => {\r\n    if (!isGetDictionaryByDictonaryIdFetching && isGetDictionaryByDictonaryIdSuccess && isGetDictionaryByDictonaryIdData  ) {\r\n        if (isGetDictionaryByDictonaryIdData) {\r\n            let formData = { ...dictionaryData };\r\n            formData.initialState = { \r\n              dictionaryId:isGetDictionaryByDictonaryIdData.dictionaryId,\r\n              key: isGetDictionaryByDictonaryIdData.key,\r\n              value: isGetDictionaryByDictonaryIdData.value,\r\n            };\r\n            setDictionaryData(formData);\r\n          }\r\n    }\r\n  }, [isGetDictionaryByDictonaryIdFetching,isGetDictionaryByDictonaryIdSuccess, isGetDictionaryByDictonaryIdData]);\r\n\r\n  useEffect(() => {\r\n    if (dictionaryId && props.isEdit) {\r\n      getDictionaryByDictonaryId(dictionaryId);\r\n    }\r\n  }, [dictionaryId ,props.isEdit]);\r\n\r\n  useEffect(() => {\r\n    if (isAddEditDictionarySuccess && addEditDictionaryData) {\r\n      if(addEditDictionaryData.errorMessage.includes('exists')) {\r\n        ToastService.warning(addEditDictionaryData.errorMessage);\r\n        return;\r\n      }\r\n      props.onSuccess();\r\n      ToastService.success(addEditDictionaryData.errorMessage);\r\n      onResetData();\r\n      props.onClose();\r\n    }\r\n      }, [isAddEditDictionarySuccess, addEditDictionaryData]);\r\n\r\n   useEffect(() => {\r\n      if (props.isModelOpen && !props.isEdit) {\r\n          let formData = { ...dictionaryFormData };\r\n          onResetForm(formData, setDictionaryData, null);\r\n        }\r\n      }, [props.isModelOpen])\r\n\r\n  const handleDictionary = () => {\r\n    const formData = dictionaryRef.current.getFormData();\r\n    if (formData && !dictionaryId) {\r\n      const requestData = {\r\n        ...formData,\r\n        key: formData.key ,\r\n        value:formData.value\r\n      };\r\n      addEditDictionary(requestData);\r\n    }\r\n    else if(formData && dictionaryId){\r\n      const requestData = {\r\n        ...formData,\r\n        dictionaryId,\r\n        key: formData.key ,\r\n        value:formData.value\r\n      };\r\n      addEditDictionary(requestData);\r\n    }\r\n  };\r\n\r\n  const onResetData = () => {\r\n    let formData = { ...dictionaryFormData };\r\n    onResetForm(formData, setDictionaryData, null);\r\n    props.onClose();\r\n\r\n  };\r\n\r\n  return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <div className=\"row vertical-form\">\r\n              <FormCreator\r\n                ref={dictionaryRef}\r\n                config={dictionaryData}\r\n                 {...dictionaryData}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-12 mt-2\">\r\n            <div className=\"d-flex align-item-center justify-content-end\">\r\n              <Buttons\r\n                buttonTypeClassName=\"theme-button\"\r\n                buttonText={props.isEdit ? \"Update\" : \"Save\"}\r\n                onClick={handleDictionary}\r\n                isLoading={isAddEditDictionaryLoading}\r\n              />\r\n              <Buttons\r\n                buttonTypeClassName=\"dark-btn ml-5\"\r\n                buttonText=\"Cancel\"\r\n                onClick={onResetData}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n     \r\n  );\r\n};\r\n\r\nAddEditDictionary.propTypes = {\r\n  initData: PropTypes.shape({\r\n    dictionaryId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  }),\r\n  isEdit: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onSuccess: PropTypes.func.isRequired,\r\n  childRef: PropTypes.shape({ current: PropTypes.any }).isRequired,\r\n};\r\n\r\nexport default AddEditDictionary;\r\n","import { useState,useRef } from \"react\";\r\nimport CardSection from \"../../../components/ui/card/CardSection\";\r\nimport SidebarModel from \"../../../components/ui/sidebarModel/SidebarModel\";\r\nimport { AppIcons } from \"../../../data/appIcons\";\r\nimport DictionaryList from \"./features/DictionaryList\";\r\nimport AddEditDictionary from \"./features/AddEditDictionary\";\r\nimport { onResetForm } from \"../../../utils/FormFields/ResetForm/handleResetForm\";\r\nimport { dictionaryFormData } from \"./config/Dictionary.Data\";\r\n\r\n\r\nconst Dictionary = () => {\r\n  const getDataRef=useRef();\r\n  const [isModelOpen, setIsModelOpen] = useState(false);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [formData, setFormData] = useState(dictionaryFormData);\r\n\r\n  const handleToggleModal = () => {\r\n    onResetForm(dictionaryFormData,setFormData, null);\r\n    setIsModelOpen(true);\r\n  };\r\n\r\n  const onSidebarClose = () => {\r\n    setIsModelOpen(false);\r\n    setIsEdit(false);\r\n  };\r\n\r\n  const handleEditClick = (data) => {\r\n    onResetForm(dictionaryFormData,setFormData, null);\r\n    setIsModelOpen(true);\r\n    setFormData(data);\r\n    setIsEdit(true);  \r\n  };\r\n\r\n  const onSuccess = () => {\r\n     setIsModelOpen(true);\r\n    if (getDataRef.current) {\r\n      getDataRef.current.callChildFunction();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <CardSection\r\n        cardTitle=\"Dictionary\"\r\n        buttonClassName=\"btn theme-button\"\r\n        rightButton={true}\r\n        buttonText=\"Add\"\r\n        textWithIcon={true}\r\n        iconImg={AppIcons.PlusIcon}\r\n        titleButtonClick={handleToggleModal}\r\n      >\r\n        <DictionaryList\r\n          getDataRef={getDataRef}\r\n          handleEditClick={handleEditClick}\r\n          initData={formData}\r\n        />\r\n      </CardSection>\r\n\r\n      <SidebarModel\r\n        modalTitle={\r\n          isEdit ? \"Upadte Dictionary\" : \"Add Dictionary\"\r\n        }\r\n        contentClass=\"content-40\"\r\n        onClose={onSidebarClose}\r\n        modalTitleIcon={AppIcons.AddIcon}\r\n        isOpen={isModelOpen}\r\n      >\r\n        < AddEditDictionary\r\n          isEdit={isEdit}\r\n          initData={formData}\r\n          onClose={onSidebarClose}\r\n          onSuccess={onSuccess}\r\n          isModelOpen={isModelOpen}     \r\n        /> \r\n      </SidebarModel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dictionary;\r\n"],"names":["dictionaryFormData","initialState","key","value","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","INPUT","dataField","fieldSetting","placeholder","allowSpace","validation","type","style","containerCss","DictionaryGridConfig","columns","name","fieldName","colStyle","width","allowShort","colType","GridColumnType","ACTION","defaultAction","allowEdit","allowDelete","_ref","handleEditClick","getDataRef","molGridRef","useRef","listData","setListData","useState","totalRowCount","setTotalRowCount","confirm","SwalAlert","deleteDictionary","isSuccess","isDeleteDictionarySuccess","data","isDeleteDictionaryData","useDeleteDictionaryMutation","GetAllDictionary","isLoading","isDictionaryLoading","isDictionarySuccess","isDictionaryData","useGetAllDictionaryMutation","useEffect","onGetData","dataSource","totalRecord","ToastService","success","errorMessage","currentPageObject","current","getCurrentPageObject","handlePageChange","getLists","pageObject","sortingString","request","pagination","pageNumber","pageSize","filters","searchText","sortString","page","generateSortingString","defaultPageObject","actionHandler","EDIT","DELETE","then","confirmed","dictionaryId","useImperativeHandle","callChildFunction","_jsx","className","children","FinalMolGrid","ref","configuration","allowPagination","totalCount","currentPage","onPageChange","onSorting","shortString","onActionChange","props","_props$initData","dictionaryRef","initData","dictionaryData","setDictionaryData","addEditDictionary","isAddEditDictionaryLoading","isAddEditDictionarySuccess","addEditDictionaryData","useAddEditDictionaryMutation","getDictionaryByDictonaryId","isFetching","isGetDictionaryByDictonaryIdFetching","isGetDictionaryByDictonaryIdSuccess","isGetDictionaryByDictonaryIdData","useLazyGetDictionaryByDictonaryIdQuery","formData","isEdit","includes","warning","onSuccess","onResetData","onClose","isModelOpen","onResetForm","_jsxs","FormCreator","config","Buttons","buttonTypeClassName","buttonText","onClick","handleDictionary","getFormData","requestData","Dictionary","setIsModelOpen","setIsEdit","setFormData","onSidebarClose","CardSection","cardTitle","buttonClassName","rightButton","textWithIcon","iconImg","AppIcons","PlusIcon","titleButtonClick","handleToggleModal","DictionaryList","SidebarModel","modalTitle","contentClass","modalTitleIcon","AddIcon","isOpen","AddEditDictionary"],"sourceRoot":""}