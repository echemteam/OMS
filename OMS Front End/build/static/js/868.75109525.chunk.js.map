{"version":3,"file":"static/js/868.75109525.chunk.js","mappings":"mOAWA,MA0FA,EA1F2BA,IACsE,IADrE,WAAEC,EAAU,eAAEC,EAAc,cAAEC,EAAa,kBAAEC,EAAiB,iBAAEC,EAAgB,aAAEC,EAAY,WACtHC,EAAU,qBAAEC,EAAoB,kBAAEC,EAAiB,eAAEC,EAAc,iBAAEC,GAAkBX,EAEvF,MAAOY,EAAYC,IAAiBC,EAAAA,EAAAA,UAASZ,IACvC,YAAEa,EAAW,2BAAEC,IAA+BC,EAAAA,EAAAA,YAAWC,EAAAA,IACxDC,GAAUC,UAAWC,EAAiBC,KAAMC,KAAkBC,EAAAA,EAAAA,OAErEC,EAAAA,EAAAA,YAAU,MACDpB,GAAoBH,GACrBW,EAAc,IAAIX,GACtB,GACD,CAACA,EAAgBG,IAEpB,MAAMqB,EAAkBC,MAAOL,EAAMM,KACjC,MAAMC,EAAM,CACRC,OAAQR,EAAKQ,OACbvB,WAAYA,EACZwB,UAAWT,EAAKS,UAChBC,yBAA0BV,EAAKU,yBAA2BV,EAAKU,yBAA2B,EAC1FC,iBAAkBX,EAAKW,kBAAqD,kBAA1BX,EAAKW,iBAAgCX,EAAKW,iBAAiBC,MAAQZ,EAAKW,iBAC1HE,WAAgB,OAAJb,QAAI,IAAJA,OAAI,EAAJA,EAAMc,KAClBC,KAAU,OAAJf,QAAI,IAAJA,OAAI,EAAJA,EAAMe,MAEhB,IAAIC,EAAc,IAAI1B,GACtB0B,EAAYV,GAAY,IAAKhB,EAAWgB,MAAcN,GACtDT,EAAcyB,GACdnB,EAAOU,EAAI,EAuBf,OAdAJ,EAAAA,EAAAA,YAAU,KACN,GAAIJ,GAAmBE,EAAc,CACjC,GAAIA,EAAagB,aAAaC,SAAS,UAEnC,YADAC,EAAAA,EAAaC,QAAQnB,EAAagB,cAGtC/B,IACAiC,EAAAA,EAAaE,QAAQpB,EAAagB,cAClCvB,EAA2BT,EAAYQ,EAC3C,IACD,CAACM,EAAiBE,KAKjBqB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,UACvBF,EAAAA,EAAAA,KAACG,EAAAA,QAAW,CACRC,UAAU,0BACVC,aAAa,EACbC,gBAAgB,gBAChBC,WAAW,MACXC,cAAc,EACdC,QAASC,EAAAA,EAASC,SAClBC,iBAAkBpD,EAAkB0C,UACpCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mCAAkCC,UAC7CF,EAAAA,EAAAA,KAACa,EAAAA,EAAY,CAETC,IAAKzD,EACL0D,cAAeC,EAAAA,EACfhD,WAAYA,EACZiD,iBAAiB,EACjBC,eAAgB3D,EAChB4D,UAAW1D,EACX2D,gBAAiBtC,EACjBuC,gBAAiBxD,EACjByD,eAzCaC,CAACC,EAAWC,EAAYzC,KACnC,cAAdwC,GACA1C,EAAgB2C,EAAYzC,EAChC,GA6BqB0C,KAAKC,UAAU3D,SAa9B,C","sources":["pages/customerDetail/feature/customerSettingDetail/features/DeliveryMethod/feature/DeliveryMethodList.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport CardSection from \"../../../../../../../components/ui/card/CardSection\";\r\nimport { AppIcons } from \"../../../../../../../data/appIcons\";\r\nimport { OurAccountGridConfig } from \"../config/DevliveryConfig\";\r\nimport PropTypes from 'prop-types';\r\nimport FinalMolGrid from \"../../../../../../../components/FinalMolGrid/FinalMolGrid\";\r\nimport { useUpdateDeliveryMethodsMutation } from \"../../../../../../../app/services/customerSettingsAPI\";\r\nimport ToastService from \"../../../../../../../services/toastService/ToastService\";\r\nimport BasicDetailContext from \"../../../../../../../utils/ContextAPIs/Customer/BasicDetailContext\";\r\n\r\nconst DeliveryMethodList = ({ molGridRef, ourAccountData, actionHandler, handleToggleModal, isGetDataLoading, isShowButton,\r\n    customerId, handleGetDefaultList, handleDeleteClick, isEditablePage, customerStatusId }) => {\r\n\r\n    const [dataSource, setDataSource] = useState(ourAccountData);\r\n    const { subCustomer, getCustomerCompletionCount } = useContext(BasicDetailContext);\r\n    const [update, { isSuccess: isUpdateSuccess, data: isUpdateData }] = useUpdateDeliveryMethodsMutation();\r\n\r\n    useEffect(() => {\r\n        if (!isGetDataLoading && ourAccountData) {\r\n            setDataSource([...ourAccountData]);\r\n        }\r\n    }, [ourAccountData, isGetDataLoading]);\r\n\r\n    const handleEditClick = async (data, rowIndex) => {\r\n        const req = {\r\n            charge: data.charge,\r\n            customerId: customerId,\r\n            isPrimary: data.isPrimary,\r\n            customerDeliveryMethodId: data.customerDeliveryMethodId ? data.customerDeliveryMethodId : 0,\r\n            deliveryMethodId: data.deliveryMethodId && typeof data.deliveryMethodId === \"object\" ? data.deliveryMethodId.value : data.deliveryMethodId,\r\n            chargeType: data?.name,\r\n            zone: data?.zone,\r\n        };\r\n        let newGridData = [...dataSource]\r\n        newGridData[rowIndex] = { ...dataSource[rowIndex], ...data };\r\n        setDataSource(newGridData);\r\n        update(req);\r\n    }\r\n\r\n    const handleGridCheckBoxChange = (fieldName, newRowData, rowIndex) => {\r\n        if (fieldName === 'isPrimary') {\r\n            handleEditClick(newRowData, rowIndex);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isUpdateSuccess && isUpdateData) {\r\n            if (isUpdateData.errorMessage.includes('EXISTS')) {\r\n                ToastService.warning(isUpdateData.errorMessage);\r\n                return;\r\n            }\r\n            handleGetDefaultList()\r\n            ToastService.success(isUpdateData.errorMessage);\r\n            getCustomerCompletionCount(customerId, subCustomer);\r\n        }\r\n    }, [isUpdateSuccess, isUpdateData]);\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"first-card\">\r\n            <CardSection\r\n                cardTitle=\"Delivery Method Details\"\r\n                rightButton={false}\r\n                buttonClassName=\"theme-button \"\r\n                buttonText=\"Add\"\r\n                textWithIcon={true}\r\n                iconImg={AppIcons.PlusIcon}\r\n                titleButtonClick={handleToggleModal}>\r\n                <div className=\"account-table table-striped mb-3\">\r\n                    <FinalMolGrid\r\n                        key={JSON.stringify(dataSource)}\r\n                        ref={molGridRef}\r\n                        configuration={OurAccountGridConfig}\r\n                        dataSource={dataSource}\r\n                        allowPagination={false}\r\n                        onActionChange={actionHandler}\r\n                        isLoading={isGetDataLoading}\r\n                        onRowDataUpdate={handleEditClick}\r\n                        onRowDataDelete={handleDeleteClick}\r\n                        onColumnChange={handleGridCheckBoxChange}\r\n                    />\r\n                </div>\r\n            </CardSection>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nDeliveryMethodList.propTypes = {\r\n    molGridRef: PropTypes.object.isRequired,\r\n    ourAccountData: PropTypes.array.isRequired,\r\n    actionHandler: PropTypes.object.isRequired,\r\n    handleToggleModal: PropTypes.func.isRequired,\r\n    isGetDataLoading: PropTypes.bool.isRequired,\r\n    isShowButton: PropTypes.bool.isRequired,\r\n    customerId: PropTypes.number.isRequired,\r\n    handleGetDefaultList: PropTypes.func.isRequired\r\n};\r\n\r\nexport default DeliveryMethodList;"],"names":["_ref","molGridRef","ourAccountData","actionHandler","handleToggleModal","isGetDataLoading","isShowButton","customerId","handleGetDefaultList","handleDeleteClick","isEditablePage","customerStatusId","dataSource","setDataSource","useState","subCustomer","getCustomerCompletionCount","useContext","BasicDetailContext","update","isSuccess","isUpdateSuccess","data","isUpdateData","useUpdateDeliveryMethodsMutation","useEffect","handleEditClick","async","rowIndex","req","charge","isPrimary","customerDeliveryMethodId","deliveryMethodId","value","chargeType","name","zone","newGridData","errorMessage","includes","ToastService","warning","success","_jsx","className","children","CardSection","cardTitle","rightButton","buttonClassName","buttonText","textWithIcon","iconImg","AppIcons","PlusIcon","titleButtonClick","FinalMolGrid","ref","configuration","OurAccountGridConfig","allowPagination","onActionChange","isLoading","onRowDataUpdate","onRowDataDelete","onColumnChange","handleGridCheckBoxChange","fieldName","newRowData","JSON","stringify"],"sourceRoot":""}