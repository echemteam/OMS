{"version":3,"file":"static/js/9994.d50f9460.chunk.js","mappings":"uJAEA,MAAMA,EAAWC,EAAAA,MAAW,IAAM,0CAC5BC,EAAQD,EAAAA,MAAW,IAAM,0CACzBE,EAAiBF,EAAAA,MAAW,IAAM,0CAsGxC,EAnGwBG,IAmBjB,IAnBkB,KACvBC,EAAI,MACJC,EAAK,MACLC,EAAK,QACLC,EAAO,SACPC,EAAQ,UACRC,EAAS,UACTC,EAAS,YACTC,EAAW,YACXC,EAAW,cACXC,EAAa,aACbC,EAAY,aACZC,EAAY,aACZC,EAAY,cACZC,EAAa,WACbC,EAAU,iBACVC,EAAgB,uBAChBC,KACGC,GACJlB,EAmBC,OACEmB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBF,SAAA,CAC9Bd,GAA2B,KAAdA,IACZY,EAAAA,EAAAA,KAACrB,EAAK,CAACS,UAAWA,EAAWQ,WAAYA,IAE1CG,EAAqBM,cACpBL,EAAAA,EAAAA,KAAA,OAAKI,UAAU,gBAAeF,UAC5BF,EAAAA,EAAAA,KAAA,MAAAE,SAAKH,EAAqBM,iBAE1B,IACJL,EAAAA,EAAAA,KAACM,EAAAA,SAAQ,CAACC,UAAUP,EAAAA,EAAAA,KAAA,OAAAE,SAAK,eAAiBA,UACxCF,EAAAA,EAAAA,KAACvB,EAAQ,CACPY,YAAaA,EACbH,SA/BYsB,IACpB,GAAItB,EAAU,CACZ,MAAMH,EAAQQ,EAAgBiB,EAAeC,KAAKC,GAAWA,EAAO3B,QAASyB,EAC7EtB,EAASC,EAAWJ,GAEhBW,GAAoC,OAApBK,QAAoB,IAApBA,GAAAA,EAAsBY,kBACxCjB,EAAa,cAAeP,EAAWqB,EAE3C,GAwBQI,OArBWC,KACfrB,GACFA,EAAaL,EACf,EAmBQF,QAASA,EACTF,MAAOA,EACPQ,cAAeA,EACfuB,YAAuB,OAAXxB,QAAW,IAAXA,OAAW,EAAXA,EAAayB,cAAkC,OAApBhB,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBiB,aAA0B,OAAbrB,QAAa,IAAbA,OAAa,EAAbA,EAAeqB,WACzFnB,iBAAkBA,EAClBC,uBAAwBA,KACpBC,OAGVC,EAAAA,EAAAA,KAACM,EAAAA,SAAQ,CAACC,UAAUP,EAAAA,EAAAA,KAAA,OAAAE,SAAK,eAAiBA,UACxCF,EAAAA,EAAAA,KAACpB,EAAc,CAACI,MAAOA,GAAS,WAGjC,C","sources":["components/Forms/formField/FormSelectField.js"],"sourcesContent":["import React, { Suspense } from 'react'\r\nimport PropTypes from 'prop-types';\r\nconst Dropdown = React.lazy(() => import('../../ui/dropdown/DropDrown'));\r\nconst Label = React.lazy(() => import('../../ui/label/Label'));\r\nconst ValidationText = React.lazy(() => import('../../ui/inputs/validation/ValidationText.js'))\r\n\r\n\r\nconst FormSelectField = ({\r\n  name,\r\n  value,\r\n  error,\r\n  options,\r\n  onChange,\r\n  dataField,\r\n  labelName,\r\n  placeholder,\r\n  formSetting,\r\n  isMultiSelect,\r\n  onValidation,\r\n  fieldSetting,\r\n  fieldActions,\r\n  overRideProps,\r\n  isRequired,\r\n  inputButtonGroup,\r\n  handleInputGroupButton,\r\n  ...selectFormFieldProps\r\n}) => {\r\n\r\n  const handleChange = (selectedOption) => {\r\n    if (onChange) {\r\n      const value = isMultiSelect ? selectedOption.map((option) => option.value) : selectedOption;\r\n      onChange(dataField, value);\r\n    \r\n      if (fieldActions && selectFormFieldProps?.isEnableOnChange) {\r\n        fieldActions('DDL_CHANGED', dataField, selectedOption);\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleOnBlur = () => {\r\n    if (onValidation) {\r\n      onValidation(dataField)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='input-label-part'>\r\n        {labelName && labelName !== \"\" && (\r\n          <Label labelName={labelName} isRequired={isRequired} />\r\n        )}\r\n        {selectFormFieldProps.hasMainTitle ?\r\n          <div className=\"section-title\">\r\n            <h5>{selectFormFieldProps.hasMainTitle}</h5>\r\n          </div>\r\n          : \"\"}\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <Dropdown\r\n            placeholder={placeholder}\r\n            onChange={handleChange}\r\n            onBlur={handleOnBlur}\r\n            options={options}\r\n            value={value}\r\n            isMultiSelect={isMultiSelect}\r\n            isDisabled={formSetting?.isViewOnly || selectFormFieldProps?.isDisable || overRideProps?.isDisable}\r\n            inputButtonGroup={inputButtonGroup}\r\n            handleInputGroupButton={handleInputGroupButton}\r\n            {...selectFormFieldProps}\r\n          />\r\n        </Suspense>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <ValidationText error={error || \"\"} />\r\n      </Suspense>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nFormSelectField.propTypes = {\r\n  name: PropTypes.string,\r\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  error: PropTypes.string,\r\n  options: PropTypes.arrayOf(PropTypes.shape({\r\n    value: PropTypes.number.isRequired,\r\n    label: PropTypes.string.isRequired\r\n  })),\r\n  onChange: PropTypes.func,\r\n  dataField: PropTypes.string,\r\n  labelName: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  formSetting: PropTypes.shape({\r\n    isViewOnly: PropTypes.bool\r\n  }),\r\n  isMultiSelect: PropTypes.bool,\r\n  onValidation: PropTypes.func,\r\n  fieldSetting: PropTypes.object,\r\n  fieldActions: PropTypes.func,\r\n  overRideProps: PropTypes.shape({\r\n    isDisable: PropTypes.bool\r\n  }),\r\n  isRequired: PropTypes.bool,\r\n  inputButtonGroup: PropTypes.array,\r\n  handleInputGroupButton: PropTypes.func,\r\n  selectFormFieldProps: PropTypes.object\r\n};\r\n\r\nexport default FormSelectField;"],"names":["Dropdown","React","Label","ValidationText","_ref","name","value","error","options","onChange","dataField","labelName","placeholder","formSetting","isMultiSelect","onValidation","fieldSetting","fieldActions","overRideProps","isRequired","inputButtonGroup","handleInputGroupButton","selectFormFieldProps","_jsx","_Fragment","children","_jsxs","className","hasMainTitle","Suspense","fallback","selectedOption","map","option","isEnableOnChange","onBlur","handleOnBlur","isDisabled","isViewOnly","isDisable"],"sourceRoot":""}