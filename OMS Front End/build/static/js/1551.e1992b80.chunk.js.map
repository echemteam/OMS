{"version":3,"file":"static/js/1551.e1992b80.chunk.js","mappings":"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","sources":["components/ui/centerModel/CenterModel.js","pages/order/orderDetail/feature/orderdocument/features/multipleOrderDocumentConfig.data.js","pages/order/orderDetail/feature/orderdocument/features/AddMultipleOrderDocument.js","pages/order/orderDetail/feature/orderdocument/OrderDocument.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./CenterModel.scss\";\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\nconst CenterModel = ({ isApprovalValidate, showModal, handleToggleModal, children, ...props }) => {\r\n  return (\r\n    <Modal\r\n      className={`center-model-popup ${props.modelSizeClass}`}\r\n      show={showModal}\r\n      onHide={handleToggleModal}\r\n      keyboard={!isApprovalValidate}\r\n      backdrop={isApprovalValidate ? \"static\" : true}\r\n    >\r\n      <Modal.Header closeButton={!isApprovalValidate}>\r\n        <div className=\"model-title\">{props.modalTitle}</div>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nCenterModel.propTypes = {\r\n  isApprovalValidate: PropTypes.bool,\r\n  showModal: PropTypes.bool.isRequired,\r\n  handleToggleModal: PropTypes.func.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  modelSizeClass: PropTypes.string,\r\n  modalTitle: PropTypes.string\r\n};\r\nexport default CenterModel;\r\n","import { FormFieldTypes } from \"../../../../../../data/formFieldType\";\r\n\r\nexport const DocumentMultipleFormData = {\r\n  name: \"Document Form\",\r\n  initialState: {\r\n    attachment: \"\",\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"attachment\",\r\n      lable: \"Attachment \",\r\n      Field_Name: \"Attachment\",\r\n      fieldType: FormFieldTypes.FILE,\r\n      dataField: \"attachment\",\r\n      fieldSetting: {\r\n        placeholder: \"Upload Attachment\",\r\n        allowSpace: true,\r\n        isButtonVisible: false,\r\n        isCustomButtonVisible: true,\r\n        acceptedFiles: \".pdf , .docx \",\r\n        isFileNameCleared: true,\r\n        isMultiple: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-12 col-xl-12 col-md-12 col-12 col-12 mb-input mb-0 custom-file-upload-section\",\r\n      },\r\n    },\r\n  ],\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport PropTypes from \"prop-types\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Buttons from \"../../../../../../components/ui/button/Buttons\";\r\nimport FormCreator from \"../../../../../../components/Forms/FormCreator\";\r\nimport { DocumentMultipleFormData } from \"./multipleOrderDocumentConfig.data\";\r\nimport \"../../../../../../common/features/component/Document/Document.scss\";\r\nimport Iconify from \"../../../../../../components/ui/iconify/Iconify\";\r\nimport NoRecordFound from \"../../../../../../components/ui/noRecordFound/NoRecordFound\";\r\nimport { AppIcons } from \"../../../../../../data/appIcons\";\r\nimport ToastService from \"../../../../../../services/toastService/ToastService\";\r\nimport { ErrorMessage } from \"../../../../../../data/appMessages\";\r\nimport Input from \"../../../../../../components/ui/inputs/input/Input\";\r\nimport { useAddOrderDocumentsMutation } from \"../../../../../../app/services/orderAPI\";\r\n\r\nconst getFileIcon = (extension) => {\r\n    switch (extension) {\r\n        case \"pdf\":\r\n            return AppIcons.PdfIcon;\r\n        case \"doc\":\r\n        case \"docx\":\r\n            return AppIcons.DocIcon;\r\n        case \"xls\":\r\n        case \"xlsx\":\r\n            return AppIcons.XlsIcon;\r\n        case \"ppt\":\r\n        case \"pptx\":\r\n            return AppIcons.PptIcon;\r\n        case \"csv\":\r\n            return AppIcons.CsvIcon;\r\n        case \"zip\":\r\n        case \"rar\":\r\n            return AppIcons.ZipIcon;\r\n        default:\r\n            return AppIcons.defaultFileIcon;\r\n    }\r\n};\r\n\r\nconst getFileExtension = (filename) => {\r\n    const parts = filename.split(\".\");\r\n    return parts.length > 1 ? parts.pop().toLowerCase() : \"\";\r\n};\r\n\r\nconst AddMultipleOrderDocument = ({\r\n    orderDetails,\r\n    onClose,\r\n    onSuccess,\r\n}) => {\r\n    const ref = useRef();\r\n    const [attachment, setAttachment] = useState([]);\r\n    const [uploadedFiles, setUploadedFiles] = useState([]);\r\n\r\n    const [add, {\r\n        isLoading: isAddLoading,\r\n        isSuccess: isAddSuccess,\r\n        data: isAddData },] = useAddOrderDocumentsMutation();\r\n\r\n    useEffect(() => {\r\n        if (isAddSuccess && isAddData) {\r\n            if (isAddData.errorMessage.includes(\"exists\")) {\r\n                ToastService.warning(isAddData.errorMessage);\r\n                return;\r\n            }\r\n            ToastService.success(isAddData.errorMessage);\r\n            onSuccess();\r\n        }\r\n    }, [isAddSuccess, isAddData]);\r\n\r\n    const handleSave = async () => {\r\n        if (uploadedFiles.length > 0 && attachment.length > 0) {\r\n            const modifyData = uploadedFiles.map((data, index) => {\r\n                const matchingAttachment = attachment.find((att, ind) => ind === index);\r\n                return {\r\n                    ...data,\r\n                    base64File: matchingAttachment ? matchingAttachment.base64Data : null,\r\n                };\r\n            });\r\n            const IsAllDetailExist = modifyData.every((data) => data.documentName && data.base64File && data.documentType !== null);\r\n            if (IsAllDetailExist) {\r\n                const requestData = {\r\n                    orderId: orderDetails.orderId,\r\n                    storagePath: \"Order\",\r\n                    documentOrderList: modifyData,\r\n                }\r\n                add(requestData);\r\n            } else {\r\n                ToastService.warning(ErrorMessage.DocumentDetailMissing);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleFileUpload = (value) => {\r\n        const files = value.split(\", \");\r\n\r\n        const newFiles = files.map((file) => {\r\n            const fileExtension = getFileExtension(file);\r\n            return {\r\n                documentName: file,\r\n                documentType: 2,\r\n                extension: fileExtension,\r\n            };\r\n        });\r\n\r\n        setUploadedFiles((prevFiles) => [...prevFiles, ...newFiles]);\r\n    };\r\n\r\n    const handleFileRemove = (index) => {\r\n        setUploadedFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\r\n        setAttachment((prevFiles) => prevFiles.filter((_, i) => i !== index));\r\n    };\r\n\r\n    const formActionHandler = {\r\n        DDL_FILE: handleFileUpload,\r\n    };\r\n\r\n    const onFormDataChange = (updatedData) => {\r\n        setAttachment((prevAttachments) => [\r\n            ...prevAttachments,\r\n            ...updatedData?.attachment,\r\n        ]);\r\n    };\r\n\r\n    const handleFileNameChange = (index, newName) => {\r\n        setUploadedFiles((prevFiles) =>\r\n            prevFiles.map((file, i) =>\r\n                i === index ? { ...file, name: newName } : file\r\n            )\r\n        );\r\n    };\r\n    return (\r\n        <div className=\"row add-order-doc-se\">\r\n            <FormCreator\r\n                config={DocumentMultipleFormData}\r\n                ref={ref}\r\n                onActionChange={formActionHandler}\r\n                onFormDataChange={onFormDataChange}\r\n            />\r\n            <table className=\"custom-table mt-4\">\r\n                <thead>\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>Name</th>\r\n                        <th>Action</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* {console.log('uploadedFiles', uploadedFiles)} */}\r\n                    {uploadedFiles.length === 0 ? (\r\n                        <tr>\r\n                            <td colSpan=\"3\">\r\n                                <NoRecordFound />\r\n                            </td>\r\n                        </tr>\r\n                    ) : (\r\n                        uploadedFiles.map((file, index) => (\r\n                            <tr key={index}>\r\n                                <td>\r\n                                    <img\r\n                                        src={getFileIcon(file.extension)}\r\n                                        alt={file.documentName}\r\n                                        className=\"file-icon\"\r\n                                    />\r\n                                </td>\r\n                                {/* <td\r\n                  contentEditable=\"true\"\r\n                  onBlur={(e) =>\r\n                    handleFileNameChange(index, e.target.textContent)\r\n                  }\r\n                >\r\n                  {file.name}\r\n                </td> */}\r\n                                <td>\r\n                                    {\" \"}\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        value={file.documentName}\r\n                                        onChange={(e) =>\r\n                                            handleFileNameChange(index, e.target.value)\r\n                                        }\r\n                                    />\r\n                                </td>\r\n                                <td>\r\n                                    <button\r\n                                        onClick={() => handleFileRemove(index)}\r\n                                        className=\"delete-button\"\r\n                                    >\r\n                                        {\" \"}\r\n                                        <Iconify\r\n                                            icon=\"mingcute:delete-2-line\"\r\n                                            className=\"delete-icon-model\"\r\n                                        />\r\n                                    </button>\r\n                                </td>\r\n                            </tr>\r\n                        ))\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n            <div className=\"d-flex align-item-end justify-content-end mt-3\">\r\n                <Buttons\r\n                    buttonTypeClassName=\"theme-button\"\r\n                    isLoading={isAddLoading}\r\n                    buttonText=\"Save\"\r\n                    onClick={handleSave}\r\n                />\r\n                <Buttons\r\n                    buttonTypeClassName=\"dark-btn ml-5\"\r\n                    buttonText=\"Cancel\"\r\n                    onClick={onClose}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nAddMultipleOrderDocument.propTypes = {\r\n    onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddMultipleOrderDocument;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport CardSection from \"../../../../../components/ui/card/CardSection\";\r\nimport Iconify from \"../../../../../components/ui/iconify/Iconify\";\r\nimport Image from \"../../../../../components/image/Image\";\r\nimport { AppIcons } from \"../../../../../data/appIcons\";\r\nimport CenterModel from \"../../../../../components/ui/centerModel/CenterModel\";\r\nimport AddMultipleOrderDocument from \"./features/AddMultipleOrderDocument\";\r\nimport { useLazyDownloadDocumentQuery } from \"../../../../../app/services/orderAPI\";\r\nimport SidebarModel from \"../../../../../components/ui/sidebarModel/SidebarModel\";\r\nimport FileViewer from \"react-file-viewer\";\r\nimport { useDeleteOrderDocuementByIdMutation } from \"../../../../../app/services/orderAPI\";\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\nimport DataLoader from \"../../../../../components/ui/dataLoader/DataLoader\";\r\nimport SwalAlert from \"../../../../../services/swalService/SwalService\";\r\nimport NoRecordFound from \"../../../../../components/ui/noRecordFound/NoRecordFound\";\r\n\r\nconst getFileExtension = (filename) => {\r\n  const parts = filename.split(\".\");\r\n  return parts.length > 1 ? parts.pop().toLowerCase() : \"\";\r\n};\r\n\r\nconst getFileIcon = (extension) => {\r\n  switch (extension) {\r\n    case \"pdf\":\r\n      return AppIcons.PdfIcon;\r\n    case \"doc\":\r\n    case \"docx\":\r\n      return AppIcons.DocIcon;\r\n    case \"xls\":\r\n    case \"xlsx\":\r\n      return AppIcons.XlsIcon;\r\n    case \"ppt\":\r\n    case \"pptx\":\r\n      return AppIcons.PptIcon;\r\n    case \"csv\":\r\n      return AppIcons.CsvIcon;\r\n    case \"zip\":\r\n    case \"rar\":\r\n      return AppIcons.ZipIcon;\r\n    default:\r\n      return AppIcons.defaultFileIcon;\r\n  }\r\n};\r\n\r\nconst determineFileType = (fileName) => {\r\n  const extension = fileName.split(\".\").pop().toLowerCase();\r\n  switch (extension) {\r\n    case \"pdf\":\r\n      return \"pdf\";\r\n    case \"docx\":\r\n      return \"docx\";\r\n    case \"ppt\":\r\n    case \"pptx\":\r\n      return \"pptx\";\r\n    case \"xlsx\":\r\n      return \"xlsx\";\r\n    case \"csv\":\r\n      return \"csv\";\r\n    case \"xls\":\r\n      return \"xls\";\r\n    case \"doc\":\r\n      return \"doc\";\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nconst OrderDocument = ({\r\n  orderDetails,\r\n  onRefreshOrderDetails,\r\n  isOrderDetailsFetching,\r\n}) => {\r\n  const [documentDetails, setDocumentDetails] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [getFileType, setGetFileType] = useState([]);\r\n  const [selectedDocument, setSelectedDocument] = useState(null);\r\n  const [isModelOpenPDF, setIsModelOpenPDF] = useState(false);\r\n\r\n  const { confirm } = SwalAlert();\r\n  const [deleteOrderDocument, { isSuccess: isDeleteSuccess, data: isDeleteData }] = useDeleteOrderDocuementByIdMutation();\r\n\r\n  const [Downalod, { isFetching: isDownalodFetching, isSuccess: isDownalodSucess, data: isDownalodData, }] = useLazyDownloadDocumentQuery();\r\n  useEffect(() => {\r\n    if (orderDetails?.orderDocumentList) {\r\n      setDocumentDetails(orderDetails.orderDocumentList);\r\n    }\r\n  }, [orderDetails]);\r\n\r\n  useEffect(() => {\r\n    if (isDeleteSuccess && isDeleteData) {\r\n      ToastService.success(isDeleteData.errorMessage);\r\n      handleSuccess();\r\n    }\r\n  }, [isDeleteSuccess, isDeleteData]);\r\n\r\n  const handleSuccess = () => {\r\n    handleCloseDocumentModel();\r\n    if (onRefreshOrderDetails) {\r\n      onRefreshOrderDetails();\r\n    }\r\n  };\r\n\r\n  const handleCloseDocumentModel = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const handleAddDocumentClick = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleDocumentAction = (fileName) => {\r\n    setSelectedDocument(null);\r\n    let request = {\r\n      folderName: \"Order\",\r\n      keyId: orderDetails?.orderId,\r\n      fileName: fileName,\r\n    };\r\n\r\n    Downalod(request);\r\n  };\r\n\r\n  const onSidebarClosePDF = () => {\r\n    setIsModelOpenPDF(false);\r\n    setSelectedDocument(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!isDownalodFetching && isDownalodSucess && isDownalodData) {\r\n      const fileData = isDownalodData.fileData;\r\n      const blob = new Blob([fileData], { type: fileData.type });\r\n      const fileURL = URL.createObjectURL(blob);\r\n      setSelectedDocument(fileURL);\r\n      setIsModelOpenPDF(true);\r\n      setGetFileType(determineFileType(isDownalodData.fileName));\r\n    }\r\n  }, [isDownalodFetching, isDownalodSucess, isDownalodData]);\r\n\r\n\r\n  const handleDeleteDocumentClick = (orderDocumentId) => {\r\n    confirm(\r\n      \"Delete?\", \"Are you sure you want to Delete?\",\r\n      \"Delete\", \"Cancel\"\r\n    ).then((confirmed) => {\r\n      if (confirmed) {\r\n        deleteOrderDocument(orderDocumentId);\r\n      }\r\n    });\r\n\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <CardSection cardTitle=\"Order Documents\" rightButton={true}\r\n          buttonClassName=\"theme-button\" isIcon={true}\r\n          iconClass=\"heroicons-solid:plus\" titleButtonClick={handleAddDocumentClick}>\r\n          <div className=\"document-list\">\r\n            <div className=\"row\">\r\n              {!isOrderDetailsFetching ?\r\n                <>\r\n                  {documentDetails && documentDetails.length > 0 ? (\r\n                    <>\r\n                      {documentDetails?.map((doc) => {\r\n                        if (doc.documentName) { // Check if documentName is not null or undefined\r\n                          const extension = getFileExtension(doc.documentName);\r\n                          const fileIcon = getFileIcon(extension);\r\n\r\n                          return (\r\n                            <div className=\"col-12\" key={doc.documentName}>\r\n                              <div className=\"document-view-sec\">\r\n                                <div className=\"file-item\">\r\n                                  <div className=\"left-sec\">\r\n                                    <Image imagePath={fileIcon} alt=\"Document Icon\" />{\" \"}\r\n                                    {/* Dynamic icon */}\r\n                                    <div className=\"file-name\">{doc.documentName}</div>\r\n                                  </div>\r\n                                  <div className=\"file-actions order-document\">\r\n                                    <div\r\n                                      onClick={() => handleDocumentAction(doc.documentName)}\r\n                                      className=\"btn-part pdf-view\"\r\n                                      title=\"View Order Document\"\r\n                                    >\r\n                                      {!isDownalodFetching ? (\r\n                                        <Iconify icon=\"icomoon-free:file-pdf\" className=\"swap-icon\" />\r\n                                      ) : (\r\n                                        <Iconify icon=\"mdi:loading\" />\r\n                                      )}\r\n                                    </div>\r\n                                    <div\r\n                                      onClick={() => handleDeleteDocumentClick(doc.orderDocumentId)}\r\n                                      className=\"btn-part delete-icon\"\r\n                                    >\r\n                                      <Iconify icon=\"mi:delete\" className=\"swap-icon\" />\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        }\r\n                        return null; // Return null if documentName is null or undefined\r\n                      })}\r\n                    </>\r\n                  ) : (\r\n                    <NoRecordFound />\r\n                  )}\r\n                </>\r\n                : <DataLoader />}\r\n            </div>\r\n          </div>\r\n        </CardSection>\r\n      </div>\r\n\r\n      <CenterModel\r\n        showModal={isModalOpen}\r\n        handleToggleModal={handleCloseDocumentModel}\r\n        modalTitle=\"Add Multiple Order Document\"\r\n        modelSizeClass=\"w-50s\"\r\n      >\r\n        <AddMultipleOrderDocument\r\n          orderDetails={orderDetails}\r\n          onClose={handleCloseDocumentModel}\r\n          onSuccess={handleSuccess}\r\n        />\r\n      </CenterModel>\r\n\r\n      <SidebarModel\r\n        modalTitle=\"PO PDF\"\r\n        contentClass=\"content-50\"\r\n        onClose={onSidebarClosePDF}\r\n        modalTitleIcon={AppIcons.AddIcon}\r\n        isOpen={isModelOpenPDF}\r\n        showToggle={true}\r\n      >\r\n        <div className=\"model-height-fix doc-view\">\r\n          {selectedDocument && getFileType ? (\r\n            getFileType === \"pdf\" ? (\r\n              <div className=\"pdf-iframe\">\r\n                <iframe\r\n                  src={selectedDocument}\r\n                  title=\"PDF Preview\"\r\n                  style={{ width: \"100%\", height: \"200%\" }}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <FileViewer\r\n                fileType={getFileType}\r\n                filePath={selectedDocument}\r\n                onError={(error) => console.error(\"Error:\", error)}\r\n              />\r\n            )\r\n          ) : null}\r\n        </div>\r\n      </SidebarModel>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrderDocument;\r\n"],"names":["_ref","isApprovalValidate","showModal","handleToggleModal","children","props","_jsxs","Modal","className","modelSizeClass","show","onHide","keyboard","backdrop","_jsx","Header","closeButton","modalTitle","Body","DocumentMultipleFormData","name","initialState","attachment","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","FILE","dataField","fieldSetting","placeholder","allowSpace","isButtonVisible","isCustomButtonVisible","acceptedFiles","isFileNameCleared","isMultiple","validation","type","style","containerCss","getFileIcon","extension","AppIcons","PdfIcon","DocIcon","XlsIcon","PptIcon","CsvIcon","ZipIcon","defaultFileIcon","orderDetails","onClose","onSuccess","ref","useRef","setAttachment","useState","uploadedFiles","setUploadedFiles","add","isLoading","isAddLoading","isSuccess","isAddSuccess","data","isAddData","useAddOrderDocumentsMutation","useEffect","errorMessage","includes","ToastService","warning","success","formActionHandler","DDL_FILE","value","newFiles","split","map","file","documentName","documentType","filename","parts","length","pop","toLowerCase","getFileExtension","prevFiles","FormCreator","config","onActionChange","onFormDataChange","updatedData","prevAttachments","colSpan","NoRecordFound","index","src","alt","Input","onChange","e","handleFileNameChange","newName","i","target","onClick","filter","_","handleFileRemove","Iconify","icon","Buttons","buttonTypeClassName","buttonText","async","modifyData","matchingAttachment","find","att","ind","base64File","base64Data","every","requestData","orderId","storagePath","documentOrderList","ErrorMessage","DocumentDetailMissing","onRefreshOrderDetails","isOrderDetailsFetching","documentDetails","setDocumentDetails","isModalOpen","setIsModalOpen","getFileType","setGetFileType","selectedDocument","setSelectedDocument","isModelOpenPDF","setIsModelOpenPDF","confirm","SwalAlert","deleteOrderDocument","isDeleteSuccess","isDeleteData","useDeleteOrderDocuementByIdMutation","Downalod","isFetching","isDownalodFetching","isDownalodSucess","isDownalodData","useLazyDownloadDocumentQuery","orderDocumentList","handleSuccess","handleCloseDocumentModel","fileData","blob","Blob","fileURL","URL","createObjectURL","fileName","determineFileType","_Fragment","CardSection","cardTitle","rightButton","buttonClassName","isIcon","iconClass","titleButtonClick","handleAddDocumentClick","DataLoader","doc","fileIcon","Image","imagePath","request","folderName","keyId","handleDocumentAction","title","handleDeleteDocumentClick","orderDocumentId","then","confirmed","CenterModel","AddMultipleOrderDocument","SidebarModel","contentClass","onSidebarClosePDF","modalTitleIcon","AddIcon","isOpen","showToggle","width","height","FileViewer","fileType","filePath","onError","error","console"],"sourceRoot":""}