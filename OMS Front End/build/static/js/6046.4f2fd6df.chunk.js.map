{"version":3,"file":"static/js/6046.4f2fd6df.chunk.js","mappings":"gMASA,MAAMA,EAAuBC,EAAAA,MAAW,IAAM,kCAuG9C,GArGyBC,EAAAA,EAAAA,aAAWC,IAAmJ,IAAlJ,SAAEC,EAAQ,WAAEC,EAAU,eAAEC,EAAc,aAAEC,EAAY,cAAEC,EAAa,kBAAEC,EAAiB,mBAAEC,EAAkB,+BAAEC,GAAgCR,EAE7K,MAAMS,GAAYC,EAAAA,EAAAA,WACXC,EAAYC,IAAiBC,EAAAA,EAAAA,WAAS,IACtCC,EAAgBC,IAAqBF,EAAAA,EAAAA,WAAS,IAC9CG,EAAmBC,IAAwBJ,EAAAA,EAAAA,UAAS,KACpDK,EAAkBC,IAAuBN,EAAAA,EAAAA,WAAS,IAClDO,EAAqBC,IAA0BR,EAAAA,EAAAA,WAAS,IACxDS,EAAuBC,IAA4BV,EAAAA,EAAAA,WAAS,IAC7D,kBAAEW,IAAsBC,EAAAA,EAAAA,YAAWC,EAAAA,IAClCC,GAAwBC,UAAWC,EAAuBC,UAAWC,EAAuBC,KAAMC,KAAwBC,EAAAA,EAAAA,MAmB3HC,EAA0B,SAACxB,EAAYyB,GAAsD,IAA7BlB,IAAgBmB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAClFhB,GAAwBD,GAKxBO,EAJc,CACVa,WAAY,EACZ7B,WAAYA,IAGhBC,EAAcD,GACdY,EAAyBa,IAAoD,GAC7EjB,EAAoBD,EACxB,EAmCA,OAXAuB,EAAAA,EAAAA,YAAU,KACFV,GAAyBE,GACzBhB,EAAqBgB,EACzB,GACD,CAACF,EAAuBE,KAG3BS,EAAAA,EAAAA,qBAAoBzC,GAAU,MAC1B0C,kBAAmBR,OAInBS,EAAAA,EAAAA,MAAC9C,EAAAA,SAAc,CAAA+C,SAAA,EACXC,EAAAA,EAAAA,KAACjD,EAAoB,CAACY,UAAWA,EAAWsC,sBAnBtBA,KAT1B1B,GAAwBD,GAWxBE,GA7CAP,GAAmBD,IA8ClBQ,GAAyBnB,GAAgB,EAgBoD6C,UAAW5B,EAAqB6B,oBAAoB,EAC1IpB,sBAAuBA,EAAuBqB,OAAQvC,EAAYP,aAAcA,EAAc+B,wBAAyBA,EACvHgB,yBArCqBA,KAC7B9B,GAAwBD,GACnBhB,GAAiBC,GAClBH,GACJ,EAiC4DkD,WA3B7CA,KACX3C,EAAU4C,SACV5C,EAAU4C,QAAQC,2BACtB,EAwBoFtC,kBAAmBA,EAAmBE,iBAAkBA,IACtIJ,IACEgC,EAAAA,EAAAA,KAACS,EAAAA,QAAiB,CAACC,eA/DAC,KACtBrD,GACDF,IAEJa,GAAmBD,EAAe,EA2DiC4C,YAAa5C,EAAgBoC,OAAQvC,EAAYsC,oBAAoB,EAC5HU,aAAcC,EAAAA,GAAaC,gBAAiBC,uBA1D7BA,KAC3B/C,GAAmBD,GACnBX,GAAgB,EAyDJ4D,wBAAyBC,EAAAA,GAAsCC,eAAgBC,EAAAA,GAC/EC,eAAgBC,EAAAA,GAAwCC,uBAAwBC,EAAAA,GAAwCC,UAAWC,EAAAA,GAAUC,SAC7IjD,kBAAmBA,EACnBlB,kBAAmBA,EAAmBoE,UAAWnE,EACjDC,+BAAgCA,MAG3B,G","sources":["pages/supplierDetails/feature/supplierApproval/SupplierApproval.js"],"sourcesContent":["import React, { forwardRef, useContext, useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n//** Lib's */\r\nimport { ApprovalEnum, OwnerType } from \"../../../../utils/Enums/commonEnums\";\r\nimport ApprovalCheckList from \"../../../../components/ApprovalCheckList/ApprovalCheckList\";\r\n//** Service's */\r\nimport { useGetValidateCheckListMutation, useLazyGetSupplierAddressInfoByIdQuery, useLazyGetSupplierBasicInfoByIdQuery, useLazyGetSupplierContactInfoByIdQuery, useLazyGetSupplierFinacialSettingQuery } from \"../../../../app/services/ApprovalAPI\";\r\nimport AddSupplierContext from \"../../../../utils/ContextAPIs/Supplier/AddSupplierContext\";\r\n//** Component's */\r\nconst ApprovalValidateData = React.lazy(() => import(\"../../../../components/ApprovalCheckList/feature/approvalValidateData/ApprovalValidateData\"));\r\n\r\nconst SupplierApproval = forwardRef(({ childRef, getListApi, updateApproval, isDetailPage, isAddPagePage, setSelectedStatus, responsibleUserIds, OnRejectedSupplierFromApproval }) => {\r\n\r\n    const parentRef = useRef();\r\n    const [supplierId, setSupplierId] = useState(false);\r\n    const [isShowApproval, setIsShowApproval] = useState(false);\r\n    const [validateCheckList, setValidateCheckList] = useState([]);\r\n    const [isShowBothButton, setIsShowBothButton] = useState(false);\r\n    const [isShowValidateModal, setIsShowValidateModal] = useState(false);\r\n    const [showApprovalCheckList, setShowApprovalCheckList] = useState(false);\r\n    const { setRejectStatusId } = useContext(AddSupplierContext);\r\n    const [getValidateCheckList, { isLoading: isGetCheckListLoading, isSuccess: isGetCheckListSuccess, data: isGetCheckListData }] = useGetValidateCheckListMutation();\r\n\r\n    //** Approval CheckList Modal*/\r\n    const handleShowApprovalList = () => {\r\n        setIsShowApproval(!isShowApproval);\r\n    };\r\n\r\n    const onSidebarApprovalClose = () => {\r\n        if (!isDetailPage) {\r\n            getListApi();\r\n        }\r\n        setIsShowApproval(!isShowApproval);\r\n    };\r\n    const onSuccessApprovalClose = () => {\r\n        setIsShowApproval(!isShowApproval);\r\n        updateApproval();\r\n    };\r\n\r\n    //** Validate check list Modal */\r\n    const handleShowValidateModal = (supplierId, isShowApprovalCheckList, isShowBothButton = true) => {\r\n        setIsShowValidateModal(!isShowValidateModal);\r\n        let request = {\r\n            customerId: 0,\r\n            supplierId: supplierId\r\n        }\r\n        getValidateCheckList(request);\r\n        setSupplierId(supplierId);\r\n        setShowApprovalCheckList(isShowApprovalCheckList ? isShowApprovalCheckList : false);\r\n        setIsShowBothButton(isShowBothButton);\r\n    };\r\n\r\n    const handleValidateModalClose = () => {\r\n        setIsShowValidateModal(!isShowValidateModal);\r\n        if (!isDetailPage && !isAddPagePage) {\r\n            getListApi();\r\n        }\r\n    };\r\n    const handleModalClose = () => {\r\n        setIsShowValidateModal(!isShowValidateModal);\r\n    }\r\n\r\n    const handleDone = () => {\r\n        if (parentRef.current) {\r\n            parentRef.current.validateApprovalCheckList();\r\n        }\r\n    }\r\n\r\n    const handleValidateSuccess = () => {\r\n        handleModalClose();\r\n        showApprovalCheckList && handleShowApprovalList();\r\n        !showApprovalCheckList && updateApproval();\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isGetCheckListSuccess && isGetCheckListData) {\r\n            setValidateCheckList(isGetCheckListData);\r\n        }\r\n    }, [isGetCheckListSuccess, isGetCheckListData])\r\n\r\n    //** Use Imperative Handle */\r\n    useImperativeHandle(childRef, () => ({\r\n        callChildFunction: handleShowValidateModal\r\n    }))\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ApprovalValidateData parentRef={parentRef} handleValidateSuccess={handleValidateSuccess} showModal={isShowValidateModal} isSupplierApproval={true}\r\n                isGetCheckListLoading={isGetCheckListLoading} mainId={supplierId} isDetailPage={isDetailPage} handleShowValidateModal={handleShowValidateModal}\r\n                handleValidateModalClose={handleValidateModalClose} handleDone={handleDone} validateCheckList={validateCheckList} isShowBothButton={isShowBothButton} />\r\n            {(isShowApproval) &&\r\n                <ApprovalCheckList onSidebarClose={onSidebarApprovalClose} isModelOpen={isShowApproval} mainId={supplierId} isSupplierApproval={true}\r\n                    ApprovalData={ApprovalEnum.APPROVESUPPLIER} onSuccessApprovalClose={onSuccessApprovalClose}\r\n                    getBasicInformationById={useLazyGetSupplierBasicInfoByIdQuery} getAddressById={useLazyGetSupplierAddressInfoByIdQuery}\r\n                    getContactById={useLazyGetSupplierContactInfoByIdQuery} getFinacialSettingById={useLazyGetSupplierFinacialSettingQuery} ownerType={OwnerType.Supplier}\r\n                    setRejectStatusId={setRejectStatusId}\r\n                    setSelectedStatus={setSelectedStatus} basicData={responsibleUserIds}\r\n                    OnRejectedSupplierFromApproval={OnRejectedSupplierFromApproval}\r\n                />\r\n            }\r\n        </React.Fragment>\r\n    )\r\n});\r\n\r\nSupplierApproval.propTypes = {\r\n    childRef: PropTypes.shape({\r\n        current: PropTypes.object\r\n    }).isRequired,\r\n    getListApi: PropTypes.func,\r\n    updateApproval: PropTypes.func.isRequired,\r\n    isDetailPage: PropTypes.bool,\r\n};\r\nexport default SupplierApproval;"],"names":["ApprovalValidateData","React","forwardRef","_ref","childRef","getListApi","updateApproval","isDetailPage","isAddPagePage","setSelectedStatus","responsibleUserIds","OnRejectedSupplierFromApproval","parentRef","useRef","supplierId","setSupplierId","useState","isShowApproval","setIsShowApproval","validateCheckList","setValidateCheckList","isShowBothButton","setIsShowBothButton","isShowValidateModal","setIsShowValidateModal","showApprovalCheckList","setShowApprovalCheckList","setRejectStatusId","useContext","AddSupplierContext","getValidateCheckList","isLoading","isGetCheckListLoading","isSuccess","isGetCheckListSuccess","data","isGetCheckListData","useGetValidateCheckListMutation","handleShowValidateModal","isShowApprovalCheckList","arguments","length","undefined","customerId","useEffect","useImperativeHandle","callChildFunction","_jsxs","children","_jsx","handleValidateSuccess","showModal","isSupplierApproval","mainId","handleValidateModalClose","handleDone","current","validateApprovalCheckList","ApprovalCheckList","onSidebarClose","onSidebarApprovalClose","isModelOpen","ApprovalData","ApprovalEnum","APPROVESUPPLIER","onSuccessApprovalClose","getBasicInformationById","useLazyGetSupplierBasicInfoByIdQuery","getAddressById","useLazyGetSupplierAddressInfoByIdQuery","getContactById","useLazyGetSupplierContactInfoByIdQuery","getFinacialSettingById","useLazyGetSupplierFinacialSettingQuery","ownerType","OwnerType","Supplier","basicData"],"sourceRoot":""}