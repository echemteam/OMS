{"version":3,"file":"static/js/1435.7e1e52f7.chunk.js","mappings":"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","sources":["common/features/component/EmailAddress/EmailAddressGrid.js","common/features/component/EmailAddress/config/AddEditEmailForm.data.js","common/features/component/EmailAddress/utils/ContactEmailAddressUtil.js","common/features/component/EmailAddress/utils/ContactMessages.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n//** Lib's */\r\nimport { emailConfig } from \"./config/AddEditEmailForm.data\";\r\nimport { Message } from \"./utils/ContactMessages\";\r\nimport { deleteData } from \"./utils/ContactEmailAddressUtil\";\r\n//** Service's */\r\nimport SwalAlert from \"../../../../services/swalService/SwalService\";\r\nimport ToastService from \"../../../../services/toastService/ToastService\";\r\nimport { useDeleteContactEmailMutation } from \"../../../../app/services/emailAddressAPI\";\r\n//** Component's */\r\nconst EmailAddressList = React.lazy(() => import(\"./feature/EmailAddressList\"));\r\nconst AddEditEmailModal = React.lazy(() => import(\"./feature/AddEditEmailAddress\"));\r\n\r\nconst ManageEmailAddress = ({ contactId, emailAddressList, setEmailAddressList, isButtonDisable, isOrderManage, orderResetValue }) => {\r\n\r\n    //** State */\r\n    const molGridRef = useRef();\r\n    const addeditRef = useRef();\r\n    const { confirm } = SwalAlert();\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [editFormData, setEditFormData] = useState();\r\n\r\n    //** API Call's */\r\n    const [deleteContactEmail, { isFetching: isDeleteFetching, isSuccess: isDeleteSucess, data: isDeleteData }] = useDeleteContactEmailMutation();\r\n\r\n    //** UseEffect */\r\n\r\n    useEffect(() => {\r\n        if (isDeleteSucess && isDeleteData && !isDeleteFetching) {\r\n            ToastService.success(isDeleteData.errorMessage);\r\n        }\r\n    }, [isDeleteSucess, isDeleteData, isDeleteFetching]);\r\n\r\n    useEffect(() => {\r\n        const actionColumn = emailConfig.columns.find(column => column.name === \"Action\");\r\n        if (isButtonDisable && actionColumn) {\r\n            actionColumn.defaultAction.allowEdit = false;\r\n            actionColumn.defaultAction.allowDelete = false;\r\n        } else if (actionColumn) {\r\n            actionColumn.defaultAction.allowEdit = true;\r\n            actionColumn.defaultAction.allowDelete = true;\r\n        }\r\n    }, [isButtonDisable]);\r\n\r\n    // useEffect(() => {\r\n    //     if (emailAddressList?.length > 0) {\r\n    //         console.log(emailAddressList);\r\n    //         emailAddressList[0].isPrimary = true;\r\n    //         emailAddressList[0].isEmailPrimary = true;\r\n    //         setEmailAddressList(emailAddressList);\r\n    //     }\r\n    // }, [emailAddressList])\r\n\r\n    //** Handle Changes */\r\n    const handleToggleModal = () => {\r\n        if (emailAddressList?.length < 2) {\r\n            setShowModal(!showModal);\r\n            setIsEdit(false);\r\n        } else {\r\n            if (showModal) {\r\n                setShowModal(!showModal);\r\n            } else {\r\n                ToastService.warning(\"You have reached the maximum number of Email Address. Please remove an existing email address before adding a new one.\")\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCheckBoxChange = (rowData) => {\r\n        if (addeditRef.current) {\r\n            addeditRef.current.callChildFunction(rowData);\r\n        }\r\n    }\r\n\r\n    //** Success */\r\n    const onSuccess = () => {\r\n        setShowModal(!showModal);\r\n        setIsEdit(false);\r\n    };\r\n\r\n    //** Action Handler */\r\n    const handleEditModal = (data) => {\r\n        setShowModal(!showModal);\r\n        setIsEdit(true);\r\n        setEditFormData(data)\r\n    }\r\n    const handleDeleteClick = (data) => {\r\n        confirm(\"Delete?\",\r\n            \"Are you sure you want to Delete?\",\r\n            \"Delete\", \"Cancel\"\r\n        ).then((confirmed) => {\r\n            if (confirmed) {\r\n                deleteData(data.emailId, data.id, deleteContactEmail, emailAddressList, setEmailAddressList, Message.EmailDelete, true)\r\n            }\r\n        });\r\n    }\r\n    const actionHandler = {\r\n        EDIT: handleEditModal,\r\n        DELETE: handleDeleteClick,\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <EmailAddressList molGridRef={molGridRef} handleToggleModal={handleToggleModal} actionHandler={actionHandler}\r\n                isButtonDisable={isButtonDisable} emailAddressList={emailAddressList} handleCheckBoxChange={handleCheckBoxChange} isOrderManage={isOrderManage} />\r\n            {/* {showModal && ( */}\r\n            <AddEditEmailModal contactId={contactId} handleToggleModal={handleToggleModal} onSuccess={onSuccess} showModal={showModal} addeditRef={addeditRef}\r\n                editFormData={editFormData} isEdit={isEdit} emailAddressList={emailAddressList} setEmailAddressList={setEmailAddressList} isOrderManage={isOrderManage} />\r\n            {/* )} */}\r\n        </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\nManageEmailAddress.propTypes = {\r\n    contactId: PropTypes.number.isRequired,\r\n    emailAddressList: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            emailId: PropTypes.number,\r\n            id: PropTypes.number,\r\n        })\r\n    ).isRequired,\r\n    setEmailAddressList: PropTypes.func.isRequired,\r\n    isButtonDisable: PropTypes.bool.isRequired,\r\n};\r\nexport default ManageEmailAddress","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\nimport { GridColumnType } from \"../../../../../data/gridColumnType\";\r\n\r\n\r\nexport const addEditEmailFormData = {\r\n  name: \"Add Edit Role Form\",\r\n  initialState: {\r\n    emailAddress: \"\",\r\n    isEmailPrimary: false\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"emailAddress\",\r\n      lable: \"Email Address \",\r\n      Field_Name: \"Email Address\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"emailAddress\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Email Address\",\r\n        allowSpace: false,\r\n        maxLength: 50,\r\n      },\r\n      validation: [{ type: \"require\" }, { type: \"email\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"isEmailPrimary\",\r\n      lable: \"Is Primary\",\r\n      Field_Name: \"IsEmailPrimary\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isEmailPrimary\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n        allowSpace: true,\r\n      },\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-6 col-xl-6 col-md-12 col-12 col-12 mb-input margin-left0-checkbox\",\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nexport const emailConfig = {\r\n  columns: [\r\n    {\r\n      name: \"Email Address\",\r\n      fieldName: \"emailAddress\",\r\n      colStyle: {\r\n        width: \"40%\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Is Primary\",\r\n      fieldName: \"isPrimary\",\r\n      colStyle: {\r\n        width: \"20%\",\r\n      },\r\n      colType: GridColumnType.CHECKBOX,\r\n      colSettings: {\r\n        allowCheckbox: true,\r\n        isDisabled: false\r\n      },\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      colStyle: {\r\n        width: \"40%\",\r\n      },\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n        allowDelete: true,\r\n      },\r\n    },\r\n  ]\r\n}","import ToastService from \"../../../../../services/toastService/ToastService\";\r\n\r\nexport const deleteData = (mainId, index, deleteAPICall, listData, setListData, messages, isEmailDelete) => {\r\n    if (mainId) {\r\n        deleteAPICall(mainId);\r\n        let filteredData;\r\n        if (isEmailDelete) {\r\n            filteredData = listData.filter(item => item.emailId !== mainId);\r\n        } else {\r\n            filteredData = listData.filter(item => item.phoneId !== mainId);\r\n        }\r\n        setListData(filteredData);\r\n    } else {\r\n        const filteredData = listData.filter(item => item.id !== index);\r\n        const reindexedData = filteredData.map((item, index) => ({\r\n            ...item,\r\n            id: index + 1\r\n        }));\r\n        setListData(reindexedData);\r\n        ToastService.success(messages);\r\n    }\r\n}\r\n\r\nexport const addData = (data, contactId, listData, setListData, successMessage, maxLengthMessage, duplicateMessage, onResetData, onSuccess) => {\r\n    let request = {\r\n        ...data,\r\n        contactId: contactId,\r\n        isPrimary: listData?.length === 0 ? true : data.isEmailPrimary,\r\n        id: listData ? listData?.length + 1 : 1\r\n    }\r\n    if (listData && listData.length === 2) {\r\n        ToastService.warning(maxLengthMessage);\r\n        onResetData();\r\n        onSuccess();\r\n        return;\r\n    }\r\n    const isDuplicate = listData?.some(item => item.emailAddress.toLowerCase() === data.emailAddress.toLowerCase());\r\n    if (!isDuplicate) {\r\n        let addData;\r\n        if (listData) {\r\n            addData = [...listData];\r\n            if (data.isEmailPrimary) {\r\n                addData = addData.map(item => ({ ...item, isPrimary: false }));\r\n            }\r\n            addData.push(request);\r\n        } else {\r\n            addData = [request];\r\n        }\r\n        if (addData.length <= 5) {\r\n            setListData(addData);\r\n            ToastService.success(successMessage);\r\n            onResetData();\r\n            onSuccess();\r\n        }\r\n    } else {\r\n        ToastService.warning(duplicateMessage);\r\n    }\r\n\r\n}\r\n\r\nexport const updateData = (data, listData, setListData, successMessage, duplicateMessage, inValidDate, onResetData, onSuccess) => {\r\n    if (listData && data.id > 0) {\r\n        const isDuplicate = listData.some((item) => item.emailAddress.toLowerCase() === data.emailAddress.toLowerCase() && item.id !== data.id);\r\n        if (!isDuplicate) {\r\n            let updatedData = listData.map(item => {\r\n                if (item.id === data.id) {\r\n                    return {\r\n                        ...item,\r\n                        emailAddress: data.emailAddress,\r\n                        isPrimary: data.isEmailPrimary,\r\n                    };\r\n                } else if (data.isEmailPrimary) {\r\n                    return {\r\n                        ...item,\r\n                        isPrimary: false,\r\n                    };\r\n                } else {\r\n                    return item;\r\n                }\r\n            });\r\n\r\n            setListData(updatedData);\r\n            ToastService.success(successMessage);\r\n            onResetData?.();\r\n            onSuccess?.();\r\n        } else {\r\n            ToastService.warning(duplicateMessage);\r\n        }\r\n\r\n    } else {\r\n        ToastService.success(inValidDate);\r\n        onResetData();\r\n        onSuccess();\r\n    }\r\n}","export const Message = {\r\n    EmailDelete: 'Email address Deleted.',\r\n    EmailAdded: 'Email address added.',\r\n    EmailUpdated: 'Email address updated.',\r\n    EmailMaxLength: 'Maximum number of email addresses reached. Request not added.',\r\n    DuplicateEmail: 'Duplicate email address found. Request not added.',\r\n    InvalidData: 'Invalid data. Update not performed.',\r\n\r\n    ContactNumberDelete: 'Contact Number Deleted.',\r\n    ContactNumberAdded: 'Contact Number added.',\r\n    ContactNumberUpdated: 'Contact Number updated.',\r\n    ContactNumberMaxLength: 'Maximum number of Contact Number reached. Request not added.',\r\n    ContactNumberDuplicate: 'Duplicate Contact Number found. Request not added.',\r\n}"],"names":["EmailAddressList","React","AddEditEmailModal","_ref","contactId","emailAddressList","setEmailAddressList","isButtonDisable","isOrderManage","orderResetValue","molGridRef","useRef","addeditRef","confirm","SwalAlert","isEdit","setIsEdit","useState","showModal","setShowModal","editFormData","setEditFormData","deleteContactEmail","isFetching","isDeleteFetching","isSuccess","isDeleteSucess","data","isDeleteData","useDeleteContactEmailMutation","useEffect","ToastService","success","errorMessage","actionColumn","emailConfig","columns","find","column","name","defaultAction","allowEdit","allowDelete","handleToggleModal","length","warning","actionHandler","EDIT","DELETE","then","confirmed","deleteData","emailId","id","Message","EmailDelete","_jsxs","children","_jsx","handleCheckBoxChange","rowData","current","callChildFunction","onSuccess","addEditEmailFormData","initialState","emailAddress","isEmailPrimary","formFields","lable","Field_Name","fieldType","FormFieldTypes","INPUT","dataField","fieldSetting","placeholder","allowSpace","maxLength","validation","type","style","containerCss","CHECKBOX","fieldName","colStyle","width","colType","GridColumnType","colSettings","allowCheckbox","isDisabled","ACTION","mainId","index","deleteAPICall","listData","setListData","messages","isEmailDelete","filteredData","filter","item","phoneId","map","addData","successMessage","maxLengthMessage","duplicateMessage","onResetData","request","isPrimary","some","toLowerCase","push","updateData","inValidDate","EmailAdded","EmailUpdated","EmailMaxLength","DuplicateEmail","InvalidData","ContactNumberDelete","ContactNumberAdded","ContactNumberUpdated","ContactNumberMaxLength","ContactNumberDuplicate"],"sourceRoot":""}