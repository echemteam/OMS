{"version":3,"file":"static/js/7557.c725ea51.chunk.js","mappings":"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","sources":["common/features/component/Contact/ContactGrid.js","common/features/component/Contact/config/ContactDetailForm.data.js","common/features/component/Document/Config/DocuementsData.js","utils/TransformData/TransformAPIData.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n//** Lib's */\r\nimport { AppIcons } from \"../../../../data/appIcons\";\r\nimport { ErrorMessage } from \"../../../../data/appMessages\";\r\nimport CardSection from \"../../../../components/ui/card/CardSection\";\r\nimport { contactDetailFormData } from \"./config/ContactDetailForm.data\";\r\nimport SidebarModel from \"../../../../components/ui/sidebarModel/SidebarModel\";\r\nimport { useLazyGetAllContactTypesQuery } from \"../../../../app/services/contactAPI\";\r\nimport {\r\n  getFieldData,\r\n  setDropDownOptionField,\r\n} from \"../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\n//** Service's */\r\nimport ToastService from \"../../../../services/toastService/ToastService\";\r\nimport { hasFunctionalPermission } from \"../../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\nimport RenderTabs from \"../../../../components/ui/tabs/RenderTabs\";\r\nimport { modifyContactType } from \"../../../../utils/TransformData/TransformAPIData\";\r\nimport PropTypes from \"prop-types\";\r\n//** Component's */\r\nconst ContactList = React.lazy(() => import(\"./feature/ContactList\"));\r\nconst AddEditContact = React.lazy(() => import(\"./feature/AddEditContact\"));\r\n\r\n\r\nconst ContactGrid = ({\r\n  keyId,\r\n  getContactByKeyId,\r\n  addEditContactMutation,\r\n  isSupplier,\r\n  isEditablePage,\r\n  SecurityKey,\r\n  getContactById,\r\n  isSearchFilterShow,\r\n  contryIdCode,\r\n  customerStatusId,\r\n  getCompletionCount\r\n}) => {\r\n  //** State */\r\n  const editRef = useRef();\r\n  const childRef = useRef();\r\n  const getListRef = useRef();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [contactType, setContactType] = useState(\"\");\r\n  const [isModelOpen, setIsModelOpen] = useState(false);\r\n  const [showEditIcon, setShowEditIcon] = useState(true);\r\n  const [tabContactType, setTabContactType] = useState([]);\r\n  const [buttonVisible, setButtonVisible] = useState(true);\r\n  const [selectedDrpvalues, setSelectedDrpvalues] = useState(\"\");\r\n\r\n  //** API Call's  */\r\n  const [\r\n    getAllContactTypes,\r\n    { isSuccess: isGetAllContactTypesSucess, data: allGetAllContactTypesData },\r\n  ] = useLazyGetAllContactTypesQuery();\r\n\r\n  //** UseEffect  */\r\n\r\n  useEffect(() => {\r\n    if (isEditablePage && SecurityKey) {\r\n      const hasAddPermission = hasFunctionalPermission(SecurityKey.ADD);\r\n      const hasEditPermission = hasFunctionalPermission(SecurityKey.EDIT);\r\n\r\n      if (hasAddPermission) {\r\n        if (hasAddPermission.hasAccess === true) {\r\n          setButtonVisible(true);\r\n        } else {\r\n          setButtonVisible(false);\r\n        }\r\n      }\r\n      if (hasEditPermission && hasEditPermission.isViewOnly === true) {\r\n        setShowEditIcon(true);\r\n      } else if (hasEditPermission.isEditable === true) {\r\n        setShowEditIcon(true);\r\n      } else {\r\n        setShowEditIcon(false);\r\n      }\r\n    }\r\n  }, [isEditablePage, isSupplier, SecurityKey]);\r\n\r\n  useEffect(() => {\r\n    getAllContactTypes();\r\n  }, [keyId]);\r\n\r\n  useEffect(() => {\r\n    if (isGetAllContactTypesSucess && allGetAllContactTypesData) {\r\n      const filterCondition = (item) => {\r\n        let condition = isSupplier ? item.isForSuppliers : item.isForCustomers;\r\n        return condition;\r\n      };\r\n      setDropDownOptionField(allGetAllContactTypesData, \"contactTypeId\", \"type\", contactDetailFormData, \"contactTypeId\", filterCondition);\r\n      const contactOption = getFieldData(contactDetailFormData, \"contactTypeId\");\r\n      setContactType(contactOption?.fieldSetting?.options);\r\n      setTabContactType(modifyContactType(allGetAllContactTypesData));\r\n    }\r\n  }, [isGetAllContactTypesSucess, allGetAllContactTypesData]);\r\n\r\n\r\n  //** Handle Change's */\r\n  const handleChange = (event) => {\r\n    setSearch(event.target.value.trim());\r\n  };\r\n\r\n  const onhandleSearch = () => {\r\n    if (search.length >= 3 || selectedDrpvalues.length > 0) {\r\n      onGetContactList();\r\n    } else {\r\n      ToastService.warning(ErrorMessage.CommonErrorMessage);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.code === \"Enter\") {\r\n      onhandleSearch();\r\n    }\r\n  }\r\n  const onhandleClear = () => {\r\n    setSearch(\"\");\r\n    let request = {\r\n      id: keyId,\r\n      searchText: \"\",\r\n      contactType: Array.isArray(selectedDrpvalues) ? selectedDrpvalues.join(\",\") : String(selectedDrpvalues),\r\n    };\r\n    if (getListRef.current) {\r\n      getListRef.current.callChildListFunction(request);\r\n    }\r\n  };\r\n  const handleToggleModal = () => {\r\n    setIsEdit(false);\r\n    setIsModelOpen(true);\r\n    if (childRef.current) {\r\n      childRef.current.callChildFunction();\r\n    }\r\n  };\r\n  const handleChangeDropdown = (selectedOptions) => {\r\n    const selectedValues = selectedOptions.map((option) => option.value);\r\n    if (selectedValues.length > 0) {\r\n      setSelectedDrpvalues(selectedValues);\r\n    } else {\r\n      setSelectedDrpvalues(\"\");\r\n    }\r\n\r\n  };\r\n\r\n  const handleEdit = (contactId) => {\r\n    setIsEdit(true);\r\n    setIsModelOpen(!isModelOpen);\r\n    if (editRef.current) {\r\n      editRef.current.callEditFunction(contactId);\r\n    }\r\n  };\r\n\r\n  const onGetContactList = () => {\r\n    let request = {\r\n      id: keyId,\r\n      searchText: search,\r\n      contactType: Array.isArray(selectedDrpvalues) ? selectedDrpvalues.join(\",\") : String(selectedDrpvalues),\r\n    };\r\n    if (getListRef.current) {\r\n      getListRef.current.callChildListFunction(request);\r\n    }\r\n  };\r\n\r\n  //** Tab Change */\r\n  const onTabClick = () => {\r\n    setSearch(\"\");\r\n  };\r\n\r\n  //** Success */\r\n  const onSuccess = () => {\r\n    onGetContactList();\r\n    setIsModelOpen(!isModelOpen);\r\n  };\r\n\r\n  const onSidebarClose = () => {\r\n    setIsModelOpen(false);\r\n    onGetContactList();\r\n  };\r\n\r\n  const components = [\r\n    (contactTypeId) => <div className=\"mt-2\">\r\n      <div className=\"mt-2\">\r\n        <ContactList\r\n          keyId={keyId}\r\n          isSupplier={isSupplier}\r\n          getListRef={getListRef}\r\n          handleEdit={handleEdit}\r\n          showEditIcon={showEditIcon}\r\n          getContactByKeyId={getContactByKeyId}\r\n          selectedContactTypeId={contactTypeId}\r\n          search={search}\r\n          getCompletionCount={getCompletionCount}\r\n          isEditablePage={isEditablePage}\r\n          SecurityKey={SecurityKey}\r\n        />\r\n      </div>\r\n    </div>,\r\n    (contactTypeId) => <div className=\"mt-2\">\r\n      <div className=\"mt-2\">\r\n        <ContactList\r\n          keyId={keyId}\r\n          getListRef={getListRef}\r\n          isSupplier={isSupplier}\r\n          handleEdit={handleEdit}\r\n          showEditIcon={showEditIcon}\r\n          getContactByKeyId={getContactByKeyId}\r\n          selectedContactTypeId={contactTypeId}\r\n          search={search}\r\n          getCompletionCount={getCompletionCount}\r\n          isEditablePage={isEditablePage}\r\n          SecurityKey={SecurityKey}\r\n        />\r\n      </div>\r\n    </div>,\r\n    (contactTypeId) => <div className=\"mt-2\">\r\n      <div className=\"mt-2\">\r\n        <ContactList\r\n          keyId={keyId}\r\n          getListRef={getListRef}\r\n          isSupplier={isSupplier}\r\n          handleEdit={handleEdit}\r\n          showEditIcon={showEditIcon}\r\n          getContactByKeyId={getContactByKeyId}\r\n          selectedContactTypeId={contactTypeId}\r\n          search={search}\r\n          getCompletionCount={getCompletionCount}\r\n          isEditablePage={isEditablePage}\r\n          SecurityKey={SecurityKey}\r\n        />\r\n      </div>\r\n    </div>,\r\n    (contactTypeId) => <div className=\"mt-2\">\r\n      <div className=\"mt-2\">\r\n        <ContactList\r\n          keyId={keyId}\r\n          getListRef={getListRef}\r\n          handleEdit={handleEdit}\r\n          showEditIcon={showEditIcon}\r\n          getContactByKeyId={getContactByKeyId}\r\n          selectedContactTypeId={contactTypeId}\r\n          search={search}\r\n          getCompletionCount={getCompletionCount}\r\n          isEditablePage={isEditablePage}\r\n          SecurityKey={SecurityKey}\r\n        />\r\n      </div>\r\n    </div>,\r\n    (contactTypeId) => <div className=\"mt-2\">\r\n      <div className=\"mt-2\">\r\n        <ContactList\r\n          keyId={keyId}\r\n          getListRef={getListRef}\r\n          isSupplier={isSupplier}\r\n          handleEdit={handleEdit}\r\n          showEditIcon={showEditIcon}\r\n          getContactByKeyId={getContactByKeyId}\r\n          selectedContactTypeId={contactTypeId}\r\n          search={search}\r\n          getCompletionCount={getCompletionCount}\r\n          isEditablePage={isEditablePage}\r\n          SecurityKey={SecurityKey}\r\n        />\r\n      </div>\r\n    </div>,\r\n    (contactTypeId) => <div className=\"mt-2\">\r\n      <div className=\"mt-2\">\r\n        <ContactList\r\n          keyId={keyId}\r\n          getListRef={getListRef}\r\n          isSupplier={isSupplier}\r\n          handleEdit={handleEdit}\r\n          showEditIcon={showEditIcon}\r\n          getContactByKeyId={getContactByKeyId}\r\n          selectedContactTypeId={contactTypeId}\r\n          search={search}\r\n          getCompletionCount={getCompletionCount}\r\n          isEditablePage={isEditablePage}\r\n          SecurityKey={SecurityKey}\r\n        />\r\n      </div>\r\n    </div>,\r\n    (contactTypeId) => <div className=\"mt-2\">\r\n      <div className=\"mt-2\">\r\n        <ContactList\r\n          keyId={keyId}\r\n          getListRef={getListRef}\r\n          isSupplier={isSupplier}\r\n          handleEdit={handleEdit}\r\n          showEditIcon={showEditIcon}\r\n          getContactByKeyId={getContactByKeyId}\r\n          selectedContactTypeId={contactTypeId}\r\n          search={search}\r\n          getCompletionCount={getCompletionCount}\r\n          isEditablePage={isEditablePage}\r\n          SecurityKey={SecurityKey}\r\n        />\r\n      </div>\r\n    </div>\r\n  ];\r\n\r\n\r\n  const filteredTabs = tabContactType?.filter(item => isSupplier ? item.isForSuppliers : item.isForCustomers);\r\n\r\n  const tabs = filteredTabs?.map((data, index) => {\r\n    const component = components[index] ? components[index]([data.contactTypeId]) : <div className=\"mt-2\">Default Tab</div>;\r\n    return {\r\n      sMenuItemCaption: data.type,\r\n      component\r\n    };\r\n\r\n  });\r\n\r\n\r\n  return (\r\n    <div className=\"contact-main-card-section vertical-tab-card\">\r\n      <CardSection\r\n        cardTitle={isSearchFilterShow ? \"\" : \"Contact\"}\r\n        handleChange={handleChange}\r\n        searchInputName=\"Search By Name and Email\"\r\n        searchInput={isSearchFilterShow}\r\n        buttonClassName=\"theme-button\"\r\n        textWithIcon={true}\r\n        iconImg={AppIcons.PlusIcon}\r\n        rightButton={buttonVisible}\r\n        buttonText=\"Add\"\r\n        titleButtonClick={handleToggleModal}\r\n        clearButton={isSearchFilterShow}\r\n        clearTitleButtonClick={onhandleClear}\r\n        clearButtonText=\"Clear\"\r\n        searchButton={isSearchFilterShow}\r\n        searchbuttonText=\"Search\"\r\n        searchTitleButtonClick={onhandleSearch}\r\n        searchFilter={false}\r\n        handleChangeDropdown={handleChangeDropdown}\r\n        selectedOptions={selectedDrpvalues}\r\n        optionsValue={contactType}\r\n        isMultiSelect={true}\r\n        placeholder=\"Search by Contact Type\"\r\n        isCardSection={true}\r\n        isdropdownOpen={true}\r\n        clearButtonClassName=\"dark-btn\"\r\n        searchIconImg={AppIcons.SearchIcone}\r\n        searchTextWithIcon={true}\r\n        clearTextWithIcon={true}\r\n        clearIconImg={AppIcons.ClearIcone}\r\n        searchValue={search}\r\n        handleKeyPress={handleKeyPress}\r\n      >\r\n        <div className=\"vertical-tab-inner\">\r\n          <RenderTabs tabs={tabs} isCollapse={true} onTabClick={onTabClick} />\r\n        </div>\r\n      </CardSection>\r\n      <div className=\"sidebar-contact-model\">\r\n        <SidebarModel\r\n          modalTitle=\"Add/Edit Contact\"\r\n          contentClass=\"content-50\"\r\n          onClose={onSidebarClose}\r\n          modalTitleIcon={AppIcons.AddIcon}\r\n          isOpen={isModelOpen}\r\n        >\r\n          {/* Add-Edit Contact */}\r\n          <AddEditContact\r\n            isOrderManage={false}\r\n            isSupplier={isSupplier}\r\n            onSidebarClose={onSidebarClose}\r\n            childRef={childRef}\r\n            onSuccess={onSuccess}\r\n            isEdit={isEdit}\r\n            editRef={editRef}\r\n            SecurityKey={SecurityKey}\r\n            onGetContactList={onGetContactList}\r\n            addEditContactMutation={addEditContactMutation}\r\n            keyId={keyId}\r\n            isEditablePage={isEditablePage}\r\n            isOpen={isModelOpen}\r\n            getContactById={getContactById}\r\n            getContectTypeId={null}\r\n            contryIdCode={contryIdCode}\r\n            customerId={null}\r\n            onhandleApiCall={null}\r\n            orderResetValue={null}\r\n            customerStatusId={customerStatusId}\r\n            allGetAllContactTypesData={allGetAllContactTypesData}\r\n            getCompletionCount={getCompletionCount}\r\n          />\r\n        </SidebarModel>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nContactGrid.propTypes = {\r\n  keyId: PropTypes.number.isRequired,\r\n  getContactByKeyId: PropTypes.func.isRequired,\r\n  addEditContactMutation: PropTypes.func.isRequired,\r\n  isSupplier: PropTypes.bool.isRequired,\r\n  isEditablePage: PropTypes.bool.isRequired,\r\n  SecurityKey: PropTypes.shape({\r\n    ADD: PropTypes.string,\r\n    EDIT: PropTypes.string,\r\n  }),\r\n  getContactById: PropTypes.func.isRequired,\r\n  isSearchFilterShow: PropTypes.bool.isRequired,\r\n};\r\nexport default ContactGrid;\r\n","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const contactDetailFormData = {\r\n  name: \"Email From\",\r\n  initialState: {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    contactTypeId: \"\",\r\n    isPrimary: false\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"firstName\",\r\n      lable: \"First Name \",\r\n      Field_Name: \"First Name\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"firstName\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter First Name\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n      },\r\n      validation: [{ type: \"require\" } , { type: \"onlyText\"}],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"lastName\",\r\n      lable: \"Last Name \",\r\n      Field_Name: \"Last Name\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"lastName\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Last Name\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n      },\r\n      validation: [{ type: \"require\" } , { type: \"onlyText\"}],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"contactTypeId\",\r\n      lable: \"Contact Type \",\r\n      Field_Name: \"Contact Type\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"contactTypeId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Contact Type\",\r\n        isMultiSelect: true,\r\n       // isDisabled: false,\r\n        isEnableOnChange: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-8 col-xl-8 col-md-12 col-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"isPrimary\",\r\n      lable: \"Is Primary\",\r\n      Field_Name: \"Is Primary\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isPrimary\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n        allowSpace: true,\r\n      },\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-4 col-xl-4 col-md-12 col-12 col-12 mb-input mt-3 margin-left0-checkbox margin-top-checkbox\",\r\n      },\r\n    },\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false\r\n  }\r\n};\r\n\r\nexport const ContactTypes = [\r\n  { value: 1, label: \"Primary\" },\r\n  { value: 2, label: \"EndUser\" },\r\n  { value: 3, label: \"Purchasing\" },\r\n  { value: 4, label: \"Invoice Submission\" },\r\n  { value: 5, label: \"Invoice Follow-up\" },\r\n  { value: 6, label: \"AP\" }\r\n];","import { AppIcons } from \"../../../../../data/appIcons\";\r\nimport { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\nimport { GridColumnType } from \"../../../../../data/gridColumnType\";\r\n\r\nexport const DocumentFormData = {\r\n  name: \"Document Form\",\r\n  initialState: {\r\n    name: \"\",\r\n    documentTypeId: \"\",\r\n    supplierId: \"\",\r\n    customerId: \"\",\r\n    attachment: \"\",\r\n    base64File: \"\",\r\n    storagePath: \"\"\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"documentTypeId\",\r\n      lable: \"Document Type \",\r\n      Field_Name: \"Document Type\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      fieldType: FormFieldTypes.EDITABLEDROPDOWN,\r\n      dataField: \"documentTypeId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Document Type\",\r\n        isEnableOnChange: true,\r\n        options: []\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"name\",\r\n      lable: \"Document Name \",\r\n      Field_Name: \"Document Name\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"name\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Document Name\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n        isDisable: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"attachment\",\r\n      lable: \"Attachment \",\r\n      Field_Name: \"Attachment\",\r\n      fieldType: FormFieldTypes.FILE,\r\n      dataField: \"attachment\",\r\n      fieldSetting: {\r\n        placeholder: \"Upload Attachment\",\r\n        allowSpace: true,\r\n        isButtonVisible: false,\r\n        isCustomButtonVisible: true,\r\n        acceptedFiles: '.pdf , .docx ',\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 col-12 mb-input mb-0 custom-file-upload-section\",\r\n      },\r\n\r\n    },\r\n\r\n  ],\r\n};\r\n\r\n\r\n\r\nexport const DocumentGridConfig = {\r\n  columns: [\r\n    {\r\n      name: \"Document Type\",\r\n      fieldName: \"documentType\",\r\n      // allowShort: true,\r\n    },\r\n    {\r\n      name: \"Document Name\",\r\n      fieldName: \"documentName\",\r\n      // allowShort: true,\r\n    },\r\n\r\n    {\r\n      name: \"Action\",\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n        allowDelete: true,\r\n      },\r\n\r\n    },\r\n  ],\r\n};\r\n\r\n\r\nexport const DocumentTypes = [\r\n  { value: 1, label: \"Tax or Registration document\" },\r\n  { value: 2, label: \"Customer details form\" },\r\n  { value: 3, label: \"Our submitted forms\" }\r\n];\r\n\r\nexport const FileTypeIcons = [\r\n  {\r\n    type: 'pdf',\r\n    icon: AppIcons.PdfIcon\r\n  },\r\n  {\r\n    type: 'doc',\r\n    icon: AppIcons.DocIcon\r\n  },\r\n  {\r\n    type: 'docx',\r\n    icon: AppIcons.DocIcon\r\n  },\r\n  {\r\n    type: 'xlsx',\r\n    icon: AppIcons.XlsIcon\r\n  },\r\n  {\r\n    type: 'xls',\r\n    icon: AppIcons.XlsIcon\r\n  },\r\n  {\r\n    type: 'ppt',\r\n    icon: AppIcons.PptIcon\r\n  },\r\n  {\r\n    type: 'zip',\r\n    icon: AppIcons.ZipIcon\r\n  },\r\n  {\r\n    type: 'csv',\r\n    icon: AppIcons.CsvIcon\r\n  }\r\n]\r\n","import formatDate from \"../../lib/formatDate\";\r\nimport { FileTypeIcons } from \"../../common/features/component/Document/Config/DocuementsData\";\r\n\r\nexport const modifyContactType = (apiResponseData) => {\r\n  const allType = {\r\n    id: 0,\r\n    type: \"All\", // It's used for all the types\r\n    isForSuppliers: true,\r\n    isForCustomers: true,\r\n    contactTypeId: \"\",\r\n  };\r\n  return [allType, ...apiResponseData];\r\n};\r\n\r\nexport const getDropDownId = (id, isEdit) => {\r\n  if (isEdit) {\r\n    return id && typeof id === \"object\" ? String(id.value) : String(id);\r\n  } else {\r\n    return Array.isArray(id) ? id.map(String).join(\",\") : id && typeof id === \"object\" ? String(id.value) : String(id);;\r\n  }\r\n};\r\n\r\nexport const modifyAddressType = (apiResponseData) => {\r\n  const allType = {\r\n    id: 0,\r\n    type: \"All\", // It's used for all the types\r\n    isForSuppliers: true,\r\n    isForCustomers: true,\r\n    addressTypeId: \"\",\r\n  };\r\n  return [allType, ...apiResponseData];\r\n};\r\n\r\nexport const modifyPhoneNumberData = (phoneDataArray) => {\r\n  const noPrimaryFound = phoneDataArray.every(data => !data.isPrimary);\r\n  const newArray = phoneDataArray.map((phoneData, index) => ({\r\n    ...phoneData,\r\n    extension: phoneData.extension === \"-\" ? 0 : phoneData.extension,\r\n    isPrimary: noPrimaryFound && index === 0 ? true : phoneData.isPrimary,\r\n  }));\r\n  return newArray;\r\n};\r\n\r\nexport const modifyEmailAddressData = (emailDataArray) => {\r\n  const noPrimaryFound = emailDataArray.every(data => !data.isPrimary);\r\n  const newArray = emailDataArray.map((emailData, index) => ({\r\n    ...emailData,\r\n    isPrimary: noPrimaryFound && index === 0 ? true : emailData.isPrimary\r\n  }));\r\n  return newArray;\r\n};\r\n\r\nexport const modifyTimeLineData = (timelineData) => {\r\n  const newArray = timelineData.map((data) => ({\r\n    ...data,\r\n    description:\r\n      data.description +\r\n      \" by \" +\r\n      data.name +\r\n      \" on \" +\r\n      formatDate(data.changedAt, \"MM/DD/YYYY hh:mm A\"),\r\n  }));\r\n  return newArray;\r\n};  \r\n\r\nexport const getFileTypeIcon = (filename) => {\r\n  const parts = filename?.split(\".\");\r\n  const fileType = parts?.length > 1 ? parts[parts.length - 1] : \"\";\r\n  return getIconForFileType(fileType);\r\n};\r\n\r\nconst getIconForFileType = (fileType) => {\r\n  const fileTypeIcon = FileTypeIcons.find((icon) => icon.type === fileType);\r\n  return fileTypeIcon ? fileTypeIcon.icon : null;\r\n};\r\n\r\nexport const documentTransformData = (data) => {\r\n\r\n\r\n  return data.reduce((acc, item) => {\r\n    const {\r\n      type,\r\n      attachment,\r\n      customerDocumentId,\r\n      customerId,\r\n      documentTypeId,\r\n      name,\r\n      createdAt,\r\n      isArchive,\r\n    } = item;\r\n\r\n    // Extract the file type and get the file icon basde on the file type\r\n    const documentIcon = getFileTypeIcon(attachment);\r\n\r\n    const transformedItem = {\r\n      attachment,\r\n      customerDocumentId,\r\n      customerId,\r\n      documentTypeId,\r\n      name,\r\n      documentIcon,\r\n      createdAt,\r\n      isArchive,\r\n      type\r\n    };\r\n\r\n    if (!acc[type]) {\r\n      acc[type] = [];\r\n    }\r\n\r\n    acc[type].push(transformedItem);\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nexport const supplierDocumentTransformData = (data) => {\r\n  return data.reduce((acc, item) => {\r\n    const {\r\n      type,\r\n      attachment,\r\n      supplierDocumentId,\r\n      supplierId,\r\n      documentTypeId,\r\n      name,\r\n      createdAt,\r\n      isArchive\r\n    } = item;\r\n\r\n    // Extract the file type and get the file icon basde on the file type\r\n    const documentIcon = getFileTypeIcon(attachment);\r\n\r\n    const transformedItem = {\r\n      attachment,\r\n      supplierDocumentId,\r\n      supplierId,\r\n      documentTypeId,\r\n      name,\r\n      documentIcon,\r\n      createdAt,\r\n      isArchive\r\n    };\r\n\r\n    if (!acc[type]) {\r\n      acc[type] = [];\r\n    }\r\n\r\n    acc[type].push(transformedItem);\r\n    return acc;\r\n  }, {});\r\n};\r\n"],"names":["ContactList","React","AddEditContact","_ref","keyId","getContactByKeyId","addEditContactMutation","isSupplier","isEditablePage","SecurityKey","getContactById","isSearchFilterShow","contryIdCode","customerStatusId","getCompletionCount","editRef","useRef","childRef","getListRef","search","setSearch","useState","isEdit","setIsEdit","contactType","setContactType","isModelOpen","setIsModelOpen","showEditIcon","setShowEditIcon","tabContactType","setTabContactType","buttonVisible","setButtonVisible","selectedDrpvalues","setSelectedDrpvalues","getAllContactTypes","isSuccess","isGetAllContactTypesSucess","data","allGetAllContactTypesData","useLazyGetAllContactTypesQuery","useEffect","hasAddPermission","hasFunctionalPermission","ADD","hasEditPermission","EDIT","hasAccess","isViewOnly","isEditable","_contactOption$fieldS","filterCondition","item","isForSuppliers","isForCustomers","setDropDownOptionField","contactDetailFormData","contactOption","getFieldData","fieldSetting","options","modifyContactType","onhandleSearch","length","onGetContactList","ToastService","warning","ErrorMessage","CommonErrorMessage","handleEdit","contactId","current","callEditFunction","request","id","searchText","Array","isArray","join","String","callChildListFunction","onSidebarClose","components","contactTypeId","_jsx","className","children","selectedContactTypeId","filteredTabs","filter","tabs","map","index","component","sMenuItemCaption","type","_jsxs","CardSection","cardTitle","handleChange","event","target","value","trim","searchInputName","searchInput","buttonClassName","textWithIcon","iconImg","AppIcons","PlusIcon","rightButton","buttonText","titleButtonClick","handleToggleModal","callChildFunction","clearButton","clearTitleButtonClick","onhandleClear","clearButtonText","searchButton","searchbuttonText","searchTitleButtonClick","searchFilter","handleChangeDropdown","selectedOptions","selectedValues","option","optionsValue","isMultiSelect","placeholder","isCardSection","isdropdownOpen","clearButtonClassName","searchIconImg","SearchIcone","searchTextWithIcon","clearTextWithIcon","clearIconImg","ClearIcone","searchValue","handleKeyPress","code","RenderTabs","isCollapse","onTabClick","SidebarModel","modalTitle","contentClass","onClose","modalTitleIcon","AddIcon","isOpen","isOrderManage","onSuccess","getContectTypeId","customerId","onhandleApiCall","orderResetValue","name","initialState","firstName","lastName","isPrimary","formFields","lable","Field_Name","fieldType","FormFieldTypes","INPUT","dataField","allowSpace","maxLength","validation","style","containerCss","SELECT","isEnableOnChange","CHECKBOX","formSetting","DocumentFormData","documentTypeId","supplierId","attachment","base64File","storagePath","EDITABLEDROPDOWN","isDisable","FILE","isButtonVisible","isCustomButtonVisible","acceptedFiles","FileTypeIcons","GridColumnType","ACTION","icon","PdfIcon","DocIcon","XlsIcon","PptIcon","ZipIcon","CsvIcon","apiResponseData","getDropDownId","modifyAddressType","addressTypeId","modifyPhoneNumberData","phoneDataArray","noPrimaryFound","every","phoneData","extension","modifyEmailAddressData","emailDataArray","emailData","modifyTimeLineData","timelineData","description","formatDate","changedAt","getFileTypeIcon","filename","parts","split","fileType","getIconForFileType","fileTypeIcon","find","documentTransformData","reduce","acc","customerDocumentId","createdAt","isArchive","transformedItem","documentIcon","push","supplierDocumentTransformData","supplierDocumentId"],"sourceRoot":""}