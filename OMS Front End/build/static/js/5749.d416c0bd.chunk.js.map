{"version":3,"file":"static/js/5749.d416c0bd.chunk.js","mappings":"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","sources":["pages/organization/feature/organizationBusinessAddressDetail/config/PhysicalAddressForm.data.js","pages/organization/feature/organizationBusinessAddressDetail/features/PhysicalAddressDetail.js","pages/organization/feature/organizationBusinessAddressDetail/config/BillToAddressForm.data.js","pages/organization/feature/organizationBusinessAddressDetail/features/BillToAddressDetail.js","pages/organization/feature/organizationBusinessAddressDetail/config/LabAddressForm.data.js","pages/organization/feature/organizationBusinessAddressDetail/features/LabAddressDetail.js","pages/organization/feature/organizationBusinessAddressDetail/config/WarehouseAddressForm.data.js","pages/organization/feature/organizationBusinessAddressDetail/features/WarehouseAddressDetail.js","pages/organization/feature/organizationBusinessAddressDetail/config/RegisteredAddressForm.data.js","pages/organization/feature/organizationBusinessAddressDetail/features/RegisteredAddressDetail.js","pages/organization/feature/organizationBusinessAddressDetail/config/RemitToAddressForm.data.js","pages/organization/feature/organizationBusinessAddressDetail/features/RemitToAddressDetail.js","pages/organization/feature/organizationBusinessAddressDetail/OrganizationBusinessAddressDetail.js"],"sourcesContent":["import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const PhysicalAddressForm = {\r\n\r\n  initialState: {\r\n    addressLine1Id: \"\",\r\n    addressLine2Id: \"\",\r\n    stateId: \"\",\r\n    zipCode: \"\",\r\n    cityId: \"\",\r\n    countryId: \"\"\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"addressLine1Id\",\r\n      lable: \"Address Line 1\",\r\n      Field_Name: \"Address Line 1\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine1Id\",\r\n      fieldSetting: {\r\n        placeholder: \"Please Enter Address Line 1\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n        isDisabled: false,\r\n        maxLength: 35,\r\n      },\r\n      //validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine2Id\",\r\n      lable: \"Address Line 2\",\r\n      Field_Name: \"Address Line 2\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine2Id\",\r\n      fieldSetting: {\r\n        placeholder: \"Please Enter Address Line 2\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n        isDisabled: false,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"countryId\",\r\n      lable: \"Country \",\r\n      Field_Name: \"Country\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"countryId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Country\",\r\n        isEnableOnChange: true,\r\n        maxLength: 20,\r\n      },\r\n      //validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"stateId\",\r\n      lable: \"State \",\r\n      Field_Name: \"State\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"stateId\",\r\n      fieldSetting: {\r\n        //isDisabled: false,\r\n        placeholder: \"Select State\",\r\n        isEnableOnChange: true,\r\n        maxLength: 20,\r\n      },\r\n      //validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"cityId\",\r\n      lable: \"City \",\r\n      Field_Name: \"City\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"cityId\",\r\n      fieldSetting: {\r\n        //isDisabled: false,\r\n        placeholder: \"Select City\",\r\n        isEnableOnChange: true,\r\n        maxLength: 9\r\n      },\r\n      //  validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"zipCode\",\r\n      lable: \"Zip Code \",\r\n      Field_Name: \"Zip Code\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"zipCode\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Zip Code\",\r\n        allowSpace: true,\r\n        maxLength: 10,\r\n      },\r\n      validation: [{ type: \"validZipCode\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false,\r\n  },\r\n};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport FormCreator from \"../../../../../components/Forms/FormCreator\";\r\nimport CardSection from \"../../../../../components/ui/card/CardSection\";\r\nimport { setDropDownOptionField, setFieldSetting } from \"../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport { useLazyGetAllCountriesQuery } from \"../../../../../app/services/basicdetailAPI\";\r\nimport { useLazyGetAllCitiesQuery, useLazyGetAllStatesQuery } from \"../../../../../app/services/addressAPI\";\r\nimport { FieldSettingType } from \"../../../../../utils/Enums/commonEnums\";\r\n\r\nconst PhysicalAddressDetail=({physicalAddressRef,PhysicalAddressForm,isGetOrganizationBusinessAddressesData,isGetOrganizationBusinessAddressesSuccess})=>{\r\n  const [physicalFormData,setPhysicalFormData]=useState(PhysicalAddressForm)\r\n  const [getAllCountries, { isSuccess: isGetAllCountriesSuccess, isFetching: isGetAllCountriesFetching, data: allGetAllCountriesData }] = useLazyGetAllCountriesQuery();\r\n  const [getAllCities, { isSuccess: isGetAllCitiesSuccess, isFetching: isGetAllCitiesFetching, data: allGetAllCitiesData }] = useLazyGetAllCitiesQuery();\r\n  const [getAllStates, {isSuccess: isGetAllStateSuccess, isFetching: isGetAllStateFetching, data: allGetAllStatesData }] = useLazyGetAllStatesQuery();\r\n\r\n    \r\n    useEffect(() => {\r\n      if (!isGetAllStateFetching && isGetAllStateSuccess && isGetOrganizationBusinessAddressesSuccess && isGetOrganizationBusinessAddressesData?.physicalAddress) {\r\n        const { physicalAddress } = isGetOrganizationBusinessAddressesData;\r\n        let data = { ...physicalFormData };\r\n        if (physicalAddress.countryId) {\r\n          setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', data, 'stateId', item => item.countryId === physicalAddress.countryId);\r\n        }\r\n  \r\n        if (physicalAddress.stateId) {\r\n          getAllCities(physicalAddress.stateId)\r\n        }\r\n  \r\n        data.initialState = {\r\n          addressId: physicalAddress.addressId,\r\n          addressLine1Id: physicalAddress.addressLine1,\r\n          addressLine2Id: physicalAddress.addressLine2,\r\n          countryId: physicalAddress.countryId,\r\n          zipCode: physicalAddress.zipCode,\r\n          stateId: physicalAddress.stateId,\r\n          cityId: physicalAddress.cityId,\r\n        };\r\n        setPhysicalFormData(data);\r\n      }\r\n    }, [isGetAllStateFetching , isGetAllStateSuccess,isGetOrganizationBusinessAddressesSuccess, isGetOrganizationBusinessAddressesData]);\r\n\r\n    useEffect(() => {\r\n      getAllCountries();\r\n      getAllStates();\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      if (!isGetAllCountriesFetching && isGetAllCountriesSuccess && allGetAllCountriesData) {\r\n        setDropDownOptionField(allGetAllCountriesData, 'countryId', 'name', physicalFormData, 'countryId');\r\n      }\r\n    }, [isGetAllCountriesFetching, isGetAllCountriesSuccess, allGetAllCountriesData]);\r\n  \r\n  \r\n    useEffect(() => {\r\n      if (!isGetAllCitiesFetching && isGetAllCitiesSuccess && allGetAllCitiesData) {\r\n        const cities = allGetAllCitiesData.map((item) => ({\r\n          value: item.cityId,\r\n          label: item.name,\r\n        }));\r\n        let data = { ...physicalFormData };\r\n        const dropdownField = data?.formFields?.find(data => data.id === \"cityId\");\r\n        dropdownField.fieldSetting.options = cities;\r\n        setPhysicalFormData(data);\r\n      }\r\n    }, [isGetAllCitiesFetching, isGetAllCitiesSuccess, allGetAllCitiesData]);\r\n  \r\n  \r\n    const handleChangeAddressDropdownList = (data, dataField) => {\r\n      const manageData = { ...physicalFormData };\r\n      if (dataField === \"countryId\") {\r\n        setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', manageData, 'stateId', item => item.countryId === data.value);\r\n        setDropDownOptionField(null, 'cityId', 'name', manageData, 'cityId', null);\r\n        setFieldSetting(manageData, 'stateId', FieldSettingType.DISABLED, false);\r\n        physicalAddressRef.current.updateFormFieldValue({\r\n          countryId: data.value,\r\n          stateId: null,\r\n          cityId: null\r\n        });\r\n      } else if (dataField === \"stateId\") {\r\n        getAllCities(data.value)\r\n        setFieldSetting(manageData, 'cityId', FieldSettingType.DISABLED, false);\r\n        physicalAddressRef.current.updateFormFieldValue({\r\n          stateId: data.value,\r\n          cityId: null,\r\n        });\r\n      }\r\n      setPhysicalFormData(manageData);\r\n    };\r\n  \r\n    const formAddressActionHandler = {\r\n      DDL_CHANGED: handleChangeAddressDropdownList,\r\n    };\r\n  \r\n    return( \r\n        <CardSection cardTitle=\"Physical Address\">\r\n            <div className=\"row\">\r\n              <FormCreator\r\n                config={physicalFormData}\r\n                ref={physicalAddressRef}\r\n                {...physicalFormData}\r\n                onActionChange={formAddressActionHandler}\r\n              />\r\n            </div>\r\n          </CardSection>\r\n    \r\n       )\r\n}\r\n\r\n// PropTypes for the component\r\nPhysicalAddressDetail.propTypes = {\r\n \r\n  physicalAddressRef: PropTypes.object.isRequired,\r\n  PhysicalAddressForm: PropTypes.object.isRequired,\r\n};\r\nexport default PhysicalAddressDetail;","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const BillToAddressForm = {\r\n \r\n  initialState: {\r\n    addressLine1Id: \"\",\r\n    addressLine2Id: \"\",\r\n    stateId: \"\",\r\n    zipCode: \"\",\r\n    cityId: \"\",\r\n    countryId:\"\"\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"addressLine1Id\",\r\n      lable: \"Address Line 1\",\r\n      Field_Name: \"Address Line 1\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine1Id\",\r\n      fieldSetting: {\r\n        placeholder: \"Please Enter Address Line 1\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n        isDisabled: false,\r\n        maxLength:35,\r\n      },\r\n     // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine2Id\",\r\n      lable: \"Address Line 2\",\r\n      Field_Name: \"Address Line 2\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine2Id\",\r\n      fieldSetting: {\r\n        placeholder: \"Please Enter Address Line 2\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n        isDisabled: false,\r\n        maxLength:35\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"countryId\",\r\n      lable: \"Country \",\r\n      Field_Name: \"Country\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"countryId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Country\",\r\n        isEnableOnChange: true,\r\n        maxLength:20,\r\n      },\r\n     // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"stateId\",\r\n      lable: \"State \",\r\n      Field_Name: \"State\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"stateId\",\r\n      fieldSetting: {\r\n        //isDisabled: false,\r\n        placeholder: \"Select State\",\r\n        isEnableOnChange: true,\r\n        maxLength:20,\r\n      },\r\n      //validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"cityId\",\r\n      lable: \"City \",\r\n      Field_Name: \"City\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"cityId\",\r\n      fieldSetting: {\r\n       // isDisabled: false,\r\n        placeholder: \"Select City\",\r\n        isEnableOnChange: true,\r\n        maxLength:9\r\n      },\r\n      //validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"zipCode\",\r\n      lable: \"Zip Code \",\r\n      Field_Name: \"Zip Code\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"zipCode\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Zip Code\",\r\n        allowSpace: true,\r\n        maxLength: 10,\r\n      },\r\n      validation: [{ type: \"validZipCode\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false,\r\n  },\r\n};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useEffect ,useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useLazyGetAllCitiesQuery, useLazyGetAllStatesQuery } from \"../../../../../app/services/addressAPI\";\r\nimport { useLazyGetAllCountriesQuery } from \"../../../../../app/services/basicdetailAPI\";\r\nimport FormCreator from \"../../../../../components/Forms/FormCreator\";\r\nimport CardSection from \"../../../../../components/ui/card/CardSection\";\r\nimport { setDropDownOptionField, setFieldSetting } from \"../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport { FieldSettingType } from \"../../../../../utils/Enums/commonEnums\";\r\n\r\n\r\nconst BillToAddressDetail=({billToAddressRef,BillToAddressForm,isGetOrganizationBusinessAddressesData,isGetOrganizationBusinessAddressesSuccess})=>{\r\n\r\n  const [billToAddressFormData,setBillToAddressFormData]=useState(BillToAddressForm)\r\n  const [getAllCountries, { isSuccess: isGetAllCountriesSuccess, isFetching: isGetAllCountriesFetching, data: allGetAllCountriesData }] = useLazyGetAllCountriesQuery();\r\n  const [getAllCities, { isSuccess: isGetAllCitiesSuccess, isFetching: isGetAllCitiesFetching, data: allGetAllCitiesData }] = useLazyGetAllCitiesQuery();\r\n  const [getAllStates, { isSuccess: isGetAllStateSuccess, isFetching: isGetAllStateFetching,data: allGetAllStatesData }] = useLazyGetAllStatesQuery();\r\n\r\n    \r\n    useEffect(() => {\r\n      if (!isGetAllStateFetching && isGetAllStateSuccess && isGetOrganizationBusinessAddressesSuccess && isGetOrganizationBusinessAddressesData?.billToAddress) {\r\n        const { billToAddress } = isGetOrganizationBusinessAddressesData;\r\n        let data = { ...billToAddressFormData };\r\n        if (billToAddress.countryId) {\r\n          setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', data, 'stateId', item => item.countryId === billToAddress.countryId);\r\n        }\r\n  \r\n        if (billToAddress.stateId) {\r\n          getAllCities(billToAddress.stateId)\r\n        }\r\n  \r\n        data.initialState = {\r\n          addressId: billToAddress.addressId,\r\n          addressLine1Id: billToAddress.addressLine1,\r\n          addressLine2Id: billToAddress.addressLine2,\r\n          countryId: billToAddress.countryId,\r\n          zipCode: billToAddress.zipCode,\r\n          stateId: billToAddress.stateId,\r\n          cityId: billToAddress.cityId,\r\n        };\r\n        setBillToAddressFormData(data);\r\n      }\r\n    }, [isGetAllStateFetching , isGetAllStateSuccess,isGetOrganizationBusinessAddressesSuccess, isGetOrganizationBusinessAddressesData]);\r\n\r\n    useEffect(() => {\r\n      getAllCountries();\r\n      getAllStates();\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      if (!isGetAllCountriesFetching && isGetAllCountriesSuccess && allGetAllCountriesData) {\r\n        setDropDownOptionField(allGetAllCountriesData, 'countryId', 'name', billToAddressFormData, 'countryId');\r\n      }\r\n    }, [isGetAllCountriesFetching, isGetAllCountriesSuccess, allGetAllCountriesData]);\r\n  \r\n  \r\n    useEffect(() => {\r\n      if (!isGetAllCitiesFetching && isGetAllCitiesSuccess && allGetAllCitiesData) {\r\n        const cities = allGetAllCitiesData.map((item) => ({\r\n          value: item.cityId,\r\n          label: item.name,\r\n        }));\r\n        let data = { ...billToAddressFormData };\r\n        const dropdownField = data?.formFields?.find(data => data.id === \"cityId\");\r\n        dropdownField.fieldSetting.options = cities;\r\n        setBillToAddressFormData(data);\r\n      }\r\n    }, [isGetAllCitiesFetching, isGetAllCitiesSuccess, allGetAllCitiesData]);\r\n  \r\n  \r\n    const handleChangeAddressDropdownList = (data, dataField) => {\r\n      const manageData = { ...billToAddressFormData };\r\n      if (dataField === \"countryId\") {\r\n        setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', manageData, 'stateId', item => item.countryId === data.value);\r\n        setDropDownOptionField(null, 'cityId', 'name', manageData, 'cityId', null);\r\n        setFieldSetting(manageData, 'stateId', FieldSettingType.DISABLED, false);\r\n        billToAddressRef.current.updateFormFieldValue({\r\n          countryId: data.value,\r\n          stateId: null,\r\n          cityId: null\r\n        });\r\n      } else if (dataField === \"stateId\") {\r\n        getAllCities(data.value)\r\n        setFieldSetting(manageData, 'cityId', FieldSettingType.DISABLED, false);\r\n        billToAddressRef.current.updateFormFieldValue({\r\n          stateId: data.value,\r\n          cityId: null,\r\n        });\r\n      }\r\n      setBillToAddressFormData(manageData);\r\n    };\r\n  \r\n    const formAddressActionHandler = {\r\n      DDL_CHANGED: handleChangeAddressDropdownList,\r\n    };\r\n   \r\n    return( \r\n        <CardSection cardTitle=\"Bill To Address\">\r\n            <div className=\"row\">\r\n              <FormCreator\r\n                config={billToAddressFormData}\r\n                ref={billToAddressRef}\r\n                {...billToAddressFormData}\r\n                onActionChange={formAddressActionHandler}\r\n              />\r\n            </div>\r\n          </CardSection>\r\n    \r\n       )\r\n}\r\n// PropTypes for the component\r\nBillToAddressDetail.propTypes = {\r\n  billToAddressRef: PropTypes.object.isRequired,\r\n  billToAddressData: PropTypes.object.isRequired,\r\n  BillToAddressForm: PropTypes.object.isRequired,\r\n};\r\nexport default BillToAddressDetail;","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const LabAddressForm = {\r\n\r\n  initialState: {\r\n    addressLine1Id: \"\",\r\n    addressLine2Id: \"\",\r\n    stateId: \"\",\r\n    zipCode: \"\",\r\n    cityId: \"\",\r\n    countryId: \"\"\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"addressLine1Id\",\r\n      lable: \"Address Line 1\",\r\n      Field_Name: \"Address Line 1\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine1Id\",\r\n      fieldSetting: {\r\n        placeholder: \"Please Enter Address Line 1\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n        isDisabled: false,\r\n        maxLength: 35,\r\n      },\r\n      //validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine2Id\",\r\n      lable: \"Address Line 2\",\r\n      Field_Name: \"Address Line 2\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine2Id\",\r\n      fieldSetting: {\r\n        placeholder: \"Please Enter Address Line 2\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n        isDisabled: false,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"countryId\",\r\n      lable: \"Country \",\r\n      Field_Name: \"Country\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"countryId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Country\",\r\n        isEnableOnChange: true,\r\n        maxLength: 20,\r\n      },\r\n      //validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"stateId\",\r\n      lable: \"State \",\r\n      Field_Name: \"State\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"stateId\",\r\n      fieldSetting: {\r\n       // isDisabled: false,\r\n        placeholder: \"Select State\",\r\n        isEnableOnChange: true,\r\n        maxLength: 20,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"cityId\",\r\n      lable: \"City \",\r\n      Field_Name: \"City\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"cityId\",\r\n      fieldSetting: {\r\n       // isDisabled: false,\r\n        placeholder: \"Select City\",\r\n        isEnableOnChange: true,\r\n        maxLength: 9\r\n      },\r\n      //validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"zipCode\",\r\n      lable: \"Zip Code \",\r\n      Field_Name: \"Zip Code\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"zipCode\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Zip Code\",\r\n        allowSpace: true,\r\n        maxLength: 10,\r\n      },\r\n      validation: [{ type: \"validZipCode\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false,\r\n  },\r\n};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useEffect ,useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport FormCreator from \"../../../../../components/Forms/FormCreator\";\r\nimport CardSection from \"../../../../../components/ui/card/CardSection\";\r\nimport { FieldSettingType } from \"../../../../../utils/Enums/commonEnums\";\r\nimport { setDropDownOptionField, setFieldSetting } from \"../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport { useLazyGetAllCountriesQuery } from \"../../../../../app/services/basicdetailAPI\";\r\nimport { useLazyGetAllCitiesQuery, useLazyGetAllStatesQuery } from \"../../../../../app/services/addressAPI\";\r\n\r\n\r\nconst LabAddressDetail=({labAddressRef,LabAddressForm,isGetOrganizationBusinessAddressesData,isGetOrganizationBusinessAddressesSuccess})=>{\r\n \r\n  const [labAddressFormData,setLabAddressFormData]=useState(LabAddressForm)\r\n  const [getAllCountries, { isSuccess: isGetAllCountriesSuccess, isFetching: isGetAllCountriesFetching, data: allGetAllCountriesData }] = useLazyGetAllCountriesQuery();\r\n  const [getAllCities, { isSuccess: isGetAllCitiesSuccess, isFetching: isGetAllCitiesFetching, data: allGetAllCitiesData }] = useLazyGetAllCitiesQuery();\r\n  const [getAllStates, {isSuccess: isGetAllStateSuccess, isFetching: isGetAllStateFetching, data: allGetAllStatesData }] = useLazyGetAllStatesQuery();\r\n\r\n    \r\n    useEffect(() => {\r\n      if (!isGetAllStateFetching && isGetAllStateSuccess && isGetOrganizationBusinessAddressesSuccess && isGetOrganizationBusinessAddressesData?.labAddress) {\r\n        const { labAddress } = isGetOrganizationBusinessAddressesData;\r\n        let data = { ...labAddressFormData };\r\n        if (labAddress.countryId) {\r\n          setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', data, 'stateId', item => item.countryId === labAddress.countryId);\r\n        }\r\n  \r\n        if (labAddress.stateId) {\r\n          getAllCities(labAddress.stateId)\r\n        }\r\n  \r\n        data.initialState = {\r\n          addressId: labAddress.addressId,\r\n          addressLine1Id: labAddress.addressLine1,\r\n          addressLine2Id: labAddress.addressLine2,\r\n          countryId: labAddress.countryId,\r\n          zipCode: labAddress.zipCode,\r\n          stateId: labAddress.stateId,\r\n          cityId: labAddress.cityId,\r\n        };\r\n        setLabAddressFormData(data);\r\n      }\r\n    }, [isGetAllStateFetching , isGetAllStateSuccess,isGetOrganizationBusinessAddressesSuccess, isGetOrganizationBusinessAddressesData]);\r\n\r\n    useEffect(() => {\r\n      getAllCountries();\r\n      getAllStates();\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      if (!isGetAllCountriesFetching && isGetAllCountriesSuccess && allGetAllCountriesData) {\r\n        setDropDownOptionField(allGetAllCountriesData, 'countryId', 'name', labAddressFormData, 'countryId');\r\n      }\r\n    }, [isGetAllCountriesFetching, isGetAllCountriesSuccess, allGetAllCountriesData]);\r\n  \r\n  \r\n    useEffect(() => {\r\n      if (!isGetAllCitiesFetching && isGetAllCitiesSuccess && allGetAllCitiesData) {\r\n        const cities = allGetAllCitiesData.map((item) => ({\r\n          value: item.cityId,\r\n          label: item.name,\r\n        }));\r\n        let data = { ...labAddressFormData };\r\n        const dropdownField = data?.formFields?.find(data => data.id === \"cityId\");\r\n        dropdownField.fieldSetting.options = cities;\r\n        setLabAddressFormData(data);\r\n      }\r\n    }, [isGetAllCitiesFetching, isGetAllCitiesSuccess, allGetAllCitiesData]);\r\n  \r\n  \r\n    const handleChangeAddressDropdownList = (data, dataField) => {\r\n      const manageData = { ...labAddressFormData };\r\n      if (dataField === \"countryId\") {\r\n        setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', manageData, 'stateId', item => item.countryId === data.value);\r\n        setDropDownOptionField(null, 'cityId', 'name', manageData, 'cityId', null);\r\n        setFieldSetting(manageData, 'stateId', FieldSettingType.DISABLED, false);\r\n        labAddressRef.current.updateFormFieldValue({\r\n          countryId: data.value,\r\n          stateId: null,\r\n          cityId: null\r\n        });\r\n      } else if (dataField === \"stateId\") {\r\n        getAllCities(data.value)\r\n        setFieldSetting(manageData, 'cityId', FieldSettingType.DISABLED, false);\r\n        labAddressRef.current.updateFormFieldValue({\r\n          stateId: data.value,\r\n          cityId: null,\r\n        });\r\n      }\r\n      setLabAddressFormData(manageData);\r\n    };\r\n  \r\n    const formAddressActionHandler = {\r\n      DDL_CHANGED: handleChangeAddressDropdownList,\r\n    };\r\n    return( \r\n        <CardSection cardTitle=\"Lab Address\">\r\n            <div className=\"row\">\r\n              <FormCreator\r\n                config={labAddressFormData}\r\n                ref={labAddressRef}\r\n                {...labAddressFormData}\r\n                onActionChange={formAddressActionHandler}\r\n              />\r\n            </div>\r\n          </CardSection>\r\n    \r\n       )\r\n}\r\n// PropTypes for the component\r\nLabAddressDetail.propTypes = {\r\n  labAddressRef: PropTypes.object.isRequired,\r\n  labAddressData: PropTypes.object.isRequired,\r\n  LabAddressForm: PropTypes.object.isRequired,\r\n};\r\nexport default LabAddressDetail;","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const WarehouseAddressForm = {\r\n\r\n  initialState: {\r\n    addressLine1Id: \"\",\r\n    addressLine2Id: \"\",\r\n    stateId: \"\",\r\n    zipCode: \"\",\r\n    cityId: \"\",\r\n    countryId: \"\"\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"addressLine1Id\",\r\n      lable: \"Address Line 1\",\r\n      Field_Name: \"Address Line 1\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine1Id\",\r\n      fieldSetting: {\r\n        placeholder: \"Please Enter Address Line 1\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n        isDisabled: false,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine2Id\",\r\n      lable: \"Address Line 2\",\r\n      Field_Name: \"Address Line 2\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine2Id\",\r\n      fieldSetting: {\r\n        placeholder: \"Please Enter Address Line 2\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n        isDisabled: false,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"countryId\",\r\n      lable: \"Country \",\r\n      Field_Name: \"Country\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"countryId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Country\",\r\n        isEnableOnChange: true,\r\n        maxLength: 20,\r\n      },\r\n      //validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"stateId\",\r\n      lable: \"State \",\r\n      Field_Name: \"State\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"stateId\",\r\n      fieldSetting: {\r\n        //isDisabled: false,\r\n        placeholder: \"Select State\",\r\n        isEnableOnChange: true,\r\n        maxLength: 20,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"cityId\",\r\n      lable: \"City \",\r\n      Field_Name: \"City\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"cityId\",\r\n      fieldSetting: {\r\n       // isDisabled: false,\r\n        placeholder: \"Select City\",\r\n        isEnableOnChange: true,\r\n        maxLength: 9\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"zipCode\",\r\n      lable: \"Zip Code \",\r\n      Field_Name: \"Zip Code\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"zipCode\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Zip Code\",\r\n        allowSpace: true,\r\n        maxLength: 10,\r\n      },\r\n      validation: [{ type: \"validZipCode\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false,\r\n  },\r\n};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useEffect ,useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport FormCreator from \"../../../../../components/Forms/FormCreator\";\r\nimport CardSection from \"../../../../../components/ui/card/CardSection\";\r\nimport { FieldSettingType } from \"../../../../../utils/Enums/commonEnums\";\r\nimport { setDropDownOptionField, setFieldSetting } from \"../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport { useLazyGetAllCitiesQuery, useLazyGetAllStatesQuery } from \"../../../../../app/services/addressAPI\";\r\nimport { useLazyGetAllCountriesQuery } from \"../../../../../app/services/basicdetailAPI\";\r\n\r\n\r\nconst WarehouseAddressDetail=({warehouseAddressRef,WarehouseAddressForm,isGetOrganizationBusinessAddressesData,isGetOrganizationBusinessAddressesSuccess})=>{;\r\n  const [warehouseAddressFormData,setWarehouseAddressFormData]=useState(WarehouseAddressForm)\r\n  const [getAllCountries, { isSuccess: isGetAllCountriesSuccess, isFetching: isGetAllCountriesFetching, data: allGetAllCountriesData }] = useLazyGetAllCountriesQuery();\r\n  const [getAllCities, { isSuccess: isGetAllCitiesSuccess, isFetching: isGetAllCitiesFetching, data: allGetAllCitiesData }] = useLazyGetAllCitiesQuery();\r\n  const [getAllStates, { isSuccess: isGetAllStateSuccess, isFetching: isGetAllStateFetching,data: allGetAllStatesData }] = useLazyGetAllStatesQuery();\r\n\r\n    \r\n    useEffect(() => {\r\n      if (!isGetAllStateFetching && isGetAllStateSuccess && isGetOrganizationBusinessAddressesSuccess && isGetOrganizationBusinessAddressesData?.warehouseAddress) {\r\n        const { warehouseAddress } = isGetOrganizationBusinessAddressesData;\r\n        let data = { ...warehouseAddressFormData };\r\n        if (warehouseAddress.countryId) {\r\n          setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', data, 'stateId', item => item.countryId === warehouseAddress.countryId);\r\n        }\r\n  \r\n        if (warehouseAddress.stateId) {\r\n          getAllCities(warehouseAddress.stateId)\r\n        }\r\n  \r\n        data.initialState = {\r\n          addressId: warehouseAddress.addressId,\r\n          addressLine1Id: warehouseAddress.addressLine1,\r\n          addressLine2Id: warehouseAddress.addressLine2,\r\n          countryId: warehouseAddress.countryId,\r\n          zipCode: warehouseAddress.zipCode,\r\n          stateId: warehouseAddress.stateId,\r\n          cityId: warehouseAddress.cityId,\r\n        };\r\n        setWarehouseAddressFormData(data);\r\n      }\r\n    }, [isGetAllStateFetching , isGetAllStateSuccess,isGetOrganizationBusinessAddressesSuccess, isGetOrganizationBusinessAddressesData]);\r\n\r\n    useEffect(() => {\r\n      getAllCountries();\r\n      getAllStates();\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      if (!isGetAllCountriesFetching && isGetAllCountriesSuccess && allGetAllCountriesData) {\r\n        setDropDownOptionField(allGetAllCountriesData, 'countryId', 'name', warehouseAddressFormData, 'countryId');\r\n      }\r\n    }, [isGetAllCountriesFetching, isGetAllCountriesSuccess, allGetAllCountriesData]);\r\n  \r\n  \r\n    useEffect(() => {\r\n      if (!isGetAllCitiesFetching && isGetAllCitiesSuccess && allGetAllCitiesData) {\r\n        const cities = allGetAllCitiesData.map((item) => ({\r\n          value: item.cityId,\r\n          label: item.name,\r\n        }));\r\n        let data = { ...warehouseAddressFormData };\r\n        const dropdownField = data?.formFields?.find(data => data.id === \"cityId\");\r\n        dropdownField.fieldSetting.options = cities;\r\n        setWarehouseAddressFormData(data);\r\n      }\r\n    }, [isGetAllCitiesFetching, isGetAllCitiesSuccess, allGetAllCitiesData]);\r\n  \r\n  \r\n    const handleChangeAddressDropdownList = (data, dataField) => {\r\n      const manageData = { ...warehouseAddressFormData };\r\n      if (dataField === \"countryId\") {\r\n        setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', manageData, 'stateId', item => item.countryId === data.value);\r\n        setDropDownOptionField(null, 'cityId', 'name', manageData, 'cityId', null);\r\n        setFieldSetting(manageData, 'stateId', FieldSettingType.DISABLED, false);\r\n        warehouseAddressRef.current.updateFormFieldValue({\r\n          countryId: data.value,\r\n          stateId: null,\r\n          cityId: null\r\n        });\r\n      } else if (dataField === \"stateId\") {\r\n        getAllCities(data.value)\r\n        setFieldSetting(manageData, 'cityId', FieldSettingType.DISABLED, false);\r\n        warehouseAddressRef.current.updateFormFieldValue({\r\n          stateId: data.value,\r\n          cityId: null,\r\n        });\r\n      }\r\n      setWarehouseAddressFormData(manageData);\r\n    };\r\n  \r\n    const formAddressActionHandler = {\r\n      DDL_CHANGED: handleChangeAddressDropdownList,\r\n    };\r\n    return( \r\n        <CardSection cardTitle=\"Warehouse Address\">\r\n            <div className=\"row\">\r\n              <FormCreator\r\n                config={warehouseAddressFormData}\r\n                ref={warehouseAddressRef}\r\n                {...warehouseAddressFormData}\r\n                onActionChange={formAddressActionHandler}\r\n              />\r\n            </div>\r\n          </CardSection>\r\n    \r\n       )\r\n}\r\n\r\nWarehouseAddressDetail.propTypes = {\r\n  warehouseAddressData: PropTypes.object.isRequired,\r\n  warehouseAddressRef: PropTypes.object.isRequired,\r\n  WarehouseAddressForm: PropTypes.object.isRequired,\r\n};\r\nexport default WarehouseAddressDetail;","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const RegisteredAddressForm = {\r\n\r\n  initialState: {\r\n    addressLine1Id: \"\",\r\n    addressLine2Id: \"\",\r\n    stateId: \"\",\r\n    zipCode: \"\",\r\n    cityId: \"\",\r\n    countryId: \"\"\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"addressLine1Id\",\r\n      lable: \"Address Line 1\",\r\n      Field_Name: \"Address Line 1\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine1Id\",\r\n      fieldSetting: {\r\n        placeholder: \"Please Enter Address Line 1\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n        isDisabled: false,\r\n        maxLength: 35,\r\n      },\r\n      //validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine2Id\",\r\n      lable: \"Address Line 2\",\r\n      Field_Name: \"Address Line 2\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine2Id\",\r\n      fieldSetting: {\r\n        placeholder: \"Please Enter Address Line 2\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n        isDisabled: false,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"countryId\",\r\n      lable: \"Country \",\r\n      Field_Name: \"Country\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"countryId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Country\",\r\n        isEnableOnChange: true,\r\n        maxLength: 20,\r\n      },\r\n      //validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"stateId\",\r\n      lable: \"State \",\r\n      Field_Name: \"State\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"stateId\",\r\n      fieldSetting: {\r\n       // isDisabled: false,\r\n        placeholder: \"Select State\",\r\n        isEnableOnChange: true,\r\n        maxLength: 20,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"cityId\",\r\n      lable: \"City \",\r\n      Field_Name: \"City\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"cityId\",\r\n      fieldSetting: {\r\n       // isDisabled: false,\r\n        placeholder: \"Select City\",\r\n        isEnableOnChange: true,\r\n        maxLength: 9\r\n      },\r\n      //validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"zipCode\",\r\n      lable: \"Zip Code \",\r\n      Field_Name: \"Zip Code\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"zipCode\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Zip Code\",\r\n        allowSpace: true,\r\n        maxLength: 10,\r\n      },\r\n      validation: [{ type: \"validZipCode\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false,\r\n  },\r\n};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useEffect,useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useLazyGetAllCitiesQuery, useLazyGetAllStatesQuery } from \"../../../../../app/services/addressAPI\";\r\nimport { useLazyGetAllCountriesQuery } from \"../../../../../app/services/basicdetailAPI\";\r\nimport FormCreator from \"../../../../../components/Forms/FormCreator\";\r\nimport CardSection from \"../../../../../components/ui/card/CardSection\";\r\nimport { setDropDownOptionField, setFieldSetting } from \"../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport { FieldSettingType } from \"../../../../../utils/Enums/commonEnums\";\r\n\r\nconst RegisteredAddressDetail=({registeredAddressRef,RegisteredAddressForm,isGetOrganizationBusinessAddressesSuccess,isGetOrganizationBusinessAddressesData})=>{\r\n  const [registeredFormData,setRegisteredFormData]=useState(RegisteredAddressForm)\r\n  const [getAllCountries, { isSuccess: isGetAllCountriesSuccess, isFetching: isGetAllCountriesFetching, data: allGetAllCountriesData }] = useLazyGetAllCountriesQuery();\r\n  const [getAllCities, { isSuccess: isGetAllCitiesSuccess, isFetching: isGetAllCitiesFetching, data: allGetAllCitiesData }] = useLazyGetAllCitiesQuery();\r\n  const [getAllStates, {isSuccess: isGetAllStateSuccess, isFetching: isGetAllStateFetching, data: allGetAllStatesData }] = useLazyGetAllStatesQuery();\r\n\r\n    \r\n    useEffect(() => {\r\n      if (!isGetAllStateFetching && isGetAllStateSuccess && isGetOrganizationBusinessAddressesSuccess && isGetOrganizationBusinessAddressesData?.registeredAddress) {\r\n \r\n        const { registeredAddress } = isGetOrganizationBusinessAddressesData;\r\n        let data = { ...registeredFormData };\r\n        if (registeredAddress.countryId) {\r\n          setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', data, 'stateId', item => item.countryId === registeredAddress.countryId);\r\n        }\r\n  \r\n        if (registeredAddress.stateId) {\r\n          getAllCities(registeredAddress.stateId)\r\n        }\r\n  \r\n        data.initialState = {\r\n          addressId: registeredAddress.addressId,\r\n          addressLine1Id: registeredAddress.addressLine1,\r\n          addressLine2Id: registeredAddress.addressLine2,\r\n          countryId: registeredAddress.countryId,\r\n          zipCode: registeredAddress.zipCode,\r\n          stateId: registeredAddress.stateId,\r\n          cityId: registeredAddress.cityId,\r\n        };\r\n        setRegisteredFormData(data);\r\n      }\r\n    }, [isGetAllStateFetching , isGetAllStateSuccess,isGetOrganizationBusinessAddressesSuccess, isGetOrganizationBusinessAddressesData]);\r\n\r\n    useEffect(() => {\r\n      getAllCountries();\r\n      getAllStates();\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      if (!isGetAllCountriesFetching && isGetAllCountriesSuccess && allGetAllCountriesData) {\r\n        setDropDownOptionField(allGetAllCountriesData, 'countryId', 'name', registeredFormData, 'countryId');\r\n      }\r\n    }, [isGetAllCountriesFetching, isGetAllCountriesSuccess, allGetAllCountriesData]);\r\n  \r\n  \r\n    useEffect(() => {\r\n      if (!isGetAllCitiesFetching && isGetAllCitiesSuccess && allGetAllCitiesData) {\r\n        const cities = allGetAllCitiesData.map((item) => ({\r\n          value: item.cityId,\r\n          label: item.name,\r\n        }));\r\n        let data = { ...registeredFormData };\r\n        const dropdownField = data?.formFields?.find(data => data.id === \"cityId\");\r\n        dropdownField.fieldSetting.options = cities;\r\n        setRegisteredFormData(data);\r\n      }\r\n    }, [isGetAllCitiesFetching, isGetAllCitiesSuccess, allGetAllCitiesData]);\r\n  \r\n  \r\n    const handleChangeAddressDropdownList = (data, dataField) => {\r\n      const manageData = { ...registeredFormData };\r\n      if (dataField === \"countryId\") {\r\n        setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', manageData, 'stateId', item => item.countryId === data.value);\r\n        setDropDownOptionField(null, 'cityId', 'name', manageData, 'cityId', null);\r\n        setFieldSetting(manageData, 'stateId', FieldSettingType.DISABLED, false);\r\n        registeredAddressRef.current.updateFormFieldValue({\r\n          countryId: data.value,\r\n          stateId: null,\r\n          cityId: null\r\n        });\r\n      } else if (dataField === \"stateId\") {\r\n        getAllCities(data.value)\r\n        setFieldSetting(manageData, 'cityId', FieldSettingType.DISABLED, false);\r\n        registeredAddressRef.current.updateFormFieldValue({\r\n          stateId: data.value,\r\n          cityId: null,\r\n        });\r\n      }\r\n      setRegisteredFormData(manageData);\r\n    };\r\n  \r\n    const formAddressActionHandler = {\r\n      DDL_CHANGED: handleChangeAddressDropdownList,\r\n    };\r\n    return( \r\n        <CardSection cardTitle=\"Registered Address\">\r\n            <div className=\"row\">\r\n              <FormCreator\r\n                config={registeredFormData}\r\n                ref={registeredAddressRef}\r\n                {...registeredFormData}\r\n                onActionChange={formAddressActionHandler}\r\n              />\r\n            </div>\r\n          </CardSection>\r\n    \r\n       )\r\n}\r\n\r\n// PropTypes for the component\r\nRegisteredAddressDetail.propTypes = {\r\n  registeredAddressRef: PropTypes.object.isRequired,\r\n  RegisteredAddressForm: PropTypes.object.isRequired,\r\n \r\n};\r\nexport default RegisteredAddressDetail;","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const RemitToAddressForm = {\r\n\r\n  initialState: {\r\n    addressLine1Id: \"\",\r\n    addressLine2Id: \"\",\r\n    stateId: \"\",\r\n    zipCode: \"\",\r\n    cityId: \"\",\r\n    countryId: \"\"\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"addressLine1Id\",\r\n      lable: \"Address Line 1\",\r\n      Field_Name: \"Address Line 1\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine1Id\",\r\n      fieldSetting: {\r\n        placeholder: \"Please Enter Address Line 1\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n        isDisabled: false,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine2Id\",\r\n      lable: \"Address Line 2\",\r\n      Field_Name: \"Address Line 2\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine2Id\",\r\n      fieldSetting: {\r\n        placeholder: \"Please Enter Address Line 2\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n        isDisabled: false,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"countryId\",\r\n      lable: \"Country \",\r\n      Field_Name: \"Country\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"countryId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Country\",\r\n        isEnableOnChange: true,\r\n        maxLength: 20,\r\n      },\r\n      //validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"stateId\",\r\n      lable: \"State \",\r\n      Field_Name: \"State\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"stateId\",\r\n      fieldSetting: {\r\n        //isDisabled: false,\r\n        placeholder: \"Select State\",\r\n        isEnableOnChange: true,\r\n        maxLength: 20,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"cityId\",\r\n      lable: \"City \",\r\n      Field_Name: \"City\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"cityId\",\r\n      fieldSetting: {\r\n        //isDisabled: false,\r\n        placeholder: \"Select City\",\r\n        isEnableOnChange: true,\r\n        maxLength: 9\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"zipCode\",\r\n      lable: \"Zip Code \",\r\n      Field_Name: \"Zip Code\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"zipCode\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Zip Code\",\r\n        allowSpace: true,\r\n        maxLength: 10,\r\n      },\r\n      validation: [{ type: \"validZipCode\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-6 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false,\r\n  },\r\n};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useEffect ,useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport FormCreator from \"../../../../../components/Forms/FormCreator\";\r\nimport CardSection from \"../../../../../components/ui/card/CardSection\";\r\nimport { FieldSettingType } from \"../../../../../utils/Enums/commonEnums\";\r\nimport { setDropDownOptionField, setFieldSetting } from \"../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport { useLazyGetAllCountriesQuery } from \"../../../../../app/services/basicdetailAPI\";\r\nimport { useLazyGetAllCitiesQuery, useLazyGetAllStatesQuery } from \"../../../../../app/services/addressAPI\";\r\n\r\n\r\nconst RemitToAddressDetail=({remitToAddressRef,RemitToAddressForm,isGetOrganizationBusinessAddressesData,isGetOrganizationBusinessAddressesSuccess})=>{\r\n \r\n  const [remitToAddressFormData,setRemitToAddressFormData]=useState(RemitToAddressForm)\r\n  const [getAllCountries, { isSuccess: isGetAllCountriesSuccess, isFetching: isGetAllCountriesFetching, data: allGetAllCountriesData }] = useLazyGetAllCountriesQuery();\r\n  const [getAllCities, { isSuccess: isGetAllCitiesSuccess, isFetching: isGetAllCitiesFetching, data: allGetAllCitiesData }] = useLazyGetAllCitiesQuery();\r\n  const [getAllStates, { isSuccess: isGetAllStateSuccess, isFetching: isGetAllStateFetching,data: allGetAllStatesData }] = useLazyGetAllStatesQuery();\r\n\r\n  useEffect(() => {\r\n    getAllCountries();\r\n    getAllStates();\r\n  }, []);\r\n\r\n//   useEffect(()=>{\r\n\r\n//   })\r\n    useEffect(() => {\r\n     \r\n      if (!isGetAllStateFetching && isGetAllStateSuccess && isGetOrganizationBusinessAddressesSuccess && isGetOrganizationBusinessAddressesData?.remitToAddress) {\r\n        const { remitToAddress } = isGetOrganizationBusinessAddressesData;\r\n        let data = { ...remitToAddressFormData };\r\n        if (remitToAddress.countryId) {\r\n          setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', data, 'stateId', item => item.countryId === remitToAddress.countryId);\r\n        }\r\n  \r\n        if (remitToAddress.stateId) {\r\n          getAllCities(remitToAddress.stateId)\r\n        }\r\n  \r\n        data.initialState = {\r\n          addressId: remitToAddress.addressId,\r\n          addressLine1Id: remitToAddress.addressLine1,\r\n          addressLine2Id: remitToAddress.addressLine2,\r\n          countryId: remitToAddress.countryId,\r\n          zipCode: remitToAddress.zipCode,\r\n          stateId: remitToAddress.stateId,\r\n          cityId: remitToAddress.cityId,\r\n        };\r\n        setRemitToAddressFormData(data);\r\n      }\r\n    }, [isGetAllStateFetching , isGetAllStateSuccess,isGetOrganizationBusinessAddressesSuccess, isGetOrganizationBusinessAddressesData]);\r\n\r\n   \r\n  \r\n    useEffect(() => {\r\n      if (!isGetAllCountriesFetching && isGetAllCountriesSuccess && allGetAllCountriesData) {\r\n        setDropDownOptionField(allGetAllCountriesData, 'countryId', 'name', remitToAddressFormData, 'countryId');\r\n      }\r\n    }, [isGetAllCountriesFetching, isGetAllCountriesSuccess, allGetAllCountriesData]);\r\n  \r\n  \r\n    useEffect(() => {\r\n      if (!isGetAllCitiesFetching && isGetAllCitiesSuccess && allGetAllCitiesData) {\r\n        const cities = allGetAllCitiesData.map((item) => ({\r\n          value: item.cityId,\r\n          label: item.name,\r\n        }));\r\n        let data = { ...remitToAddressFormData };\r\n        const dropdownField = data?.formFields?.find(data => data.id === \"cityId\");\r\n        dropdownField.fieldSetting.options = cities;\r\n        setRemitToAddressFormData(data);\r\n      }\r\n    }, [isGetAllCitiesFetching, isGetAllCitiesSuccess, allGetAllCitiesData]);\r\n  \r\n  \r\n    const handleChangeAddressDropdownList = (data, dataField) => {\r\n      const manageData = { ...remitToAddressFormData };\r\n      if (dataField === \"countryId\") {\r\n        setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', manageData, 'stateId', item => item.countryId === data.value);\r\n        setDropDownOptionField(null, 'cityId', 'name', manageData, 'cityId', null);\r\n        setFieldSetting(manageData, 'stateId', FieldSettingType.DISABLED, false);\r\n        remitToAddressRef.current.updateFormFieldValue({\r\n          countryId: data.value,\r\n          stateId: null,\r\n          cityId: null\r\n        });\r\n      } else if (dataField === \"stateId\") {\r\n        getAllCities(data.value)\r\n        setFieldSetting(manageData, 'cityId', FieldSettingType.DISABLED, false);\r\n        remitToAddressRef.current.updateFormFieldValue({\r\n          stateId: data.value,\r\n          cityId: null,\r\n        });\r\n      }\r\n      setRemitToAddressFormData(manageData);\r\n    };\r\n  \r\n    const formAddressActionHandler = {\r\n      DDL_CHANGED: handleChangeAddressDropdownList,\r\n    };\r\n    return( \r\n        <CardSection cardTitle=\"Remit To Address\">\r\n            <div className=\"row\">\r\n              <FormCreator\r\n                config={remitToAddressFormData}\r\n                ref={remitToAddressRef}\r\n                {...remitToAddressFormData}\r\n                onActionChange={formAddressActionHandler}\r\n              />\r\n            </div>\r\n          </CardSection>\r\n    \r\n       )\r\n}\r\n// PropTypes for the component\r\nRemitToAddressDetail.propTypes = {\r\n  remitToAddressRef: PropTypes.object.isRequired,\r\n  RemitToAddressForm: PropTypes.object.isRequired,\r\n};\r\nexport default RemitToAddressDetail;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { PhysicalAddressForm } from \"./config/PhysicalAddressForm.data\";\r\nimport PhysicalAddressDetail from \"./features/PhysicalAddressDetail\";\r\nimport { BillToAddressForm } from \"./config/BillToAddressForm.data\";\r\nimport BillToAddressDetail from \"./features/BillToAddressDetail\";\r\nimport { LabAddressForm } from \"./config/LabAddressForm.data\";\r\nimport LabAddressDetail from \"./features/LabAddressDetail\";\r\nimport { WarehouseAddressForm } from \"./config/WarehouseAddressForm.data\";\r\nimport WarehouseAddressDetail from \"./features/WarehouseAddressDetail\";\r\nimport { RegisteredAddressForm } from \"./config/RegisteredAddressForm.data\";\r\nimport RegisteredAddressDetail from \"./features/RegisteredAddressDetail\";\r\nimport Buttons from \"../../../../components/ui/button/Buttons\";\r\nimport { useAddEditBusinessAddressesMutation, useLazyGetOrganizationBusinessAddressesQuery, } from \"../../../../app/services/organizationAPI\";\r\nimport ToastService from \"../../../../services/toastService/ToastService\";\r\nimport { RemitToAddressForm } from \"./config/RemitToAddressForm.data\";\r\nimport RemitToAddressDetail from \"./features/RemitToAddressDetail\";\r\nimport DataLoader from \"../../../../components/ui/dataLoader/DataLoader\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst OrganizationBusinessAddressDetail = (isEditablePage) => {\r\n  const physicalAddressRef = useRef();\r\n  const billToAddressRef = useRef();\r\n  const labAddressRef = useRef();\r\n  const warehouseAddressRef = useRef();\r\n  const remitToAddressRef = useRef();\r\n  const registeredAddressRef = useRef();\r\n\r\n  const [physicalAddressData] = useState(PhysicalAddressForm);\r\n  const [billToAddressData] = useState(BillToAddressForm);\r\n  const [labAddressData] = useState(LabAddressForm);\r\n  const [warehouseAddressData] = useState(WarehouseAddressForm);\r\n  const [remitToAddressData] = useState(RemitToAddressForm);\r\n  const [registeredAddressData] = useState(RegisteredAddressForm);\r\n  const roles = useSelector((state) => state.auth.roles.roleName );\r\n  const [isButtonDisable, setIsButtonDisable] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const setFormSettingsForAll = (isViewOnly) => {\r\n      PhysicalAddressForm.formSetting.isViewOnly = isViewOnly;\r\n      BillToAddressForm.formSetting.isViewOnly = isViewOnly;\r\n      LabAddressForm.formSetting.isViewOnly = isViewOnly;\r\n      WarehouseAddressForm.formSetting.isViewOnly = isViewOnly;\r\n      RemitToAddressForm.formSetting.isViewOnly = isViewOnly;\r\n      RegisteredAddressForm.formSetting.isViewOnly = isViewOnly;\r\n    };\r\n  \r\n    if (isEditablePage) {\r\n      if (roles?.includes(\"Admin\")) {\r\n        setIsButtonDisable(false);\r\n        setFormSettingsForAll(false);  \r\n      } else {\r\n        setIsButtonDisable(true);\r\n        setFormSettingsForAll(true);  \r\n      }\r\n    }\r\n  }, [isEditablePage, roles]);\r\n\r\n  const [addressIds, setAddressIds] = useState({\r\n    registeredAddressId: 0,\r\n    organizationBusinessAddressId: 0,\r\n    physicalAddressId: 0,\r\n    billToAddressId: 0,\r\n    labAddressId: 0,\r\n    remitToAddressId: 0,\r\n    warehouseAddressId: 0,\r\n  });\r\n\r\n  const [\r\n    addEditBusinessAddresses,\r\n    {\r\n      isLoading: isAddEditBusinessAddressLoading,\r\n      isSuccess: isAddEditBusinessAddressSuccess,\r\n      data: isAddEditBusinessAddressData,\r\n    },\r\n  ] = useAddEditBusinessAddressesMutation();\r\n\r\n  const [\r\n    getOrganizationBusinessAddresses,\r\n    {\r\n      isFetching: isGetOrganizationBusinessAddressesFetching,\r\n      isSuccess: isGetOrganizationBusinessAddressesSuccess,\r\n      data: isGetOrganizationBusinessAddressesData,\r\n    },\r\n  ] = useLazyGetOrganizationBusinessAddressesQuery();\r\n\r\n  useEffect(() => {\r\n    getOrganizationBusinessAddresses();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isGetOrganizationBusinessAddressesFetching &&\r\n      isGetOrganizationBusinessAddressesSuccess &&\r\n      isGetOrganizationBusinessAddressesData\r\n    ) {\r\n      if (isGetOrganizationBusinessAddressesData) {\r\n        setAddressIds({\r\n          organizationBusinessAddressId:\r\n            isGetOrganizationBusinessAddressesData.organizationBusinessAddressId,\r\n          physicalAddressId:\r\n            isGetOrganizationBusinessAddressesData.physicalAddressId,\r\n          billToAddressId:\r\n            isGetOrganizationBusinessAddressesData.billToAddressId,\r\n          labAddressId: isGetOrganizationBusinessAddressesData.labAddressId,\r\n          warehouseAddressId:\r\n            isGetOrganizationBusinessAddressesData.warehouseAddressId,\r\n          remitToAddressId:\r\n            isGetOrganizationBusinessAddressesData.remitToAddressId,\r\n          registeredAddressId:\r\n            isGetOrganizationBusinessAddressesData.registeredAddressId,\r\n        });\r\n      }\r\n    }\r\n  }, [\r\n    isGetOrganizationBusinessAddressesFetching,\r\n    isGetOrganizationBusinessAddressesSuccess,\r\n    isGetOrganizationBusinessAddressesData,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (isAddEditBusinessAddressSuccess && isAddEditBusinessAddressData) {\r\n      ToastService.success(isAddEditBusinessAddressData.errorMessage);\r\n      getOrganizationBusinessAddresses();\r\n    }\r\n  }, [isAddEditBusinessAddressSuccess, isAddEditBusinessAddressData]);\r\n\r\n  const handleAddEditBusinessAddress = () => {\r\n    let physicalAddressFormData = physicalAddressRef.current.getFormData();\r\n    let billToAddressFormData = billToAddressRef.current.getFormData();\r\n    let labAddressFormData = labAddressRef.current.getFormData();\r\n    let warehouseAddressFormData = warehouseAddressRef.current.getFormData();\r\n    let remitToAddressFormData = remitToAddressRef.current.getFormData();\r\n    let registeredAddressFormData = registeredAddressRef.current.getFormData();\r\n\r\n    if (\r\n      physicalAddressFormData &&\r\n      billToAddressFormData &&\r\n      remitToAddressFormData &&\r\n      labAddressFormData &&\r\n      warehouseAddressFormData &&\r\n      registeredAddressFormData\r\n    ) {\r\n      const extractId = (item, key) =>\r\n        item[key] && typeof item[key] === \"object\"\r\n          ? item[key].value\r\n          : item[key];\r\n\r\n      let requestData = {\r\n        physicalAddress: {\r\n          addressId: physicalAddressFormData.addressId ?? 0,\r\n          addressLine1: physicalAddressFormData.addressLine1Id,\r\n          addressLine2: physicalAddressFormData.addressLine2Id,\r\n          cityId: extractId(physicalAddressFormData, \"cityId\"),\r\n          stateId: extractId(physicalAddressFormData, \"stateId\"),\r\n          countryId: extractId(physicalAddressFormData, \"countryId\"),\r\n          zipCode: physicalAddressFormData.zipCode,\r\n        },\r\n        billToAddress: {\r\n          addressId: billToAddressFormData.addressId ?? 0,\r\n          addressLine1: billToAddressFormData.addressLine1Id,\r\n          addressLine2: billToAddressFormData.addressLine2Id,\r\n          cityId: extractId(billToAddressFormData, \"cityId\"),\r\n          stateId: extractId(billToAddressFormData, \"stateId\"),\r\n          countryId: extractId(billToAddressFormData, \"countryId\"),\r\n          zipCode: billToAddressFormData.zipCode,\r\n        },\r\n        labAddress: {\r\n          addressId: labAddressFormData.addressId ?? 0,\r\n          addressLine1: labAddressFormData.addressLine1Id,\r\n          addressLine2: labAddressFormData.addressLine2Id,\r\n          cityId: extractId(labAddressFormData, \"cityId\"),\r\n          stateId: extractId(labAddressFormData, \"stateId\"),\r\n          countryId: extractId(labAddressFormData, \"countryId\"),\r\n          zipCode: labAddressFormData.zipCode,\r\n        },\r\n\r\n        warehouseAddress: {\r\n          addressId: warehouseAddressFormData.addressId ?? 0,\r\n          addressLine1: warehouseAddressFormData.addressLine1Id,\r\n          addressLine2: warehouseAddressFormData.addressLine2Id,\r\n          cityId: extractId(warehouseAddressFormData, \"cityId\"),\r\n          stateId: extractId(warehouseAddressFormData, \"stateId\"),\r\n          countryId: extractId(warehouseAddressFormData, \"countryId\"),\r\n          zipCode: warehouseAddressFormData.zipCode,\r\n        },\r\n\r\n        registeredAddress: {\r\n          addressId: registeredAddressFormData.addressId ?? 0,\r\n          addressLine1: registeredAddressFormData.addressLine1Id,\r\n          addressLine2: registeredAddressFormData.addressLine2Id,\r\n          cityId: extractId(registeredAddressFormData, \"cityId\"),\r\n          stateId: extractId(registeredAddressFormData, \"stateId\"),\r\n          countryId: extractId(registeredAddressFormData, \"countryId\"),\r\n          zipCode: registeredAddressFormData.zipCode,\r\n        },\r\n\r\n        remitToAddress: {\r\n          addressId: remitToAddressFormData.addressId ?? 0,\r\n          addressLine1: remitToAddressFormData.addressLine1Id,\r\n          addressLine2: remitToAddressFormData.addressLine2Id,\r\n          cityId: extractId(remitToAddressFormData, \"cityId\"),\r\n          stateId: extractId(remitToAddressFormData, \"stateId\"),\r\n          countryId: extractId(remitToAddressFormData, \"countryId\"),\r\n          zipCode: remitToAddressFormData.zipCode,\r\n        },\r\n        registeredAddressId: addressIds.registeredAddressId,\r\n        organizationBusinessAddressId: addressIds.organizationBusinessAddressId,\r\n        physicalAddressId: addressIds.physicalAddressId,\r\n        billToAddressId: addressIds.billToAddressId,\r\n        labAddressId: addressIds.labAddressId,\r\n        remitToAddressId: addressIds.remitToAddressId,\r\n        warehouseAddressId: addressIds.warehouseAddressId,\r\n      };\r\n      addEditBusinessAddresses(requestData);\r\n    }\r\n  };\r\n\r\n  if (isGetOrganizationBusinessAddressesFetching) {\r\n    return (\r\n      <div>\r\n        <DataLoader />\r\n      </div>\r\n    ); // Replace with a proper loading spinner or component\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* <h4 className=\"organization-tab-title\">Business Address</h4> */}\r\n      <RegisteredAddressDetail\r\n        isGetOrganizationBusinessAddressesData={isGetOrganizationBusinessAddressesData}\r\n        isGetOrganizationBusinessAddressesSuccess={isGetOrganizationBusinessAddressesSuccess}\r\n        registeredAddressData={registeredAddressData}\r\n        RegisteredAddressForm={RegisteredAddressForm}\r\n        registeredAddressRef={registeredAddressRef}\r\n      />\r\n\r\n      <PhysicalAddressDetail\r\n        isGetOrganizationBusinessAddressesData={isGetOrganizationBusinessAddressesData}\r\n        isGetOrganizationBusinessAddressesSuccess={isGetOrganizationBusinessAddressesSuccess}\r\n        physicalAddressData={physicalAddressData}\r\n        PhysicalAddressForm={PhysicalAddressForm}\r\n        physicalAddressRef={physicalAddressRef}\r\n      />\r\n\r\n      <BillToAddressDetail\r\n        isGetOrganizationBusinessAddressesData={isGetOrganizationBusinessAddressesData}\r\n        isGetOrganizationBusinessAddressesSuccess={isGetOrganizationBusinessAddressesSuccess}\r\n        billToAddressData={billToAddressData}\r\n        BillToAddressForm={BillToAddressForm}\r\n        billToAddressRef={billToAddressRef}\r\n      />\r\n\r\n      <LabAddressDetail\r\n        isGetOrganizationBusinessAddressesData={isGetOrganizationBusinessAddressesData}\r\n        isGetOrganizationBusinessAddressesSuccess={isGetOrganizationBusinessAddressesSuccess}\r\n        labAddressRef={labAddressRef}\r\n        LabAddressForm={LabAddressForm}\r\n        labAddressData={labAddressData}\r\n      />\r\n\r\n      <WarehouseAddressDetail\r\n        isGetOrganizationBusinessAddressesData={isGetOrganizationBusinessAddressesData}\r\n        isGetOrganizationBusinessAddressesSuccess={isGetOrganizationBusinessAddressesSuccess}\r\n        warehouseAddressRef={warehouseAddressRef}\r\n        WarehouseAddressForm={WarehouseAddressForm}\r\n        warehouseAddressData={warehouseAddressData}\r\n      />\r\n\r\n      <RemitToAddressDetail\r\n        isGetOrganizationBusinessAddressesData={isGetOrganizationBusinessAddressesData}\r\n        isGetOrganizationBusinessAddressesSuccess={isGetOrganizationBusinessAddressesSuccess}\r\n        remitToAddressData={remitToAddressData}\r\n        remitToAddressRef={remitToAddressRef}\r\n        RemitToAddressForm={RemitToAddressForm}\r\n      />\r\n      {isEditablePage ?\r\n      <div className=\"col-md-12\">\r\n        <div className=\"d-flex align-item-end justify-content-end\">\r\n          <Buttons\r\n            buttonTypeClassName=\"theme-button mr-2\"\r\n            buttonText=\"Save\"\r\n            isLoading={isAddEditBusinessAddressLoading}\r\n            onClick={handleAddEditBusinessAddress}\r\n            isDisable={isButtonDisable}\r\n          />\r\n        </div>\r\n      </div>\r\n       : null}\r\n    </div>\r\n  );\r\n};\r\nOrganizationBusinessAddressDetail.propTypes = {\r\n  registeredAddressData: PropTypes.object,\r\n  RegisteredAddressForm: PropTypes.object,\r\n  registeredAddressRef: PropTypes.object,\r\n  physicalAddressData: PropTypes.object,\r\n  PhysicalAddressForm: PropTypes.object,\r\n  physicalAddressRef: PropTypes.object,\r\n  billToAddressData: PropTypes.object,\r\n  BillToAddressForm: PropTypes.object,\r\n  billToAddressRef: PropTypes.object,\r\n  labAddressData: PropTypes.object,\r\n  LabAddressForm: PropTypes.object,\r\n  labAddressRef: PropTypes.object,\r\n  warehouseAddressData: PropTypes.object,\r\n  WarehouseAddressForm: PropTypes.object,\r\n  warehouseAddressRef: PropTypes.object,\r\n  remitToAddressData: PropTypes.object,\r\n  remitToAddressRef: PropTypes.object,\r\n  isAddEditBusinessAddressLoading: PropTypes.bool,\r\n  handleAddEditBusinessAddress: PropTypes.func,\r\n  addEditBusinessAddresses: PropTypes.func,\r\n  addressIds: PropTypes.object,\r\n};\r\n\r\nexport default OrganizationBusinessAddressDetail;\r\n"],"names":["PhysicalAddressForm","initialState","addressLine1Id","addressLine2Id","stateId","zipCode","cityId","countryId","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","INPUT","dataField","fieldSetting","placeholder","isEnableOnChange","isMultiSelect","isDisabled","maxLength","style","containerCss","SELECT","allowSpace","validation","type","formSetting","isViewOnly","_ref","physicalAddressRef","isGetOrganizationBusinessAddressesData","isGetOrganizationBusinessAddressesSuccess","physicalFormData","setPhysicalFormData","useState","getAllCountries","isSuccess","isGetAllCountriesSuccess","isFetching","isGetAllCountriesFetching","data","allGetAllCountriesData","useLazyGetAllCountriesQuery","getAllCities","isGetAllCitiesSuccess","isGetAllCitiesFetching","allGetAllCitiesData","useLazyGetAllCitiesQuery","getAllStates","isGetAllStateSuccess","isGetAllStateFetching","allGetAllStatesData","useLazyGetAllStatesQuery","useEffect","physicalAddress","setDropDownOptionField","item","addressId","addressLine1","addressLine2","_data$formFields","cities","map","value","label","name","dropdownField","find","options","formAddressActionHandler","DDL_CHANGED","handleChangeAddressDropdownList","manageData","setFieldSetting","FieldSettingType","DISABLED","current","updateFormFieldValue","_jsx","CardSection","cardTitle","children","className","FormCreator","config","ref","onActionChange","BillToAddressForm","billToAddressRef","billToAddressFormData","setBillToAddressFormData","billToAddress","LabAddressForm","labAddressRef","labAddressFormData","setLabAddressFormData","labAddress","WarehouseAddressForm","warehouseAddressRef","warehouseAddressFormData","setWarehouseAddressFormData","warehouseAddress","RegisteredAddressForm","registeredAddressRef","registeredFormData","setRegisteredFormData","registeredAddress","RemitToAddressForm","remitToAddressRef","remitToAddressFormData","setRemitToAddressFormData","remitToAddress","isEditablePage","useRef","physicalAddressData","billToAddressData","labAddressData","warehouseAddressData","remitToAddressData","registeredAddressData","roles","useSelector","state","auth","roleName","isButtonDisable","setIsButtonDisable","setFormSettingsForAll","includes","addressIds","setAddressIds","registeredAddressId","organizationBusinessAddressId","physicalAddressId","billToAddressId","labAddressId","remitToAddressId","warehouseAddressId","addEditBusinessAddresses","isLoading","isAddEditBusinessAddressLoading","isAddEditBusinessAddressSuccess","isAddEditBusinessAddressData","useAddEditBusinessAddressesMutation","getOrganizationBusinessAddresses","isGetOrganizationBusinessAddressesFetching","useLazyGetOrganizationBusinessAddressesQuery","ToastService","success","errorMessage","DataLoader","_jsxs","RegisteredAddressDetail","PhysicalAddressDetail","BillToAddressDetail","LabAddressDetail","WarehouseAddressDetail","RemitToAddressDetail","Buttons","buttonTypeClassName","buttonText","onClick","handleAddEditBusinessAddress","physicalAddressFormData","getFormData","registeredAddressFormData","_physicalAddressFormD","_billToAddressFormDat","_labAddressFormData$a","_warehouseAddressForm","_registeredAddressFor","_remitToAddressFormDa","extractId","key","requestData","isDisable"],"sourceRoot":""}