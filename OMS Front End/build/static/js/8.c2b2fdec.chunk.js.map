{"version":3,"file":"static/js/8.c2b2fdec.chunk.js","mappings":"qNAaA,MAAMA,EAAqBC,EAAAA,MAAW,IAAM,iCA2F5C,EAxF8BC,IAAiG,IAAhG,qBAAEC,EAAoB,iBAAEC,EAAgB,aAAEC,EAAY,eAAEC,EAAc,iBAAEC,GAAkBL,EAErH,MAAMM,GAAaC,EAAAA,EAAAA,WACb,QAAEC,IAAYC,EAAAA,EAAAA,MAEbC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IAErC,oBAAEC,EAAmB,WAAEC,IAAeC,EAAAA,EAAAA,YAAWC,EAAAA,IAEjD,KAAEC,EAAI,WAAEC,EAAU,UAAEC,IAAcC,EAAAA,EAAAA,OACjCC,GAAyBF,UAAWG,EAAiBL,KAAMM,KAAiBC,EAAAA,EAAAA,OAEnFC,EAAAA,EAAAA,YAAU,KACN,IAAKP,GAAcC,GAAaF,EAAM,CAClC,MAAMS,EAAUT,EAAKU,KAAKC,IAAI,CAC1BC,MAAOD,EAAKE,iBACZC,MAAOH,EAAKI,SAEMC,EAAAA,EAAwBC,WAAWC,MAAMP,GAA4B,eAAnBA,EAAKQ,YAC/DC,aAAaC,QAAUZ,CACzC,IACD,CAACR,EAAYC,EAAWF,KAE3BQ,EAAAA,EAAAA,YAAU,KACFH,GAAmBC,IACnBgB,EAAAA,EAAaC,QAAQjB,EAAYkB,cACjCxC,IACJ,GACD,CAACqB,EAAiBC,IAGrB,MAkBMmB,EAAoBA,CAACC,EAAO1B,KAC9BT,EACI,UACA,mCACA,SACA,UACFoC,MAAMC,IACAA,GACAxB,EAAsBJ,EAAK6B,yBAC/B,GACF,EAGAC,EAAgB,CAElBC,OAAQN,GAGZ,OACIO,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAACnD,EAAkB,CAACQ,WAAYA,EAAY8C,eAAgBvC,EAAqBkC,cAAeA,EAAeM,kBAtC7FA,KACtB1C,GAAcD,EAAU,EAsChBR,iBAAkBA,EAAkBC,aAAcA,EAAcF,qBAAsBA,EAAsBI,iBAAkBA,EAC9HS,WAAYA,EAAY4B,kBAAmBA,EAAmBtC,eAAgBA,KAOnF,C","sources":["pages/customerDetail/feature/customerSettingDetail/features/DeliveryMethod/ManageDevliveryMethod.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\r\n//** Lib's */\r\nimport { addEditDeliveryFormData } from \"./config/DevliveryConfig\";\r\nimport BasicDetailContext from \"../../../../../../utils/ContextAPIs/Customer/BasicDetailContext\";\r\n//** Service's */\r\nimport SwalAlert from \"../../../../../../services/swalService/SwalService\";\r\nimport ToastService from \"../../../../../../services/toastService/ToastService\";\r\nimport { useGetAllDeliveryMethodsQuery } from \"../../../../../../app/services/commonAPI\";\r\nimport { useDeleteCustomerDeliveryMethodsByIdMutation } from \"../../../../../../app/services/customerSettingsAPI\";\r\nimport PropTypes from 'prop-types';\r\n\r\n//** Component's */\r\nconst DeliveryMethodList = React.lazy(() => import(\"./feature/DeliveryMethodList\"));\r\n// const AddEditDeliveryMethod = React.lazy(() => import(\"./feature/AddEditDeliveryMethod\"));\r\n\r\nconst ManageDevliveryMethod = ({ handleGetDefaultList, isGetDataLoading, isShowButton, isEditablePage, customerStatusId }) => {\r\n\r\n    const molGridRef = useRef();\r\n    const { confirm } = SwalAlert();\r\n    // const [isEdit, setIsEdit] = useState(false);\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    const { deliveryMethodsList, customerId } = useContext(BasicDetailContext);\r\n\r\n    const { data, isFetching, isSuccess } = useGetAllDeliveryMethodsQuery();\r\n    const [deleteDeliveryMethods, { isSuccess: isDeleteSuccess, data: isDeletData }] = useDeleteCustomerDeliveryMethodsByIdMutation();\r\n\r\n    useEffect(() => {\r\n        if (!isFetching && isSuccess && data) {\r\n            const getData = data.map((item) => ({\r\n                value: item.deliveryMethodId,\r\n                label: item.name,\r\n            }));\r\n            const dropdownField = addEditDeliveryFormData.formFields.find((item) => item.dataField === \"chargeType\");\r\n            dropdownField.fieldSetting.options = getData;\r\n        }\r\n    }, [isFetching, isSuccess, data]);\r\n\r\n    useEffect(() => {\r\n        if (isDeleteSuccess && isDeletData) {\r\n            ToastService.success(isDeletData.errorMessage);\r\n            handleGetDefaultList();\r\n        }\r\n    }, [isDeleteSuccess, isDeletData]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setShowModal(!showModal);\r\n        // setIsEdit(false);\r\n    };\r\n\r\n    // //** Success */\r\n    // const onSuccess = () => {\r\n    //     setShowModal(!showModal);\r\n    //     handleGetDefaultList();\r\n    // };\r\n\r\n    //** Action Handler */\r\n    // const handleEditModal = (data) => {\r\n    //     setShowModal(!showModal);\r\n    //     setIsEdit(true);\r\n    //     setDeliveryMethodId(data.customerDeliveryMethodId)\r\n    // }\r\n\r\n    const handleDeleteClick = (index, data) => {\r\n        confirm(\r\n            \"Delete?\",\r\n            \"Are you sure you want to Delete?\",\r\n            \"Delete\",\r\n            \"Cancel\"\r\n        ).then((confirmed) => {\r\n            if (confirmed) {\r\n                deleteDeliveryMethods(data.customerDeliveryMethodId);\r\n            }\r\n        });\r\n    };\r\n\r\n    const actionHandler = {\r\n        // EDIT: handleEditModal,\r\n        DELETE: handleDeleteClick,\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <DeliveryMethodList molGridRef={molGridRef} ourAccountData={deliveryMethodsList} actionHandler={actionHandler} handleToggleModal={handleToggleModal}\r\n                isGetDataLoading={isGetDataLoading} isShowButton={isShowButton} handleGetDefaultList={handleGetDefaultList} customerStatusId={customerStatusId}\r\n                customerId={customerId} handleDeleteClick={handleDeleteClick} isEditablePage={isEditablePage} />\r\n            {/* {showModal && (\r\n                <AddEditDeliveryMethod handleToggleModal={handleToggleModal} showModal={showModal}\r\n                    // deliveryMethodId={deliveryMethodId} \r\n                    onSuccess={onSuccess}\r\n                    isEdit={isEdit} />\r\n            )} */}\r\n        </>\r\n    )\r\n}\r\n\r\nManageDevliveryMethod.propTypes = {\r\n    handleGetDefaultList: PropTypes.func.isRequired,\r\n    isGetDataLoading: PropTypes.bool.isRequired,\r\n    isShowButton: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default ManageDevliveryMethod;"],"names":["DeliveryMethodList","React","_ref","handleGetDefaultList","isGetDataLoading","isShowButton","isEditablePage","customerStatusId","molGridRef","useRef","confirm","SwalAlert","showModal","setShowModal","useState","deliveryMethodsList","customerId","useContext","BasicDetailContext","data","isFetching","isSuccess","useGetAllDeliveryMethodsQuery","deleteDeliveryMethods","isDeleteSuccess","isDeletData","useDeleteCustomerDeliveryMethodsByIdMutation","useEffect","getData","map","item","value","deliveryMethodId","label","name","addEditDeliveryFormData","formFields","find","dataField","fieldSetting","options","ToastService","success","errorMessage","handleDeleteClick","index","then","confirmed","customerDeliveryMethodId","actionHandler","DELETE","_jsx","_Fragment","children","ourAccountData","handleToggleModal"],"sourceRoot":""}