{"version":3,"file":"static/js/6282.400d48b7.chunk.js","mappings":"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","sources":["common/features/component/Document/feature/DocumentList.js","utils/TransformData/TransformAPIData.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, {\r\n  forwardRef,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useState,\r\n} from \"react\";\r\n//** Lib's */\r\n\r\nimport Image from \"../../../../../components/image/Image\";\r\nimport DataLoader from \"../../../../../components/ui/dataLoader/DataLoader\";\r\nimport NoRecordFound from \"../../../../../components/ui/noRecordFound/NoRecordFound\";\r\nimport { hasFunctionalPermission } from \"../../../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\nimport {\r\n  documentTransformData,\r\n  supplierDocumentTransformData,\r\n} from \"../../../../../utils/TransformData/TransformAPIData\";\r\n//** Service's */\r\nimport SwalAlert from \"../../../../../services/swalService/SwalService\";\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\n\r\n// import CenterModel from \"../../../../../components/ui/centerModel/CenterModel\";\r\nimport { ModulePathName } from \"../../../../../utils/Enums/commonEnums\";\r\nimport FileViewer from \"react-file-viewer\";\r\nimport PropTypes from \"prop-types\";\r\nimport Iconify from \"../../../../../components/ui/iconify/Iconify\";\r\nimport SidebarModel from \"../../../../../components/ui/sidebarModel/SidebarModel\";\r\nimport formatDate from \"../../../../../lib/formatDate\";\r\n// import { ModulePathName } from \"../../../../../utils/Enums/commonEnums\";\r\n\r\nconst DocumentList = forwardRef(\r\n  ({\r\n    keyId,\r\n    isSupplier,\r\n    downloadDocument,\r\n    deleteDocumentsById,\r\n    getDocumentsById,\r\n    childRef,\r\n    SecurityKey,\r\n    isEditablePage,\r\n    isArchive,\r\n  }) => {\r\n    //** State */\r\n    const { confirm } = SwalAlert();\r\n    const [documentListData, setDocumentListData] = useState([]);\r\n    const [showDeleteButton, setShowDeleteButton] = useState(true);\r\n    const [showDownalodButton, setShowDownalodButton] = useState(true);\r\n    const [selectedDocument, setSelectedDocument] = useState(null);\r\n    const [getFileType, setGetFileType] = useState([]);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [actionType, setActionType] = useState(null);\r\n    const [downloadFileName, setDownloadFileName] = useState();\r\n\r\n    const [Delete, { isSuccess: isDeleteSucess, data: isDeleteData }] =\r\n      deleteDocumentsById();\r\n\r\n    /**\r\n     * This hook dynamically sets the API call based on the module (customer or supplier).\r\n     * The API endpoint and parameters are configured within the SupplierDocumentDetail OR CustomerDocumentDetail component.\r\n     */\r\n    // const [Delete, { isSuccess: isDeleteSucess, data: isDeleteData }] =\r\n    //   deleteDocumentsById();\r\n    const [\r\n      getList,\r\n      { isFetching: isListFetching, isSuccess: isListSucess, data: isListData },\r\n    ] = getDocumentsById();\r\n\r\n    const [\r\n      Downalod,\r\n      {\r\n        isFetching: isDownalodFetching,\r\n        isSuccess: isDownalodSucess,\r\n        data: isDownalodData,\r\n      },\r\n    ] = downloadDocument();\r\n\r\n    //** UseEffect */\r\n    useEffect(() => {\r\n      onGetData();\r\n    }, [keyId, isArchive]);\r\n\r\n    useEffect(() => {\r\n      if (isEditablePage && SecurityKey) {\r\n        const hasDeletePermission = hasFunctionalPermission(SecurityKey.DELETE);\r\n        const hasDownalodPermission = hasFunctionalPermission(\r\n          SecurityKey.DOWNALOD\r\n        );\r\n\r\n        if (hasDeletePermission) {\r\n          if (hasDeletePermission.hasAccess === true) {\r\n            setShowDeleteButton(true);\r\n          } else {\r\n            setShowDeleteButton(false);\r\n          }\r\n        }\r\n        if (hasDownalodPermission) {\r\n          if (hasDownalodPermission.hasAccess === true) {\r\n            setShowDownalodButton(true);\r\n          } else {\r\n            setShowDownalodButton(false);\r\n          }\r\n        }\r\n      }\r\n    }, [isEditablePage, SecurityKey]);\r\n\r\n    useEffect(() => {\r\n      if (isListSucess && isListData && !isListFetching) {\r\n        let modifyData = isSupplier\r\n          ? supplierDocumentTransformData(isListData)\r\n          : documentTransformData(isListData);\r\n\r\n        // Ensure modifyData is an array\r\n        if (!Array.isArray(modifyData)) {\r\n          modifyData = Object.values(modifyData).flat();\r\n        }\r\n\r\n        // Filter documents based on isArchive flag\r\n\r\n        const filteredData = modifyData.filter(\r\n          (doc) => doc.isArchive === isArchive\r\n        );\r\n        setDocumentListData(filteredData);\r\n\r\n        // Detect file types\r\n        const detectedFileTypes = new Set();\r\n        filteredData.forEach((item) => {\r\n          const fileType = determineFileType(item.attachment);\r\n          if ([\"pdf\", \"csv\", \"docx\", \"xlsx\"].includes(fileType)) {\r\n            detectedFileTypes.add(fileType);\r\n          }\r\n        });\r\n\r\n        setGetFileType(Array.from(detectedFileTypes));\r\n      }\r\n    }, [isListSucess, isListData, isListFetching, isArchive]);\r\n\r\n    useEffect(() => {\r\n      if (!isDownalodFetching && isDownalodSucess && isDownalodData) {\r\n        const fileData = isDownalodData.fileData;\r\n        const blob = new Blob([fileData], { type: fileData.type });\r\n        const fileURL = URL.createObjectURL(blob);\r\n\r\n        if (actionType === \"download\") {\r\n          const link = document.createElement(\"a\");\r\n          link.href = fileURL;\r\n          link.download = downloadFileName;\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          link.remove();\r\n          URL.revokeObjectURL(fileURL);\r\n        } else if (actionType === \"view\") {\r\n          setSelectedDocument(fileURL);\r\n          setIsModalOpen(true);\r\n          setGetFileType(determineFileType(isDownalodData.fileName));\r\n        }\r\n      }\r\n    }, [isDownalodFetching, isDownalodSucess, isDownalodData]);\r\n\r\n    useEffect(() => {\r\n      if (isDeleteSucess && isDeleteData) {\r\n        ToastService.success(isDeleteData.errorMessage);\r\n        onGetData();\r\n      }\r\n    }, [isDeleteSucess, isDeleteData]);\r\n\r\n    const handleDocumentAction = (action, fileName, name) => {\r\n      setDownloadFileName(name);\r\n      setSelectedDocument(null);\r\n      setIsModalOpen(false);\r\n      setActionType(action);\r\n\r\n      let request = {\r\n        folderName: isSupplier\r\n          ? ModulePathName.SUPPLIER\r\n          : ModulePathName.CUSTOMER,\r\n        keyId: keyId,\r\n        fileName: fileName,\r\n      };\r\n\r\n      if (action === \"download\" || action === \"view\") {\r\n        Downalod(request);\r\n      }\r\n    };\r\n\r\n    const handleDelete = (documentId) => {\r\n      confirm(\r\n        \"Delete?\",\r\n        \"Are you sure you want to Delete?\",\r\n        \"Delete\",\r\n        \"Cancel\"\r\n      ).then((confirmed) => {\r\n        if (confirmed) {\r\n          Delete(documentId);\r\n        }\r\n      });\r\n    };\r\n\r\n    const determineFileType = (fileName) => {\r\n      const extension = fileName?.split(\".\").pop().toLowerCase();\r\n      switch (extension) {\r\n        case \"pdf\":\r\n          return \"pdf\";\r\n        case \"docx\":\r\n          return \"docx\";\r\n        case \"ppt\":\r\n        case \"pptx\":\r\n          return \"pptx\";\r\n        case \"xlsx\":\r\n          return \"xlsx\";\r\n        case \"csv\":\r\n          return \"csv\";\r\n        case \"xls\":\r\n          return \"xls\";\r\n        case \"doc\":\r\n          return \"doc\";\r\n        default:\r\n          return null;\r\n      }\r\n    };\r\n\r\n    const onGetData = () => {\r\n      keyId && getList(keyId);\r\n    };\r\n\r\n    useImperativeHandle(childRef, () => ({\r\n      callChildFunction: onGetData,\r\n    }));\r\n\r\n    const handleToggleModal = () => {\r\n      setIsModalOpen(false);\r\n      setSelectedDocument(null);\r\n      setActionType(null);\r\n    };\r\n\r\n    return (\r\n      <div className=\"document-list-sec\">\r\n        <div className=\"document-listing\">\r\n          <div className=\"row\">\r\n            {!isListFetching ? (\r\n              documentListData.length > 0 ? (\r\n                documentListData.map((data) => (\r\n                  <div\r\n                    className=\"col-xl-4 col-lg-4 col-md-6 col-12\"\r\n                    key={data.customerDocumentId}\r\n                  >\r\n                    <div className=\"documents\">\r\n                      <div className=\"left-icons\">\r\n                        <Image\r\n                          imagePath={data.documentIcon}\r\n                          alt=\"Document Icon\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"right-desc\">\r\n                        <div className=\"doc-details\">\r\n                          <div className=\"document-typename\">{data.type}</div>\r\n                          <div className=\"document-name\">{data.name}</div>\r\n                          <div className=\"document-type\">{data.attachment}</div>\r\n                          <div className=\"document-type\">\r\n                            {formatDate(data.createdAt, \"MM/DD/YYYY hh:mm A\")}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"document-action\">\r\n                          {getFileType.length > 0 &&\r\n                            [\"pdf\", \"csv\", \"docx\", \"xlsx\"].includes(\r\n                              determineFileType(data.attachment)\r\n                            ) && (\r\n                              <span\r\n                                className=\"action-icon\"\r\n                                onClick={() =>\r\n                                  handleDocumentAction(\"view\", data.attachment)\r\n                                }\r\n                              >\r\n                                <Iconify icon=\"lets-icons:view-light\" />\r\n                              </span>\r\n                            )}\r\n\r\n                          {showDownalodButton && (\r\n                            <span\r\n                              className=\"action-icon\"\r\n                              onClick={() =>\r\n                                handleDocumentAction(\r\n                                  \"download\",\r\n                                  data.attachment,\r\n                                  data.name\r\n                                )\r\n                              }\r\n                            >\r\n                              <Iconify icon=\"uil:folder-download\" />\r\n                            </span>\r\n                          )}\r\n                          {isArchive\r\n                            ? null\r\n                            : showDeleteButton && (\r\n                                <span\r\n                                  className=\"action-icon\"\r\n                                  onClick={() =>\r\n                                    handleDelete(\r\n                                      isSupplier\r\n                                        ? data.supplierDocumentId\r\n                                        : data.customerDocumentId\r\n                                    )\r\n                                  }\r\n                                >\r\n                                  <Iconify\r\n                                    icon=\"mingcute:delete-2-line\"\r\n                                    className=\"delete-icon\"\r\n                                  />\r\n                                </span>\r\n                              )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <NoRecordFound />\r\n              )\r\n            ) : (\r\n              <DataLoader />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <SidebarModel\r\n          isOpen={isModalOpen}\r\n          contentClass=\"content-65\"\r\n          modalTitle=\"File Preview\"\r\n          onClose={handleToggleModal}\r\n        >\r\n          <div className=\"model-height-fix doc-view\">\r\n            {selectedDocument && getFileType ? (\r\n              getFileType === \"pdf\" ? (\r\n                <div className=\"pdf-iframe\">\r\n                  <iframe\r\n                    src={selectedDocument}\r\n                    title=\"PDF Preview\"\r\n                    style={{ width: \"100%\", height: \"200%\" }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <FileViewer\r\n                  fileType={getFileType}\r\n                  filePath={selectedDocument}\r\n                  onError={(error) => console.error(\"Error:\", error)}\r\n                />\r\n              )\r\n            ) : null}\r\n          </div>\r\n        </SidebarModel>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nDocumentList.propTypes = {\r\n  keyId: PropTypes.number.isRequired,\r\n  isSupplier: PropTypes.bool.isRequired,\r\n  downloadDocument: PropTypes.func.isRequired,\r\n  deleteDocumentsById: PropTypes.func.isRequired,\r\n  getDocumentsById: PropTypes.func.isRequired,\r\n  childRef: PropTypes.object.isRequired,\r\n  SecurityKey: PropTypes.object.isRequired,\r\n  isEditablePage: PropTypes.bool.isRequired,\r\n  isArchive: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default DocumentList;\r\n","import formatDate from \"../../lib/formatDate\";\r\nimport { FileTypeIcons } from \"../../common/features/component/Document/Config/DocuementsData\";\r\n\r\nexport const modifyContactType = (apiResponseData) => {\r\n  const allType = {\r\n    id: 0,\r\n    type: \"All\", // It's used for all the types\r\n    isForSuppliers: true,\r\n    isForCustomers: true,\r\n    contactTypeId: \"\",\r\n  };\r\n  return [allType, ...apiResponseData];\r\n};\r\n\r\nexport const getDropDownId = (id, isEdit) => {\r\n  if (isEdit) {\r\n    return id && typeof id === \"object\" ? String(id.value) : String(id);\r\n  } else {\r\n    return Array.isArray(id) ? id.map(String).join(\",\") : id && typeof id === \"object\" ? String(id.value) : String(id);;\r\n  }\r\n};\r\n\r\nexport const modifyAddressType = (apiResponseData) => {\r\n  const allType = {\r\n    id: 0,\r\n    type: \"All\", // It's used for all the types\r\n    isForSuppliers: true,\r\n    isForCustomers: true,\r\n    addressTypeId: \"\",\r\n  };\r\n  return [allType, ...apiResponseData];\r\n};\r\n\r\nexport const modifyPhoneNumberData = (phoneDataArray) => {\r\n  const noPrimaryFound = phoneDataArray.every(data => !data.isPrimary);\r\n  const newArray = phoneDataArray.map((phoneData, index) => ({\r\n    ...phoneData,\r\n    extension: phoneData.extension === \"-\" ? 0 : phoneData.extension,\r\n    isPrimary: noPrimaryFound && index === 0 ? true : phoneData.isPrimary,\r\n  }));\r\n  return newArray;\r\n};\r\n\r\nexport const modifyEmailAddressData = (emailDataArray) => {\r\n  const noPrimaryFound = emailDataArray.every(data => !data.isPrimary);\r\n  const newArray = emailDataArray.map((emailData, index) => ({\r\n    ...emailData,\r\n    isPrimary: noPrimaryFound && index === 0 ? true : emailData.isPrimary\r\n  }));\r\n  return newArray;\r\n};\r\n\r\nexport const modifyTimeLineData = (timelineData) => {\r\n  const newArray = timelineData.map((data) => ({\r\n    ...data,\r\n    description:\r\n      data.description +\r\n      \" by \" +\r\n      data.name +\r\n      \" on \" +\r\n      formatDate(data.changedAt, \"MM/DD/YYYY hh:mm A\"),\r\n  }));\r\n  return newArray;\r\n};  \r\n\r\nexport const getFileTypeIcon = (filename) => {\r\n  const parts = filename?.split(\".\");\r\n  const fileType = parts?.length > 1 ? parts[parts.length - 1] : \"\";\r\n  return getIconForFileType(fileType);\r\n};\r\n\r\nconst getIconForFileType = (fileType) => {\r\n  const fileTypeIcon = FileTypeIcons.find((icon) => icon.type === fileType);\r\n  return fileTypeIcon ? fileTypeIcon.icon : null;\r\n};\r\n\r\nexport const documentTransformData = (data) => {\r\n\r\n\r\n  return data.reduce((acc, item) => {\r\n    const {\r\n      type,\r\n      attachment,\r\n      customerDocumentId,\r\n      customerId,\r\n      documentTypeId,\r\n      name,\r\n      createdAt,\r\n      isArchive,\r\n    } = item;\r\n\r\n    // Extract the file type and get the file icon basde on the file type\r\n    const documentIcon = getFileTypeIcon(attachment);\r\n\r\n    const transformedItem = {\r\n      attachment,\r\n      customerDocumentId,\r\n      customerId,\r\n      documentTypeId,\r\n      name,\r\n      documentIcon,\r\n      createdAt,\r\n      isArchive,\r\n      type\r\n    };\r\n\r\n    if (!acc[type]) {\r\n      acc[type] = [];\r\n    }\r\n\r\n    acc[type].push(transformedItem);\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nexport const supplierDocumentTransformData = (data) => {\r\n  return data.reduce((acc, item) => {\r\n    const {\r\n      type,\r\n      attachment,\r\n      supplierDocumentId,\r\n      supplierId,\r\n      documentTypeId,\r\n      name,\r\n      createdAt,\r\n      isArchive\r\n    } = item;\r\n\r\n    // Extract the file type and get the file icon basde on the file type\r\n    const documentIcon = getFileTypeIcon(attachment);\r\n\r\n    const transformedItem = {\r\n      attachment,\r\n      supplierDocumentId,\r\n      supplierId,\r\n      documentTypeId,\r\n      name,\r\n      documentIcon,\r\n      createdAt,\r\n      isArchive\r\n    };\r\n\r\n    if (!acc[type]) {\r\n      acc[type] = [];\r\n    }\r\n\r\n    acc[type].push(transformedItem);\r\n    return acc;\r\n  }, {});\r\n};\r\n"],"names":["forwardRef","_ref","keyId","isSupplier","downloadDocument","deleteDocumentsById","getDocumentsById","childRef","SecurityKey","isEditablePage","isArchive","confirm","SwalAlert","documentListData","setDocumentListData","useState","showDeleteButton","setShowDeleteButton","showDownalodButton","setShowDownalodButton","selectedDocument","setSelectedDocument","getFileType","setGetFileType","isModalOpen","setIsModalOpen","actionType","setActionType","downloadFileName","setDownloadFileName","Delete","isSuccess","isDeleteSucess","data","isDeleteData","getList","isFetching","isListFetching","isListSucess","isListData","Downalod","isDownalodFetching","isDownalodSucess","isDownalodData","useEffect","onGetData","hasDeletePermission","hasFunctionalPermission","DELETE","hasDownalodPermission","DOWNALOD","hasAccess","modifyData","supplierDocumentTransformData","documentTransformData","Array","isArray","Object","values","flat","filteredData","filter","doc","detectedFileTypes","Set","forEach","item","fileType","determineFileType","attachment","includes","add","from","fileData","blob","Blob","type","fileURL","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","remove","revokeObjectURL","fileName","ToastService","success","errorMessage","handleDocumentAction","action","name","request","folderName","ModulePathName","SUPPLIER","CUSTOMER","split","pop","toLowerCase","useImperativeHandle","callChildFunction","_jsxs","className","children","_jsx","DataLoader","length","map","Image","imagePath","documentIcon","alt","formatDate","createdAt","onClick","Iconify","icon","handleDelete","documentId","supplierDocumentId","customerDocumentId","then","confirmed","NoRecordFound","SidebarModel","isOpen","contentClass","modalTitle","onClose","handleToggleModal","src","title","style","width","height","FileViewer","filePath","onError","error","console","modifyContactType","apiResponseData","id","isForSuppliers","isForCustomers","contactTypeId","getDropDownId","isEdit","String","value","join","modifyAddressType","addressTypeId","modifyPhoneNumberData","phoneDataArray","noPrimaryFound","every","isPrimary","phoneData","index","extension","modifyEmailAddressData","emailDataArray","emailData","modifyTimeLineData","timelineData","description","changedAt","getFileTypeIcon","filename","parts","getIconForFileType","fileTypeIcon","FileTypeIcons","find","reduce","acc","customerId","documentTypeId","transformedItem","push","supplierId"],"sourceRoot":""}