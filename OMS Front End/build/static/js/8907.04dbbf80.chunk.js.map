{"version":3,"file":"static/js/8907.04dbbf80.chunk.js","mappings":"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","sources":["pages/order/feature/orderItemDetail/feature/VerifyProductInfo/VerifyProductDetail.js","utils/Enums/APIEventEnums.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useEffect, useState } from \"react\";\r\n//** Lib's */\r\nimport { ErrorMessage } from \"../../../../../../data/appMessages\";\r\nimport { EventName } from \"../../../../../../utils/Enums/APIEventEnums\";\r\nimport DataLoader from \"../../../../../../components/ui/dataLoader/DataLoader\";\r\n//** Service's */\r\nimport ToastService from \"../../../../../../services/toastService/ToastService\";\r\nimport { useThirdPartyAPICallMutation } from \"../../../../../../app/services/thirdPartyAPI\";\r\nimport NoRecordFound from \"../../../../../../components/ui/noRecordFound/NoRecordFound\";\r\nimport { AppIcons } from \"../../../../../../data/appIcons\";\r\nimport Image from \"../../../../../../components/image/Image\";\r\nimport Input from \"../../../../../../components/ui/inputs/input/Input\";\r\nimport GridCheckbox from \"../../../../../../components/FinalMolGrid/ui/checkbox/GridCheckbox\";\r\n\r\nconst VerifyProductDetail = ({\r\n  productId,\r\n  onVerifyProductList,\r\n  setIsVerifyProduct,\r\n}) => {\r\n  const [productDetail, setProductDetail] = useState({});\r\n  const [tempProductDetail, setTempProductDetail] = useState({});\r\n  const [editingField, setEditingField] = useState(\"\"); // Track which field is being edited\r\n\r\n  const [\r\n    getThirdPartyApiResponse,\r\n    {\r\n      isLoading: isApiResponseLoading,\r\n      isSuccess: isApiResponseSuccess,\r\n      data: isApiResponseData,\r\n    },\r\n  ] = useThirdPartyAPICallMutation();\r\n\r\n  useEffect(() => {\r\n    if (productId) {\r\n      getProductDetailById();\r\n    }\r\n  }, [productId]);\r\n\r\n  useEffect(() => {\r\n    // Array of all the checkable conditions\r\n    const checks = [\r\n      tempProductDetail.isChemicalChecked,\r\n      tempProductDetail.isCASNoChecked,\r\n      tempProductDetail.isMDLChecked,\r\n    ];\r\n    // Check if all conditions are true using .every()\r\n    if (checks.every(Boolean)) {\r\n      setIsVerifyProduct(true);\r\n    } else {\r\n      setIsVerifyProduct(false);\r\n    }\r\n  }, [setIsVerifyProduct, setTempProductDetail, tempProductDetail]);\r\n\r\n  useEffect(() => {\r\n    if (isApiResponseSuccess && isApiResponseData) {\r\n      if (isApiResponseData.isSuccess) {\r\n        const responseData = JSON.parse(isApiResponseData.data);\r\n        let productDetail = responseData?.data;\r\n        setProductDetail(productDetail);\r\n        let request = {\r\n          ...productDetail,\r\n          isChemicalChecked: false,\r\n          isCASNoChecked: false,\r\n          isMDLChecked: false,\r\n        };\r\n        setTempProductDetail(request);\r\n        onVerifyProductList(productDetail);\r\n      } else {\r\n        ToastService.warning(\r\n          isApiResponseData.message || ErrorMessage.DefaultMessage\r\n        );\r\n      }\r\n    }\r\n  }, [isApiResponseSuccess, isApiResponseData]);\r\n\r\n  const getProductDetailById = () => {\r\n    let dynamicParameters = { productId };\r\n    let request = {\r\n      eventName: EventName.AURUMPRODUCTDETAILS,\r\n      isDynamicParameter: true,\r\n      parameters: JSON.stringify(dynamicParameters),\r\n    };\r\n    getThirdPartyApiResponse(request);\r\n  };\r\n\r\n  const handleInputChange = (field, value) => {\r\n    setTempProductDetail((prevDetail) => ({\r\n      ...prevDetail,\r\n      [field]: value,\r\n    }));\r\n  };\r\n\r\n  const handleCheckboxChange = (dataField, checked) => {\r\n    setTempProductDetail((prevDetail) => ({\r\n      ...prevDetail,\r\n      [dataField]: checked,\r\n    }));\r\n  };\r\n\r\n  const handleSaveClick = (field) => {\r\n    if (tempProductDetail[field] !== productDetail[field]) {\r\n      setProductDetail((prevDetail) => ({\r\n        ...prevDetail,\r\n        [field]: tempProductDetail[field],\r\n      }));\r\n      ToastService.success(`${field} has been updated.`);\r\n    } else {\r\n      ToastService.info(`No changes made to ${field}.`);\r\n    }\r\n    setEditingField(\"\"); // Exit edit mode after saving\r\n  };\r\n\r\n  const handleEditClick = (field) => {\r\n    setEditingField(field); // Set the field to be edited\r\n  };\r\n\r\n  const handleCancelClick = () => {\r\n    setEditingField(\"\");\r\n  };\r\n\r\n  const shouldShowPencilIcon = (field) => {\r\n    // Only show pencil icon if not editing and the checkbox is false\r\n    const checkboxState =\r\n      field === \"ProductName\"\r\n        ? tempProductDetail.isChemicalChecked\r\n        : field === \"CASNo\"\r\n        ? tempProductDetail.isCASNoChecked\r\n        : field === \"MDLNo\"\r\n        ? tempProductDetail.isMDLChecked\r\n        : false;\r\n    return editingField !== field && !checkboxState;\r\n  };\r\n\r\n  return (\r\n    <div className=\"verify-product-group\">\r\n      <div className=\"verify-product-label\">Verify Product Details</div>\r\n      {!isApiResponseLoading ? (\r\n        productDetail && Object.keys(productDetail).length > 0 ? (\r\n          <div className=\"verify-product-details\">\r\n            <div className=\"product-info\">\r\n              <span className=\"catalog-label\">Catalog ID&nbsp;:</span>\r\n              <span className=\"catalog-data\">{productDetail?.CatalogId}</span>\r\n            </div>\r\n            <div className=\"product-info-img\">\r\n              <div className=\"product-img\">\r\n                <Image imagePath={AppIcons.NoStructureImg} />\r\n              </div>\r\n              <div className=\"desc-sec\">\r\n                {/* <div className=\"detail-row\">\r\n                  <span className=\"detail-label\">Catalog ID</span>\r\n                  <span className=\"detail-value\">\r\n                    {productDetail?.CatalogId}\r\n                  </span>\r\n                  <span className=\"detail-action\"></span>\r\n                </div> */}\r\n                <div className=\"detail-row\">\r\n                  <span className=\"detail-label\">Chemical Name</span>\r\n                  <span className=\"detail-value\">\r\n                    {editingField === \"ProductName\" ? (\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"ProductName\"\r\n                        value={tempProductDetail.ProductName || \"\"}\r\n                        onChange={(e) =>\r\n                          handleInputChange(\"ProductName\", e.target.value)\r\n                        }\r\n                        maxLength={100}\r\n                        isDisable={tempProductDetail.isChecked} // Disable input based on checkbox\r\n                      />\r\n                    ) : (\r\n                      tempProductDetail.ProductName || \"N/A\"\r\n                    )}\r\n                  </span>\r\n                  <span className=\"detail-action\">\r\n                    {editingField === \"ProductName\" ? (\r\n                      <>\r\n                        <button\r\n                          className=\"edit-button\"\r\n                          onClick={() => handleSaveClick(\"ProductName\")}\r\n                        >\r\n                          <Image\r\n                            imagePath={AppIcons.DoneIcon}\r\n                            altText=\"Save Icon\"\r\n                          />\r\n                        </button>\r\n                        <button\r\n                          className=\"edit-button\"\r\n                          onClick={() => handleCancelClick()}\r\n                        >\r\n                          <Image\r\n                            imagePath={AppIcons.CancelIcon}\r\n                            altText=\"Cancel Icon\"\r\n                          />\r\n                        </button>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <GridCheckbox\r\n                          name=\"isChemicalChecked\"\r\n                          checked={tempProductDetail.isChemicalChecked || false}\r\n                          onChange={(dataField, checked) =>\r\n                            handleCheckboxChange(dataField, checked)\r\n                          }\r\n                          dataField=\"isChemicalChecked\"\r\n                          isStaticCheckBox={true}\r\n                        />\r\n                        <div className=\"right-edit-pencil\">\r\n                          {shouldShowPencilIcon(\"ProductName\") && (\r\n                            <button\r\n                              className=\"edit-button\"\r\n                              onClick={() => handleEditClick(\"ProductName\")}\r\n                            >\r\n                              <Image\r\n                                imagePath={AppIcons.PencilIcon}\r\n                                altText=\"Edit Icon\"\r\n                              />\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </span>\r\n                </div>\r\n                <div className=\"detail-row\">\r\n                  <span className=\"detail-label\">CAS Number</span>\r\n                  <span className=\"detail-value\">\r\n                    {editingField === \"CASNo\" ? (\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"CASNo\"\r\n                        value={tempProductDetail.CASNo || \"\"}\r\n                        onChange={(e) =>\r\n                          handleInputChange(\"CASNo\", e.target.value)\r\n                        }\r\n                        maxLength={30}\r\n                        isDisable={tempProductDetail.isCASChecked} // Disable input based on checkbox\r\n                      />\r\n                    ) : (\r\n                      tempProductDetail.CASNo || \"N/A\"\r\n                    )}\r\n                  </span>\r\n                  <span className=\"detail-action\">\r\n                    {editingField === \"CASNo\" ? (\r\n                      <>\r\n                        <button\r\n                          className=\"edit-button\"\r\n                          onClick={() => handleSaveClick(\"CASNo\")}\r\n                        >\r\n                          <Image\r\n                            imagePath={AppIcons.DoneIcon}\r\n                            altText=\"Save Icon\"\r\n                          />\r\n                        </button>\r\n                        <button\r\n                          className=\"edit-button\"\r\n                          onClick={() => handleCancelClick()}\r\n                        >\r\n                          <Image\r\n                            imagePath={AppIcons.CancelIcon}\r\n                            altText=\"Cancel Icon\"\r\n                          />\r\n                        </button>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <GridCheckbox\r\n                          name=\"isCASNoChecked\"\r\n                          checked={tempProductDetail.isCASNoChecked || false}\r\n                          onChange={(dataField, checked) =>\r\n                            handleCheckboxChange(dataField, checked)\r\n                          }\r\n                          dataField=\"isCASNoChecked\"\r\n                          isStaticCheckBox={true}\r\n                        />\r\n                        <div className=\"right-edit-pencil\">\r\n                          {shouldShowPencilIcon(\"CASNo\") && (\r\n                            <button\r\n                              className=\"edit-button\"\r\n                              onClick={() => handleEditClick(\"CASNo\")}\r\n                            >\r\n                              <Image\r\n                                imagePath={AppIcons.PencilIcon}\r\n                                altText=\"Edit Icon\"\r\n                              />\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </span>\r\n                </div>\r\n                <div className=\"detail-row\">\r\n                  <span className=\"detail-label\">MDL Number</span>\r\n                  <span className=\"detail-value\">\r\n                    {editingField === \"MDLNo\" ? (\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"MDLNo\"\r\n                        value={tempProductDetail.MDLNo || \"\"}\r\n                        onChange={(e) =>\r\n                          handleInputChange(\"MDLNo\", e.target.value)\r\n                        }\r\n                        maxLength={30}\r\n                        isDisable={tempProductDetail.isMDLChecked} // Disable input based on checkbox\r\n                      />\r\n                    ) : (\r\n                      tempProductDetail.MDLNo || \"N/A\"\r\n                    )}\r\n                  </span>\r\n                  <span className=\"detail-action\">\r\n                    {editingField === \"MDLNo\" ? (\r\n                      <>\r\n                        <button\r\n                          className=\"edit-button\"\r\n                          onClick={() => handleSaveClick(\"MDLNo\")}\r\n                        >\r\n                          <Image\r\n                            imagePath={AppIcons.DoneIcon}\r\n                            altText=\"Save Icon\"\r\n                          />\r\n                        </button>\r\n                        <button\r\n                          className=\"edit-button\"\r\n                          onClick={() => handleCancelClick()}\r\n                        >\r\n                          <Image\r\n                            imagePath={AppIcons.CancelIcon}\r\n                            altText=\"Cancel Icon\"\r\n                          />\r\n                        </button>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <GridCheckbox\r\n                          name=\"isMDLChecked\"\r\n                          checked={tempProductDetail.isMDLChecked || false}\r\n                          onChange={(dataField, checked) =>\r\n                            handleCheckboxChange(dataField, checked)\r\n                          }\r\n                          dataField=\"isMDLChecked\"\r\n                          isStaticCheckBox={true}\r\n                        />\r\n                        <div className=\"right-edit-pencil\">\r\n                          {shouldShowPencilIcon(\"MDLNo\") && (\r\n                            <button\r\n                              className=\"edit-button\"\r\n                              onClick={() => handleEditClick(\"MDLNo\")}\r\n                            >\r\n                              <Image\r\n                                imagePath={AppIcons.PencilIcon}\r\n                                altText=\"Edit Icon\"\r\n                              />\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <NoRecordFound />\r\n        )\r\n      ) : (\r\n        <DataLoader />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VerifyProductDetail;\r\n","export const EventName = {\r\n    AURUMPRODUCTSEARCH: \"Aurum Product Search\",\r\n    AURUMPRODUCTDETAILS: \"Aurum Product Details\",\r\n    AURUMPRODUCTPRICELIST: \"Aurum Product Price List\"\r\n}"],"names":["_ref","productId","onVerifyProductList","setIsVerifyProduct","productDetail","setProductDetail","useState","tempProductDetail","setTempProductDetail","editingField","setEditingField","getThirdPartyApiResponse","isLoading","isApiResponseLoading","isSuccess","isApiResponseSuccess","data","isApiResponseData","useThirdPartyAPICallMutation","useEffect","getProductDetailById","isChemicalChecked","isCASNoChecked","isMDLChecked","every","Boolean","responseData","JSON","parse","request","ToastService","warning","message","ErrorMessage","DefaultMessage","dynamicParameters","eventName","EventName","AURUMPRODUCTDETAILS","isDynamicParameter","parameters","stringify","handleInputChange","field","value","prevDetail","handleCheckboxChange","dataField","checked","handleSaveClick","success","info","handleEditClick","handleCancelClick","shouldShowPencilIcon","checkboxState","_jsxs","className","children","_jsx","DataLoader","Object","keys","length","CatalogId","Image","imagePath","AppIcons","NoStructureImg","Input","type","name","ProductName","onChange","e","target","maxLength","isDisable","isChecked","_Fragment","onClick","DoneIcon","altText","CancelIcon","GridCheckbox","isStaticCheckBox","PencilIcon","CASNo","isCASChecked","MDLNo","NoRecordFound","AURUMPRODUCTSEARCH","AURUMPRODUCTPRICELIST"],"sourceRoot":""}