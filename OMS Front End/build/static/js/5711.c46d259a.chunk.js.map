{"version":3,"file":"static/js/5711.c46d259a.chunk.js","mappings":"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","sources":["common/features/component/Note/NoteGrid.js","common/features/component/Note/config/Notes.data.js","pages/customerDetail/feature/customerNoteDetail/CustomerNoteDetail.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n//** Lib's */\r\nimport { NotesData } from \"./config/Notes.data\";\r\nimport { AppIcons } from \"../../../../data/appIcons\";\r\nimport CardSection from \"../../../../components/ui/card/CardSection\";\r\nimport CenterModel from \"../../../../components/ui/centerModel/CenterModel\";\r\nimport { hasFunctionalPermission } from \"../../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\nimport { getFieldData } from \"../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport PropTypes from 'prop-types';\r\n//** Component's */\r\nconst NoteList = React.lazy(() => import(\"./feature/NoteList\"));\r\nconst AddEditNote = React.lazy(() => import(\"./feature/AddEditNote\"));\r\n\r\nconst NoteGrid = ({\r\n  keyId,\r\n  isSupplier,\r\n  isEditablePage,\r\n  SecurityKey,\r\n  onAddNotes,\r\n  onUpdateNotes,\r\n  onGetByIdNotes,\r\n}) => {\r\n  const listRef = useRef();\r\n  const { formSetting } = NotesData;\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [isEditModeData, setIsEditModeData] = useState();\r\n  const [showEditIcon, setShowEditIcon] = useState(true);\r\n  const [buttonVisible, setButtonVisible] = useState(true);\r\n  const [isButtonDisable, setIsButtonDisable] = useState(false);\r\n\r\n  const hasAddPermission = hasFunctionalPermission(SecurityKey?.ADD);\r\n  const hasEditPermission = hasFunctionalPermission(SecurityKey?.EDIT);\r\n\r\n  useEffect(() => {\r\n    if (hasEditPermission && hasAddPermission && SecurityKey) {\r\n      if (isEditablePage) {\r\n        if (hasEditPermission.isViewOnly === true) {\r\n          formSetting.isViewOnly = true;\r\n          setIsButtonDisable(true);\r\n          setShowEditIcon(true);\r\n          const noteFormData = getFieldData(NotesData, \"note\");\r\n          noteFormData.fieldSetting.isDisable = true;\r\n        } else if (hasEditPermission.isEditable === true) {\r\n          setShowEditIcon(true);\r\n        } else {\r\n          formSetting.isViewOnly = false;\r\n          setIsButtonDisable(false);\r\n          setShowEditIcon(false);\r\n        }\r\n      }\r\n      if (hasAddPermission.hasAccess === true) {\r\n        formSetting.isViewOnly = false;\r\n        setButtonVisible(true);\r\n      } else {\r\n        formSetting.isViewOnly = true;\r\n        setButtonVisible(false);\r\n      }\r\n    }\r\n  }, [hasEditPermission, hasAddPermission, isEditablePage, formSetting]);\r\n\r\n  const handleToggleModal = () => {\r\n    setIsEditMode(false);\r\n    setShowModal(!showModal);\r\n  };\r\n\r\n  const handleEditClick = (noteData) => {\r\n    setIsEditMode(true);\r\n    setShowModal(!showModal);\r\n    setIsEditModeData(noteData);\r\n  };\r\n\r\n  const onSuccess = () => {\r\n    setShowModal(!showModal);\r\n    if (listRef.current) {\r\n      listRef.current.callListFunction(keyId);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notes-main-card-section\">\r\n      <CardSection\r\n        cardTitle=\"Notes\"\r\n        buttonClassName=\"theme-button\"\r\n        textWithIcon={true}\r\n        iconImg={AppIcons.PlusIcon}\r\n        rightButton={buttonVisible }\r\n        buttonText=\"Add\"\r\n        titleButtonClick={handleToggleModal}\r\n      >\r\n        <div className=\"note-card-sec\">\r\n          <NoteList\r\n            listRef={listRef}\r\n            handleEditClick={handleEditClick}\r\n            onGetByIdNotes={onGetByIdNotes}\r\n            keyId={keyId}\r\n            isSupplier={isSupplier}\r\n            showEditIcon={showEditIcon}\r\n          />\r\n        </div>\r\n      </CardSection>\r\n\r\n      <CenterModel\r\n        showModal={showModal}\r\n        handleToggleModal={handleToggleModal}\r\n        modalTitle=\"Add/Edit Notes\"\r\n        modelSizeClass=\"w-60\"\r\n      >\r\n        <AddEditNote\r\n          keyId={keyId}\r\n          onAddNotes={onAddNotes}\r\n          onUpdateNotes={onUpdateNotes}\r\n          handleToggleModal={handleToggleModal}\r\n          isEditModeData={isEditModeData}\r\n          isSupplier={isSupplier}\r\n          isEditMode={isEditMode}\r\n          isButtonDisable={isButtonDisable}\r\n          onSuccess={onSuccess}\r\n        />\r\n      </CenterModel>\r\n    </div>\r\n  );\r\n};\r\n\r\nNoteGrid.propTypes = {\r\n  keyId: PropTypes.number.isRequired,\r\n  isSupplier: PropTypes.bool.isRequired,\r\n  isEditablePage: PropTypes.bool.isRequired,\r\n  SecurityKey: PropTypes.shape({\r\n    ADD: PropTypes.string,\r\n    EDIT: PropTypes.string,\r\n  }),\r\n  onAddNotes: PropTypes.func.isRequired,\r\n  onUpdateNotes: PropTypes.func.isRequired,\r\n  onGetByIdNotes: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default NoteGrid;\r\n","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const NotesData = {\r\n  name: \"Notes From\",\r\n  initialState: { note: \"\" },\r\n  formFields: [\r\n    {\r\n      id: \"note\",\r\n      lable: \"Notes :\",\r\n      Field_Name: \"notes\",\r\n      fieldType: FormFieldTypes.CKEDITOR,\r\n      dataField: \"note\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter\",\r\n        allowSpace: true,\r\n        maxLength: 1000,\r\n        isDisable: false\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 mb-input\",\r\n      },\r\n    },],\r\n  formSetting: {\r\n    isViewOnly: false\r\n  }\r\n}","import { useContext } from \"react\";\r\nimport { securityKey } from \"../../../../data/SecurityKey\";\r\nimport NoteGrid from \"../../../../common/features/component/Note/NoteGrid\";\r\nimport {\r\n  useAddCustomerNotesMutation,\r\n  useLazyGetCustomerNoteByCustomerIdQuery,\r\n  useUpdateCustomerNotesMutation,\r\n} from \"../../../../app/services/notesAPI\";\r\nimport BasicDetailContext from \"../../../../utils/ContextAPIs/Customer/BasicDetailContext\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst customerSecurityKey = {\r\n  ADD: securityKey.ADDCUSTOMERNOTE,\r\n  EDIT: securityKey.EDITCUSTOMERNOTE,\r\n};\r\n\r\nconst CustomerNoteDetail = ({ isEditablePage }) => {\r\n  const { customerId, isResponsibleUser } = useContext(BasicDetailContext);\r\n\r\n  return (\r\n    /**\r\n     * This component displays an NoteGrid for the supplier module.\r\n     * This hook dynamically sets the API call based on the module (customer or supplier).\r\n     */\r\n    <NoteGrid\r\n      keyId={customerId || 0}\r\n      isEditablePage={isEditablePage}\r\n      SecurityKey={!isResponsibleUser ? customerSecurityKey : null}\r\n      isSupplier={false}\r\n      onAddNotes={useAddCustomerNotesMutation}\r\n      onUpdateNotes={useUpdateCustomerNotesMutation}\r\n      onGetByIdNotes={useLazyGetCustomerNoteByCustomerIdQuery}\r\n    />\r\n  );\r\n};\r\n\r\nCustomerNoteDetail.propTypes = {\r\n  isEditablePage: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default CustomerNoteDetail;\r\n"],"names":["NoteList","React","AddEditNote","_ref","keyId","isSupplier","isEditablePage","SecurityKey","onAddNotes","onUpdateNotes","onGetByIdNotes","listRef","useRef","formSetting","NotesData","showModal","setShowModal","useState","isEditMode","setIsEditMode","isEditModeData","setIsEditModeData","showEditIcon","setShowEditIcon","buttonVisible","setButtonVisible","isButtonDisable","setIsButtonDisable","hasAddPermission","hasFunctionalPermission","ADD","hasEditPermission","EDIT","useEffect","isViewOnly","getFieldData","fieldSetting","isDisable","isEditable","hasAccess","handleToggleModal","_jsxs","className","children","_jsx","CardSection","cardTitle","buttonClassName","textWithIcon","iconImg","AppIcons","PlusIcon","rightButton","buttonText","titleButtonClick","handleEditClick","noteData","CenterModel","modalTitle","modelSizeClass","onSuccess","current","callListFunction","name","initialState","note","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","CKEDITOR","dataField","placeholder","allowSpace","maxLength","validation","type","style","containerCss","customerSecurityKey","securityKey","ADDCUSTOMERNOTE","EDITCUSTOMERNOTE","customerId","isResponsibleUser","useContext","BasicDetailContext","NoteGrid","useAddCustomerNotesMutation","useUpdateCustomerNotesMutation","useLazyGetCustomerNoteByCustomerIdQuery"],"sourceRoot":""}