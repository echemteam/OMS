{"version":3,"file":"static/js/9263.8072f796.chunk.js","mappings":"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","sources":["common/features/component/Contact/feature/AddEditContact.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\n//** Lib's */\r\nimport Buttons from \"../../../../../components/ui/button/Buttons\";\r\nimport { FieldSettingType } from \"../../../../../utils/Enums/commonEnums\";\r\nimport FormCreator from \"../../../../../components/Forms/FormCreator\";\r\nimport { contactDetailFormData } from \"../config/ContactDetailForm.data\";\r\nimport DataLoader from \"../../../../../components/ui/dataLoader/DataLoader\";\r\nimport { getDropDownId, modifyEmailAddressData, modifyPhoneNumberData } from \"../../../../../utils/TransformData/TransformAPIData\";\r\nimport { setDropDownOptionField, setFieldSetting } from \"../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport { hasFunctionalPermission } from \"../../../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\nimport PropTypes from \"prop-types\";\r\n//** Service's */\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\nimport { ErrorMessage } from \"../../../../../data/appMessages\";\r\n//** Component's */\r\nconst EmailAddressGrid = React.lazy(() => import(\"../../EmailAddress/EmailAddressGrid\"));\r\nconst ContactNumbersGrid = React.lazy(() => import(\"../../ContactNumber/ContactNumbersGrid\"));\r\n\r\nconst AddEditContact = forwardRef(({ keyId, isUpdateContactModel, addEditContactMutation, onSidebarClose, onSuccess, childRef, editRef, SecurityKey, customerStatusId, allGetAllContactTypesData, isGetAllContactTypesSucess,\r\n    isEditablePage, isSupplier, isEdit, isOpen, getContactById, getContectTypeId, customerId, isOrderManage, onhandleApiCall, contryIdCode, orderResetValue,\r\n    getCompletionCount }) => {\r\n\r\n    //** State */\r\n    const ref = useRef();\r\n    const { formSetting } = contactDetailFormData;\r\n    const [contactId, setContactId] = useState(0);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [customerContactId, setCustomerContactId] = useState(0);\r\n    const [supplierContactId, setSupplierContactId] = useState(0);\r\n    const [isButtonDisable, setIsButtonDisable] = useState(false);\r\n    const [phoneNumberList, setPhoneNumberList] = useState([]);\r\n    const [, setShouldRerenderFormCreator] = useState(false);\r\n    const [emailAddressList, setEmailAddressList] = useState([]);\r\n    const [formData, setFormData] = useState(contactDetailFormData);\r\n\r\n    //** API Call's */\r\n    /**\r\n        * This hook dynamically sets the API call based on the module (customer or supplier).\r\n        * The API endpoint and parameters are configured within the SupplierContactDetail OR CustomerContactDetail component.\r\n    */\r\n    const [getById, { isFetching: isGetByIdFetching, isSuccess: isGetByIdSucess, data: isGetByIdData }] = getContactById();\r\n    const [addEdit, { isLoading: isAddEditLoading, isSuccess: isAddEditSuccess, data: isAddEditData }] = addEditContactMutation();\r\n\r\n    const handleAddEdit = async () => {\r\n        handlWithoutApprovalAddEdit();\r\n    }\r\n    useEffect(() => {\r\n        if (isUpdateContactModel && isGetAllContactTypesSucess) {\r\n            const filterCondition = (item) => {\r\n                let condition = isSupplier ? item.isForSuppliers : item.isForCustomers;\r\n                return condition;\r\n            };\r\n            setDropDownOptionField(allGetAllContactTypesData, \"contactTypeId\", \"type\", formData, \"contactTypeId\", filterCondition);\r\n            setShouldRerenderFormCreator((prevState) => !prevState);\r\n     \r\n        }\r\n    }, [ isGetAllContactTypesSucess,isUpdateContactModel])\r\n\r\n    const handlWithoutApprovalAddEdit = () => {\r\n        const data = ref.current.getFormData();\r\n        if (!data) return;\r\n        if (emailAddressList.length > 0) {\r\n            const contactTypeId = getDropDownId(data.contactTypeId, isEdit);\r\n            const request = requestData(data, contactTypeId, isSupplier, keyId, emailAddressList, phoneNumberList, supplierContactId, customerContactId);\r\n            let req = {\r\n                ...request,\r\n                customerId: customerId ? customerId : request.customerId\r\n            }\r\n            addEdit(req);\r\n        } else {\r\n            ToastService.warning(ErrorMessage.ContactEmailAddressRequired);\r\n        }\r\n    };\r\n\r\n    const requestData = (data, contactTypeId, isSupplier, keyId, emailAddressList, phoneNumberList, supplierContactId, customerContactId) => {\r\n        return {\r\n            ...data,\r\n            contactId: contactId,\r\n            contactTypeId: String(contactTypeId),\r\n            [isSupplier ? 'supplierId' : 'customerId']: keyId,\r\n            emailAddressList: emailAddressList.length > 0 ? modifyEmailAddressData(emailAddressList) : null,\r\n            phoneNumberList: phoneNumberList.length > 0 ? modifyPhoneNumberData(phoneNumberList) : null,\r\n            [isSupplier ? 'supplierContactId' : 'customerContactId']: isSupplier ? supplierContactId : customerContactId,\r\n        };\r\n    };\r\n\r\n    //** UseEffect */\r\n    useEffect(() => {\r\n        if (isAddEditSuccess && isAddEditData) {\r\n            if (isAddEditData.errorMessage.includes('EXISTS')) {\r\n\r\n                ToastService.warning(isAddEditData.errorMessage);\r\n                return;\r\n            }\r\n            if (onSuccess) {\r\n                onSuccess();\r\n                ToastService.success(isAddEditData.errorMessage);\r\n                setContactId(isAddEditData?.keyValue);\r\n                if (isOrderManage) {\r\n                    onhandleApiCall(getContectTypeId)\r\n                }\r\n            }\r\n            getCompletionCount && getCompletionCount();\r\n        }\r\n    }, [isAddEditSuccess, isAddEditData]);\r\n\r\n    useEffect(() => {\r\n        if (!isGetByIdFetching && isGetByIdSucess && isGetByIdData) {\r\n            let data = isGetByIdData;\r\n            let form = { ...contactDetailFormData };\r\n            form.initialState = {\r\n                firstName: data.firstName,\r\n                lastName: data.lastName,\r\n                contactTypeId: data.contactTypeId,\r\n                isPrimary: data.isPrimary\r\n            }\r\n            setFormData(form);\r\n            setContactId(data.contactId);\r\n            isSupplier ? setSupplierContactId(data?.supplierContactId) : setCustomerContactId(data?.customerContactId);\r\n            setFieldSetting(form, 'contactTypeId', FieldSettingType.MULTISELECT);\r\n            const sortedPhoneList = [...isGetByIdData.phoneNumberList].sort((a, b) => a.phoneId - b.phoneId);\r\n            const modifyPhoneNumberList = sortedPhoneList.map((item, index) => ({\r\n                ...item,\r\n                id: index + 1,\r\n                extension: item.extension === 0 ? '-' : item.extension\r\n            }));\r\n\r\n            const sortedEmailList = [...isGetByIdData.emailAddressList].sort((a, b) => b.emailId - a.emailId);\r\n            const modifyEmailAddressLst = sortedEmailList.map((item, index) => ({\r\n                ...item,\r\n                id: index + 1\r\n            }));\r\n            setPhoneNumberList(modifyPhoneNumberList);\r\n            setEmailAddressList(modifyEmailAddressLst);\r\n        }\r\n    }, [isGetByIdFetching, isGetByIdSucess]);\r\n\r\n    //** Use Imperative Handle  */\r\n    useImperativeHandle(editRef, () => ({\r\n        callEditFunction: handleEditMode,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (isEditablePage && SecurityKey) {\r\n            const hasEditPermission = hasFunctionalPermission(SecurityKey.EDIT);\r\n            const hasAddPermission = hasFunctionalPermission(SecurityKey.ADD);\r\n            if (hasEditPermission && formSetting) {\r\n                if (editMode) {\r\n                    if (hasEditPermission.isViewOnly === true) {\r\n                        formSetting.isViewOnly = true;\r\n                        setIsButtonDisable(true);\r\n                    }\r\n                    else {\r\n                        formSetting.isViewOnly = false;\r\n                        setIsButtonDisable(false);\r\n                    }\r\n                }\r\n                else if (!editMode) {\r\n                    if (hasAddPermission.hasAccess === true) {\r\n                        formSetting.isViewOnly = false;\r\n                        setIsButtonDisable(false);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [editMode, editRef, SecurityKey]);\r\n\r\n    const handleEditMode = (contactId) => {\r\n        setEditMode(true);\r\n        contactId && getById(contactId);\r\n        // setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.DISABLED, true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isEdit && !isOrderManage) {\r\n            if (isSupplier) {\r\n                setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.MULTISELECT, false);\r\n            } else {\r\n                setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.MULTISELECT, true);\r\n            }\r\n            let form = { ...contactDetailFormData };\r\n\r\n            setFormData(form);\r\n            if (isOpen) {\r\n                setContactId(0);\r\n                setEditMode(false);\r\n                setPhoneNumberList([]);\r\n                setEmailAddressList([])\r\n            }\r\n        }\r\n        if (isOrderManage) {\r\n            setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.DISABLED, true);\r\n            setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.MULTISELECT, false);\r\n            let form = { ...contactDetailFormData };\r\n            form.initialState = {\r\n                ...form.initialState,\r\n                contactTypeId: getContectTypeId,\r\n            }\r\n            setFormData(form);\r\n            // setShouldRerenderFormCreator((prevState) => !prevState);\r\n        }\r\n    }, [isOpen])\r\n\r\n    //** Reset Data */\r\n    const onResetData = () => {\r\n        setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.DISABLED, false);\r\n        let form = { ...contactDetailFormData };\r\n        form.initialState = { ...contactDetailFormData.initialState };\r\n        setFormData(form);\r\n        setCustomerContactId(0);\r\n        setSupplierContactId(0);\r\n    };\r\n\r\n    //** Use Imperative Handle  */\r\n    useImperativeHandle(childRef, () => ({\r\n        callChildFunction: onResetData,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (orderResetValue && isOrderManage) {\r\n            setPhoneNumberList([]);\r\n            setEmailAddressList([])\r\n        }\r\n    }, [orderResetValue])\r\n\r\n    return (\r\n        <div>\r\n            {!isGetByIdFetching ?\r\n                <React.Fragment>\r\n                    <div className=\"row mt-2 addEditContact-form\">\r\n                        <FormCreator config={formData} ref={ref} {...formData} />\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <EmailAddressGrid isButtonDisable={isButtonDisable} emailAddressList={emailAddressList}\r\n                            setEmailAddressList={setEmailAddressList} contactId={contactId} isOrderManage={isOrderManage} />\r\n                        <ContactNumbersGrid isButtonDisable={isButtonDisable} phoneNumberList={phoneNumberList}\r\n                            setPhoneNumberList={setPhoneNumberList} contactId={contactId} contryIdCode={contryIdCode} isOrderManage={isOrderManage} />\r\n                    </div>\r\n                </React.Fragment>\r\n                : <DataLoader />\r\n            }\r\n            <div className=\"col-md-12 mt-3\">\r\n                <div className=\"d-flex align-item-end justify-content-end\">\r\n                    <div className=\"d-flex align-item-end\">\r\n                        {/* {!enableDisableButton && */}\r\n                        <Buttons\r\n                            buttonTypeClassName=\"theme-button\"\r\n                            buttonText='Save'\r\n                            isLoading={isAddEditLoading}\r\n                            onClick={handleAddEdit}\r\n                            isDisable={isButtonDisable} />\r\n                        {/* } */}\r\n                        <Buttons\r\n                            buttonTypeClassName=\"dark-btn ml-5\"\r\n                            buttonText=\"Cancel\"\r\n                            onClick={onSidebarClose} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nAddEditContact.propTypes = {\r\n    keyId: PropTypes.number,\r\n    addEditContactMutation: PropTypes.func.isRequired,\r\n    onSidebarClose: PropTypes.func,\r\n    onSuccess: PropTypes.func,\r\n    childRef: PropTypes.shape({\r\n        current: PropTypes.object\r\n    }),\r\n    editRef: PropTypes.shape({\r\n        current: PropTypes.object\r\n    }),\r\n    SecurityKey: PropTypes.shape({\r\n        EDIT: PropTypes.string,\r\n        ADD: PropTypes.string\r\n    }),\r\n    isEditablePage: PropTypes.bool,\r\n    isSupplier: PropTypes.bool,\r\n    isEdit: PropTypes.bool,\r\n    isOpen: PropTypes.bool,\r\n    getContactById: PropTypes.func.isRequired,\r\n    getContectTypeId: PropTypes.string,\r\n    customerId: PropTypes.number,\r\n    isOrderManage: PropTypes.bool,\r\n    onhandleApiCall: PropTypes.func\r\n};\r\n\r\nexport default AddEditContact;\r\n"],"names":["EmailAddressGrid","React","ContactNumbersGrid","forwardRef","_ref","keyId","isUpdateContactModel","addEditContactMutation","onSidebarClose","onSuccess","childRef","editRef","SecurityKey","customerStatusId","allGetAllContactTypesData","isGetAllContactTypesSucess","isEditablePage","isSupplier","isEdit","isOpen","getContactById","getContectTypeId","customerId","isOrderManage","onhandleApiCall","contryIdCode","orderResetValue","getCompletionCount","ref","useRef","formSetting","contactDetailFormData","contactId","setContactId","useState","editMode","setEditMode","customerContactId","setCustomerContactId","supplierContactId","setSupplierContactId","isButtonDisable","setIsButtonDisable","phoneNumberList","setPhoneNumberList","setShouldRerenderFormCreator","emailAddressList","setEmailAddressList","formData","setFormData","getById","isFetching","isGetByIdFetching","isSuccess","isGetByIdSucess","data","isGetByIdData","addEdit","isLoading","isAddEditLoading","isAddEditSuccess","isAddEditData","useEffect","filterCondition","item","isForSuppliers","isForCustomers","setDropDownOptionField","prevState","handlWithoutApprovalAddEdit","current","getFormData","length","contactTypeId","getDropDownId","request","requestData","req","ToastService","warning","ErrorMessage","ContactEmailAddressRequired","String","modifyEmailAddressData","modifyPhoneNumberData","errorMessage","includes","success","keyValue","form","initialState","firstName","lastName","isPrimary","setFieldSetting","FieldSettingType","MULTISELECT","modifyPhoneNumberList","sort","a","b","phoneId","map","index","id","extension","modifyEmailAddressLst","emailId","useImperativeHandle","callEditFunction","handleEditMode","hasEditPermission","hasFunctionalPermission","EDIT","hasAddPermission","ADD","isViewOnly","hasAccess","DISABLED","onResetData","callChildFunction","_jsxs","children","_jsx","DataLoader","className","FormCreator","config","Buttons","buttonTypeClassName","buttonText","onClick","async","isDisable"],"sourceRoot":""}