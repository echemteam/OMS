{"version":3,"file":"static/js/2312.78bb8740.chunk.js","mappings":"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","sources":["components/ui/centerModel/CenterModel.js","pages/Security/userManagement/Users.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./CenterModel.scss\";\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\nconst CenterModel = ({ isApprovalValidate, showModal, handleToggleModal, children, ...props }) => {\r\n  return (\r\n    <Modal\r\n      className={`center-model-popup ${props.modelSizeClass}`}\r\n      show={showModal}\r\n      onHide={handleToggleModal}\r\n      keyboard={!isApprovalValidate}\r\n      backdrop={isApprovalValidate ? \"static\" : true}\r\n    >\r\n      <Modal.Header closeButton={!isApprovalValidate}>\r\n        <div className=\"model-title\">{props.modalTitle}</div>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nCenterModel.propTypes = {\r\n  isApprovalValidate: PropTypes.bool,\r\n  showModal: PropTypes.bool.isRequired,\r\n  handleToggleModal: PropTypes.func.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  modelSizeClass: PropTypes.string,\r\n  modalTitle: PropTypes.string\r\n};\r\nexport default CenterModel;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport CardSection from \"../../../components/ui/card/CardSection\";\r\nimport { AppIcons } from \"../../../data/appIcons\";\r\nimport { UserGridConfig, UserHistoryGridConfig, userFormData } from \"./features/config/UserForm.data\";\r\nimport { encryptUrlData } from '../../../services/CryptoService'\r\nimport { useDeleteUserMutation, useGetUsersMutation, useLazyGetUserLoginLogoutHistoryByUserIdQuery } from '../../../app/services/userAPI'\r\nimport SwalAlert from \"../../../services/swalService/SwalService\";\r\nimport ToastService from \"../../../services/toastService/ToastService\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport useDebounce from \"../../../app/customHooks/useDebouce\";\r\nimport { securityKey } from \"../../../data/SecurityKey\";\r\nimport { hasFunctionalPermission } from \"../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\nimport \"./Users.scss\"\r\nimport FinalMolGrid from \"../../../components/FinalMolGrid/FinalMolGrid\";\r\nimport CenterModel from \"../../../components/ui/centerModel/CenterModel\";\r\nimport formatDate from \"../../../lib/formatDate\";\r\n\r\nconst Users = () => {\r\n\r\n  const molGridRef = useRef();\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n  const [totalRowCount, setTotalRowCount] = useState(0);\r\n  const [listData, setListData] = useState();\r\n  const debouncedSearch = useDebounce(search, 300);\r\n  const { confirm } = SwalAlert();\r\n  const navigate = useNavigate();\r\n  const [buttonVisible, setButtonVisible] = useState(false);\r\n  const[userList,setUserList]=useState([]);\r\n  const [isHistoryModalOpen, setIsHistoryModalOpen] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n \r\n  const hasAddPermission = hasFunctionalPermission(securityKey.ADDUSER);\r\n  const hasEditPermission = hasFunctionalPermission(securityKey.EDITUSER);\r\n  const hasDeletePermission = hasFunctionalPermission(securityKey.DELETEUSER);\r\n\r\n  const { formSetting } = userFormData;\r\n  const actionColumn = UserGridConfig.columns.find(column => column.name === \"Action\");\r\n\r\n  const [\r\n    getUsers,\r\n    { isLoading: isListLoading, isSuccess: isListSuccess, data: isListeData },\r\n  ] = useGetUsersMutation();\r\n    \r\n  const [\r\n    getUserLoginLogoutHistoryByUserId,\r\n    {\r\n      isFetching: isGetUserLoginLogoutHistoryByUserIdFetching,\r\n      isSuccess: isGetUserLoginLogoutHistoryByUserIdSuccess,\r\n      data: isGetUserLoginLogoutHistoryByUserIdData,\r\n    },\r\n  ] = useLazyGetUserLoginLogoutHistoryByUserIdQuery();\r\n\r\n  const [deleteUser, { isSuccess: isDeleteSuccess, data: isDeletData }] =\r\n    useDeleteUserMutation();\r\n\r\n  const getLists = (pageObject, sortingString) => {\r\n    const request = {\r\n      pagination: {\r\n        pageNumber: pageObject.pageNumber,\r\n        pageSize: pageObject.pageSize,\r\n      },\r\n      filters: { searchText: debouncedSearch },\r\n      sortString: sortingString\r\n    };\r\n    getUsers(request);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const value = event.target.value;\r\n    setSearch(value);\r\n  };\r\n\r\n  const handlePageChange = (page) => {\r\n    getLists(page, molGridRef.current.generateSortingString());\r\n  };\r\n\r\n  const handleSorting = (shortString) => {\r\n    getLists(molGridRef.current.getCurrentPageObject(), shortString);\r\n  }\r\n\r\n  //** Check grid Action Permission */\r\n  useEffect(() => {\r\n    if (hasEditPermission.isViewOnly === true) {\r\n      actionColumn.defaultAction.allowEdit = true;\r\n    }\r\n    else if (hasEditPermission.isEditable === true) {\r\n      actionColumn.defaultAction.allowEdit = true;\r\n    }\r\n    else {\r\n      actionColumn.defaultAction.allowEdit = false;\r\n    }\r\n  }, [hasEditPermission, actionColumn.defaultAction.allowEdit])\r\n\r\n  //** Check grid Action Permission */\r\n  useEffect(() => {\r\n    if (hasDeletePermission.hasAccess === true) {\r\n      actionColumn.defaultAction.allowDelete = true;\r\n    }\r\n    else if (hasDeletePermission.hasAccess === false) {\r\n      actionColumn.defaultAction.allowDelete = false;\r\n    }\r\n  }, [hasDeletePermission, actionColumn.defaultAction.allowDelete]);\r\n\r\n  // ** Check Form fields Permission */\r\n  useEffect(() => {\r\n    if (hasAddPermission.hasAccess === true) {\r\n      formSetting.isViewOnly = false;\r\n      setButtonVisible(true);\r\n    }\r\n  }, [hasEditPermission, hasAddPermission, formSetting.isViewOnly])\r\n\r\n  useEffect(() => {\r\n    if (isListSuccess && isListeData) {\r\n      if (isListeData) {\r\n        setListData(isListeData.dataSource);\r\n      }\r\n      if (isListeData.totalRecord) {\r\n        setTotalRowCount(isListeData.totalRecord);\r\n      }\r\n    }\r\n  }, [isListSuccess, isListeData]);\r\n\r\n  useEffect(() => {\r\n    if (isDeleteSuccess && isDeletData) {\r\n      ToastService.success(isDeletData.errorMessage);\r\n      const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n      getLists(currentPageObject, molGridRef.current.generateSortingString());\r\n    }\r\n  }, [isDeleteSuccess, isDeletData]);\r\n\r\n  useEffect(() => {\r\n    if (molGridRef.current) {\r\n      const defaultPageObject = molGridRef.current.getCurrentPageObject();\r\n      getLists(defaultPageObject, molGridRef.current.generateSortingString());\r\n    }\r\n  }, [debouncedSearch]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if ( !isGetUserLoginLogoutHistoryByUserIdFetching &&isGetUserLoginLogoutHistoryByUserIdSuccess && isGetUserLoginLogoutHistoryByUserIdData ) {\r\n      if (isGetUserLoginLogoutHistoryByUserIdData) {\r\n        const formattedHistoryData = isGetUserLoginLogoutHistoryByUserIdData.map(history => ({\r\n          ...history,\r\n          userLoginDateTime: formatDate(history.userLoginDateTime), \r\n          userLogoutDateTime: formatDate(history.userLogoutDateTime), \r\n           \r\n        }));\r\n        setUserList(formattedHistoryData);\r\n        setIsHistoryModalOpen(true);\r\n      }\r\n    }\r\n  }, [isGetUserLoginLogoutHistoryByUserIdFetching, isGetUserLoginLogoutHistoryByUserIdSuccess, isGetUserLoginLogoutHistoryByUserIdData,]);\r\n\r\n  const closeHistoryModal = () => {\r\n    setIsHistoryModalOpen(false);\r\n  };\r\n\r\n  const handleHistory=(data)=>{\r\n    setSelectedUser(data);\r\n     getUserLoginLogoutHistoryByUserId(data.userId);\r\n  }\r\n\r\n\r\n  const handleEidtClick = (data) => {\r\n    navigate(`/EditUser/${encryptUrlData(data.userId)}`, \"_blank\");\r\n  };\r\n\r\n  const handleDeleteClick = (data) => {\r\n    confirm(\r\n      \"Delete?\",\r\n      \"Are you sure you want to Delete?\",\r\n      \"Delete\",\r\n      \"Cancel\"\r\n    ).then((confirmed) => {\r\n      if (confirmed) {\r\n        deleteUser(data.userId);\r\n      }\r\n    });\r\n  };\r\n\r\n  const actionHandler = {\r\n    EDIT: handleEidtClick,\r\n    DELETE: handleDeleteClick,\r\n    HISTORY :handleHistory\r\n  };\r\n\r\n  const AddUser = () => {\r\n    navigate(\"/AddEditUser\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-lists\">\r\n      <CardSection\r\n        // cardTitle=\"View All Users\"\r\n        // cardSubTitle=\"Sub title add hear\"\r\n        searchInputName=\"Search By User Name\"\r\n        titleButtonClick={AddUser}\r\n        buttonClassName=\"btn theme-button\"\r\n        rightButton={buttonVisible}\r\n        buttonText=\"Add User\"\r\n        textWithIcon={true}\r\n        iconImg={AppIcons.PlusIcon}\r\n        handleChange={handleChange}\r\n        searchInput={true}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 table-striped \">\r\n            <FinalMolGrid\r\n              ref={molGridRef}\r\n              configuration={UserGridConfig}\r\n              dataSource={listData}\r\n              allowPagination={true}\r\n              pagination={{\r\n                totalCount: totalRowCount,\r\n                pageSize: 25,\r\n                currentPage: 1,\r\n              }}\r\n              onPageChange={handlePageChange}\r\n              onSorting={handleSorting}\r\n              isLoading={isListLoading}\r\n              onActionChange={actionHandler}\r\n            />\r\n          </div>\r\n        </div>\r\n      </CardSection>\r\n\r\n      <CenterModel\r\n        showModal={isHistoryModalOpen}\r\n        handleToggleModal={closeHistoryModal}\r\n        modalTitle={`User History : ${selectedUser?.firstName || ''} ${selectedUser?.lastName || ''}`}  \r\n        modelSizeClass=\"w-40\"\r\n      >\r\n         \r\n        <div className=\"row\">\r\n        <div className=\"col-md-12 table-striped p-3\">\r\n          <FinalMolGrid\r\n            ref={molGridRef}\r\n            configuration={UserHistoryGridConfig}\r\n            dataSource={userList}\r\n            allowPagination={false}\r\n            pagination={{\r\n              totalCount: totalRowCount,\r\n              pageSize: 20,\r\n              currentPage: 1,\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n      </CenterModel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n"],"names":["_ref","isApprovalValidate","showModal","handleToggleModal","children","props","_jsxs","Modal","className","modelSizeClass","show","onHide","keyboard","backdrop","_jsx","Header","closeButton","modalTitle","Body","Users","molGridRef","useRef","search","setSearch","useState","totalRowCount","setTotalRowCount","listData","setListData","debouncedSearch","useDebounce","confirm","SwalAlert","navigate","useNavigate","buttonVisible","setButtonVisible","userList","setUserList","isHistoryModalOpen","setIsHistoryModalOpen","selectedUser","setSelectedUser","hasAddPermission","hasFunctionalPermission","securityKey","ADDUSER","hasEditPermission","EDITUSER","hasDeletePermission","DELETEUSER","formSetting","userFormData","actionColumn","UserGridConfig","columns","find","column","name","getUsers","isLoading","isListLoading","isSuccess","isListSuccess","data","isListeData","useGetUsersMutation","getUserLoginLogoutHistoryByUserId","isFetching","isGetUserLoginLogoutHistoryByUserIdFetching","isGetUserLoginLogoutHistoryByUserIdSuccess","isGetUserLoginLogoutHistoryByUserIdData","useLazyGetUserLoginLogoutHistoryByUserIdQuery","deleteUser","isDeleteSuccess","isDeletData","useDeleteUserMutation","getLists","pageObject","sortingString","request","pagination","pageNumber","pageSize","filters","searchText","sortString","useEffect","isViewOnly","isEditable","defaultAction","allowEdit","hasAccess","allowDelete","dataSource","totalRecord","ToastService","success","errorMessage","currentPageObject","current","getCurrentPageObject","generateSortingString","defaultPageObject","formattedHistoryData","map","history","userLoginDateTime","formatDate","userLogoutDateTime","actionHandler","EDIT","encryptUrlData","userId","DELETE","then","confirmed","HISTORY","CardSection","searchInputName","titleButtonClick","AddUser","buttonClassName","rightButton","buttonText","textWithIcon","iconImg","AppIcons","PlusIcon","handleChange","event","value","target","searchInput","FinalMolGrid","ref","configuration","allowPagination","totalCount","currentPage","onPageChange","page","onSorting","shortString","onActionChange","CenterModel","closeHistoryModal","firstName","lastName","UserHistoryGridConfig"],"sourceRoot":""}