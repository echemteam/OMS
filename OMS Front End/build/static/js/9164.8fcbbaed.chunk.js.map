{"version":3,"file":"static/js/9164.8fcbbaed.chunk.js","mappings":"mMASA,MAmFA,EAnF0BA,IAOnB,IAPoB,gBACzBC,EAAe,WACfC,EAAU,kBACVC,EAAiB,cACjBC,EAAa,gBACbC,EAAe,qBACfC,GACDN,EACC,MAAOO,EAAuBC,IAA4BC,EAAAA,EAAAA,UAAS,KAEnEC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAgBV,EAAgBW,MAAMC,IAAWA,EAAMC,UAC7D,GAAIb,EACF,GAAIU,EAAe,CAEjB,MAAMI,EAAad,EAAgBe,MAAK,CAACC,EAAGC,IAAMA,EAAEC,GAAKF,EAAEE,KAC3DX,EAAyBO,EAC3B,MAEEP,EAAyBP,EAE7B,GACC,CAACA,KAEJS,EAAAA,EAAAA,YAAU,KAAO,IAADU,EACd,MAAMC,EAAoBC,EAAAA,KAA8C,QAA7BF,EAAIE,EAAAA,GAAkBC,eAAO,IAAAH,OAAA,EAAzBA,EAA2BI,MAAKC,GAAgC,eAAhB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQC,cAE/FL,EAAkBM,YAAYC,aAD5BvB,CAIJ,GACC,CAACA,IAQJ,OACEwB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,4DAA2DC,UACxEF,EAAAA,EAAAA,KAACG,EAAAA,QAAW,CACVC,UAAU,gBACVC,gBAAgB,eAChBC,cAAc,EACdC,QAASC,EAAAA,EAASC,SAClBC,aAAclC,EACdmC,WAAW,MACXC,iBAAkBtC,EAAkB4B,UAEpCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKC,UAClBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8BAA6BC,UAC1CF,EAAAA,EAAAA,KAACa,EAAAA,EAAY,CACXC,IAAKzC,EACL0C,cAAetB,EAAAA,GACfuB,WAAYtC,EACZuC,iBAAiB,EACjBC,eAAgB3C,EAChB4C,eAzBqBC,CAACvB,EAAWwB,KACzB,cAAdxB,GACFpB,EAAqB4C,EACvB,WA2BM,C","sources":["common/features/component/ContactNumber/feature/ContactNumberList.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\n//** Lib's */\r\nimport { AppIcons } from \"../../../../../data/appIcons\";\r\nimport { phoneNumberConfig } from \"../config/AddEditContactsForm.data\";\r\nimport CardSection from \"../../../../../components/ui/card/CardSection\";\r\nimport PropTypes from \"prop-types\";\r\nimport FinalMolGrid from \"../../../../../components/FinalMolGrid/FinalMolGrid\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst ContactNumberList = ({\r\n  phoneNumberList,\r\n  molGridRef,\r\n  handleToggleModal,\r\n  actionHandler,\r\n  isButtonDisable,\r\n  handleCheckBoxChange,\r\n}) => {\r\n  const [sortedPhoneNumberList, setSortedPhoneNumberList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const hasNewEntries = phoneNumberList.some((phone) => !phone.phoneId);\r\n    if (phoneNumberList) {\r\n      if (hasNewEntries) {\r\n        // Sort the list by id in descending order\r\n        const sortedList = phoneNumberList.sort((a, b) => b.id - a.id);\r\n        setSortedPhoneNumberList(sortedList);\r\n      } else {\r\n        // Update the state without sorting\r\n        setSortedPhoneNumberList(phoneNumberList);\r\n      }\r\n    }\r\n  }, [phoneNumberList]);\r\n\r\n  useEffect(() => {\r\n    const customActionExist = phoneNumberConfig && phoneNumberConfig.columns?.find(action => action?.fieldName === \"isPrimary\");\r\n    if (isButtonDisable) {\r\n      customActionExist.colSettings.isDisabled = true;\r\n    } else {\r\n      customActionExist.colSettings.isDisabled = false;\r\n    }\r\n  }, [isButtonDisable]);\r\n\r\n  const handleGridCheckBoxChange = (fieldName, rowData) => {\r\n    if (fieldName === \"isPrimary\") {\r\n      handleCheckBoxChange(rowData);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-xl-12 col-lg-12 col-md-12 col-12 mt-2 table-email-sec\">\r\n      <CardSection\r\n        cardTitle=\"Phone Numbers\"\r\n        buttonClassName=\"theme-button\"\r\n        textWithIcon={true}\r\n        iconImg={AppIcons.PlusIcon}\r\n        rightButton={!isButtonDisable}\r\n        buttonText=\"Add\"\r\n        titleButtonClick={handleToggleModal}\r\n      >\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 table-striped p-0\">\r\n            <FinalMolGrid\r\n              ref={molGridRef}\r\n              configuration={phoneNumberConfig}\r\n              dataSource={sortedPhoneNumberList}\r\n              allowPagination={false}\r\n              onActionChange={actionHandler}\r\n              onColumnChange={handleGridCheckBoxChange}\r\n            />\r\n          </div>\r\n        </div>\r\n      </CardSection>\r\n    </div>\r\n  );\r\n};\r\nContactNumberList.propTypes = {\r\n  phoneNumberList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      phoneNumber: PropTypes.string.isRequired,\r\n      phoneCode: PropTypes.string.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n      phoneTypeId: PropTypes.number,\r\n      phoneType: PropTypes.string,\r\n      isPrimary: PropTypes.bool,\r\n      extension: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    })\r\n  ).isRequired,\r\n  molGridRef: PropTypes.object,\r\n  handleToggleModal: PropTypes.func.isRequired,\r\n  actionHandler: PropTypes.object.isRequired,\r\n  isButtonDisable: PropTypes.bool.isRequired,\r\n};\r\nexport default ContactNumberList;\r\n"],"names":["_ref","phoneNumberList","molGridRef","handleToggleModal","actionHandler","isButtonDisable","handleCheckBoxChange","sortedPhoneNumberList","setSortedPhoneNumberList","useState","useEffect","hasNewEntries","some","phone","phoneId","sortedList","sort","a","b","id","_phoneNumberConfig$co","customActionExist","phoneNumberConfig","columns","find","action","fieldName","colSettings","isDisabled","_jsx","className","children","CardSection","cardTitle","buttonClassName","textWithIcon","iconImg","AppIcons","PlusIcon","rightButton","buttonText","titleButtonClick","FinalMolGrid","ref","configuration","dataSource","allowPagination","onActionChange","onColumnChange","handleGridCheckBoxChange","rowData"],"sourceRoot":""}