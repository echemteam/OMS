{"version":3,"file":"static/js/1997.8c010dcd.chunk.js","mappings":"mOAaA,MA6FA,GA7FqCA,EAAAA,EAAAA,aAAWC,IAAsE,IAArE,UAAEC,EAAS,WAAEC,EAAU,sBAAEC,EAAqB,cAAEC,GAAeJ,EAG5G,MAAMK,GAAaC,EAAAA,EAAAA,WACZC,EAAiBC,IAAsBC,EAAAA,EAAAA,WAAS,IAChDC,EAAkBC,IAAuBF,EAAAA,EAAAA,UAAS,KAClDG,EAAkBC,IAAuBJ,EAAAA,EAAAA,WAAS,IAGlDK,GAA4BC,WAAYC,EAA4CC,UAAWC,EAClGC,KAAMC,IAA6CjB,KAGvDkB,EAAAA,EAAAA,YAAU,KACNR,GAAoB,EAAM,GAC3B,KAGHQ,EAAAA,EAAAA,YAAU,MACDL,GAA8CE,GAA4CE,GACvFR,IACIQ,EAAuCE,OAAS,GAChDd,GAAmB,GACnBG,EAAoBS,IAEpBG,EAAAA,EAAaC,KAAKC,EAAAA,EAAaC,SAG3C,GACD,CAACV,EAA4CE,EAA0CE,IAG1F,MASMO,EAAwBC,IAC1Bd,EAAyBc,GACzBf,GAAoB,EAAK,EAIvBgB,EAAgB,CAClBC,KAhBqBX,IACrB,IAAIY,EAIAA,EAHC7B,EAGK,qBAAoB8B,EAAAA,EAAAA,IAAeb,EAAKc,cAFxC,qBAAoBD,EAAAA,EAAAA,IAAeb,EAAKe,cAIlDC,OAAOC,KAAKL,EAAK,SAAS,GAuB9B,OAJAM,EAAAA,EAAAA,qBAAoBpC,GAAW,MAC3BqC,kBAAmBX,OAInBY,EAAAA,EAAAA,KAACC,EAAAA,QAAY,CAACC,WAAYrC,EAAgB,oBAAuBF,EAA+C,iCAAlC,gCAAoEwC,aAAa,8BAC3JC,QAbaC,KACjBpC,GAAmB,GACnBK,GAAoB,EAAM,EAWCgC,OAAQtC,EAAgBuC,UAC/CP,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,wBAAuBD,UAClCP,EAAAA,EAAAA,KAACS,EAAAA,QAAW,CAAAF,UACRP,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,wBAAuBD,UAClCP,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,0BAAyBD,UACpCP,EAAAA,EAAAA,KAACU,EAAAA,EAAY,CACTC,IAAK7C,EACL8C,cAAe/C,EAAgBgD,EAAAA,GAAqBC,EAAAA,GACpDC,WAAY5C,EACZ6C,eAAgB1B,EAChB2B,UAAWxC,aAKpB,G","sources":["common/features/component/ExistingInfo/ExistingCustomerSupplierInfo.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n//** Libs's */\r\nimport { OrderBasicInfoData, basicInfoData } from './Config/Existing.data';\r\nimport CardSection from '../../../../components/ui/card/CardSection';\r\nimport SidebarModel from '../../../../components/ui/sidebarModel/SidebarModel';\r\n//** Service's */\r\nimport { encryptUrlData } from '../../../../services/CryptoService';\r\nimport ToastService from '../../../../services/toastService/ToastService';\r\nimport { ErrorMessage } from '../../../../data/appMessages';\r\nimport FinalMolGrid from '../../../../components/FinalMolGrid/FinalMolGrid';\r\n\r\nconst ExistingCustomerSupplierInfo = forwardRef(({ parentRef, isSupplier, getExistingInfoByName, isOrderManage }) => {\r\n\r\n    //** State */\r\n    const molGridRef = useRef();\r\n    const [isExistingModel, setIsExistingModel] = useState(false);\r\n    const [existingInfoData, setExistingInfoData] = useState([]);\r\n    const [isClickOpenModle, setIsClickOpenModle] = useState(false);\r\n\r\n    //** API Call's */\r\n    const [checkExistingInformation, { isFetching: isGetSupplierDetailsBySupplierNameFetching, isSuccess: isGetSupplierDetailsBySupplierNameSucess,\r\n        data: isGetSupplierDetailsBySupplierNameData, }] = getExistingInfoByName();\r\n\r\n    //** UseEffect's */\r\n    useEffect(() => {\r\n        setIsClickOpenModle(false);\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!isGetSupplierDetailsBySupplierNameFetching && isGetSupplierDetailsBySupplierNameSucess && isGetSupplierDetailsBySupplierNameData) {\r\n            if (isClickOpenModle) {\r\n                if (isGetSupplierDetailsBySupplierNameData.length > 0) {\r\n                    setIsExistingModel(true);\r\n                    setExistingInfoData(isGetSupplierDetailsBySupplierNameData);\r\n                } else {\r\n                    ToastService.info(ErrorMessage.NoFound);\r\n                }\r\n            }\r\n        }\r\n    }, [isGetSupplierDetailsBySupplierNameFetching, isGetSupplierDetailsBySupplierNameSucess, isGetSupplierDetailsBySupplierNameData]);\r\n\r\n    //** Handle Function's */\r\n    const handleEditClick = (data) => {\r\n        let url;\r\n        if (!isSupplier) {\r\n            url = `/CustomerDetails/${encryptUrlData(data.customerId)}`;\r\n        } else {\r\n            url = `/SupplierDetails/${encryptUrlData(data.supplierId)}`;\r\n        }\r\n        window.open(url, \"_blank\");\r\n    };\r\n    const onHandleExistingInfo = (name) => {\r\n        checkExistingInformation(name);\r\n        setIsClickOpenModle(true);\r\n    };\r\n\r\n    //** Action Handler */\r\n    const actionHandler = {\r\n        EDIT: handleEditClick,\r\n    };\r\n\r\n    const sidebarClose = () => {\r\n        setIsExistingModel(false);\r\n        setIsClickOpenModle(false);\r\n        // setIsDialogOpen(false);\r\n    }\r\n\r\n    //** Use Imperative Handle */\r\n    useImperativeHandle(parentRef, () => ({\r\n        callChildFunction: onHandleExistingInfo\r\n    }));\r\n\r\n    return (\r\n        <SidebarModel modalTitle={isOrderManage ? \"Order Information\" : !isSupplier ? \"Existing Customer Information\" : \" Existing Supplier Information\"} contentClass=\"content-75 basic-info-model\"\r\n            onClose={sidebarClose} isOpen={isExistingModel}>\r\n            <div className='pop-up-input-btn mt-3'>\r\n                <CardSection>\r\n                    <div className=\"row input-list-button\">\r\n                        <div className=\"col-lg-12 table-striped\">\r\n                            <FinalMolGrid\r\n                                ref={molGridRef}\r\n                                configuration={isOrderManage ? OrderBasicInfoData : basicInfoData}\r\n                                dataSource={existingInfoData}\r\n                                onActionChange={actionHandler}\r\n                                isLoading={isGetSupplierDetailsBySupplierNameFetching} />\r\n                        </div>\r\n                    </div>\r\n                </CardSection>\r\n            </div>\r\n        </SidebarModel>\r\n    )\r\n});\r\n\r\nExistingCustomerSupplierInfo.propTypes = {\r\n    parentRef: PropTypes.shape({\r\n        current: PropTypes.shape({\r\n            callChildFunction: PropTypes.func\r\n        })\r\n    }).isRequired,\r\n    isSupplier: PropTypes.bool.isRequired,\r\n    getExistingInfoByName: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ExistingCustomerSupplierInfo;"],"names":["forwardRef","_ref","parentRef","isSupplier","getExistingInfoByName","isOrderManage","molGridRef","useRef","isExistingModel","setIsExistingModel","useState","existingInfoData","setExistingInfoData","isClickOpenModle","setIsClickOpenModle","checkExistingInformation","isFetching","isGetSupplierDetailsBySupplierNameFetching","isSuccess","isGetSupplierDetailsBySupplierNameSucess","data","isGetSupplierDetailsBySupplierNameData","useEffect","length","ToastService","info","ErrorMessage","NoFound","onHandleExistingInfo","name","actionHandler","EDIT","url","encryptUrlData","supplierId","customerId","window","open","useImperativeHandle","callChildFunction","_jsx","SidebarModel","modalTitle","contentClass","onClose","sidebarClose","isOpen","children","className","CardSection","FinalMolGrid","ref","configuration","OrderBasicInfoData","basicInfoData","dataSource","onActionChange","isLoading"],"sourceRoot":""}