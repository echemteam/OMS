{"version":3,"file":"static/js/2789.0d8c5758.chunk.js","mappings":"6KAMA,MAAMA,EAAQC,EAAAA,MAAW,IAAM,0CACzBC,EAAWD,EAAAA,MAAW,IAAM,0CA8IlC,EA5IyBE,IAclB,IAdmB,SACxBC,EAAQ,OACRC,EAAM,UACNC,EAAS,MACTC,EAAK,YACLC,EAAW,QACXC,EAAO,YACPC,EAAW,aACXC,EAAY,cACZC,EAAa,OACbC,EAAM,eACNC,EAAc,iBACdC,KACGC,GACJb,EAGC,MAAOc,EAAcC,IAAmBC,EAAAA,EAAAA,UAASN,IAQjDO,EAAAA,EAAAA,YAAU,KACM,OAAVb,GAA4B,KAAVA,GACpBW,GAAgB,EAClB,GACC,CAACX,IAEJ,MAcMc,EAAgBC,IAChBjB,GACFA,EAAOiB,EACT,EAoBF,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,SACtBR,GAYAS,EAAAA,EAAAA,KAAC1B,EAAK,CACJU,YAAaA,EACbN,SAlEiBkB,IACrBlB,GACFA,EAASkB,EAAG,QACd,EAgEQjB,OAAQgB,EACRd,MAAOA,EAAQA,EAAMoB,KAAO,GAC5BC,WAAsB,OAAXpB,QAAW,IAAXA,OAAW,EAAXA,EAAaqB,cAAwB,OAAVb,QAAU,IAAVA,OAAU,EAAVA,EAAYY,aAAa,KAC3DZ,KAjBNU,EAAAA,EAAAA,KAACxB,EAAQ,CACPQ,YAAaA,EACbN,SA3CY0B,IACpB,GAAI1B,EACF,GAAIQ,EAAe,CACjB,MAAMmB,EAAiBD,EAAeE,KAAKC,GAAWA,EAAO1B,QAC7DH,EAASE,EAAW,WAAYyB,EAClC,MACE3B,EAASE,EAAW,WAAYwB,GAC5BnB,GACFA,EAAa,cAAeL,EAAWwB,EAG7C,EAiCQzB,OAAQgB,EACRZ,QAASA,EACTF,MAAOA,EACPK,cAAeA,EACfsB,YAAuB,OAAX1B,QAAW,IAAXA,OAAW,EAAXA,EAAaqB,aAAcb,EAAWY,aAC9CZ,OAaVU,EAAAA,EAAAA,KAAA,OACEF,UAAU,aAGVW,QAASA,IAAMjB,GAAiBD,GAAcQ,UAE9CC,EAAAA,EAAAA,KAAA,OAAKU,MAAQnB,EAAwB,SAAT,OAAkBQ,UAC5CC,EAAAA,EAAAA,KAACW,EAAAA,EAAK,CACJC,UAAYrB,EAAqCsB,EAAAA,EAASC,WAA/BD,EAAAA,EAASE,WACpCC,QAAUzB,EAA0B,OAAX,iBAW3B,C","sources":["components/ui/inputs/editableDropdown/EditableDropdown.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Image from \"../../../image/Image\";\r\nimport { AppIcons } from \"../../../../data/appIcons\";\r\nimport \"./EditableDropdown.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Input = React.lazy(() => import(\"../../inputs/input/Input\"));\r\nconst Dropdown = React.lazy(() => import(\"../../dropdown/DropDrown\"));\r\n\r\nconst EditableDropdown = ({\r\n  onChange,\r\n  onBlur,\r\n  dataField,\r\n  value,\r\n  formSetting,\r\n  options,\r\n  placeholder,\r\n  fieldActions,\r\n  isMultiSelect,\r\n  isText,\r\n  dropdownAction,\r\n  isDependDropdown,\r\n  ...inputProps\r\n}) => {\r\n\r\n\r\n  const [isInputField, setIsInputField] = useState(isText);\r\n\r\n  const handleInputChange = (e) => {\r\n    if (onChange) {\r\n      onChange(e, 'input');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (value === null || value === \"\") {\r\n      setIsInputField(false);\r\n    }\r\n  }, [value])\r\n\r\n  const handleChange = (selectedOption) => {\r\n    if (onChange) {\r\n      if (isMultiSelect) {\r\n        const selectedValues = selectedOption.map((option) => option.value);\r\n        onChange(dataField, 'dropdown', selectedValues);\r\n      } else {\r\n        onChange(dataField, \"dropdown\", selectedOption);\r\n        if (fieldActions) {\r\n          fieldActions(\"DDL_CHANGED\", dataField, selectedOption);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOnBlur = (e) => {\r\n    if (onBlur) {\r\n      onBlur(e);\r\n    }\r\n  };\r\n\r\n  // const handleInputFields = () => {\r\n  //   setIsInputField(!isInputField);\r\n  //   if (dropdownAction) {\r\n  //     dropdownAction(\"DA_CHANGED\", dataField, !isInputField);\r\n  //   }\r\n  // }\r\n\r\n  // const handleInputFields = (dataField, isInputField) => {\r\n  //   setIsInputField(!isInputField);\r\n  //   // if (isDependDropdown.dataField === dataField) {\r\n\r\n  //   // }\r\n  //   if (dropdownAction) {\r\n  //     dropdownAction(\"DA_CHANGED\", dataField, !isInputField);\r\n  //   }\r\n  // }\r\n\r\n  return (\r\n    <div className=\"custom-dropdown\">\r\n      <div className=\"input-sec\">\r\n        {!isInputField ? (\r\n          <Dropdown\r\n            placeholder={placeholder}\r\n            onChange={handleChange}\r\n            onBlur={handleOnBlur}\r\n            options={options}\r\n            value={value}\r\n            isMultiSelect={isMultiSelect}\r\n            isDisabled={formSetting?.isViewOnly || inputProps.isDisable}\r\n            {...inputProps}\r\n          />\r\n        ) : (\r\n          <Input\r\n            placeholder={placeholder}\r\n            onChange={handleInputChange}\r\n            onBlur={handleOnBlur}\r\n            value={value ? value.text : \"\"}\r\n            isDisable={formSetting?.isViewOnly || inputProps?.isDisable || false}\r\n            {...inputProps}\r\n          />\r\n        )}\r\n      </div>\r\n      <div\r\n        className=\"button-sec\"\r\n        //onClick={() => handleInputFields(dataField, isInputField)}\r\n        //onClick={() => handleInputFields()}\r\n        onClick={() => setIsInputField(!isInputField)}\r\n      >\r\n        <div title={!isInputField ? \"Edit\" : \"Cancel\"}>\r\n          <Image\r\n            imagePath={!isInputField ? AppIcons.PencilIcon : AppIcons.CancelIcon}\r\n            altText={!isInputField ? \"cancel\" : \"edit\"}\r\n          ></Image>\r\n        </div>\r\n        {/* <div className=\"save-btn\" title={!isInputField ? \"Save\" : \"\"}>\r\n          {!isInputField ? (\r\n            <Image imagePath={AppIcons.DoneIcon} altText={\"Save\"}></Image>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nEditableDropdown.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  onBlur: PropTypes.func,\r\n  dataField: PropTypes.string.isRequired,\r\n  value: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.object\r\n  ]),\r\n  formSetting: PropTypes.shape({\r\n    isViewOnly: PropTypes.bool\r\n  }),\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      value: PropTypes.string,\r\n      label: PropTypes.string\r\n    })\r\n  ),\r\n  placeholder: PropTypes.string,\r\n  fieldActions: PropTypes.func,\r\n  isMultiSelect: PropTypes.bool,\r\n  isText: PropTypes.bool\r\n};\r\n\r\nexport default EditableDropdown;\r\n"],"names":["Input","React","Dropdown","_ref","onChange","onBlur","dataField","value","formSetting","options","placeholder","fieldActions","isMultiSelect","isText","dropdownAction","isDependDropdown","inputProps","isInputField","setIsInputField","useState","useEffect","handleOnBlur","e","_jsxs","className","children","_jsx","text","isDisable","isViewOnly","selectedOption","selectedValues","map","option","isDisabled","onClick","title","Image","imagePath","AppIcons","CancelIcon","PencilIcon","altText"],"sourceRoot":""}