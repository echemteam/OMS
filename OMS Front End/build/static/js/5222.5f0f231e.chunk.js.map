{"version":3,"file":"static/js/5222.5f0f231e.chunk.js","mappings":"2IAEO,MAAMA,EAAkC,CAC3CC,QAAS,CACL,CACIC,KAAM,cACNC,UAAW,aACXC,SAAU,CACNC,MAAO,OAEXC,YAAY,GAEhB,CACIJ,KAAM,qBACNC,UAAW,oBACXC,SAAU,CACNC,MAAO,OAEXC,YAAY,GAEhB,CACIJ,KAAM,SACNE,SAAU,CACNC,MAAO,OAEXE,Q,SAASC,EAAeC,OACxBC,cAAe,CACXC,WAAW,GAEfC,aAAc,CACV,CACIV,KAAM,oBACNW,SAAU,kBACVC,MAAO,OACPC,UAAW,iB,qCCzB/B,MAkHA,EAlHqCC,IACjC,MAAMC,GAAaC,EAAAA,EAAAA,WAEZC,EAAUC,IAAeC,EAAAA,EAAAA,aACzBC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,IAC5CG,GAAsBC,UAAWC,EAA6BC,UAAWC,EAA6BC,KAAMC,KAA8BC,EAAAA,EAAAA,MAE3IC,EAAWA,CAACC,EAAYC,KAC1B,MAAMC,EAAU,CACZC,WAAY,CACRC,WAAYJ,EAAWI,WACvBC,SAAUL,EAAWK,UAEzBC,QAAS,CAAEC,WAAY,IACvBC,WAAYP,EACZQ,SAAU1B,EAAM0B,UAEpBlB,EAAmBW,EAAQ,GAW/BQ,EAAAA,EAAAA,YAAU,KACFf,GAA+BE,IAC3BA,GACAV,EAAYU,EAAyBc,YAErCd,EAAyBe,aACzBtB,EAAiBO,EAAyBe,aAElD,GACD,CAACjB,EAA6BE,KAEjCa,EAAAA,EAAAA,YAAU,KACN,GAAI1B,EAAW6B,QAAS,CACpB,MAAMC,EAAoB9B,EAAW6B,QAAQE,uBACvCC,EAAuBhC,EAAW6B,QAAQI,wBAC1Cf,EAAU,CACZC,WAAY,CACRC,WAAYU,EAAkBV,WAC9BC,SAAUS,EAAkBT,UAEhCC,QAAS,CAAEC,WAAY,IACvBC,WAAYQ,EACZP,SAAU1B,EAAM0B,UAEpBlB,EAAmBW,EACvB,IACD,CAACnB,EAAM0B,WAQV,MAAMS,EAAYA,KACd,GAAIlC,EAAW6B,QAAS,CACpB,MAAMM,EAAoBnC,EAAW6B,QAAQE,uBAC7ChB,EAASoB,EAAmBnC,EAAW6B,QAAQI,wBACnD,IAGJG,EAAAA,EAAAA,qBAAoBrC,EAAMsC,UAAU,MAChCC,kBAAmBJ,MAIvB,MAMMK,EAAgB,CAClBC,kBAPqB5B,IACjBb,EAAM0C,QACN1C,EAAM0C,OAAO7B,EACjB,GAQJ,OACI8B,EAAAA,EAAAA,KAAA,OAAK5C,UAAU,MAAK6C,UAChBD,EAAAA,EAAAA,KAAA,OAAK5C,UAAU,uCAAsC6C,UACjDD,EAAAA,EAAAA,KAACE,EAAAA,EAAY,CACTC,IAAK7C,EACL8C,cAAe/D,EACf4C,WAAYzB,EACZ6C,iBAAiB,EACjB5B,WAAY,CACR6B,WAAY3C,EACZgB,SAAU,GACV4B,YAAa,GAEjBC,aA9EUC,IACtBpC,EAASoC,EAAMnD,EAAW6B,QAAQI,wBAAwB,EA8E9CmB,UA3EOC,IACnBtC,EAASf,EAAW6B,QAAQE,uBAAwBsB,EAAY,EA2EpD7C,UAAWC,EACX6C,eAAgBf,OAGtB,EC/GP,MAAMgB,EAAwB,CAEjCC,aAAc,CAAEvE,KAAM,IACtBwE,WAAY,CACR,CACIC,GAAI,OACJC,MAAO,QACPC,WAAY,OACZC,U,SAAWC,EAAeC,MAC1BC,UAAW,OACXC,aAAc,CACVC,YAAa,aACbC,YAAY,EACZC,UAAW,KAEfC,WAAY,CAAC,CAAEC,KAAM,YACrBC,MAAO,CACHC,aAAc,gDAI1BC,YAAa,CACTC,YAAY,I,yDCbpB,MA6FA,EA7FwC3E,IACtC,MAAM4E,GAAgB1E,EAAAA,EAAAA,WACf2E,EAAgBC,IAAqBzE,EAAAA,EAAAA,UAASmD,IAE9CuB,GAA0BtE,UAAWuE,EAAiCrE,UAAWsE,EAAiCpE,KAAMqE,KAAqCC,EAAAA,EAAAA,OAEpKxD,EAAAA,EAAAA,YAAU,KACR,GAAIsD,GAAmCC,EAA+B,CACpE,GAAIA,EAA8BE,aAAaC,SAAS,UAGtD,OAFAC,EAAAA,EAAaC,QAAQL,EAA8BE,mBACnDI,IAGFF,EAAAA,EAAaG,QAAQP,EAA8BE,cACnDI,IACAxF,EAAMmC,WACR,IACC,CAAC8C,EAAiCC,KAcrCvD,EAAAA,EAAAA,YAAU,KAER,IADA+D,EAAAA,EAAAA,GAAYb,EAAgBC,EAAmB,MAC3C9E,EAAM2F,SAAU,CAClB,IAAIC,EAAa,IAAKpC,GACtBoC,EAAWnC,aAAe,CACxBvE,KAAMc,EAAM2F,SAASE,kBACrBC,gBAAiB9F,EAAM2F,SAASG,gBAAkB9F,EAAM2F,SAASG,gBAAkB,EACnFpE,SAAU1B,EAAM2F,SAASjE,SAAW1B,EAAM2F,SAASjE,SAAW,GAEhEoD,EAAkBc,EACpB,IACC,CAAC5F,EAAM+F,SAEV,MAAMP,EAAsBA,MAC1BE,EAAAA,EAAAA,GAAYb,EAAgBC,EAAmB,MAC/C9E,EAAMgG,SAAS,EAGjB,OACEC,EAAAA,EAAAA,MAAA,OAAKlG,UAAU,4BAA2B6C,SAAA,EACxCD,EAAAA,EAAAA,KAACuD,EAAAA,EAAW,CACVC,OAAQtB,EACR/B,IAAK8B,KAEPjC,EAAAA,EAAAA,KAAA,OAAK5C,UAAU,iBAAgB6C,UAC7BqD,EAAAA,EAAAA,MAAA,OAAKlG,UAAU,4CAA2C6C,SAAA,EACxDD,EAAAA,EAAAA,KAACyD,EAAAA,EAAO,CACNC,oBAAoB,eACpBC,WAAW,OACXC,QAzCsBC,KAC9B,MAAMC,EAAW7B,EAAc9C,QAAQ4E,cACvC,GAAID,EAAU,CACZ,IAAItF,EAAU,IACTsF,EACHX,gBAAiB9F,EAAM2F,SAASG,gBAAkB9F,EAAM2F,SAASG,gBAAkB,EACnFpE,SAAU1B,EAAM0B,SAAW1B,EAAM0B,SAAW,GAE9CqD,EAAuB5D,EACzB,GAiCQV,UAAWuE,KAEbrC,EAAAA,EAAAA,KAACyD,EAAAA,EAAO,CACNC,oBAAoB,gBACpBC,WAAW,SACXC,QAASf,SAIdxF,EAAM2F,SAASG,iBACZnD,EAAAA,EAAAA,KAAA,OAAK5C,UAAU,OAAM6C,UACrBD,EAAAA,EAAAA,KAACgE,EAAAA,EAAoB,CACnBb,gBAAkB9F,EAAM2F,SAASG,oBAGnC,OAEA,E,gDCpFV,MAuDA,EAvDyB9F,IACrB,MAAO4G,EAAYC,IAAiBxG,EAAAA,EAAAA,UAAS,KACtCyG,EAAgBC,IAAqB1G,EAAAA,EAAAA,UAAS,OAC9C2G,GAAiBrG,UAAWsG,EAAuBpG,KAAMqG,KAA0BC,EAAAA,EAAAA,OAG1FxF,EAAAA,EAAAA,YAAU,KACNqF,GAAe,GAChB,CAACA,KAGJrF,EAAAA,EAAAA,YAAU,KACN,GAAIsF,GAA6C,OAApBC,QAAoB,IAApBA,GAAAA,EAAsBE,OAAQ,CACvD,MAAMC,EAAkBH,EAAqBI,KAAIC,IAAM,CACnDC,MAAOD,EAAO7F,SACd+F,MAAOF,EAAOG,eAElBb,EAAcQ,EAClB,IACD,CAACJ,EAAuBC,KAG3BvF,EAAAA,EAAAA,YAAU,KACFiF,EAAWQ,OAAS,IAAMN,GAC1Ba,EAAuBf,EAAW,GACtC,GACD,CAACA,IAEJ,MAAMe,EAA0BC,IACxBA,IACAb,EAAgC,OAAda,QAAc,IAAdA,OAAc,EAAdA,EAAgBJ,OAClCxH,EAAM6H,eAA6B,OAAdD,QAAc,IAAdA,OAAc,EAAdA,EAAgBJ,OACzC,EAGJ,OACI7E,EAAAA,EAAAA,KAAA,OAAK5C,UAAU,MAAK6C,UAChBD,EAAAA,EAAAA,KAAA,OAAK5C,UAAU,WAAU6C,UACrBD,EAAAA,EAAAA,KAACmF,EAAAA,QAAQ,CACL3D,YAAY,qBACZ4D,QAASnB,EACTY,MAAOV,EACPkB,SAAUL,EACVM,eAAe,EACfC,mBAAmB,OAGzB,ECkCd,EA7EgCC,KAC5B,MAAM7F,GAAWpC,EAAAA,EAAAA,WACVkI,EAAaC,IAAkBhI,EAAAA,EAAAA,WAAS,IACxCqB,EAAU4G,IAAejI,EAAAA,EAAAA,UAAS,IAClCkI,EAAQC,IAAanI,EAAAA,EAAAA,WAAS,IAC9BoG,EAAUgC,IAAepI,EAAAA,EAAAA,UAASmD,EAAsBC,cAOzDiF,EAAiBA,KACnBL,GAAe,GACfM,GAAW,EAaTA,EAAYA,KACd,IAAIC,EAAO,IAAKpF,EAAsBC,cACtCgF,EAAYG,EAAK,EAUrB,OACI3C,EAAAA,EAAAA,MAAA4C,EAAAA,SAAA,CAAAjG,SAAA,EACID,EAAAA,EAAAA,KAACmG,EAAAA,QAAW,CACRC,UAAU,mBACVC,gBAAgB,mBAAkBpG,UAElCD,EAAAA,EAAAA,KAACsG,EAAe,CAACpB,eA5BLhH,IACpByH,EAAYzH,EAAK,MA6BZa,EAAW,IACRuE,EAAAA,EAAAA,MAAA,OAAKlG,UAAU,oBAAmB6C,SAAA,EAC9BD,EAAAA,EAAAA,KAACmG,EAAAA,QAAW,CACRC,UAAU,2BAIVG,cAAc,EACdC,QAASC,EAAAA,EAASC,SAClBC,iBAjDMC,KACtBlB,GAAe,GACfG,GAAU,EAAM,EA+CoC5F,UAEpCD,EAAAA,EAAAA,KAAC6G,EAA2B,CAAC9H,SAAUA,EAAUY,SAAUA,EAAUI,OA1BrE7B,IAChB8H,IACAF,EAAY5H,GACZ2H,GAAU,GACVH,GAAe,EAAK,OAyBR1F,EAAAA,EAAAA,KAAC8G,EAAAA,QAAY,CACTC,YAAenB,EAAS,SAAW,OAAvB,4BACZoB,aAAa,aACb3D,QAAS0C,EACTkB,eAAgBR,EAAAA,EAASS,QACzB9D,OAAQqC,EAAYxF,UAEpBD,EAAAA,EAAAA,KAACmH,EAA8B,CAACnE,SAAUc,EAAU8B,OAAQA,EAAQpG,UA/CtEA,KACVG,EAASR,SACTQ,EAASR,QAAQS,mBACrB,EA4C0GwD,OAAQqC,EAAa1G,SAAUA,EAAUsE,QAAS0C,WAIzJ,C,gDC/EJ,MAAMqB,EAA2B,CACtC9K,QAAS,CACP,CACEC,KAAM,gBACNC,UAAW,oBACXC,SAAU,CACRC,MAAO,OAETC,YAAY,GAEd,CACEJ,KAAM,QACNC,UAAW,YACXC,SAAU,CACRC,MAAO,OAETC,YAAY,GAEd,CACEJ,KAAM,aACNE,SAAU,CACRC,MAAO,OAETF,UAAW,YACXI,Q,SAASC,EAAewK,KACxBC,YAAa,CACXC,OAAO,EACPC,OAAQ,wBAGZ,CACEjL,KAAM,cACNC,UAAW,cACXC,SAAU,CACRC,MAAO,OAETC,YAAY,K,gDC9BlB,MAqFA,EArF8BU,IAC5B,MAAMC,GAAaC,EAAAA,EAAAA,WACZC,EAAUC,IAAeC,EAAAA,EAAAA,aACzBC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,IAC5C+J,GAA0B3J,UAAW4J,EAAiC1J,UAAW2J,EAAiCzJ,KAAM0J,KAAkCC,EAAAA,EAAAA,MAE3JxJ,EAAWA,CAACC,EAAYC,KAC5B,MAAMC,EAAU,CACdC,WAAY,CACVC,WAAYJ,EAAWI,WACvBC,SAAUL,EAAWK,UAEvBC,QAAS,CAAEC,WAAY,IACvBC,WAAYP,EACZ4E,gBAAiB9F,EAAM8F,iBAEzBsE,EAAuBjJ,EAAQ,EAuCjC,OA5BAQ,EAAAA,EAAAA,YAAU,KACJ2I,GAAmCC,IACjCA,GACFnK,EAAYmK,EAA6B3I,YAEvC2I,EAA6B1I,aAC/BtB,EAAiBgK,EAA6B1I,aAElD,GACC,CAACyI,EAAiCC,KAErC5I,EAAAA,EAAAA,YAAU,KACR,GAAI1B,EAAW6B,QAAS,CACtB,MAAMC,EAAoB9B,EAAW6B,QAAQE,uBACvCC,EAAuBhC,EAAW6B,QAAQI,wBAC1Cf,EAAU,CACdC,WAAY,CACVC,WAAYU,EAAkBV,WAC9BC,SAAUS,EAAkBT,UAE9BC,QAAS,CAAEC,WAAY,IACvBC,WAAYQ,EACZ6D,gBAAiB9F,EAAM8F,iBAEzBsE,EAAuBjJ,EACzB,IACC,CAACnB,EAAM8F,mBAGRnD,EAAAA,EAAAA,KAAA,OAAK5C,UAAU,MAAK6C,UAClBD,EAAAA,EAAAA,KAAA,OAAK5C,UAAU,8DAA6D6C,UAC1ED,EAAAA,EAAAA,KAACmG,EAAAA,QAAW,CACVC,UAAU,oBACVC,gBAAgB,mBAAkBpG,UAElCD,EAAAA,EAAAA,KAACE,EAAAA,EAAY,CACXC,IAAK7C,EACL8C,cAAegH,EACfnI,WAAYzB,EACZ6C,iBAAiB,EACjB5B,WAAY,CACV6B,WAAY3C,EACZgB,SAAU,GACV4B,YAAa,GAEfC,aArDgBC,IACxBpC,EAASoC,EAAMnD,EAAW6B,QAAQI,wBAAwB,EAqDlDmB,UAlDaC,IACrBtC,EAASf,EAAW6B,QAAQE,uBAAwBsB,EAAY,EAkDxD7C,UAAW4J,SAIb,C","sources":["pages/configuration/functionalConfiguration/features/functionalConfigurationList/config/FunctionalConfigurationList.data.js","pages/configuration/functionalConfiguration/features/functionalConfigurationList/FunctionalConfigurationList.js","pages/configuration/functionalConfiguration/features/addEditFunctionalConfiguration/config/AddEditFunctional.data.js","pages/configuration/functionalConfiguration/features/addEditFunctionalConfiguration/AddEditFunctionalConfiguration.js","pages/configuration/functionalConfiguration/features/ModuleSelection.js","pages/configuration/functionalConfiguration/FunctionalConfiguration.js","pages/configuration/functionalConfiguration/features/functionalConfigurationList/viewFunctionalEvents/config/ViewFunctionalEvents.data.js","pages/configuration/functionalConfiguration/features/functionalConfigurationList/viewFunctionalEvents/ViewFunctionalEvents.js"],"sourcesContent":["import { GridColumnType } from \"../../../../../../data/gridColumnType\";\r\n\r\nexport const functionalConfigurationListData = {\r\n    columns: [\r\n        {\r\n            name: \"Module Name\",\r\n            fieldName: \"moduleName\",\r\n            colStyle: {\r\n                width: \"40%\",\r\n            },\r\n            allowShort: true,\r\n        },\r\n        {\r\n            name: \"Functionality Name\",\r\n            fieldName: \"functionalityName\",\r\n            colStyle: {\r\n                width: \"40%\",\r\n            },\r\n            allowShort: true,\r\n        },\r\n        {\r\n            name: \"Action\",\r\n            colStyle: {\r\n                width: \"20%\",\r\n            },\r\n            colType: GridColumnType.ACTION,\r\n            defaultAction: {\r\n                allowEdit: false,\r\n            },\r\n            customAction: [\r\n                {\r\n                    name: \"VIEWCONFIGURATION\",\r\n                    iconName: \"lets-icons:view\",\r\n                    title: \"View\",\r\n                    className: \"view-icon\"\r\n                },\r\n            ],\r\n        },\r\n    ],\r\n\r\n};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useImperativeHandle, useRef, useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { functionalConfigurationListData } from './config/FunctionalConfigurationList.data';\r\n// import { useNavigate } from 'react-router-dom';\r\nimport { useGetFunctionalitiesMutation } from '../../../../../app/services/configurationAPI';\r\n// import { encryptUrlData } from '../../../../../services/CryptoService';\r\nimport FinalMolGrid from '../../../../../components/FinalMolGrid/FinalMolGrid';\r\n\r\nconst FunctionalConfigurationList = (props) => {\r\n    const molGridRef = useRef();\r\n    // const navigate = useNavigate();\r\n    const [listData, setListData] = useState();\r\n    const [totalRowCount, setTotalRowCount] = useState(0);\r\n    const [getFunctionalities, { isLoading: isGetFunctionalitiesLoading, isSuccess: isGetFunctionalitiesSuccess, data: isGetFunctionalitiesData }] = useGetFunctionalitiesMutation();\r\n\r\n    const getLists = (pageObject, sortingString) => {\r\n        const request = {\r\n            pagination: {\r\n                pageNumber: pageObject.pageNumber,\r\n                pageSize: pageObject.pageSize,\r\n            },\r\n            filters: { searchText: \"\" },\r\n            sortString: sortingString,\r\n            moduleId: props.moduleId\r\n        };\r\n        getFunctionalities(request);\r\n    };\r\n\r\n    const handlePageChange = (page) => {\r\n        getLists(page, molGridRef.current.generateSortingString());\r\n    };\r\n\r\n    const handleSorting = (shortString) => {\r\n        getLists(molGridRef.current.getCurrentPageObject(), shortString);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isGetFunctionalitiesSuccess && isGetFunctionalitiesData) {\r\n            if (isGetFunctionalitiesData) {\r\n                setListData(isGetFunctionalitiesData.dataSource);\r\n            }\r\n            if (isGetFunctionalitiesData.totalRecord) {\r\n                setTotalRowCount(isGetFunctionalitiesData.totalRecord);\r\n            }\r\n        }\r\n    }, [isGetFunctionalitiesSuccess, isGetFunctionalitiesData]);\r\n\r\n    useEffect(() => {\r\n        if (molGridRef.current) {\r\n            const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n            const currentsortingString = molGridRef.current.generateSortingString();\r\n            const request = {\r\n                pagination: {\r\n                    pageNumber: currentPageObject.pageNumber,\r\n                    pageSize: currentPageObject.pageSize,\r\n                },\r\n                filters: { searchText: \"\" },\r\n                sortString: currentsortingString,\r\n                moduleId: props.moduleId\r\n            };\r\n            getFunctionalities(request);\r\n        }\r\n    }, [props.moduleId]);\r\n\r\n    // const handleViewClick = (data) => {\r\n    //     const encryptedFunctionalityId = encryptUrlData(data.functionalityId);\r\n    //     const encryptedModuleName = encryptUrlData(data.moduleName);\r\n    //     navigate(`/FunctionalConfigurationViewDetail/${encryptedFunctionalityId}/${encryptedModuleName}`, \"_blank\");\r\n    // }\r\n\r\n    const onGetData = () => {\r\n        if (molGridRef.current) {\r\n            const defaultPageObject = molGridRef.current.getCurrentPageObject();\r\n            getLists(defaultPageObject, molGridRef.current.generateSortingString());\r\n        }\r\n    };\r\n\r\n    useImperativeHandle(props.childRef, () => ({\r\n        callChildFunction: onGetData,\r\n    }));\r\n\r\n\r\n    const handleEditClick = (data) => {\r\n        if (props.onEdit) {\r\n            props.onEdit(data);\r\n        }\r\n    }\r\n\r\n    const actionHandler = {\r\n        VIEWCONFIGURATION: handleEditClick,\r\n       // EDIT: handleEditClick\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-12 table-striped api-provider\">\r\n                <FinalMolGrid\r\n                    ref={molGridRef}\r\n                    configuration={functionalConfigurationListData}\r\n                    dataSource={listData}\r\n                    allowPagination={false}\r\n                    pagination={{\r\n                        totalCount: totalRowCount,\r\n                        pageSize: 25,\r\n                        currentPage: 1,\r\n                    }}\r\n                    onPageChange={handlePageChange}\r\n                    onSorting={handleSorting}\r\n                    isLoading={isGetFunctionalitiesLoading}\r\n                    onActionChange={actionHandler}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nFunctionalConfigurationList.propTypes = {\r\n    moduleId: PropTypes.number.isRequired,  \r\n    childRef: PropTypes.shape({  \r\n        current: PropTypes.object\r\n    }),\r\n    onEdit: PropTypes.func  \r\n};\r\nexport default FunctionalConfigurationList","import { FormFieldTypes } from \"../../../../../../data/formFieldType\";\r\n\r\nexport const AddEditFunctionalData = {\r\n    // name: \"Email From\"\r\n    initialState: { name: \"\" },\r\n    formFields: [\r\n        {\r\n            id: \"name\",\r\n            lable: \"Name \",\r\n            Field_Name: \"name\",\r\n            fieldType: FormFieldTypes.INPUT,\r\n            dataField: \"name\",\r\n            fieldSetting: {\r\n                placeholder: \"Enter name\",\r\n                allowSpace: true,\r\n                maxLength: 100,\r\n            },\r\n            validation: [{ type: \"require\" }],\r\n            style: {\r\n                containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-6 mb-input\",\r\n            },\r\n        },\r\n    ],\r\n    formSetting: {\r\n        isViewOnly: false\r\n    }\r\n};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { AddEditFunctionalData } from './config/AddEditFunctional.data';\r\nimport Buttons from '../../../../../components/ui/button/Buttons';\r\nimport FormCreator from '../../../../../components/Forms/FormCreator';\r\nimport { useAddEditFunctionalitiesMutation } from '../../../../../app/services/configurationAPI';\r\nimport ToastService from '../../../../../services/toastService/ToastService';\r\nimport { onResetForm } from '../../../../../utils/FormFields/ResetForm/handleResetForm';\r\nimport ViewFunctionalEvents from '../functionalConfigurationList/viewFunctionalEvents/ViewFunctionalEvents';\r\n\r\nconst AddEditFunctionalConfiguration = (props) => {\r\n  const functionalRef = useRef();\r\n  const [functionalData, setFunctionalData] = useState(AddEditFunctionalData);\r\n\r\n  const [addEditFunctionalities, { isLoading: isAddEditFunctionalitiesLoading, isSuccess: isAddEditFunctionalitiesSuccess, data: allAddEditFunctionalitiesData, },] = useAddEditFunctionalitiesMutation();\r\n\r\n  useEffect(() => {\r\n    if (isAddEditFunctionalitiesSuccess && allAddEditFunctionalitiesData) {\r\n      if (allAddEditFunctionalitiesData.errorMessage.includes(\"exists\")) {\r\n        ToastService.warning(allAddEditFunctionalitiesData.errorMessage);\r\n        handleResetAndClose();\r\n        return;\r\n      }\r\n      ToastService.success(allAddEditFunctionalitiesData.errorMessage);\r\n      handleResetAndClose();\r\n      props.onGetData()\r\n    }\r\n  }, [isAddEditFunctionalitiesSuccess, allAddEditFunctionalitiesData]);\r\n\r\n  const handleAddEditFunctional = () => {\r\n    const formData = functionalRef.current.getFormData();\r\n    if (formData) {\r\n      let request = {\r\n        ...formData,\r\n        functionalityId: props.initData.functionalityId ? props.initData.functionalityId : 0,\r\n        moduleId: props.moduleId ? props.moduleId : 0,\r\n      };\r\n      addEditFunctionalities(request);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    onResetForm(functionalData, setFunctionalData, null);\r\n    if (props.initData) {\r\n      let UpdateData = { ...AddEditFunctionalData };\r\n      UpdateData.initialState = {\r\n        name: props.initData.functionalityName,\r\n        functionalityId: props.initData.functionalityId ? props.initData.functionalityId : 0,\r\n        moduleId: props.initData.moduleId ? props.initData.moduleId : 0,\r\n      };\r\n      setFunctionalData(UpdateData)\r\n    }\r\n  }, [props.isOpen])\r\n\r\n  const handleResetAndClose = () => {\r\n    onResetForm(functionalData, setFunctionalData, null);\r\n    props.onClose();\r\n  };\r\n\r\n  return (\r\n    <div className=\"row mt-2 add-address-form\">\r\n      <FormCreator\r\n        config={functionalData}\r\n        ref={functionalRef}\r\n      />\r\n      <div className=\"col-md-12 mt-2\">\r\n        <div className=\"d-flex align-item-end justify-content-end\">\r\n          <Buttons\r\n            buttonTypeClassName=\"theme-button\"\r\n            buttonText=\"Save\"\r\n            onClick={handleAddEditFunctional}\r\n            isLoading={isAddEditFunctionalitiesLoading}\r\n          />\r\n          <Buttons\r\n            buttonTypeClassName=\"dark-btn ml-5\"\r\n            buttonText=\"Cancel\"\r\n            onClick={handleResetAndClose}\r\n          />\r\n        </div>\r\n      </div>\r\n      {props.initData.functionalityId ? \r\n          <div className=\"mt-2\">\r\n          <ViewFunctionalEvents\r\n            functionalityId={ props.initData.functionalityId}\r\n            />\r\n            </div>\r\n        : null\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nAddEditFunctionalConfiguration.propTypes = {\r\n  initData: PropTypes.shape({\r\n    functionalityId: PropTypes.number,\r\n    functionalityName: PropTypes.string,\r\n    moduleId: PropTypes.number,\r\n  }),\r\n  moduleId: PropTypes.number.isRequired,\r\n  isOpen: PropTypes.bool.isRequired,\r\n  onGetData: PropTypes.func.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\nexport default AddEditFunctionalConfiguration","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport DropDown from '../../../../components/ui/dropdown/DropDrown';\r\nimport { useLazyGetAllModulesQuery } from '../../../../app/services/configurationAPI';\r\n\r\nconst ModuleSelection = (props) => {\r\n    const [moduleData, setModuleData] = useState([]);\r\n    const [selectedModule, setSelectedModule] = useState(null);\r\n    const [getAllModules, { isSuccess: isgetAllModulesSucess, data: allGetAllModulesData }] = useLazyGetAllModulesQuery();\r\n\r\n    // Trigger the API call on component mount\r\n    useEffect(() => {\r\n        getAllModules();\r\n    }, [getAllModules]);\r\n\r\n    // Update moduleData once the API call succeeds\r\n    useEffect(() => {\r\n        if (isgetAllModulesSucess && allGetAllModulesData?.length) {\r\n            const transformedData = allGetAllModulesData.map(module => ({\r\n                value: module.moduleId,\r\n                label: module.moduleName\r\n            }));\r\n            setModuleData(transformedData);\r\n        }\r\n    }, [isgetAllModulesSucess, allGetAllModulesData]);\r\n\r\n    // Once moduleData is set, select the first module by default\r\n    useEffect(() => {\r\n        if (moduleData.length > 0 && !selectedModule) {\r\n            handleModuleNameChange(moduleData[0]);\r\n        }\r\n    }, [moduleData]);\r\n\r\n    const handleModuleNameChange = (selectedOption) => {\r\n        if (selectedOption) {\r\n            setSelectedModule(selectedOption?.value);\r\n            props.handleModuleID(selectedOption?.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='row'>\r\n            <div className=\"col-md-4\">\r\n                <DropDown\r\n                    placeholder=\"Select Module Name\"\r\n                    options={moduleData}\r\n                    value={selectedModule} // Ensure selectedModule is set properly\r\n                    onChange={handleModuleNameChange} // Handles when dropdown selection changes\r\n                    isMultiSelect={false}\r\n                    closeMenuOnSelect={false}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nModuleSelection.propTypes = {\r\n    handleModuleID: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ModuleSelection;\r\n","import React, { useRef, useState } from 'react'\r\nimport FunctionalConfigurationList from './features/functionalConfigurationList/FunctionalConfigurationList';\r\nimport AddEditFunctionalConfiguration from './features/addEditFunctionalConfiguration/AddEditFunctionalConfiguration';\r\nimport CardSection from '../../../components/ui/card/CardSection';\r\nimport SidebarModel from '../../../components/ui/sidebarModel/SidebarModel';\r\nimport { AppIcons } from '../../../data/appIcons';\r\nimport ModuleSelection from './features/ModuleSelection';\r\nimport { AddEditFunctionalData } from './features/addEditFunctionalConfiguration/config/AddEditFunctional.data';\r\n\r\nconst FunctionalConfiguration = () => {\r\n    const childRef = useRef();\r\n    const [isModelOpen, setIsModelOpen] = useState(false);\r\n    const [moduleId, setModuleId] = useState(0);\r\n    const [isEdit, setIsEdit] = useState(false)\r\n    const [formData, setFormData] = useState(AddEditFunctionalData.initialState);\r\n\r\n    const handleToggleModal = () => {\r\n        setIsModelOpen(true);\r\n        setIsEdit(false)\r\n    };\r\n\r\n    const onSidebarClose = () => {\r\n        setIsModelOpen(false);\r\n        resetForm()\r\n    };\r\n\r\n    const handleModuleID = (data) => {\r\n        setModuleId(data)\r\n    }\r\n\r\n    const onGetData = () => {\r\n        if (childRef.current) {\r\n            childRef.current.callChildFunction();\r\n        }\r\n    };\r\n\r\n    const resetForm = () => {\r\n        let form = { ...AddEditFunctionalData.initialState };\r\n        setFormData(form);\r\n    };\r\n\r\n    const handleEdit = (data) => {\r\n        resetForm()\r\n        setFormData(data);\r\n        setIsEdit(true);\r\n        setIsModelOpen(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <CardSection\r\n                cardTitle=\"Module Selection\"\r\n                buttonClassName=\"btn theme-button\"\r\n            >\r\n                <ModuleSelection handleModuleID={handleModuleID} />\r\n            </CardSection>\r\n            {moduleId > 0 &&\r\n                <div className='functional-config'>\r\n                    <CardSection\r\n                        cardTitle=\"Functional Configuration\"\r\n                       // buttonClassName=\"btn theme-button\"\r\n                      //  rightButton={true}\r\n                       // buttonText=\"Add\"\r\n                        textWithIcon={true}\r\n                        iconImg={AppIcons.PlusIcon}\r\n                        titleButtonClick={handleToggleModal}\r\n                    >\r\n                        <FunctionalConfigurationList moduleId={moduleId} childRef={childRef} onEdit={handleEdit} />\r\n                    </CardSection>\r\n\r\n                    <SidebarModel\r\n                        modalTitle={`${isEdit ? \"Update\" : \"Add\"} Functional Configuration`}\r\n                        contentClass=\"content-70\"\r\n                        onClose={onSidebarClose}\r\n                        modalTitleIcon={AppIcons.AddIcon}\r\n                        isOpen={isModelOpen}\r\n                    >\r\n                        <AddEditFunctionalConfiguration initData={formData} isEdit={isEdit} onGetData={onGetData} isOpen={isModelOpen} moduleId={moduleId} onClose={onSidebarClose} />\r\n                    </SidebarModel>\r\n                </div>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default FunctionalConfiguration","import { GridColumnType } from \"../../../../../../../data/gridColumnType\";\r\n\r\nexport const viewFunctionalEventsData = {\r\n  columns: [\r\n    {\r\n      name: \"functionality\",\r\n      fieldName: \"functionalityName\",\r\n      colStyle: {\r\n        width: \"20%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"event\",\r\n      fieldName: \"eventName\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"event Date\",\r\n      colStyle: {\r\n        width: \"20%\",\r\n      },\r\n      fieldName: \"eventDate\",\r\n      colType: GridColumnType.DATE,\r\n      colSettings: {\r\n        isUTC: true,\r\n        format: \"MM/DD/YYYY hh:mm A \",\r\n      },\r\n    },\r\n    {\r\n      name: \"description\",\r\n      fieldName: \"description\",\r\n      colStyle: {\r\n        width: \"35%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n\r\n  ],\r\n\r\n};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { viewFunctionalEventsData } from './config/ViewFunctionalEvents.data'\r\nimport { useGetFunctionalityEventsMutation } from '../../../../../../app/services/configurationAPI';\r\nimport CardSection from '../../../../../../components/ui/card/CardSection';\r\nimport FinalMolGrid from '../../../../../../components/FinalMolGrid/FinalMolGrid';\r\n\r\nconst ViewFunctionalEvents = (props) => {\r\n  const molGridRef = useRef();\r\n  const [listData, setListData] = useState();\r\n  const [totalRowCount, setTotalRowCount] = useState(0);\r\n  const [getFunctionalityEvents, { isLoading: isGetFunctionalityEventsLoading, isSuccess: isGetFunctionalityEventsSuccess, data: isGetFunctionalityEventsData }] = useGetFunctionalityEventsMutation();\r\n\r\n  const getLists = (pageObject, sortingString) => {\r\n    const request = {\r\n      pagination: {\r\n        pageNumber: pageObject.pageNumber,\r\n        pageSize: pageObject.pageSize,\r\n      },\r\n      filters: { searchText: \"\" },\r\n      sortString: sortingString,\r\n      functionalityId: props.functionalityId\r\n    };\r\n    getFunctionalityEvents(request);\r\n  };\r\n\r\n  const handlePageChange = (page) => {\r\n    getLists(page, molGridRef.current.generateSortingString());\r\n  };\r\n\r\n  const handleSorting = (shortString) => {\r\n    getLists(molGridRef.current.getCurrentPageObject(), shortString);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isGetFunctionalityEventsSuccess && isGetFunctionalityEventsData) {\r\n      if (isGetFunctionalityEventsData) {\r\n        setListData(isGetFunctionalityEventsData.dataSource);\r\n      }\r\n      if (isGetFunctionalityEventsData.totalRecord) {\r\n        setTotalRowCount(isGetFunctionalityEventsData.totalRecord);\r\n      }\r\n    }\r\n  }, [isGetFunctionalityEventsSuccess, isGetFunctionalityEventsData]);\r\n\r\n  useEffect(() => {\r\n    if (molGridRef.current) {\r\n      const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n      const currentsortingString = molGridRef.current.generateSortingString();\r\n      const request = {\r\n        pagination: {\r\n          pageNumber: currentPageObject.pageNumber,\r\n          pageSize: currentPageObject.pageSize,\r\n        },\r\n        filters: { searchText: \"\" },\r\n        sortString: currentsortingString,\r\n        functionalityId: props.functionalityId\r\n      };\r\n      getFunctionalityEvents(request);\r\n    }\r\n  }, [props.functionalityId]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-12 table-striped api-provider view-function-provider\">\r\n        <CardSection\r\n          cardTitle=\"Functional Events\"\r\n          buttonClassName=\"btn theme-button\"\r\n        >\r\n          <FinalMolGrid\r\n            ref={molGridRef}\r\n            configuration={viewFunctionalEventsData}\r\n            dataSource={listData}\r\n            allowPagination={false}\r\n            pagination={{\r\n              totalCount: totalRowCount,\r\n              pageSize: 20,\r\n              currentPage: 1,\r\n            }}\r\n            onPageChange={handlePageChange}\r\n            onSorting={handleSorting}\r\n            isLoading={isGetFunctionalityEventsLoading}\r\n          />\r\n        </CardSection>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nViewFunctionalEvents.propTypes = {\r\n  functionalityId: PropTypes.number.isRequired,\r\n};\r\nexport default ViewFunctionalEvents"],"names":["functionalConfigurationListData","columns","name","fieldName","colStyle","width","allowShort","colType","GridColumnType","ACTION","defaultAction","allowEdit","customAction","iconName","title","className","props","molGridRef","useRef","listData","setListData","useState","totalRowCount","setTotalRowCount","getFunctionalities","isLoading","isGetFunctionalitiesLoading","isSuccess","isGetFunctionalitiesSuccess","data","isGetFunctionalitiesData","useGetFunctionalitiesMutation","getLists","pageObject","sortingString","request","pagination","pageNumber","pageSize","filters","searchText","sortString","moduleId","useEffect","dataSource","totalRecord","current","currentPageObject","getCurrentPageObject","currentsortingString","generateSortingString","onGetData","defaultPageObject","useImperativeHandle","childRef","callChildFunction","actionHandler","VIEWCONFIGURATION","onEdit","_jsx","children","FinalMolGrid","ref","configuration","allowPagination","totalCount","currentPage","onPageChange","page","onSorting","shortString","onActionChange","AddEditFunctionalData","initialState","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","INPUT","dataField","fieldSetting","placeholder","allowSpace","maxLength","validation","type","style","containerCss","formSetting","isViewOnly","functionalRef","functionalData","setFunctionalData","addEditFunctionalities","isAddEditFunctionalitiesLoading","isAddEditFunctionalitiesSuccess","allAddEditFunctionalitiesData","useAddEditFunctionalitiesMutation","errorMessage","includes","ToastService","warning","handleResetAndClose","success","onResetForm","initData","UpdateData","functionalityName","functionalityId","isOpen","onClose","_jsxs","FormCreator","config","Buttons","buttonTypeClassName","buttonText","onClick","handleAddEditFunctional","formData","getFormData","ViewFunctionalEvents","moduleData","setModuleData","selectedModule","setSelectedModule","getAllModules","isgetAllModulesSucess","allGetAllModulesData","useLazyGetAllModulesQuery","length","transformedData","map","module","value","label","moduleName","handleModuleNameChange","selectedOption","handleModuleID","DropDown","options","onChange","isMultiSelect","closeMenuOnSelect","FunctionalConfiguration","isModelOpen","setIsModelOpen","setModuleId","isEdit","setIsEdit","setFormData","onSidebarClose","resetForm","form","_Fragment","CardSection","cardTitle","buttonClassName","ModuleSelection","textWithIcon","iconImg","AppIcons","PlusIcon","titleButtonClick","handleToggleModal","FunctionalConfigurationList","SidebarModel","modalTitle","contentClass","modalTitleIcon","AddIcon","AddEditFunctionalConfiguration","viewFunctionalEventsData","DATE","colSettings","isUTC","format","getFunctionalityEvents","isGetFunctionalityEventsLoading","isGetFunctionalityEventsSuccess","isGetFunctionalityEventsData","useGetFunctionalityEventsMutation"],"sourceRoot":""}