{"version":3,"file":"static/js/8053.f4b4f2ee.chunk.js","mappings":"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","sources":["common/features/component/Contact/config/ContactDetailForm.data.js","common/features/component/Contact/feature/AddEditContact.js","common/features/component/Document/Config/DocuementsData.js","pages/order/feature/contactDetail/config/ContactDetail.data.js","pages/order/feature/contactDetail/ContactDetails.js","utils/TransformData/TransformAPIData.js"],"sourcesContent":["import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const contactDetailFormData = {\r\n  name: \"Email From\",\r\n  initialState: {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    contactTypeId: \"\",\r\n    isPrimary: false\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"firstName\",\r\n      lable: \"First Name \",\r\n      Field_Name: \"First Name\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"firstName\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter First Name\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n      },\r\n      validation: [{ type: \"require\" } , { type: \"onlyText\"}],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"lastName\",\r\n      lable: \"Last Name \",\r\n      Field_Name: \"Last Name\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"lastName\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Last Name\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n      },\r\n      validation: [{ type: \"require\" } , { type: \"onlyText\"}],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"contactTypeId\",\r\n      lable: \"Contact Type \",\r\n      Field_Name: \"Contact Type\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"contactTypeId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Contact Type\",\r\n        isMultiSelect: true,\r\n       // isDisabled: false,\r\n        isEnableOnChange: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-8 col-xl-8 col-md-12 col-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"isPrimary\",\r\n      lable: \"Is Primary\",\r\n      Field_Name: \"Is Primary\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isPrimary\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n        allowSpace: true,\r\n      },\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-4 col-xl-4 col-md-12 col-12 col-12 mb-input mt-3 margin-left0-checkbox margin-top-checkbox\",\r\n      },\r\n    },\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false\r\n  }\r\n};\r\n\r\nexport const ContactTypes = [\r\n  { value: 1, label: \"Primary\" },\r\n  { value: 2, label: \"EndUser\" },\r\n  { value: 3, label: \"Purchasing\" },\r\n  { value: 4, label: \"Invoice Submission\" },\r\n  { value: 5, label: \"Invoice Follow-up\" },\r\n  { value: 6, label: \"AP\" }\r\n];","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\n//** Lib's */\r\nimport Buttons from \"../../../../../components/ui/button/Buttons\";\r\nimport { FieldSettingType } from \"../../../../../utils/Enums/commonEnums\";\r\nimport FormCreator from \"../../../../../components/Forms/FormCreator\";\r\nimport { contactDetailFormData } from \"../config/ContactDetailForm.data\";\r\nimport DataLoader from \"../../../../../components/ui/dataLoader/DataLoader\";\r\nimport { getDropDownId, modifyEmailAddressData, modifyPhoneNumberData } from \"../../../../../utils/TransformData/TransformAPIData\";\r\nimport { setDropDownOptionField, setFieldSetting } from \"../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport { hasFunctionalPermission } from \"../../../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\nimport PropTypes from \"prop-types\";\r\n//** Service's */\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\nimport { ErrorMessage } from \"../../../../../data/appMessages\";\r\n//** Component's */\r\nconst EmailAddressGrid = React.lazy(() => import(\"../../EmailAddress/EmailAddressGrid\"));\r\nconst ContactNumbersGrid = React.lazy(() => import(\"../../ContactNumber/ContactNumbersGrid\"));\r\n\r\nconst AddEditContact = forwardRef(({ keyId, isUpdateContactModel, addEditContactMutation, onSidebarClose, onSuccess, childRef, editRef, SecurityKey, customerStatusId, allGetAllContactTypesData, isGetAllContactTypesSucess,\r\n    isEditablePage, isSupplier, isEdit, isOpen, getContactById, getContectTypeId, customerId, isOrderManage, onhandleApiCall, contryIdCode, orderResetValue,\r\n    getCompletionCount }) => {\r\n\r\n    //** State */\r\n    const ref = useRef();\r\n    const { formSetting } = contactDetailFormData;\r\n    const [contactId, setContactId] = useState(0);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [customerContactId, setCustomerContactId] = useState(0);\r\n    const [supplierContactId, setSupplierContactId] = useState(0);\r\n    const [isButtonDisable, setIsButtonDisable] = useState(false);\r\n    const [phoneNumberList, setPhoneNumberList] = useState([]);\r\n    const [, setShouldRerenderFormCreator] = useState(false);\r\n    const [emailAddressList, setEmailAddressList] = useState([]);\r\n    const [formData, setFormData] = useState(contactDetailFormData);\r\n\r\n    //** API Call's */\r\n    /**\r\n        * This hook dynamically sets the API call based on the module (customer or supplier).\r\n        * The API endpoint and parameters are configured within the SupplierContactDetail OR CustomerContactDetail component.\r\n    */\r\n    const [getById, { isFetching: isGetByIdFetching, isSuccess: isGetByIdSucess, data: isGetByIdData }] = getContactById();\r\n    const [addEdit, { isLoading: isAddEditLoading, isSuccess: isAddEditSuccess, data: isAddEditData }] = addEditContactMutation();\r\n\r\n    const handleAddEdit = async () => {\r\n        handlWithoutApprovalAddEdit();\r\n    }\r\n    useEffect(() => {\r\n        if (isUpdateContactModel && isGetAllContactTypesSucess) {\r\n            const filterCondition = (item) => {\r\n                let condition = isSupplier ? item.isForSuppliers : item.isForCustomers;\r\n                return condition;\r\n            };\r\n            setDropDownOptionField(allGetAllContactTypesData, \"contactTypeId\", \"type\", formData, \"contactTypeId\", filterCondition);\r\n            setShouldRerenderFormCreator((prevState) => !prevState);\r\n     \r\n        }\r\n    }, [ isGetAllContactTypesSucess,isUpdateContactModel])\r\n\r\n    const handlWithoutApprovalAddEdit = () => {\r\n        const data = ref.current.getFormData();\r\n        if (!data) return;\r\n        if (emailAddressList.length > 0) {\r\n            const contactTypeId = getDropDownId(data.contactTypeId, isEdit);\r\n            const request = requestData(data, contactTypeId, isSupplier, keyId, emailAddressList, phoneNumberList, supplierContactId, customerContactId);\r\n            let req = {\r\n                ...request,\r\n                customerId: customerId ? customerId : request.customerId\r\n            }\r\n            addEdit(req);\r\n        } else {\r\n            ToastService.warning(ErrorMessage.ContactEmailAddressRequired);\r\n        }\r\n    };\r\n\r\n    const requestData = (data, contactTypeId, isSupplier, keyId, emailAddressList, phoneNumberList, supplierContactId, customerContactId) => {\r\n        return {\r\n            ...data,\r\n            contactId: contactId,\r\n            contactTypeId: String(contactTypeId),\r\n            [isSupplier ? 'supplierId' : 'customerId']: keyId,\r\n            emailAddressList: emailAddressList.length > 0 ? modifyEmailAddressData(emailAddressList) : null,\r\n            phoneNumberList: phoneNumberList.length > 0 ? modifyPhoneNumberData(phoneNumberList) : null,\r\n            [isSupplier ? 'supplierContactId' : 'customerContactId']: isSupplier ? supplierContactId : customerContactId,\r\n        };\r\n    };\r\n\r\n    //** UseEffect */\r\n    useEffect(() => {\r\n        if (isAddEditSuccess && isAddEditData) {\r\n            if (isAddEditData.errorMessage.includes('EXISTS')) {\r\n\r\n                ToastService.warning(isAddEditData.errorMessage);\r\n                return;\r\n            }\r\n            if (onSuccess) {\r\n                onSuccess();\r\n                ToastService.success(isAddEditData.errorMessage);\r\n                setContactId(isAddEditData?.keyValue);\r\n                if (isOrderManage) {\r\n                    onhandleApiCall(getContectTypeId)\r\n                }\r\n            }\r\n            getCompletionCount && getCompletionCount();\r\n        }\r\n    }, [isAddEditSuccess, isAddEditData]);\r\n\r\n    useEffect(() => {\r\n        if (!isGetByIdFetching && isGetByIdSucess && isGetByIdData) {\r\n            let data = isGetByIdData;\r\n            let form = { ...contactDetailFormData };\r\n            form.initialState = {\r\n                firstName: data.firstName,\r\n                lastName: data.lastName,\r\n                contactTypeId: data.contactTypeId,\r\n                isPrimary: data.isPrimary\r\n            }\r\n            setFormData(form);\r\n            setContactId(data.contactId);\r\n            isSupplier ? setSupplierContactId(data?.supplierContactId) : setCustomerContactId(data?.customerContactId);\r\n            setFieldSetting(form, 'contactTypeId', FieldSettingType.MULTISELECT);\r\n            const sortedPhoneList = [...isGetByIdData.phoneNumberList].sort((a, b) => a.phoneId - b.phoneId);\r\n            const modifyPhoneNumberList = sortedPhoneList.map((item, index) => ({\r\n                ...item,\r\n                id: index + 1,\r\n                extension: item.extension === 0 ? '-' : item.extension\r\n            }));\r\n\r\n            const sortedEmailList = [...isGetByIdData.emailAddressList].sort((a, b) => b.emailId - a.emailId);\r\n            const modifyEmailAddressLst = sortedEmailList.map((item, index) => ({\r\n                ...item,\r\n                id: index + 1\r\n            }));\r\n            setPhoneNumberList(modifyPhoneNumberList);\r\n            setEmailAddressList(modifyEmailAddressLst);\r\n        }\r\n    }, [isGetByIdFetching, isGetByIdSucess]);\r\n\r\n    //** Use Imperative Handle  */\r\n    useImperativeHandle(editRef, () => ({\r\n        callEditFunction: handleEditMode,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (isEditablePage && SecurityKey) {\r\n            const hasEditPermission = hasFunctionalPermission(SecurityKey.EDIT);\r\n            const hasAddPermission = hasFunctionalPermission(SecurityKey.ADD);\r\n            if (hasEditPermission && formSetting) {\r\n                if (editMode) {\r\n                    if (hasEditPermission.isViewOnly === true) {\r\n                        formSetting.isViewOnly = true;\r\n                        setIsButtonDisable(true);\r\n                    }\r\n                    else {\r\n                        formSetting.isViewOnly = false;\r\n                        setIsButtonDisable(false);\r\n                    }\r\n                }\r\n                else if (!editMode) {\r\n                    if (hasAddPermission.hasAccess === true) {\r\n                        formSetting.isViewOnly = false;\r\n                        setIsButtonDisable(false);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [editMode, editRef, SecurityKey]);\r\n\r\n    const handleEditMode = (contactId) => {\r\n        setEditMode(true);\r\n        contactId && getById(contactId);\r\n        // setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.DISABLED, true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isEdit && !isOrderManage) {\r\n            if (isSupplier) {\r\n                setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.MULTISELECT, false);\r\n            } else {\r\n                setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.MULTISELECT, true);\r\n            }\r\n            let form = { ...contactDetailFormData };\r\n\r\n            setFormData(form);\r\n            if (isOpen) {\r\n                setContactId(0);\r\n                setEditMode(false);\r\n                setPhoneNumberList([]);\r\n                setEmailAddressList([])\r\n            }\r\n        }\r\n        if (isOrderManage) {\r\n            setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.DISABLED, true);\r\n            setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.MULTISELECT, false);\r\n            let form = { ...contactDetailFormData };\r\n            form.initialState = {\r\n                ...form.initialState,\r\n                contactTypeId: getContectTypeId,\r\n            }\r\n            setFormData(form);\r\n            // setShouldRerenderFormCreator((prevState) => !prevState);\r\n        }\r\n    }, [isOpen])\r\n\r\n    //** Reset Data */\r\n    const onResetData = () => {\r\n        setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.DISABLED, false);\r\n        let form = { ...contactDetailFormData };\r\n        form.initialState = { ...contactDetailFormData.initialState };\r\n        setFormData(form);\r\n        setCustomerContactId(0);\r\n        setSupplierContactId(0);\r\n    };\r\n\r\n    //** Use Imperative Handle  */\r\n    useImperativeHandle(childRef, () => ({\r\n        callChildFunction: onResetData,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (orderResetValue && isOrderManage) {\r\n            setPhoneNumberList([]);\r\n            setEmailAddressList([])\r\n        }\r\n    }, [orderResetValue])\r\n\r\n    return (\r\n        <div>\r\n            {!isGetByIdFetching ?\r\n                <React.Fragment>\r\n                    <div className=\"row mt-2 addEditContact-form\">\r\n                        <FormCreator config={formData} ref={ref} {...formData} />\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <EmailAddressGrid isButtonDisable={isButtonDisable} emailAddressList={emailAddressList}\r\n                            setEmailAddressList={setEmailAddressList} contactId={contactId} isOrderManage={isOrderManage} />\r\n                        <ContactNumbersGrid isButtonDisable={isButtonDisable} phoneNumberList={phoneNumberList}\r\n                            setPhoneNumberList={setPhoneNumberList} contactId={contactId} contryIdCode={contryIdCode} isOrderManage={isOrderManage} />\r\n                    </div>\r\n                </React.Fragment>\r\n                : <DataLoader />\r\n            }\r\n            <div className=\"col-md-12 mt-3\">\r\n                <div className=\"d-flex align-item-end justify-content-end\">\r\n                    <div className=\"d-flex align-item-end\">\r\n                        {/* {!enableDisableButton && */}\r\n                        <Buttons\r\n                            buttonTypeClassName=\"theme-button\"\r\n                            buttonText='Save'\r\n                            isLoading={isAddEditLoading}\r\n                            onClick={handleAddEdit}\r\n                            isDisable={isButtonDisable} />\r\n                        {/* } */}\r\n                        <Buttons\r\n                            buttonTypeClassName=\"dark-btn ml-5\"\r\n                            buttonText=\"Cancel\"\r\n                            onClick={onSidebarClose} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nAddEditContact.propTypes = {\r\n    keyId: PropTypes.number,\r\n    addEditContactMutation: PropTypes.func.isRequired,\r\n    onSidebarClose: PropTypes.func,\r\n    onSuccess: PropTypes.func,\r\n    childRef: PropTypes.shape({\r\n        current: PropTypes.object\r\n    }),\r\n    editRef: PropTypes.shape({\r\n        current: PropTypes.object\r\n    }),\r\n    SecurityKey: PropTypes.shape({\r\n        EDIT: PropTypes.string,\r\n        ADD: PropTypes.string\r\n    }),\r\n    isEditablePage: PropTypes.bool,\r\n    isSupplier: PropTypes.bool,\r\n    isEdit: PropTypes.bool,\r\n    isOpen: PropTypes.bool,\r\n    getContactById: PropTypes.func.isRequired,\r\n    getContectTypeId: PropTypes.string,\r\n    customerId: PropTypes.number,\r\n    isOrderManage: PropTypes.bool,\r\n    onhandleApiCall: PropTypes.func\r\n};\r\n\r\nexport default AddEditContact;\r\n","import { AppIcons } from \"../../../../../data/appIcons\";\r\nimport { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\nimport { GridColumnType } from \"../../../../../data/gridColumnType\";\r\n\r\nexport const DocumentFormData = {\r\n  name: \"Document Form\",\r\n  initialState: {\r\n    name: \"\",\r\n    documentTypeId: \"\",\r\n    supplierId: \"\",\r\n    customerId: \"\",\r\n    attachment: \"\",\r\n    base64File: \"\",\r\n    storagePath: \"\"\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"documentTypeId\",\r\n      lable: \"Document Type \",\r\n      Field_Name: \"Document Type\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      fieldType: FormFieldTypes.EDITABLEDROPDOWN,\r\n      dataField: \"documentTypeId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Document Type\",\r\n        isEnableOnChange: true,\r\n        options: []\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"name\",\r\n      lable: \"Document Name \",\r\n      Field_Name: \"Document Name\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"name\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Document Name\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n        isDisable: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"attachment\",\r\n      lable: \"Attachment \",\r\n      Field_Name: \"Attachment\",\r\n      fieldType: FormFieldTypes.FILE,\r\n      dataField: \"attachment\",\r\n      fieldSetting: {\r\n        placeholder: \"Upload Attachment\",\r\n        allowSpace: true,\r\n        isButtonVisible: false,\r\n        isCustomButtonVisible: true,\r\n        acceptedFiles: '.pdf , .docx ',\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 col-12 mb-input mb-0 custom-file-upload-section\",\r\n      },\r\n\r\n    },\r\n\r\n  ],\r\n};\r\n\r\n\r\n\r\nexport const DocumentGridConfig = {\r\n  columns: [\r\n    {\r\n      name: \"Document Type\",\r\n      fieldName: \"documentType\",\r\n      // allowShort: true,\r\n    },\r\n    {\r\n      name: \"Document Name\",\r\n      fieldName: \"documentName\",\r\n      // allowShort: true,\r\n    },\r\n\r\n    {\r\n      name: \"Action\",\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n        allowDelete: true,\r\n      },\r\n\r\n    },\r\n  ],\r\n};\r\n\r\n\r\nexport const DocumentTypes = [\r\n  { value: 1, label: \"Tax or Registration document\" },\r\n  { value: 2, label: \"Customer details form\" },\r\n  { value: 3, label: \"Our submitted forms\" }\r\n];\r\n\r\nexport const FileTypeIcons = [\r\n  {\r\n    type: 'pdf',\r\n    icon: AppIcons.PdfIcon\r\n  },\r\n  {\r\n    type: 'doc',\r\n    icon: AppIcons.DocIcon\r\n  },\r\n  {\r\n    type: 'docx',\r\n    icon: AppIcons.DocIcon\r\n  },\r\n  {\r\n    type: 'xlsx',\r\n    icon: AppIcons.XlsIcon\r\n  },\r\n  {\r\n    type: 'xls',\r\n    icon: AppIcons.XlsIcon\r\n  },\r\n  {\r\n    type: 'ppt',\r\n    icon: AppIcons.PptIcon\r\n  },\r\n  {\r\n    type: 'zip',\r\n    icon: AppIcons.ZipIcon\r\n  },\r\n  {\r\n    type: 'csv',\r\n    icon: AppIcons.CsvIcon\r\n  }\r\n]\r\n","import { AppIcons } from \"../../../../../data/appIcons\";\r\nimport { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\nimport { ContactType } from \"../../../../../utils/Enums/commonEnums\";\r\n\r\nexport const contactInformationData = {\r\n  initialState: {\r\n    endUserId: null,\r\n    isEndUser: true,\r\n    isPurchasingGiven: true,\r\n    refNumber: \"\",\r\n    isInvoiceSubmission: true,\r\n    invoiceSubmissionId: null,\r\n    purchasingId: null,\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"isEndUser\",\r\n      lable: \"Is End User given on Purchase order\",\r\n      Field_Name: \"Is End User\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isEndUser\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n        isEnableOnChange: true\r\n      },\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-4 col-12 col-12\",\r\n      },\r\n    },\r\n    {\r\n      id: \"isInvoiceSubmission\",\r\n      lable: \"Is Invoice Submission given on Purchase order\",\r\n      Field_Name: \"Exempt Sales Tax\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isInvoiceSubmission\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n        isEnableOnChange: true\r\n      },\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-4 col-12 col-12\",\r\n      },\r\n    },\r\n    {\r\n      id: \"isPurchasingGiven\",\r\n      lable: \"Is Purchasing given on Purchase order\",\r\n      Field_Name: \"Is Purchasing Given\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isPurchasingGiven\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n        isEnableOnChange: true\r\n      },\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-4 col-12 col-12\",\r\n      },\r\n    },\r\n    {\r\n      id: \"endUserId\",\r\n      lable: \"End User \",\r\n      Field_Name: \"End User\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"endUserId\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter End User\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n        exemptBoundarySpaces: true,\r\n        validation: [{ type: \"require\" }],\r\n        isEnableOnChange: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-4 col-6 mb-input\",\r\n      },\r\n      inputButtonGroup: {\r\n        isInputButton: true,\r\n        buttonText: 'Add',\r\n        icon: AppIcons.PlusIcon,\r\n        GetByID: ContactType.ENDUSER\r\n      }\r\n    },\r\n\r\n    {\r\n      id: \"invoiceSubmissionId\",\r\n      lable: \"Invoice Submission \",\r\n      Field_Name: \"Invoice Submission\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"invoiceSubmissionId\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Invoice Submission\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n        exemptBoundarySpaces: true,\r\n        validation: [{ type: \"require\" }],\r\n        isEnableOnChange: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-4 col-6 mb-input\",\r\n      },\r\n      inputButtonGroup: {\r\n        isInputButton: true,\r\n        buttonText: 'Add',\r\n        icon: AppIcons.PlusIcon,\r\n        GetByID: ContactType.INVOICESUBMISSION\r\n\r\n      }\r\n    },\r\n    {\r\n      id: \"purchasingId\",\r\n      lable: \"Purchasing \",\r\n      Field_Name: \"Purchasing\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"purchasingId\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Purchasing\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n        exemptBoundarySpaces: true,\r\n        validation: [{ type: \"require\" }],\r\n        isEnableOnChange: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-4 col-6 mb-input\",\r\n      },\r\n      inputButtonGroup: {\r\n        isInputButton: true,\r\n        buttonText: 'Add',\r\n        icon: AppIcons.PlusIcon,\r\n        GetByID: ContactType.PURCHASING\r\n      }\r\n    },\r\n    {\r\n      id: \"refNumber\",\r\n      lable: \"Reference Number\",\r\n      Field_Name: \"Reference Number\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"refNumber\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Reference Number\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n        exemptBoundarySpaces: true,\r\n        validation: [{ type: \"require\" }],\r\n        isEnableOnChange: true,\r\n      },\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-4 col-6 mb-input\",\r\n      },\r\n    },\r\n\r\n  ],\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useContext, useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\nimport { contactInformationData } from \"./config/ContactDetail.data\";\r\nimport FormCreator from \"../../../../components/Forms/FormCreator\";\r\nimport { useLazyGetAllContactsByCustomerIdAndContactTypeIdQuery } from '../../../../app/services/commonAPI';\r\nimport { ContactType, FieldSettingType } from \"../../../../utils/Enums/commonEnums\";\r\nimport { setDropDownOptionField, setFieldSetting } from \"../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport SidebarModel from \"../../../../components/ui/sidebarModel/SidebarModel\";\r\nimport { AppIcons } from \"../../../../data/appIcons\";\r\nimport AddEditContact from \"../../../../common/features/component/Contact/feature/AddEditContact\";\r\nimport { useAddEditContactMutation, useLazyGetAllContactTypesQuery, useLazyGetCustomerContactByContactIdQuery } from \"../../../../app/services/contactAPI\";\r\nimport { contactDetailFormData } from \"../../../../common/features/component/Contact/config/ContactDetailForm.data\";\r\nimport AddOrderContext from \"../../../../utils/Order/AddOrderContext\";\r\n\r\nconst ContactDetails = (props) => {\r\n  const basicInformation = useRef();\r\n  // const editRef = useRef();\r\n  const [formData, setFormData] = useState(contactInformationData);\r\n  const [isModelOpen, setIsModelOpen] = useState(false);\r\n  const [getContectTypeId, setContectTypeId] = useState(null)\r\n  const [endUserEnableDisableButton, setEndUserEnableDisableButton] = useState(true)\r\n  const [invoicerEnableDisableButton, setInvoiceEnableDisableButton] = useState(true)\r\n  const [purchasingEnableDisableButton, setPurchasingEnableDisableButton] = useState(true)\r\n  const [orderResetValue, setOrderResetValue] = useState(false)\r\n\r\n  const { conatctRef, orderCustomerId, moveNextPage, orderId } = useContext(AddOrderContext);\r\n  const [getAllContactTypes, { isSuccess: isGetAllContactTypesSucess, data: allGetAllContactTypesData }] = useLazyGetAllContactTypesQuery();\r\n\r\n  const [getAllEndUserId, { isFetching: isGetAllEndUserFetching, isSuccess: isgetAllEndUserSuccess, data: isgetAllEndUserData }] = useLazyGetAllContactsByCustomerIdAndContactTypeIdQuery();\r\n  const [getAllInvoiceSubmissionId, { isFetching: isGetAllInvoiceSubmissionFetching, isSuccess: isgetAllInvoiceSubmissionSuccess, data: isgetAllInvoiceSubmissionData }] = useLazyGetAllContactsByCustomerIdAndContactTypeIdQuery();\r\n  const [getAllPurchasingId, { isFetching: isGetAllPurchasingFetching, isSuccess: isgetAllPurchasingSuccess, data: isgetAllPurchasingData }] = useLazyGetAllContactsByCustomerIdAndContactTypeIdQuery();\r\n\r\n  useEffect(() => {\r\n    if (orderCustomerId) {\r\n      let req = {\r\n        customerId: orderCustomerId,\r\n        contactTypeId: ContactType.ENDUSER\r\n      }\r\n      getAllEndUserId(req)\r\n    }\r\n  }, [orderCustomerId])\r\n\r\n  useEffect(() => {\r\n    if (orderCustomerId) {\r\n      let req = {\r\n        customerId: orderCustomerId,\r\n        contactTypeId: ContactType.INVOICESUBMISSION\r\n      }\r\n      getAllInvoiceSubmissionId(req)\r\n    }\r\n  }, [orderCustomerId])\r\n\r\n  useEffect(() => {\r\n    if (orderCustomerId) {\r\n      let req = {\r\n        customerId: orderCustomerId,\r\n        contactTypeId: ContactType.PURCHASING\r\n      }\r\n      getAllPurchasingId(req)\r\n    }\r\n  }, [orderCustomerId])\r\n\r\n  useEffect(() => {\r\n    if (!isGetAllEndUserFetching && isgetAllEndUserSuccess && isgetAllEndUserData) {\r\n      const getContact = isgetAllEndUserData.map((item) => ({\r\n        value: item.contactId,\r\n        label: item.fullName,\r\n      }));\r\n\r\n      // Create a new formData object to trigger re-render\r\n      setFormData(prevFormData => {\r\n        const newFormData = { ...prevFormData };\r\n        const dropdownField = newFormData.formFields?.find(item => item.dataField === \"endUserId\");\r\n        if (dropdownField) {\r\n          dropdownField.fieldSetting.options = getContact;\r\n        }\r\n        return newFormData;\r\n      });\r\n    }\r\n  }, [isGetAllEndUserFetching, isgetAllEndUserSuccess, isgetAllEndUserData]);\r\n\r\n  useEffect(() => {\r\n    if (!isGetAllInvoiceSubmissionFetching && isgetAllInvoiceSubmissionSuccess && isgetAllInvoiceSubmissionData) {\r\n      const getContact = isgetAllInvoiceSubmissionData.map((item) => ({\r\n        value: item.contactId,\r\n        label: item.fullName,\r\n      }));\r\n\r\n      // Create a new formData object to trigger re-render\r\n      setFormData(prevFormData => {\r\n        const newFormData = { ...prevFormData };\r\n        const dropdownField = newFormData.formFields?.find(item => item.dataField === \"invoiceSubmissionId\");\r\n        if (dropdownField) {\r\n          dropdownField.fieldSetting.options = getContact;\r\n        }\r\n        return newFormData;\r\n      });\r\n    }\r\n  }, [isGetAllInvoiceSubmissionFetching, isgetAllInvoiceSubmissionSuccess, isgetAllInvoiceSubmissionData]);\r\n\r\n  useEffect(() => {\r\n    if (!isGetAllPurchasingFetching && isgetAllPurchasingSuccess && isgetAllPurchasingData) {\r\n      const getContact = isgetAllPurchasingData.map((item) => ({\r\n        value: item.contactId,\r\n        label: item.fullName,\r\n      }));\r\n\r\n      // Create a new formData object to trigger re-render\r\n      setFormData(prevFormData => {\r\n        const newFormData = { ...prevFormData };\r\n        const dropdownField = newFormData.formFields?.find(item => item.dataField === \"purchasingId\");\r\n        if (dropdownField) {\r\n          dropdownField.fieldSetting.options = getContact;\r\n        }\r\n        return newFormData;\r\n      });\r\n    }\r\n  }, [isGetAllPurchasingFetching, isgetAllPurchasingSuccess, isgetAllPurchasingData]);\r\n\r\n\r\n  const handleDropdownApiCall = (data) => {\r\n    if (data === 2) {\r\n      let req = {\r\n        customerId: orderCustomerId,\r\n        contactTypeId: ContactType.ENDUSER\r\n      }\r\n      getAllEndUserId(req)\r\n    } else if (data === 3) {\r\n      let req = {\r\n        customerId: orderCustomerId,\r\n        contactTypeId: ContactType.PURCHASING\r\n      }\r\n      getAllPurchasingId(req)\r\n    } else if (data === 4) {\r\n      let req = {\r\n        customerId: orderCustomerId,\r\n        contactTypeId: ContactType.INVOICESUBMISSION\r\n      }\r\n      getAllInvoiceSubmissionId(req)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAllContactTypes();\r\n    setEndUserEnableDisableButton(true);\r\n    setInvoiceEnableDisableButton(true);\r\n    setPurchasingEnableDisableButton(true);\r\n    setFieldSetting(formData, 'endUserId', FieldSettingType.DISABLED, false);\r\n    setFieldSetting(formData, 'invoiceSubmissionId', FieldSettingType.DISABLED, false);\r\n    setFieldSetting(formData, 'purchasingId', FieldSettingType.DISABLED, false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isGetAllContactTypesSucess && allGetAllContactTypesData) {\r\n      const filterCondition = (item) => {\r\n        let condition = item.isForCustomers;\r\n        return condition;\r\n      };\r\n      setDropDownOptionField(allGetAllContactTypesData, \"contactTypeId\", \"type\", contactDetailFormData, \"contactTypeId\", filterCondition);\r\n    }\r\n  }, [isGetAllContactTypesSucess, allGetAllContactTypesData]);\r\n\r\n  const handleInputGroupButton = (id) => {\r\n    if (id > 0) {\r\n      setContectTypeId(id)\r\n      if (endUserEnableDisableButton && ContactType.ENDUSER === id) {\r\n        setIsModelOpen(!isModelOpen);\r\n      }\r\n      if (invoicerEnableDisableButton && ContactType.INVOICESUBMISSION === id) {\r\n        setIsModelOpen(!isModelOpen);\r\n      }\r\n      if (purchasingEnableDisableButton && ContactType.PURCHASING === id) {\r\n        setIsModelOpen(!isModelOpen);\r\n      }\r\n    }\r\n  }\r\n\r\n  const onSuccess = () => {\r\n    setIsModelOpen(!isModelOpen);\r\n    setOrderResetValue(true)\r\n  };\r\n\r\n  const onSidebarClose = () => {\r\n    setIsModelOpen(false);\r\n    setOrderResetValue(false)\r\n  };\r\n\r\n  const handleCheckboxChanges = (data, dataField) => {\r\n    let updatedFormData = { ...formData };\r\n    switch (dataField) {\r\n      case \"isEndUser\":\r\n        if (data) {\r\n          updatedFormData.formFields = manageRequiredFieldsValidation(updatedFormData.formFields, 'endUserId', false);\r\n          setFieldSetting(updatedFormData, 'endUserId', FieldSettingType.DISABLED, false);\r\n          setEndUserEnableDisableButton(true);\r\n        } else {\r\n          updatedFormData.formFields = manageRequiredFieldsValidation(updatedFormData.formFields, 'endUserId', true);\r\n          setFieldSetting(updatedFormData, 'endUserId', FieldSettingType.DISABLED, true);\r\n          basicInformation.current.updateFormFieldValue({\r\n            endUserId: null,\r\n            isEndUser: false\r\n          });\r\n          setEndUserEnableDisableButton(false);\r\n        }\r\n        break;\r\n      case \"isInvoiceSubmission\":\r\n        if (data) {\r\n          updatedFormData.formFields = manageRequiredFieldsValidation(updatedFormData.formFields, 'invoiceSubmissionId', false);\r\n          setFieldSetting(updatedFormData, 'invoiceSubmissionId', FieldSettingType.DISABLED, false);\r\n          setInvoiceEnableDisableButton(true);\r\n        } else {\r\n          updatedFormData.formFields = manageRequiredFieldsValidation(updatedFormData.formFields, 'invoiceSubmissionId', true);\r\n          updatedFormData.formFields = updatedFormData.formFields.map((field) => {\r\n            if (field.id === 'invoiceSubmissionId') {\r\n              const { validation, ...rest } = field;\r\n              return rest;\r\n            }\r\n            return field;\r\n          });\r\n          setFieldSetting(updatedFormData, 'invoiceSubmissionId', FieldSettingType.DISABLED, true);\r\n          basicInformation.current.updateFormFieldValue({\r\n            invoiceSubmissionId: null,\r\n            isInvoiceSubmission: false\r\n          });\r\n          setInvoiceEnableDisableButton(false);\r\n        }\r\n        break;\r\n      case \"isPurchasingGiven\":\r\n        if (data) {\r\n          updatedFormData.formFields = manageRequiredFieldsValidation(updatedFormData.formFields, 'purchasingId', false);\r\n          setFieldSetting(updatedFormData, 'purchasingId', FieldSettingType.DISABLED, false);\r\n          setPurchasingEnableDisableButton(true);\r\n        } else {\r\n          updatedFormData.formFields = manageRequiredFieldsValidation(updatedFormData.formFields, 'purchasingId', true);\r\n          setFieldSetting(updatedFormData, 'purchasingId', FieldSettingType.DISABLED, true);\r\n          basicInformation.current.updateFormFieldValue({\r\n            purchasingId: null,\r\n            isPurchasingGiven: false\r\n          });\r\n          setPurchasingEnableDisableButton(false);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    setFormData(updatedFormData);\r\n  };\r\n\r\n  const manageRequiredFieldsValidation = (formFields, fieldsId, isRemove) => {\r\n    return formFields.map((field) => {\r\n      if (field.id === fieldsId) {\r\n        if (isRemove) {\r\n          const { validation, ...rest } = field;\r\n          return rest;\r\n        } else {\r\n          return { ...field, validation: [{ type: \"require\" }] };\r\n        }\r\n      }\r\n      return field;\r\n    });\r\n  }\r\n\r\n  const formActionHandler = {\r\n    CHECK_CHANGE: handleCheckboxChanges\r\n  };\r\n\r\n  useImperativeHandle(conatctRef, () => ({\r\n    handleAddOrderConatct,\r\n  }));\r\n\r\n  const handleAddOrderConatct = () => {\r\n    let data = basicInformation.current.getFormData(); // Retrieve form data\r\n    if (data) {\r\n      let orderContactsList = [];\r\n\r\n      if (data.isEndUser && data.endUserId) {\r\n        orderContactsList.push({\r\n          contactId: typeof data.endUserId === \"object\" ? data.endUserId.value : data.endUserId,\r\n          contactTypeId: ContactType.ENDUSER\r\n        });\r\n      }\r\n\r\n      if (data.isInvoiceSubmission && data.invoiceSubmissionId) {\r\n        orderContactsList.push({\r\n          contactId: typeof data.invoiceSubmissionId === \"object\" ? data.invoiceSubmissionId.value : data.invoiceSubmissionId,\r\n          contactTypeId: ContactType.INVOICESUBMISSION\r\n        });\r\n      }\r\n\r\n      if (data.isPurchasingGiven && data.purchasingId) {\r\n        orderContactsList.push({\r\n          contactId: typeof data.purchasingId === \"object\" ? data.purchasingId.value : data.purchasingId,\r\n          contactTypeId: ContactType.PURCHASING\r\n        });\r\n      }\r\n\r\n      let request = {\r\n        orderId: orderId || 0, // Use orderId or default to 0\r\n        orderContactsList, // Add the contacts list to the request\r\n        referenceNumber: data.refNumber,\r\n        isEndUser: data.isEndUser,\r\n        isInvoiceSubmission: data.isInvoiceSubmission,\r\n        isPurchasing: data.isPurchasingGiven,\r\n      };\r\n\r\n      // Pass the request data to the parent component or API\r\n      props.onHandleOrderContact(request);\r\n      moveNextPage(); // Move to the next page or step\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <FormCreator\r\n          config={formData}\r\n          ref={basicInformation}\r\n          {...formData}\r\n          handleInputGroupButton={handleInputGroupButton}\r\n          onCheckBoxChange={formActionHandler}\r\n        />\r\n      </div>\r\n      {/* {isSidebarModal && */}\r\n      <div className=\"sidebar-contact-model\">\r\n        <SidebarModel\r\n          modalTitle=\"Add/Edit Contact\"\r\n          contentClass=\"content-40\"\r\n          onClose={onSidebarClose}\r\n          modalTitleIcon={AppIcons.AddIcon}\r\n          isOpen={isModelOpen}\r\n        >\r\n          <AddEditContact\r\n            isOrderManage={true}\r\n            onSuccess={onSuccess}\r\n            addEditContactMutation={useAddEditContactMutation}\r\n            isOpen={isModelOpen}\r\n            getContactById={useLazyGetCustomerContactByContactIdQuery}\r\n            getContectTypeId={getContectTypeId}\r\n            customerId={orderCustomerId}\r\n            onhandleApiCall={handleDropdownApiCall}\r\n            onSidebarClose={onSidebarClose}\r\n            orderResetValue={orderResetValue}\r\n          // enableDisableButton={enableDisableButton}\r\n          />\r\n        </SidebarModel>\r\n      </div>\r\n      {/* } */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactDetails;\r\n","import formatDate from \"../../lib/formatDate\";\r\nimport { FileTypeIcons } from \"../../common/features/component/Document/Config/DocuementsData\";\r\n\r\nexport const modifyContactType = (apiResponseData) => {\r\n  const allType = {\r\n    id: 0,\r\n    type: \"All\", // It's used for all the types\r\n    isForSuppliers: true,\r\n    isForCustomers: true,\r\n    contactTypeId: \"\",\r\n  };\r\n  return [allType, ...apiResponseData];\r\n};\r\n\r\nexport const getDropDownId = (id, isEdit) => {\r\n  if (isEdit) {\r\n    return id && typeof id === \"object\" ? String(id.value) : String(id);\r\n  } else {\r\n    return Array.isArray(id) ? id.map(String).join(\",\") : id && typeof id === \"object\" ? String(id.value) : String(id);;\r\n  }\r\n};\r\n\r\nexport const modifyAddressType = (apiResponseData) => {\r\n  const allType = {\r\n    id: 0,\r\n    type: \"All\", // It's used for all the types\r\n    isForSuppliers: true,\r\n    isForCustomers: true,\r\n    addressTypeId: \"\",\r\n  };\r\n  return [allType, ...apiResponseData];\r\n};\r\n\r\nexport const modifyPhoneNumberData = (phoneDataArray) => {\r\n  const noPrimaryFound = phoneDataArray.every(data => !data.isPrimary);\r\n  const newArray = phoneDataArray.map((phoneData, index) => ({\r\n    ...phoneData,\r\n    extension: phoneData.extension === \"-\" ? 0 : phoneData.extension,\r\n    isPrimary: noPrimaryFound && index === 0 ? true : phoneData.isPrimary,\r\n  }));\r\n  return newArray;\r\n};\r\n\r\nexport const modifyEmailAddressData = (emailDataArray) => {\r\n  const noPrimaryFound = emailDataArray.every(data => !data.isPrimary);\r\n  const newArray = emailDataArray.map((emailData, index) => ({\r\n    ...emailData,\r\n    isPrimary: noPrimaryFound && index === 0 ? true : emailData.isPrimary\r\n  }));\r\n  return newArray;\r\n};\r\n\r\nexport const modifyTimeLineData = (timelineData) => {\r\n  const newArray = timelineData.map((data) => ({\r\n    ...data,\r\n    description:\r\n      data.description +\r\n      \" by \" +\r\n      data.name +\r\n      \" on \" +\r\n      formatDate(data.changedAt, \"MM/DD/YYYY hh:mm A\"),\r\n  }));\r\n  return newArray;\r\n};  \r\n\r\nexport const getFileTypeIcon = (filename) => {\r\n  const parts = filename?.split(\".\");\r\n  const fileType = parts?.length > 1 ? parts[parts.length - 1] : \"\";\r\n  return getIconForFileType(fileType);\r\n};\r\n\r\nconst getIconForFileType = (fileType) => {\r\n  const fileTypeIcon = FileTypeIcons.find((icon) => icon.type === fileType);\r\n  return fileTypeIcon ? fileTypeIcon.icon : null;\r\n};\r\n\r\nexport const documentTransformData = (data) => {\r\n\r\n\r\n  return data.reduce((acc, item) => {\r\n    const {\r\n      type,\r\n      attachment,\r\n      customerDocumentId,\r\n      customerId,\r\n      documentTypeId,\r\n      name,\r\n      createdAt,\r\n      isArchive,\r\n    } = item;\r\n\r\n    // Extract the file type and get the file icon basde on the file type\r\n    const documentIcon = getFileTypeIcon(attachment);\r\n\r\n    const transformedItem = {\r\n      attachment,\r\n      customerDocumentId,\r\n      customerId,\r\n      documentTypeId,\r\n      name,\r\n      documentIcon,\r\n      createdAt,\r\n      isArchive,\r\n      type\r\n    };\r\n\r\n    if (!acc[type]) {\r\n      acc[type] = [];\r\n    }\r\n\r\n    acc[type].push(transformedItem);\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nexport const supplierDocumentTransformData = (data) => {\r\n  return data.reduce((acc, item) => {\r\n    const {\r\n      type,\r\n      attachment,\r\n      supplierDocumentId,\r\n      supplierId,\r\n      documentTypeId,\r\n      name,\r\n      createdAt,\r\n      isArchive\r\n    } = item;\r\n\r\n    // Extract the file type and get the file icon basde on the file type\r\n    const documentIcon = getFileTypeIcon(attachment);\r\n\r\n    const transformedItem = {\r\n      attachment,\r\n      supplierDocumentId,\r\n      supplierId,\r\n      documentTypeId,\r\n      name,\r\n      documentIcon,\r\n      createdAt,\r\n      isArchive\r\n    };\r\n\r\n    if (!acc[type]) {\r\n      acc[type] = [];\r\n    }\r\n\r\n    acc[type].push(transformedItem);\r\n    return acc;\r\n  }, {});\r\n};\r\n"],"names":["contactDetailFormData","name","initialState","firstName","lastName","contactTypeId","isPrimary","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","INPUT","dataField","fieldSetting","placeholder","allowSpace","maxLength","validation","type","style","containerCss","SELECT","isMultiSelect","isEnableOnChange","CHECKBOX","formSetting","isViewOnly","EmailAddressGrid","React","ContactNumbersGrid","forwardRef","_ref","keyId","isUpdateContactModel","addEditContactMutation","onSidebarClose","onSuccess","childRef","editRef","SecurityKey","customerStatusId","allGetAllContactTypesData","isGetAllContactTypesSucess","isEditablePage","isSupplier","isEdit","isOpen","getContactById","getContectTypeId","customerId","isOrderManage","onhandleApiCall","contryIdCode","orderResetValue","getCompletionCount","ref","useRef","contactId","setContactId","useState","editMode","setEditMode","customerContactId","setCustomerContactId","supplierContactId","setSupplierContactId","isButtonDisable","setIsButtonDisable","phoneNumberList","setPhoneNumberList","setShouldRerenderFormCreator","emailAddressList","setEmailAddressList","formData","setFormData","getById","isFetching","isGetByIdFetching","isSuccess","isGetByIdSucess","data","isGetByIdData","addEdit","isLoading","isAddEditLoading","isAddEditSuccess","isAddEditData","useEffect","filterCondition","item","isForSuppliers","isForCustomers","setDropDownOptionField","prevState","handlWithoutApprovalAddEdit","current","getFormData","length","getDropDownId","request","requestData","req","ToastService","warning","ErrorMessage","ContactEmailAddressRequired","String","modifyEmailAddressData","modifyPhoneNumberData","errorMessage","includes","success","keyValue","form","setFieldSetting","FieldSettingType","MULTISELECT","modifyPhoneNumberList","sort","a","b","phoneId","map","index","extension","modifyEmailAddressLst","emailId","useImperativeHandle","callEditFunction","handleEditMode","hasEditPermission","hasFunctionalPermission","EDIT","hasAddPermission","ADD","hasAccess","DISABLED","onResetData","callChildFunction","_jsxs","children","_jsx","DataLoader","className","FormCreator","config","Buttons","buttonTypeClassName","buttonText","onClick","async","isDisable","DocumentFormData","documentTypeId","supplierId","attachment","base64File","storagePath","EDITABLEDROPDOWN","options","FILE","isButtonVisible","isCustomButtonVisible","acceptedFiles","FileTypeIcons","GridColumnType","ACTION","icon","AppIcons","PdfIcon","DocIcon","XlsIcon","PptIcon","ZipIcon","CsvIcon","contactInformationData","endUserId","isEndUser","isPurchasingGiven","refNumber","isInvoiceSubmission","invoiceSubmissionId","purchasingId","exemptBoundarySpaces","inputButtonGroup","isInputButton","PlusIcon","GetByID","ContactType","ENDUSER","INVOICESUBMISSION","PURCHASING","props","basicInformation","isModelOpen","setIsModelOpen","setContectTypeId","endUserEnableDisableButton","setEndUserEnableDisableButton","invoicerEnableDisableButton","setInvoiceEnableDisableButton","purchasingEnableDisableButton","setPurchasingEnableDisableButton","setOrderResetValue","conatctRef","orderCustomerId","moveNextPage","orderId","useContext","AddOrderContext","getAllContactTypes","useLazyGetAllContactTypesQuery","getAllEndUserId","isGetAllEndUserFetching","isgetAllEndUserSuccess","isgetAllEndUserData","useLazyGetAllContactsByCustomerIdAndContactTypeIdQuery","getAllInvoiceSubmissionId","isGetAllInvoiceSubmissionFetching","isgetAllInvoiceSubmissionSuccess","isgetAllInvoiceSubmissionData","getAllPurchasingId","isGetAllPurchasingFetching","isgetAllPurchasingSuccess","isgetAllPurchasingData","getContact","value","label","fullName","prevFormData","_newFormData$formFiel","newFormData","dropdownField","find","_newFormData$formFiel2","_newFormData$formFiel3","manageRequiredFieldsValidation","fieldsId","isRemove","field","rest","formActionHandler","CHECK_CHANGE","handleCheckboxChanges","updatedFormData","updateFormFieldValue","handleAddOrderConatct","orderContactsList","push","referenceNumber","isPurchasing","onHandleOrderContact","_Fragment","handleInputGroupButton","onCheckBoxChange","SidebarModel","modalTitle","contentClass","onClose","modalTitleIcon","AddIcon","AddEditContact","useAddEditContactMutation","useLazyGetCustomerContactByContactIdQuery","modifyContactType","apiResponseData","Array","isArray","join","modifyAddressType","addressTypeId","phoneDataArray","noPrimaryFound","every","phoneData","emailDataArray","emailData","modifyTimeLineData","timelineData","description","formatDate","changedAt","getFileTypeIcon","filename","parts","split","fileType","getIconForFileType","fileTypeIcon","documentTransformData","reduce","acc","customerDocumentId","createdAt","isArchive","transformedItem","documentIcon","supplierDocumentTransformData","supplierDocumentId"],"sourceRoot":""}