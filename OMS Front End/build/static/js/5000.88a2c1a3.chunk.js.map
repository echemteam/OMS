{"version":3,"file":"static/js/5000.88a2c1a3.chunk.js","mappings":"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","sources":["pages/customerDetail/addCustomer/features/AddCustomerTab.js","pages/customerDetail/addCustomer/AddCustomer.js","pages/customerDetail/feature/cutomerApproval/CustomerApproval.js","utils/ContextAPIs/Customer/BasicDetailContext.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useContext, useRef, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport BasicDetailContext from \"../../../../utils/ContextAPIs/Customer/BasicDetailContext\";\r\nimport { useUpdateCustomerStatusMutation } from \"../../../../app/services/basicdetailAPI\";\r\nimport ToastService from \"../../../../services/toastService/ToastService\";\r\nimport { StatusEnums } from \"../../../../utils/Enums/StatusEnums\";\r\nimport CardSection from \"../../../../components/ui/card/CardSection\";\r\nimport Image from \"../../../../components/image/Image\";\r\nimport { CustomerSupplierTabEnum } from \"../../../../utils/Enums/commonEnums\";\r\nimport { AppIcons } from \"../../../../data/appIcons\";\r\nimport PropTypes from 'prop-types';\r\nimport CustomerApproval from \"../../feature/cutomerApproval/CustomerApproval\";\r\n\r\n//** Compoent's */\r\nconst FinancialSettings = React.lazy(() => import(\"../../feature/customerSettingDetail/FinancialSettings\"));\r\nconst CustomerBasicDetail = React.lazy(() => import(\"../../feature/customerBasicDetail/CustomerBasicDetail\"));\r\nconst CustomerContactDetail = React.lazy(() => import(\"../../feature/customerContactDetail/CustomerContactDetail\"));\r\nconst CustomerAddressDetail = React.lazy(() => import(\"../../feature/customerAddressDetail/CustomerAddressDetail\"));\r\n// const CustomerSettingDetails = React.lazy(() => import(\"../../feature/customerSettingDetail/CustomerSettingDetails\"));\r\nconst CustomerDocumentDetail = React.lazy(() => import(\"../../feature/customerDocumentDetail/CustomerDocumentDetail\"));\r\nconst ShippingSettings = React.lazy(() => import(\"../../feature/customerSettingDetail/features/ShippingSetting/ShippingSettings\"));\r\n\r\nconst AddCustomerTab = () => {\r\n\r\n  const childRef = useRef();\r\n  const navigate = useNavigate();\r\n  const [subCustomer, setSubCustomer] = useState(false);\r\n  const { activeTab, movePreviewPage, addCustomer, customerId } = useContext(BasicDetailContext);\r\n\r\n  const [\r\n    updateCustomerStatus,\r\n    {\r\n      isSuccess: isSuccessUpdateCustomerStatus,\r\n      data: updateCustomerStatusData,\r\n    },\r\n  ] = useUpdateCustomerStatusMutation();\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isSuccessUpdateCustomerStatus && updateCustomerStatusData) {\r\n      ToastService.success(updateCustomerStatusData.errorMessage);\r\n      navigate(\"/Customers\");\r\n    }\r\n  }, [isSuccessUpdateCustomerStatus, updateCustomerStatusData]);\r\n\r\n  const tabContent = [\r\n    {\r\n      label: \"Basic Information\",\r\n      // subLabel: \"Customer Basic information\",\r\n      content: <CustomerBasicDetail isEditablePage={false} setSubCustomer={setSubCustomer} />,\r\n      tab: CustomerSupplierTabEnum.BasicInformation,\r\n    },\r\n    {\r\n      label: \"Address\",\r\n      // subLabel: \"Customer Address Details\",\r\n      content: <CustomerAddressDetail isEditablePage={false} />,\r\n      tab: CustomerSupplierTabEnum.Address,\r\n    },\r\n    {\r\n      label: \"Contact\",\r\n      // subLabel: \"Customer Contact Details\",\r\n      content: <CustomerContactDetail isEditablePage={false} isSearchFilterShow={false} />,\r\n      tab: CustomerSupplierTabEnum.Contact,\r\n    },\r\n    {\r\n      label: \"Financial Settings\",\r\n      // subLabel: \"Customer Financial Settings\",\r\n      content: <FinancialSettings isEditablePage={false} />,\r\n      tab: CustomerSupplierTabEnum.FinancialSetting,\r\n    },\r\n    {\r\n      label: \"Shipping Settings\",\r\n      // subLabel: \"Customer Shipping Settings\",\r\n      content: <ShippingSettings isEditablePage={false} />,\r\n      tab: CustomerSupplierTabEnum.ShippingSetting,\r\n    },\r\n    {\r\n      label: \"Documents\",\r\n      // subLabel: \"Customer Documents Details\",\r\n      content: <CustomerDocumentDetail isEditablePage={true} />,\r\n      tab: CustomerSupplierTabEnum.Documents,\r\n    },\r\n  ];\r\n\r\n\r\n\r\n  const handleSubmit = () => {\r\n    if (childRef.current) {\r\n      childRef.current.callChildFunction(customerId, subCustomer, false);\r\n    }\r\n  };\r\n\r\n  // const handleTabClick = (index) => {\r\n  //   setActiveTab(index);\r\n  // };\r\n\r\n\r\n  const updateStatus = () => {\r\n    let req = {\r\n      customerId: customerId,\r\n      statusId: StatusEnums.Submitted,\r\n    };\r\n    updateCustomerStatus(req);\r\n  };\r\n\r\n  const handleDraft = () => {\r\n    let req = {\r\n      customerId: customerId,\r\n      statusId: StatusEnums.Pending,\r\n    };\r\n    updateCustomerStatus(req);\r\n  };\r\n\r\n  return (\r\n    <div className=\"stepper-card stepper-view\">\r\n      <CardSection>\r\n        <div className=\"stepper-section\">\r\n          <div className=\"stepper-header\">\r\n            {tabContent.map((step, index) => (\r\n              <React.Fragment key={index}>\r\n                <div className={`step ${activeTab === index ? \"active\" : \"\"}`} >\r\n                  <button className=\"step-button\"\r\n                  // onClick={() => handleTabClick(index)}\r\n                  >\r\n                    <span className=\"stepper-box\">{index + 1}</span>\r\n                    <span className=\"stepper-label\">\r\n                      <span>{step.label}</span>\r\n                      <span className=\"small-txt\">{step.subLabel}</span>\r\n                    </span>\r\n                  </button>\r\n                </div>\r\n                {index < tabContent.length - 1 && (\r\n                  <div className=\"right-arrow\">\r\n                    <Image imagePath={AppIcons.arrowIcon} />\r\n                  </div>\r\n                )}\r\n              </React.Fragment>\r\n            ))}\r\n          </div>\r\n          <div className=\"stepper-content\">\r\n            <form onSubmit={onSubmit}>\r\n              {tabContent.map((step, index) => (\r\n                <div key={index} className={`content ${activeTab === index ? \"active\" : \"\"}`} >\r\n                  {step.content}\r\n                  <div className=\"d-flex justify-content-end pt-2 bottom-nex-button\">\r\n                    {index > 0 && (\r\n                      <button type=\"button\" className=\"btn dark-btn mr-3 btn-prev\" onClick={movePreviewPage} >\r\n                        <Image imagePath={AppIcons.nextArrowIcon} /> Back\r\n                      </button>\r\n                    )}\r\n                    {index < tabContent.length - 1 ? (\r\n                      activeTab === 3 ? (\r\n                        <React.Fragment>\r\n                          <button type=\"button\" className=\"btn theme-button btn-next ml-3\" onClick={() => addCustomer(step.tab)}>\r\n                            Next <Image imagePath={AppIcons.nextArrowIcon} />\r\n                          </button>\r\n                        </React.Fragment>\r\n                      ) : (\r\n                        <button type=\"button\" className=\"btn theme-button btn-next\" onClick={() => addCustomer(step.tab)} >\r\n                          Next  <Image imagePath={AppIcons.nextArrowIcon} />\r\n                        </button>\r\n                      )\r\n                    ) : (\r\n                      <>\r\n                        <button type=\"submit\" className=\"btn theme-button\" onClick={handleDraft} >\r\n                          Save as Draft\r\n                        </button>\r\n\r\n                        <button type=\"submit\" className=\"btn theme-button ml-3\" onClick={handleSubmit} >\r\n                          Save as Submit\r\n                        </button>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </CardSection>\r\n      <CustomerApproval\r\n        isDetailPage={true}\r\n        isAddPagePage={true}\r\n        childRef={childRef}\r\n        updateCustomerApproval={updateStatus}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nAddCustomerTab.propTypes = {\r\n  activeTab: PropTypes.number,\r\n  movePreviewPage: PropTypes.func,\r\n  addCustomer: PropTypes.func,\r\n  customerId: PropTypes.number,\r\n  showSubBackButton: PropTypes.bool,\r\n  handleActiveSubTabClick: PropTypes.func,\r\n  saveFinacialSetting: PropTypes.func,\r\n};\r\n\r\nexport default AddCustomerTab;\r\n","import { BasicDetailContextProvider } from \"../../../utils/ContextAPIs/Customer/BasicDetailContext\";\r\nimport AddCustomerTab from \"./features/AddCustomerTab\";\r\n\r\nconst AddCustomer = () => {\r\n\r\n    return (\r\n        <BasicDetailContextProvider>\r\n            <AddCustomerTab />\r\n        </BasicDetailContextProvider>\r\n    )\r\n}\r\n\r\nexport default AddCustomer;","import React, { forwardRef, useContext, useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\n//** Libs's */\r\nimport { ApprovalEnum, OwnerType } from \"../../../../utils/Enums/commonEnums\";\r\n//** Service's */\r\nimport {\r\n    useGetValidateCheckListMutation, useLazyGetCustomerAddresssInfoByIdQuery, useLazyGetCustomerContactInfoByIdQuery,\r\n    useLazyGetCustomerFinacialSettingQuery, useLazyGetCustomersInfoByIdQuery\r\n} from \"../../../../app/services/ApprovalAPI\";\r\nimport PropTypes from 'prop-types';\r\nimport BasicDetailContext from \"../../../../utils/ContextAPIs/Customer/BasicDetailContext\";\r\n//** Component's */\r\nconst ApprovalCheckList = React.lazy(() => import(\"../../../../components/ApprovalCheckList/ApprovalCheckList\"));\r\nconst ApprovalValidateData = React.lazy(() => import(\"../../../../components/ApprovalCheckList/feature/approvalValidateData/ApprovalValidateData\"));\r\n\r\n\r\nconst CustomerApproval = forwardRef(({ childRef, getListApi, updateCustomerApproval, responsibleUserIds, isDetailPage, isAddPagePage, setSelectedStatus, onRejectedCustomerFromApproval }) => {\r\n\r\n    const parentRef = useRef();\r\n    const [customerId, setCustomerId] = useState(0);\r\n    const [isSubCustomer, setIsSubCustomer] = useState(false);\r\n    const [isShowApproval, setIsShowApproval] = useState(false);\r\n    const [validateCheckList, setValidateCheckList] = useState([]);\r\n    const [isShowBothButton, setIsShowBothButton] = useState(false);\r\n    const [isShowValidateModal, setIsShowValidateModal] = useState(false);\r\n    const [showApprovalCheckList, setShowApprovalCheckList] = useState(false);\r\n    const { setRejectStatusId } = useContext(BasicDetailContext);\r\n\r\n    const [getValidateCheckList, { isLoading: isGetCheckListLoading, isSuccess: isGetCheckListSuccess, data: isGetCheckListData }] = useGetValidateCheckListMutation();\r\n\r\n    //** Approval CheckList Modal*/\r\n    const handleShowApprovalList = () => {\r\n        setIsShowApproval(!isShowApproval);\r\n    };\r\n\r\n    const onSidebarApprovalClose = () => {\r\n        if (!isDetailPage) {\r\n            getListApi();\r\n        }\r\n        setIsShowApproval(!isShowApproval);\r\n    };\r\n    const onSuccessApprovalClose = () => {\r\n        setIsShowApproval(!isShowApproval);\r\n        updateCustomerApproval();\r\n    };\r\n\r\n    //** Validate check list Modal */\r\n    const handleShowValidateModal = (customerId, isSubCustomer, isShowApprovalCheckList = true, isShowBothButton = true) => {\r\n        setIsShowValidateModal(!isShowValidateModal);\r\n        let request = {\r\n            customerId: customerId,\r\n            supplierId: 0,\r\n            isSubCustomer: isSubCustomer\r\n        }\r\n        setIsSubCustomer(isSubCustomer);\r\n        getValidateCheckList(request);\r\n        setCustomerId(customerId);\r\n        setShowApprovalCheckList(isShowApprovalCheckList);\r\n        setIsShowBothButton(isShowBothButton);\r\n    };\r\n\r\n    const handleValidateModalClose = () => {\r\n        setValidateCheckList([]);\r\n        setIsShowValidateModal(!isShowValidateModal);\r\n        if (!isDetailPage && !isAddPagePage) {\r\n            getListApi();\r\n        }\r\n    };\r\n    const handleModalClose = () => {\r\n        setIsShowValidateModal(!isShowValidateModal);\r\n    }\r\n\r\n    const handleDone = () => {\r\n        if (parentRef.current) {\r\n            parentRef.current.validateApprovalCheckList();\r\n        }\r\n    }\r\n\r\n    const handleValidateSuccess = () => {\r\n        handleModalClose();\r\n        showApprovalCheckList && handleShowApprovalList();\r\n        !showApprovalCheckList && updateCustomerApproval();\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isGetCheckListSuccess && isGetCheckListData) {\r\n            setValidateCheckList(isGetCheckListData);\r\n        }\r\n    }, [isGetCheckListSuccess, isGetCheckListData])\r\n\r\n    //** Use Imperative Handle */\r\n    useImperativeHandle(childRef, () => ({\r\n        callChildFunction: handleShowValidateModal\r\n    }))\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ApprovalValidateData parentRef={parentRef} handleValidateSuccess={handleValidateSuccess} showModal={isShowValidateModal} isSupplierApproval={false}\r\n                isGetCheckListLoading={isGetCheckListLoading} mainId={customerId} isDetailPage={isDetailPage} handleShowValidateModal={handleShowValidateModal}\r\n                handleValidateModalClose={handleValidateModalClose} handleDone={handleDone} validateCheckList={validateCheckList ? validateCheckList : null} isShowBothButton={isShowBothButton} />\r\n            {showApprovalCheckList &&\r\n                <ApprovalCheckList onSidebarClose={onSidebarApprovalClose} isModelOpen={isShowApproval} mainId={customerId} onSuccessApprovalClose={onSuccessApprovalClose}\r\n                    ApprovalData={isSubCustomer ? ApprovalEnum.APPROVESUBCUSTOMER : ApprovalEnum.APPROVECUSTOMER} isSupplierApproval={false} isSubCustomer={isSubCustomer}\r\n                    getBasicInformationById={useLazyGetCustomersInfoByIdQuery} getAddressById={useLazyGetCustomerAddresssInfoByIdQuery}\r\n                    getContactById={useLazyGetCustomerContactInfoByIdQuery} getFinacialSettingById={useLazyGetCustomerFinacialSettingQuery} ownerType={OwnerType.Customer} basicData={responsibleUserIds} setRejectStatusId={setRejectStatusId} setSelectedStatus={setSelectedStatus}\r\n                    onRejectedCustomerFromApproval={onRejectedCustomerFromApproval}\r\n                />\r\n            }\r\n        </React.Fragment>\r\n    )\r\n});\r\n\r\nCustomerApproval.propTypes = {\r\n    childRef: PropTypes.shape({\r\n        callChildFunction: PropTypes.func\r\n    }),\r\n    getListApi: PropTypes.func,\r\n    updateCustomerApproval: PropTypes.func.isRequired,\r\n    isDetailPage: PropTypes.bool\r\n};\r\n\r\nexport default CustomerApproval;","import { useEffect, useRef } from 'react';\r\nimport { useState } from 'react';\r\nimport { createContext } from 'react';\r\nimport { useGetValidateCheckListMutation } from '../../../app/services/ApprovalAPI';\r\n\r\nconst BasicDetailContext = createContext();\r\n\r\nexport default BasicDetailContext;\r\n\r\n\r\nexport const BasicDetailContextProvider = ({ children }) => {\r\n\r\n    const molGridRef = useRef();\r\n\r\n    //****  If we have supplier page we have set main id as supplierId. and If we have customer page we have set main id as customerId   */\r\n    const [mainId, setMainId] = useState(0);\r\n    const [customerId, setCustomerId] = useState(0);\r\n    const [subCustomer, setSubCustomer] = useState(false);\r\n    const [customerCountryId, setCustomerCountryId] = useState('');\r\n    //** */\r\n\r\n    //** Shipping Method's */\r\n    const [carriersList, setCarriersList] = useState([]);\r\n    const [showSubBackButton, setShowSubBackButton] = useState(false);\r\n    const [deliveryMethodsList, setDeliveryMethodsList] = useState([]);\r\n    const [isExistsFinancialSetting, setIsExistsFinancialSetting] = useState(false);\r\n    //** */\r\n\r\n    //** Using for Contact  */\r\n    // const [contactId, setContactId] = useState(0);\r\n    const [phoneNumberData, setPhoneNumberData] = useState();\r\n    const [emailAddressData, setEmailAddressData] = useState();\r\n    //** */\r\n\r\n    const [isResponsibleUser, setIsResponsibleUser] = useState(true);\r\n    const [rejectStatusId, setRejectStatusId] = useState('');\r\n\r\n    //** Use for Tab's */\r\n    const nextRef = useRef(null);\r\n    const settingRef = useRef(null);\r\n    const financialRef = useRef(null);\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    const [activeSubTab, setActiveSubTab] = useState(0);\r\n\r\n    //** Completion Changes  */\r\n    const [totalCount, setTotalCount] = useState();\r\n    const [approvalSuccessCount, setApprovalSuccessCount] = useState();\r\n    const [getValidateCheckList, { isSuccess: isGetCheckListSuccess, data: isGetCheckListData }] = useGetValidateCheckListMutation();\r\n\r\n    const getCustomerCompletionCount = (customerId, isSubCustomer) => {\r\n        let request = {\r\n            customerId: customerId,\r\n            supplierId: 0,\r\n            isSubCustomer: isSubCustomer ? isSubCustomer : false\r\n        }\r\n        getValidateCheckList(request);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isGetCheckListSuccess && isGetCheckListData) {\r\n            if (isGetCheckListData && isGetCheckListData.length > 0) {\r\n                const successCheckList = isGetCheckListData.filter(data => data.isValid);\r\n                setApprovalSuccessCount(successCheckList.length);\r\n                setTotalCount(isGetCheckListData.length);\r\n            }\r\n        }\r\n    }, [isGetCheckListSuccess, isGetCheckListData])\r\n\r\n    const handleActiveSubTabClick = (tabIndex) => {\r\n        setActiveSubTab(tabIndex);\r\n        setShowSubBackButton(false);\r\n        if (tabIndex === 1) {\r\n            setShowSubBackButton(true);\r\n        }\r\n    }\r\n\r\n    const moveNextPage = () => {\r\n        setActiveTab((prev) => prev + 1);\r\n    };\r\n    const movePreviewPage = () => {\r\n        setActiveTab((prev) => prev - 1);\r\n    };\r\n    //** */\r\n\r\n    //** Use for Move next step */\r\n    const addCustomer = (data) => {\r\n        if (activeTab === 6) {\r\n            setActiveSubTab(0)\r\n        }\r\n        if (customerId > 0 && data === 1) {\r\n            if (nextRef.current) {\r\n                nextRef.current.handleAddBasicDetails();\r\n            }\r\n        } else if (customerId > 0) {\r\n            setActiveTab((prev) => prev + 1)\r\n        }\r\n        else {\r\n            if (nextRef.current) {\r\n                nextRef.current.handleAddBasicDetails();\r\n            }\r\n        }\r\n        if (data === 5) {\r\n            setShowSubBackButton(false);\r\n            saveFinacialSetting();\r\n        }\r\n    }\r\n\r\n    const saveFinacialSetting = () => {\r\n        if (settingRef.current) {\r\n            settingRef.current.onhandleEdit();\r\n        }\r\n    }\r\n    //** */\r\n\r\n    return (\r\n        <BasicDetailContext.Provider value={{\r\n            nextRef, customerId, setCustomerId, activeTab, setActiveTab, moveNextPage, movePreviewPage, addCustomer, setPhoneNumberData, setCustomerCountryId,\r\n            customerCountryId, setIsExistsFinancialSetting, isExistsFinancialSetting, financialRef,\r\n            phoneNumberData, setMainId, mainId, setShowSubBackButton, showSubBackButton, setActiveSubTab, activeSubTab, handleActiveSubTabClick, saveFinacialSetting,\r\n            emailAddressData, setEmailAddressData, molGridRef, setDeliveryMethodsList, deliveryMethodsList, setCarriersList, carriersList, settingRef,\r\n            setIsResponsibleUser, isResponsibleUser, setRejectStatusId, rejectStatusId, totalCount, approvalSuccessCount, getCustomerCompletionCount,\r\n            subCustomer, setSubCustomer\r\n        }}>\r\n            {children}\r\n        </BasicDetailContext.Provider>\r\n    );\r\n};"],"names":["FinancialSettings","React","CustomerBasicDetail","CustomerContactDetail","CustomerAddressDetail","CustomerDocumentDetail","ShippingSettings","AddCustomerTab","childRef","useRef","navigate","useNavigate","subCustomer","setSubCustomer","useState","activeTab","movePreviewPage","addCustomer","customerId","useContext","BasicDetailContext","updateCustomerStatus","isSuccess","isSuccessUpdateCustomerStatus","data","updateCustomerStatusData","useUpdateCustomerStatusMutation","useEffect","ToastService","success","errorMessage","tabContent","label","content","_jsx","isEditablePage","tab","CustomerSupplierTabEnum","BasicInformation","Address","isSearchFilterShow","Contact","FinancialSetting","ShippingSetting","Documents","handleSubmit","current","callChildFunction","handleDraft","req","statusId","StatusEnums","Pending","_jsxs","className","children","CardSection","map","step","index","subLabel","length","Image","imagePath","AppIcons","arrowIcon","onSubmit","e","preventDefault","type","onClick","nextArrowIcon","_Fragment","CustomerApproval","isDetailPage","isAddPagePage","updateCustomerApproval","updateStatus","Submitted","AddCustomer","BasicDetailContextProvider","ApprovalCheckList","ApprovalValidateData","forwardRef","_ref","getListApi","responsibleUserIds","setSelectedStatus","onRejectedCustomerFromApproval","parentRef","setCustomerId","isSubCustomer","setIsSubCustomer","isShowApproval","setIsShowApproval","validateCheckList","setValidateCheckList","isShowBothButton","setIsShowBothButton","isShowValidateModal","setIsShowValidateModal","showApprovalCheckList","setShowApprovalCheckList","setRejectStatusId","getValidateCheckList","isLoading","isGetCheckListLoading","isGetCheckListSuccess","isGetCheckListData","useGetValidateCheckListMutation","handleShowValidateModal","isShowApprovalCheckList","arguments","undefined","request","supplierId","useImperativeHandle","handleValidateSuccess","showModal","isSupplierApproval","mainId","handleValidateModalClose","handleDone","validateApprovalCheckList","onSidebarClose","onSidebarApprovalClose","isModelOpen","onSuccessApprovalClose","ApprovalData","ApprovalEnum","APPROVESUBCUSTOMER","APPROVECUSTOMER","getBasicInformationById","useLazyGetCustomersInfoByIdQuery","getAddressById","useLazyGetCustomerAddresssInfoByIdQuery","getContactById","useLazyGetCustomerContactInfoByIdQuery","getFinacialSettingById","useLazyGetCustomerFinacialSettingQuery","ownerType","OwnerType","Customer","basicData","createContext","molGridRef","setMainId","customerCountryId","setCustomerCountryId","carriersList","setCarriersList","showSubBackButton","setShowSubBackButton","deliveryMethodsList","setDeliveryMethodsList","isExistsFinancialSetting","setIsExistsFinancialSetting","phoneNumberData","setPhoneNumberData","emailAddressData","setEmailAddressData","isResponsibleUser","setIsResponsibleUser","rejectStatusId","nextRef","settingRef","financialRef","setActiveTab","activeSubTab","setActiveSubTab","totalCount","setTotalCount","approvalSuccessCount","setApprovalSuccessCount","successCheckList","filter","isValid","saveFinacialSetting","onhandleEdit","Provider","value","moveNextPage","prev","handleAddBasicDetails","handleActiveSubTabClick","tabIndex","getCustomerCompletionCount"],"sourceRoot":""}