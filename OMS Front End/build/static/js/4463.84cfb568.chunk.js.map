{"version":3,"file":"static/js/4463.84cfb568.chunk.js","mappings":"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","sources":["components/ui/centerModel/CenterModel.js","pages/organization/feature/smtpSettings/config/SMTPSettings.data.js","pages/organization/feature/smtpSettings/TestEmails.js","pages/organization/feature/smtpSettings/SMTPSettings.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./CenterModel.scss\";\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\nconst CenterModel = ({ isApprovalValidate, showModal, handleToggleModal, children, ...props }) => {\r\n  return (\r\n    <Modal\r\n      className={`center-model-popup ${props.modelSizeClass}`}\r\n      show={showModal}\r\n      onHide={handleToggleModal}\r\n      keyboard={!isApprovalValidate}\r\n      backdrop={isApprovalValidate ? \"static\" : true}\r\n    >\r\n      <Modal.Header closeButton={!isApprovalValidate}>\r\n        <div className=\"model-title\">{props.modalTitle}</div>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nCenterModel.propTypes = {\r\n  isApprovalValidate: PropTypes.bool,\r\n  showModal: PropTypes.bool.isRequired,\r\n  handleToggleModal: PropTypes.func.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  modelSizeClass: PropTypes.string,\r\n  modalTitle: PropTypes.string\r\n};\r\nexport default CenterModel;\r\n","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const SMTPSettingsFormData = {\r\n    // name: \"Email From\",\r\n    initialState: { smtpSettingId: 0, organizationId: 0, emailProvider: \"\", smtpServer: \"\", smtpPort: \"\", smtpUserName: \"\", smtpPassword: \"\", useSsl: true, clientId: \"\", clientSecret: \"\", tenantId: \"\" },\r\n    formFields: [\r\n        {\r\n            id: \"emailProvider\",\r\n            lable: \"Email Provider  \",\r\n            Field_Name: \"Email Provider \",\r\n            fieldType: FormFieldTypes.SELECT,\r\n            dataField: \"emailProvider\",\r\n            fieldSetting: {\r\n                placeholder: \"Select Email Provider \",\r\n                isEnableOnChange: true,\r\n                isDisabled: false,\r\n            },\r\n            validation: [{ type: \"require\" }],\r\n            style: {\r\n                containerCss: \"col-xxl-6 col-xl-6 col-md-12 col-12 mb-input\",\r\n            },\r\n        },\r\n        {\r\n            id: \"smtpServer\",\r\n            lable: \"Server\",\r\n            Field_Name: \"Server\",\r\n            fieldType: FormFieldTypes.INPUT,\r\n            dataField: \"smtpServer\",\r\n            fieldSetting: {\r\n                placeholder: \"Enter Server\",\r\n                allowSpace: true,\r\n                maxLength: 255,\r\n            },\r\n            validation: [{ type: \"require\" }],\r\n            style: {\r\n                containerCss: \"col-md-6 mb-3 mb-input relative\",\r\n            },\r\n        },\r\n        {\r\n            id: \"smtpPort\",\r\n            lable: \"Port\",\r\n            Field_Name: \"Port\",\r\n            fieldType: FormFieldTypes.NUMERIC,\r\n            dataField: \"smtpPort\",\r\n            fieldSetting: {\r\n                placeholder: \"Enter Port\",\r\n                allowSpace: false,\r\n                maxLength: 5,\r\n            },\r\n            validation: [{ type: \"require\" }],\r\n            style: {\r\n                containerCss: \"col-md-6 mb-3 mb-input relative\",\r\n            },\r\n        },\r\n        {\r\n            id: \"smtpUserName\",\r\n            lable: \"Email\",\r\n            Field_Name: \"Email\",\r\n            fieldType: FormFieldTypes.INPUT,\r\n            dataField: \"smtpUserName\",\r\n            fieldSetting: {\r\n                placeholder: \"Enter Email\",\r\n                allowSpace: true,\r\n                maxLength: 65,\r\n            },\r\n            validation: [{ type: \"require\" }, { type: \"email\" }],\r\n            style: {\r\n                containerCss: \"col-md-6 mb-3 mb-input relative\",\r\n            },\r\n        },\r\n        {\r\n            id: \"smtpPassword\",\r\n            lable: \"App Password \",\r\n            Field_Name: \"App Password\",\r\n            fieldType: FormFieldTypes.PASSWORD,\r\n            dataField: \"smtpPassword\",\r\n            fieldSetting: {\r\n                placeholder: \"Enter Your App Password\",\r\n                maxLength: 20,\r\n            },\r\n            validation: [{ type: \"require\" }],\r\n            style: {\r\n                containerCss: \"col-md-6 mb-input\",\r\n            },\r\n        },\r\n\r\n        {\r\n            id: \"clientId\",\r\n            lable: \"Client Id\",\r\n            Field_Name: \"Client Id\",\r\n            fieldType: FormFieldTypes.INPUT,\r\n            dataField: \"clientId\",\r\n            fieldSetting: {\r\n                placeholder: \"Enter Client Id\",\r\n                allowSpace: true,\r\n            },\r\n            validation: [{ type: \"require\" }],\r\n            style: {\r\n                containerCss: \"col-md-6 mb-3 mb-input relative\",\r\n            },\r\n        },\r\n        {\r\n            id: \"clientSecret\",\r\n            lable: \"Client Secret\",\r\n            Field_Name: \"Client Secret\",\r\n            fieldType: FormFieldTypes.INPUT,\r\n            dataField: \"clientSecret\",\r\n            fieldSetting: {\r\n                placeholder: \"Enter Client Secret\",\r\n                allowSpace: true,\r\n\r\n            },\r\n            validation: [{ type: \"require\" }],\r\n            style: {\r\n                containerCss: \"col-md-6 mb-3 mb-input relative\",\r\n            },\r\n        },\r\n        {\r\n            id: \"tenantId\",\r\n            lable: \"Tenant Id\",\r\n            Field_Name: \"Tenant Id\",\r\n            fieldType: FormFieldTypes.INPUT,\r\n            dataField: \"tenantId\",\r\n            fieldSetting: {\r\n                placeholder: \"Enter Tenant Id\",\r\n                allowSpace: true,\r\n            },\r\n            validation: [{ type: \"require\" }],\r\n            style: {\r\n                containerCss: \"col-md-6 mb-3 mb-input relative\",\r\n            },\r\n        },\r\n        {\r\n            id: \"useSsl\",\r\n            lable: \"UseSSL\",\r\n            Field_Name: \"useSsl\",\r\n            fieldType: FormFieldTypes.CHECKBOX,\r\n            dataField: \"useSsl\",\r\n            // fieldSetting: {\r\n            //   placeholder: \"\",\r\n            // },\r\n            // validation: [{ type: \"require\" }],\r\n            style: {\r\n                containerCss: \"col-xxl-4 col-xl-4 col-md-12 col-12 col-12 mt-4\",\r\n            },\r\n        },\r\n    ],\r\n    formSetting: {\r\n        isViewOnly: false\r\n    }\r\n};\r\n\r\nexport const TestEmailConfig = {\r\n    name: \"Test Email\",\r\n    initialState: {\r\n        emailTo: \"\",\r\n        subject: \"SMTP Configuration Test Successful\",\r\n        body: \"Dear Team, This confirms that the SMTP configuration has been successfully validated. The outbound email settings are functioning as expected. Please note that there is no need to reply to this message.\"\r\n    },\r\n    formFields: [\r\n        {\r\n            id: \"emailTo\",\r\n            lable: \"Email To\",\r\n            Field_Name: \"Email To\",\r\n            fieldType: FormFieldTypes.INPUT,\r\n            dataField: \"emailTo\",\r\n            fieldSetting: {\r\n                placeholder: \"Enter Email To\",\r\n                allowSpace: false,\r\n            },\r\n            validation: [{ type: \"require\" }],\r\n            style: {\r\n                containerCss: \"col-md-6 mb-3 mt-3\",\r\n            },\r\n        },\r\n        {\r\n            id: \"subject\",\r\n            lable: \"Subject\",\r\n            Field_Name: \"Subject\",\r\n            fieldType: FormFieldTypes.INPUT,\r\n            dataField: \"subject\",\r\n            fieldSetting: {\r\n                placeholder: \"Enter Subject\",\r\n                allowSpace: false,\r\n            },\r\n            validation: [{ type: \"require\" }],\r\n            style: {\r\n                containerCss: \"col-md-6 mb-3 mt-3\",\r\n            },\r\n        },\r\n        {\r\n            id: \"body\",\r\n            lable: \"Body\",\r\n            Field_Name: \"Body\",\r\n            fieldType: FormFieldTypes.CKEDITOR,\r\n            dataField: \"body\",\r\n            fieldSetting: {\r\n                placeholder: \"Enter Body\",\r\n                allowSpace: false,\r\n            },\r\n            validation: [{ type: \"require\" }],\r\n            style: {\r\n                containerCss: \"col-md-12 mb-3 mt-3\",\r\n            },\r\n        }\r\n    ],\r\n\r\n};\r\n","import React from 'react'\r\nimport { TestEmailConfig } from './config/SMTPSettings.data';\r\nimport { useRef } from 'react';\r\nimport { useState } from 'react';\r\nimport FormCreator from '../../../../components/Forms/FormCreator';\r\nimport Buttons from '../../../../components/ui/button/Buttons';\r\nimport { useSendTestOutboundEmailsMutation } from '../../../../app/services/organizationAPI';\r\nimport { useEffect } from 'react';\r\nimport ToastService from '../../../../services/toastService/ToastService';\r\n\r\nfunction TestEmails(props) {\r\n    const ref = useRef();\r\n    const [formData] = useState( TestEmailConfig);\r\n\r\n    //** API Call's */\r\n     const [testOutboundEmail, { isLoading, isSuccess: isSuccessTestEmail, data: isTestEmailData }] = useSendTestOutboundEmailsMutation();\r\n\r\n    //** Handle Change */\r\n    const handleTestOutboundEmail = () => {\r\n        const data = ref.current.getFormData();\r\n        const emailData = props.smtpRef?.current.getFormData();\r\n        if (emailData && data) {\r\n          if (data.emailTo) {\r\n            const emailArray = data.emailTo.split(',').map(email => email.trim());  \r\n            data.emailTo = emailArray.join(';');  \r\n        }\r\n            let request = {\r\n                ...emailData,\r\n                ...data\r\n            }\r\n            testOutboundEmail(request);\r\n        }\r\n    };\r\n\r\n    //** Use Effect */\r\n    useEffect(() => {\r\n        if (isSuccessTestEmail && isTestEmailData) {\r\n            if (isTestEmailData.keyValue != 0) {\r\n                ToastService.success(isTestEmailData.errorMessage);\r\n            } else {\r\n                ToastService.error(isTestEmailData.errorMessage);\r\n            }\r\n            props.onClose();\r\n        }\r\n    }, [isSuccessTestEmail, isTestEmailData]);\r\n\r\n\r\n    return (<>\r\n        <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12 add-role-input\">\r\n          <div className=\"row vertical-form\">\r\n            <FormCreator\r\n              ref={ref}\r\n              config={formData}\r\n              {...formData}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-12\">\r\n          <div className=\"d-flex align-item-center justify-content-end mt-3\">\r\n            <Buttons\r\n              buttonTypeClassName=\"theme-button\"\r\n              onClick={handleTestOutboundEmail}\r\n              buttonText={\"Test Outbound Email\"}\r\n              isLoading={isLoading}\r\n            />\r\n            <Buttons\r\n              buttonTypeClassName=\"dark-btn ml-5\"\r\n              buttonText=\"Cancel\"\r\n              onClick={props.onClose}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    </>);\r\n}\r\n\r\nexport default TestEmails","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { SMTPSettingsFormData } from \"./config/SMTPSettings.data\";\r\nimport FormCreator from \"../../../../components/Forms/FormCreator\";\r\nimport Buttons from \"../../../../components/ui/button/Buttons\";\r\nimport {\r\n  useAddEditSmtpSettingsMutation,\r\n  useLazyGetSmtpSettingsQuery,\r\n} from \"../../../../app/services/organizationAPI\";\r\nimport ToastService from \"../../../../services/toastService/ToastService\";\r\nimport { decryptUrlData, encryptAES } from \"../../../../services/CryptoService\";\r\nimport DataLoader from \"../../../../components/ui/dataLoader/DataLoader\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { EmailProviders,FieldSettingType} from \"../../../../utils/Enums/commonEnums\";\r\nimport { removeFormFields } from \"../../../../utils/FormFields/RemoveFields/handleRemoveFields\";\r\nimport { setFieldSetting } from \"../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport TestEmails from \"./TestEmails\";\r\nimport CenterModel from \"../../../../components/ui/centerModel/CenterModel\";\r\nconst setInitialData = {\r\n  label: \"Gmail\",\r\n  value: \"Gmail\"\r\n};\r\nconst SMTPSettings = (isEditablePage) => {\r\n  const smtpRef = useRef();\r\n  const [smtpSettingData, setSmtpSettingData] = useState(SMTPSettingsFormData);\r\n  const [smtpId, setSmtpId] = useState(0);\r\n  const [, setIsOfficeEmail] = useState(false);\r\n  const [, setIsOutlook] = useState(false);\r\n  const [, setIsGmail] = useState(true);\r\n  const [addEditSmtpSetting,{isLoading: isAddEditSmtpSettingLoading,isSuccess: isAddEditSmtpSettingSuccess,data: isAddEditSmtpSettingData,},] = useAddEditSmtpSettingsMutation();\r\n  const [ getSmtpSettings, {isFetching: isGetSmtpSettingsFetching,isSuccess: isGetSmtpSettingsSuccess, data: isGetSmtpSettingsData,},] = useLazyGetSmtpSettingsQuery();\r\n  const [isButtonDisable, setIsButtonDisable] = useState(false);\r\n  const { formSetting } = SMTPSettingsFormData;\r\n  const roles = useSelector((state) => state.auth.roles.roleName);\r\n  const [isTestEmailModelOpen, setIsTestEmailModelOpen] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    if (isEditablePage) {\r\n      if (roles?.includes(\"Admin\")) {\r\n        setIsButtonDisable(false);\r\n        formSetting.isViewOnly = false;\r\n      } else {\r\n        setIsButtonDisable(true);\r\n        formSetting.isViewOnly = true;\r\n      }\r\n    }\r\n  }, [isEditablePage, roles]);\r\n\r\n  useEffect(() => {\r\n    getSmtpSettings();\r\n    setInitialValue();\r\n  }, []);\r\n\r\n  const setInitialValue = () => {\r\n    \r\n    let updatedFormData;\r\n    updatedFormData = removeFormFields(SMTPSettingsFormData, [ \"clientId\",\"clientSecret\",\"tenantId\",]);\r\n      handleChangeDropdownList(setInitialData, \"emailProvider\");\r\n      //setFieldSetting( smtpSettingData,\"emailprovider\",FieldSettingType.DISABLED,false);\r\n\r\n   // setSmtpSettingData(updatedFormData);\r\n  };\r\n\r\n  const getFieldsToRemove = (type) => {\r\n\r\n    switch (type) {\r\n      case \"Office365\":\r\n        return [\"smtpServer\",\"smtpPort\",\"smtpUserName\",\"smtpPassword\",\"useSsl\",];\r\n      case \"Gmail\":\r\n        return [\"clientId\", \"clientSecret\", \"tenantId\"];\r\n      case \"Outlook\":\r\n        return [\"clientId\", \"clientSecret\", \"tenantId\"];\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n  const handleChangeDropdownList = (data, dataField) => {\r\n \r\n    let manageData = { ...SMTPSettingsFormData };\r\n    const removeFields = getFieldsToRemove(data.value);\r\n    manageData.formFields = manageData.formFields.filter(\r\n      (field) => !removeFields.includes(field.id)\r\n    );\r\n    //  manageData.initialState = { ...resetData };\r\n    manageData.initialState = { ...SMTPSettingsFormData.initialState };\r\n    manageData.initialState.emailProvider = data.value;\r\n    switch (data.value) {\r\n      case \"Gmail\":\r\n        manageData.initialState.smtpServer = \"smtp.gmail.com\";\r\n        manageData.initialState.smtpPort = 587;\r\n        break;\r\n      case \"Outlook\":\r\n        manageData.initialState.smtpServer = \"smtp-mail.outlook.com\";\r\n        manageData.initialState.smtpPort = 587;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    setSmtpSettingData(manageData);\r\n    switch (data.value) {\r\n      case \"Office365\":\r\n        setIsOfficeEmail(true);\r\n        setIsOutlook(false);\r\n        setIsGmail(false);\r\n        break;\r\n      case \"Outlook\":\r\n        setIsOutlook(true);\r\n        setIsOfficeEmail(false);\r\n        setIsGmail(false);\r\n        break;\r\n      case \"Gmail\":\r\n        setIsGmail(true);\r\n        setIsOfficeEmail(false);\r\n        setIsOutlook(false);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    \r\n    const dropdownField = smtpSettingData.formFields.find(\r\n      (item) => item.dataField === \"emailProvider\"\r\n    );\r\n    dropdownField.fieldSetting.options =EmailProviders\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isAddEditSmtpSettingSuccess && isAddEditSmtpSettingData) {\r\n      ToastService.success(isAddEditSmtpSettingData.errorMessage);\r\n      getSmtpSettings();\r\n    }\r\n  }, [isAddEditSmtpSettingSuccess, isAddEditSmtpSettingData]);\r\n\r\n  const handleAddEditSmtpSettings = () => {\r\n    let data = smtpRef.current.getFormData();\r\n    if ((data && !smtpId) || (data && smtpId)) {\r\n      let request = {\r\n        ...data,\r\n        emailProvider: data.emailProvider || 0,\r\n        smtpServer: encryptAES(data?.smtpServer),\r\n        smtpPort: data?.smtpPort || 0,\r\n        useSsl: data.useSsl,\r\n        smtpUserName: encryptAES(data?.smtpUserName) || \"\",\r\n        smtpPassword: encryptAES(data?.smtpPassword) || \"\",\r\n        smtpSettingId: smtpId ? smtpId : 0,\r\n        clientId: data?.clientId || \"\",\r\n        clientSecret: data?.clientSecret || \"\",\r\n        tenantId: data?.tenantId || \"\",\r\n      };\r\n      addEditSmtpSetting(request);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if ( !isGetSmtpSettingsFetching && isGetSmtpSettingsSuccess && isGetSmtpSettingsData) {\r\n     const fieldsToRemove = getFieldsToRemove(isGetSmtpSettingsData.emailProvider);\r\n\r\n      let formData;\r\n      if (fieldsToRemove) {\r\n        formData = removeFormFields(SMTPSettingsFormData, fieldsToRemove);\r\n      }\r\n      setFieldSetting(formData,\"emailprovider\", FieldSettingType.DISABLED, true);\r\n\r\n      formData.initialState = {\r\n        emailProvider: isGetSmtpSettingsData?.emailProvider,\r\n        smtpServer: decryptUrlData(isGetSmtpSettingsData.smtpServer),\r\n        smtpPort: isGetSmtpSettingsData.smtpPort,\r\n        smtpUserName: decryptUrlData(isGetSmtpSettingsData.smtpUserName),\r\n        smtpPassword: decryptUrlData(isGetSmtpSettingsData.smtpPassword),\r\n        useSsl: isGetSmtpSettingsData.useSsl,\r\n        smtpSettingId: isGetSmtpSettingsData.smtpSettingId,\r\n        clientId: isGetSmtpSettingsData.clientId,\r\n        clientSecret: isGetSmtpSettingsData.clientSecret,\r\n        tenantId: isGetSmtpSettingsData.tenantId,\r\n      };\r\n      setSmtpSettingData(formData);\r\n      setSmtpId(isGetSmtpSettingsData.smtpSettingId);\r\n    }\r\n  }, [isGetSmtpSettingsFetching,isGetSmtpSettingsSuccess,isGetSmtpSettingsData,]);\r\n\r\n  const formActionHandler = {\r\n    DDL_CHANGED: handleChangeDropdownList,\r\n  };\r\n\r\n  if (isGetSmtpSettingsFetching) {\r\n    return (\r\n      <div>\r\n        <DataLoader />\r\n      </div>\r\n    ); // Replace with a proper loading spinner or component\r\n  }\r\n\r\n  const handleTestEmail=()=>{\r\n    setIsTestEmailModelOpen(true);\r\n  }\r\n\tconst onCloseModal = () => {\r\n\t\tsetIsTestEmailModelOpen(false);\r\n\t}\r\n\r\n  return (\r\n    <div className=\"row mt-2 add-address-form\">\r\n      <h4 className=\"organization-tab-title\">SMTP Settings</h4>\r\n      <FormCreator\r\n        config={smtpSettingData}\r\n        ref={smtpRef}\r\n        {...smtpSettingData}\r\n        onActionChange={formActionHandler}\r\n      />\r\n      {isEditablePage ? (\r\n        <div className=\"col-md-12 mt-2\">\r\n          <div className=\"d-flex align-item-end justify-content-end\">\r\n          <Buttons\r\n              buttonTypeClassName=\"theme-button mr-4\"\r\n              buttonText=\"Test Outbound Email\"\r\n              onClick={handleTestEmail}\r\n              isDisable={isButtonDisable}\r\n            />\r\n            <Buttons\r\n              buttonTypeClassName=\"theme-button\"\r\n              buttonText=\"Save\"\r\n              onClick={handleAddEditSmtpSettings}\r\n              isLoading={isAddEditSmtpSettingLoading}\r\n              isDisable={isButtonDisable}\r\n            />\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n      <CenterModel\r\n          showModal={isTestEmailModelOpen}\r\n          handleToggleModal={onCloseModal}\r\n          modalTitle={\"Test Outbound Email\"}\r\n          modelSizeClass=\"w-40\"\r\n        >\r\n          <TestEmails \r\n              onClose={onCloseModal}\r\n              smtpRef={smtpRef}\r\n              \r\n          />\r\n        </CenterModel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SMTPSettings;\r\n"],"names":["_ref","isApprovalValidate","showModal","handleToggleModal","children","props","_jsxs","Modal","className","modelSizeClass","show","onHide","keyboard","backdrop","_jsx","Header","closeButton","modalTitle","Body","SMTPSettingsFormData","initialState","smtpSettingId","organizationId","emailProvider","smtpServer","smtpPort","smtpUserName","smtpPassword","useSsl","clientId","clientSecret","tenantId","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","SELECT","dataField","fieldSetting","placeholder","isEnableOnChange","isDisabled","validation","type","style","containerCss","INPUT","allowSpace","maxLength","NUMERIC","PASSWORD","CHECKBOX","formSetting","isViewOnly","TestEmailConfig","name","emailTo","subject","body","CKEDITOR","ref","useRef","formData","useState","testOutboundEmail","isLoading","isSuccess","isSuccessTestEmail","data","isTestEmailData","useSendTestOutboundEmailsMutation","useEffect","keyValue","ToastService","success","errorMessage","error","onClose","_Fragment","FormCreator","config","Buttons","buttonTypeClassName","onClick","handleTestOutboundEmail","_props$smtpRef","current","getFormData","emailData","smtpRef","emailArray","split","map","email","trim","join","request","buttonText","setInitialData","label","value","isEditablePage","smtpSettingData","setSmtpSettingData","smtpId","setSmtpId","setIsOfficeEmail","setIsOutlook","setIsGmail","addEditSmtpSetting","isAddEditSmtpSettingLoading","isAddEditSmtpSettingSuccess","isAddEditSmtpSettingData","useAddEditSmtpSettingsMutation","getSmtpSettings","isFetching","isGetSmtpSettingsFetching","isGetSmtpSettingsSuccess","isGetSmtpSettingsData","useLazyGetSmtpSettingsQuery","isButtonDisable","setIsButtonDisable","roles","useSelector","state","auth","roleName","isTestEmailModelOpen","setIsTestEmailModelOpen","includes","setInitialValue","updatedFormData","removeFormFields","handleChangeDropdownList","getFieldsToRemove","manageData","removeFields","filter","field","find","item","options","EmailProviders","fieldsToRemove","setFieldSetting","FieldSettingType","DISABLED","decryptUrlData","formActionHandler","DDL_CHANGED","DataLoader","onCloseModal","onActionChange","handleTestEmail","isDisable","handleAddEditSmtpSettings","encryptAES","CenterModel","TestEmails"],"sourceRoot":""}