{"version":3,"file":"static/js/4301.2861ee90.chunk.js","mappings":"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","sources":["common/features/component/EmailAddress/feature/AddEditEmailAddress.js","components/ui/centerModel/CenterModel.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useImperativeHandle, useRef, useState } from 'react';\r\n//** Lib's */\r\nimport { Message } from '../utils/ContactMessages';\r\nimport Buttons from '../../../../../components/ui/button/Buttons';\r\nimport FormCreator from '../../../../../components/Forms/FormCreator';\r\nimport { addEditEmailFormData } from '../config/AddEditEmailForm.data';\r\nimport CenterModel from '../../../../../components/ui/centerModel/CenterModel';\r\nimport { addData, updateData } from '../utils/ContactEmailAddressUtil';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddEditEmailModal = ({ contactId, emailAddressList, setEmailAddressList, editFormData, handleToggleModal, showModal, isEdit, onSuccess, addeditRef }) => {\r\n\r\n    //** State */\r\n    const ref = useRef();\r\n    const [formData, setFormData] = useState(addEditEmailFormData);\r\n\r\n    //** Handle Changes */\r\n    const handleAddEdit = () => {\r\n        let data = ref.current.getFormData();\r\n        if (data && !data.id) {\r\n            let req = {\r\n                ...data,\r\n                isPrimary: data.isEmailPrimary\r\n            }\r\n            addData(req, contactId, emailAddressList, setEmailAddressList, Message.EmailAdded, Message.EmailMaxLength, Message.DuplicateEmail, onResetData, onSuccess);\r\n        } else if (data?.id) {\r\n            let req = {\r\n                ...data,\r\n                isPrimary: data.isEmailPrimary\r\n            }\r\n            updateData(req, emailAddressList, setEmailAddressList, Message.EmailUpdated, Message.DuplicateEmail, Message.InvalidData, onResetData, onSuccess);\r\n        }\r\n    };\r\n\r\n    const handleCheckBoxChange = (data) => {\r\n        let req = {\r\n            ...data,\r\n            isEmailPrimary: data.isPrimary\r\n        }\r\n        updateData(req, emailAddressList, setEmailAddressList, Message.EmailUpdated, Message.DuplicateEmail, Message.InvalidData);\r\n    }\r\n\r\n    //** Use Imperative Handle */\r\n    useImperativeHandle(addeditRef, () => ({\r\n        callChildFunction: handleCheckBoxChange\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (isEdit && editFormData) {\r\n            let form = { ...addEditEmailFormData };\r\n            form.initialState = {\r\n                emailAddress: editFormData.emailAddress,\r\n                emailId: editFormData.emailId,\r\n                id: editFormData.id,\r\n                isEmailPrimary: editFormData.isPrimary\r\n            }\r\n            setFormData(form);\r\n        }\r\n    }, [isEdit, editFormData])\r\n\r\n    //** Reset Data */\r\n    const onResetData = () => {\r\n        let form = { ...addEditEmailFormData };\r\n        form.initialState = { ...addEditEmailFormData.initialState };\r\n        setFormData(form);\r\n    };\r\n\r\n    return (\r\n        <CenterModel showModal={showModal} handleToggleModal={handleToggleModal} modalTitle=\"Add/Edit Email Address\" modelSizeClass=\"w-40\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12 add-edit-emailAddressForm\">\r\n                    <div className=\"row vertical-form add-edit-contactForm\">\r\n                        <FormCreator config={formData} ref={ref} {...formData} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-12 mt-2\">\r\n                    <div className=\"d-flex align-item-center justify-content-end\">\r\n                        <Buttons\r\n                            buttonTypeClassName=\"theme-button\"\r\n                            buttonText={`${isEdit ? \"Update\" : \"Add\"}`}\r\n                            onClick={handleAddEdit} />\r\n                        <Buttons\r\n                            buttonTypeClassName=\"dark-btn ml-5\"\r\n                            buttonText=\"Cancel\"\r\n                            onClick={handleToggleModal} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </CenterModel>\r\n    )\r\n}\r\nAddEditEmailModal.propTypes = {\r\n    contactId: PropTypes.number.isRequired,\r\n    emailAddressList: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            emailId: PropTypes.number,\r\n            id: PropTypes.number,\r\n\r\n        })\r\n    ).isRequired,\r\n    setEmailAddressList: PropTypes.func.isRequired,\r\n    editFormData: PropTypes.shape({\r\n        emailAddress: PropTypes.string,\r\n        emailId: PropTypes.number,\r\n        id: PropTypes.number,\r\n        isPrimary: PropTypes.bool,\r\n    }),\r\n    handleToggleModal: PropTypes.func.isRequired,\r\n    showModal: PropTypes.bool.isRequired,\r\n    isEdit: PropTypes.bool.isRequired,\r\n    onSuccess: PropTypes.func.isRequired,\r\n};\r\nexport default AddEditEmailModal\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./CenterModel.scss\";\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\nconst CenterModel = ({ isApprovalValidate, showModal, handleToggleModal, children, ...props }) => {\r\n  return (\r\n    <Modal\r\n      className={`center-model-popup ${props.modelSizeClass}`}\r\n      show={showModal}\r\n      onHide={handleToggleModal}\r\n      keyboard={!isApprovalValidate}\r\n      backdrop={isApprovalValidate ? \"static\" : true}\r\n    >\r\n      <Modal.Header closeButton={!isApprovalValidate}>\r\n        <div className=\"model-title\">{props.modalTitle}</div>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nCenterModel.propTypes = {\r\n  isApprovalValidate: PropTypes.bool,\r\n  showModal: PropTypes.bool.isRequired,\r\n  handleToggleModal: PropTypes.func.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  modelSizeClass: PropTypes.string,\r\n  modalTitle: PropTypes.string\r\n};\r\nexport default CenterModel;\r\n"],"names":["_ref","contactId","emailAddressList","setEmailAddressList","editFormData","handleToggleModal","showModal","isEdit","onSuccess","addeditRef","ref","useRef","formData","setFormData","useState","addEditEmailFormData","handleCheckBoxChange","data","req","isEmailPrimary","isPrimary","updateData","Message","EmailUpdated","DuplicateEmail","InvalidData","useImperativeHandle","callChildFunction","useEffect","form","initialState","emailAddress","emailId","id","onResetData","_jsx","CenterModel","modalTitle","modelSizeClass","children","_jsxs","className","FormCreator","config","Buttons","buttonTypeClassName","buttonText","onClick","handleAddEdit","current","getFormData","addData","EmailAdded","EmailMaxLength","isApprovalValidate","props","Modal","show","onHide","keyboard","backdrop","Header","closeButton","Body"],"sourceRoot":""}