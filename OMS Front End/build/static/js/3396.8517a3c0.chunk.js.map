{"version":3,"file":"static/js/3396.8517a3c0.chunk.js","mappings":"sLAWA,MAAMA,EAAoBC,EAAAA,MAAW,IAAM,yFACrCC,EAAuBD,EAAAA,MAAW,IAAM,qEA4G9C,GAzGyBE,EAAAA,EAAAA,aAAWC,IAA2J,IAA1J,SAAEC,EAAQ,WAAEC,EAAU,uBAAEC,EAAsB,mBAAEC,EAAkB,aAAEC,EAAY,cAAEC,EAAa,kBAAEC,EAAiB,+BAAEC,GAAgCR,EAErL,MAAMS,GAAYC,EAAAA,EAAAA,WACXC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,IACtCC,EAAeC,IAAoBF,EAAAA,EAAAA,WAAS,IAC5CG,EAAgBC,IAAqBJ,EAAAA,EAAAA,WAAS,IAC9CK,EAAmBC,IAAwBN,EAAAA,EAAAA,UAAS,KACpDO,EAAkBC,IAAuBR,EAAAA,EAAAA,WAAS,IAClDS,EAAqBC,IAA0BV,EAAAA,EAAAA,WAAS,IACxDW,EAAuBC,IAA4BZ,EAAAA,EAAAA,WAAS,IAC7D,kBAAEa,IAAsBC,EAAAA,EAAAA,YAAWC,EAAAA,IAElCC,GAAwBC,UAAWC,EAAuBC,UAAWC,EAAuBC,KAAMC,KAAwBC,EAAAA,EAAAA,MAmB3HC,EAA0B,SAAC1B,EAAYG,GAA4E,IAA7DwB,IAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAASnB,IAAgBmB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACxGhB,GAAwBD,GACxB,IAAIoB,EAAU,CACV/B,WAAYA,EACZgC,WAAY,EACZ7B,cAAeA,GAEnBC,EAAiBD,GACjBe,EAAqBa,GACrB9B,EAAcD,GACdc,EAAyBa,GACzBjB,EAAoBD,EACxB,EAoCA,OAXAwB,EAAAA,EAAAA,YAAU,KACFX,GAAyBE,GACzBhB,EAAqBgB,EACzB,GACD,CAACF,EAAuBE,KAG3BU,EAAAA,EAAAA,qBAAoB5C,GAAU,MAC1B6C,kBAAmBT,OAInBU,EAAAA,EAAAA,MAAClD,EAAAA,SAAc,CAAAmD,SAAA,EACXC,EAAAA,EAAAA,KAACnD,EAAoB,CAACW,UAAWA,EAAWyC,sBAnBtBA,KAT1B3B,GAAwBD,GAWxBE,GAhDAP,GAAmBD,IAiDlBQ,GAAyBrB,GAAwB,EAgB4CgD,UAAW7B,EAAqB8B,oBAAoB,EAC1IrB,sBAAuBA,EAAuBsB,OAAQ1C,EAAYN,aAAcA,EAAcgC,wBAAyBA,EACvHiB,yBAtCqBA,KAC7BnC,EAAqB,IACrBI,GAAwBD,GACnBjB,GAAiBC,GAClBJ,GACJ,EAiC4DqD,WA3B7CA,KACX9C,EAAU+C,SACV/C,EAAU+C,QAAQC,2BACtB,EAwBoFvC,kBAAmBA,GAAwC,KAAME,iBAAkBA,IAClKI,IACGyB,EAAAA,EAAAA,KAACrD,EAAiB,CAAC8D,eAlEAC,KACtBtD,GACDH,IAEJe,GAAmBD,EAAe,EA8DiC4C,YAAa5C,EAAgBqC,OAAQ1C,EAAYkD,uBA5DzFA,KAC3B5C,GAAmBD,GACnBb,GAAwB,EA2DZ2D,aAAchD,EAAgBiD,EAAAA,GAAaC,mBAAqBD,EAAAA,GAAaE,gBAAiBb,oBAAoB,EAAOtC,cAAeA,EACxIoD,wBAAyBC,EAAAA,GAAkCC,eAAgBC,EAAAA,GAC3EC,eAAgBC,EAAAA,GAAwCC,uBAAwBC,EAAAA,GAAwCC,UAAWC,EAAAA,GAAUC,SAAUC,UAAWzE,EAAoBsB,kBAAmBA,EAAmBnB,kBAAmBA,EAC/OC,+BAAgCA,MAG3B,G","sources":["pages/customerDetail/feature/cutomerApproval/CustomerApproval.js"],"sourcesContent":["import React, { forwardRef, useContext, useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\n//** Libs's */\r\nimport { ApprovalEnum, OwnerType } from \"../../../../utils/Enums/commonEnums\";\r\n//** Service's */\r\nimport {\r\n    useGetValidateCheckListMutation, useLazyGetCustomerAddresssInfoByIdQuery, useLazyGetCustomerContactInfoByIdQuery,\r\n    useLazyGetCustomerFinacialSettingQuery, useLazyGetCustomersInfoByIdQuery\r\n} from \"../../../../app/services/ApprovalAPI\";\r\nimport PropTypes from 'prop-types';\r\nimport BasicDetailContext from \"../../../../utils/ContextAPIs/Customer/BasicDetailContext\";\r\n//** Component's */\r\nconst ApprovalCheckList = React.lazy(() => import(\"../../../../components/ApprovalCheckList/ApprovalCheckList\"));\r\nconst ApprovalValidateData = React.lazy(() => import(\"../../../../components/ApprovalCheckList/feature/approvalValidateData/ApprovalValidateData\"));\r\n\r\n\r\nconst CustomerApproval = forwardRef(({ childRef, getListApi, updateCustomerApproval, responsibleUserIds, isDetailPage, isAddPagePage, setSelectedStatus, onRejectedCustomerFromApproval }) => {\r\n\r\n    const parentRef = useRef();\r\n    const [customerId, setCustomerId] = useState(0);\r\n    const [isSubCustomer, setIsSubCustomer] = useState(false);\r\n    const [isShowApproval, setIsShowApproval] = useState(false);\r\n    const [validateCheckList, setValidateCheckList] = useState([]);\r\n    const [isShowBothButton, setIsShowBothButton] = useState(false);\r\n    const [isShowValidateModal, setIsShowValidateModal] = useState(false);\r\n    const [showApprovalCheckList, setShowApprovalCheckList] = useState(false);\r\n    const { setRejectStatusId } = useContext(BasicDetailContext);\r\n\r\n    const [getValidateCheckList, { isLoading: isGetCheckListLoading, isSuccess: isGetCheckListSuccess, data: isGetCheckListData }] = useGetValidateCheckListMutation();\r\n\r\n    //** Approval CheckList Modal*/\r\n    const handleShowApprovalList = () => {\r\n        setIsShowApproval(!isShowApproval);\r\n    };\r\n\r\n    const onSidebarApprovalClose = () => {\r\n        if (!isDetailPage) {\r\n            getListApi();\r\n        }\r\n        setIsShowApproval(!isShowApproval);\r\n    };\r\n    const onSuccessApprovalClose = () => {\r\n        setIsShowApproval(!isShowApproval);\r\n        updateCustomerApproval();\r\n    };\r\n\r\n    //** Validate check list Modal */\r\n    const handleShowValidateModal = (customerId, isSubCustomer, isShowApprovalCheckList = true, isShowBothButton = true) => {\r\n        setIsShowValidateModal(!isShowValidateModal);\r\n        let request = {\r\n            customerId: customerId,\r\n            supplierId: 0,\r\n            isSubCustomer: isSubCustomer\r\n        }\r\n        setIsSubCustomer(isSubCustomer);\r\n        getValidateCheckList(request);\r\n        setCustomerId(customerId);\r\n        setShowApprovalCheckList(isShowApprovalCheckList);\r\n        setIsShowBothButton(isShowBothButton);\r\n    };\r\n\r\n    const handleValidateModalClose = () => {\r\n        setValidateCheckList([]);\r\n        setIsShowValidateModal(!isShowValidateModal);\r\n        if (!isDetailPage && !isAddPagePage) {\r\n            getListApi();\r\n        }\r\n    };\r\n    const handleModalClose = () => {\r\n        setIsShowValidateModal(!isShowValidateModal);\r\n    }\r\n\r\n    const handleDone = () => {\r\n        if (parentRef.current) {\r\n            parentRef.current.validateApprovalCheckList();\r\n        }\r\n    }\r\n\r\n    const handleValidateSuccess = () => {\r\n        handleModalClose();\r\n        showApprovalCheckList && handleShowApprovalList();\r\n        !showApprovalCheckList && updateCustomerApproval();\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isGetCheckListSuccess && isGetCheckListData) {\r\n            setValidateCheckList(isGetCheckListData);\r\n        }\r\n    }, [isGetCheckListSuccess, isGetCheckListData])\r\n\r\n    //** Use Imperative Handle */\r\n    useImperativeHandle(childRef, () => ({\r\n        callChildFunction: handleShowValidateModal\r\n    }))\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ApprovalValidateData parentRef={parentRef} handleValidateSuccess={handleValidateSuccess} showModal={isShowValidateModal} isSupplierApproval={false}\r\n                isGetCheckListLoading={isGetCheckListLoading} mainId={customerId} isDetailPage={isDetailPage} handleShowValidateModal={handleShowValidateModal}\r\n                handleValidateModalClose={handleValidateModalClose} handleDone={handleDone} validateCheckList={validateCheckList ? validateCheckList : null} isShowBothButton={isShowBothButton} />\r\n            {showApprovalCheckList &&\r\n                <ApprovalCheckList onSidebarClose={onSidebarApprovalClose} isModelOpen={isShowApproval} mainId={customerId} onSuccessApprovalClose={onSuccessApprovalClose}\r\n                    ApprovalData={isSubCustomer ? ApprovalEnum.APPROVESUBCUSTOMER : ApprovalEnum.APPROVECUSTOMER} isSupplierApproval={false} isSubCustomer={isSubCustomer}\r\n                    getBasicInformationById={useLazyGetCustomersInfoByIdQuery} getAddressById={useLazyGetCustomerAddresssInfoByIdQuery}\r\n                    getContactById={useLazyGetCustomerContactInfoByIdQuery} getFinacialSettingById={useLazyGetCustomerFinacialSettingQuery} ownerType={OwnerType.Customer} basicData={responsibleUserIds} setRejectStatusId={setRejectStatusId} setSelectedStatus={setSelectedStatus}\r\n                    onRejectedCustomerFromApproval={onRejectedCustomerFromApproval}\r\n                />\r\n            }\r\n        </React.Fragment>\r\n    )\r\n});\r\n\r\nCustomerApproval.propTypes = {\r\n    childRef: PropTypes.shape({\r\n        callChildFunction: PropTypes.func\r\n    }),\r\n    getListApi: PropTypes.func,\r\n    updateCustomerApproval: PropTypes.func.isRequired,\r\n    isDetailPage: PropTypes.bool\r\n};\r\n\r\nexport default CustomerApproval;"],"names":["ApprovalCheckList","React","ApprovalValidateData","forwardRef","_ref","childRef","getListApi","updateCustomerApproval","responsibleUserIds","isDetailPage","isAddPagePage","setSelectedStatus","onRejectedCustomerFromApproval","parentRef","useRef","customerId","setCustomerId","useState","isSubCustomer","setIsSubCustomer","isShowApproval","setIsShowApproval","validateCheckList","setValidateCheckList","isShowBothButton","setIsShowBothButton","isShowValidateModal","setIsShowValidateModal","showApprovalCheckList","setShowApprovalCheckList","setRejectStatusId","useContext","BasicDetailContext","getValidateCheckList","isLoading","isGetCheckListLoading","isSuccess","isGetCheckListSuccess","data","isGetCheckListData","useGetValidateCheckListMutation","handleShowValidateModal","isShowApprovalCheckList","arguments","length","undefined","request","supplierId","useEffect","useImperativeHandle","callChildFunction","_jsxs","children","_jsx","handleValidateSuccess","showModal","isSupplierApproval","mainId","handleValidateModalClose","handleDone","current","validateApprovalCheckList","onSidebarClose","onSidebarApprovalClose","isModelOpen","onSuccessApprovalClose","ApprovalData","ApprovalEnum","APPROVESUBCUSTOMER","APPROVECUSTOMER","getBasicInformationById","useLazyGetCustomersInfoByIdQuery","getAddressById","useLazyGetCustomerAddresssInfoByIdQuery","getContactById","useLazyGetCustomerContactInfoByIdQuery","getFinacialSettingById","useLazyGetCustomerFinacialSettingQuery","ownerType","OwnerType","Customer","basicData"],"sourceRoot":""}