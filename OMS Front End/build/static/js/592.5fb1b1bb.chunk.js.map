{"version":3,"file":"static/js/592.5fb1b1bb.chunk.js","mappings":"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","sources":["common/features/component/CustomerSupplierListConfig/CustomerSupplierListConfig.data.js","common/features/component/CustomerSupplierReason/Reason.data.js","components/ui/centerModel/CenterModel.js","utils/ContextAPIs/Customer/CustomerListContext.js","pages/customerDetail/customerGrid/feature/customerList/feature/CustomerList.js","pages/customerDetail/customerGrid/feature/customerInActiveTabs/feature/InActiveCustomersList.js","pages/customerDetail/customerGrid/feature/customerInActiveTabs/InActiveCustomerTab.js","pages/customerDetail/customerGrid/feature/customerList/Customers.js","pages/customerDetail/customerGrid/CustomerGrid.js","pages/customerDetail/feature/customerBasicDetail/config/CustomerBasicDetail.data.js","pages/customerDetail/feature/cutomerApproval/CustomerApproval.js","utils/ContextAPIs/Customer/BasicDetailContext.js","utils/CustomActionSecurity/actionsSecurityValidator.js","utils/ResponsibleUser/validateRUser.js","utils/StatusColors/StatusColors.js"],"sourcesContent":["import { GridColumnType } from \"../../../../data/gridColumnType\";\r\nimport {\r\n  ListShowCustomer,\r\n  ListSupplier,\r\n} from \"../../../../utils/Enums/commonEnums\";\r\nimport { getLabelClass } from \"../../../../utils/StatusColors/StatusColors\";\r\n\r\nexport const AllCustomerGridConfig = {\r\n  columns: [\r\n    {\r\n      id: ListShowCustomer.value,\r\n      name: \"Customer Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"35%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      id: ListSupplier.value,\r\n      name: \"Supplier Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"35%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Tax Id\",\r\n      fieldName: \"taxId\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Status\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      fieldName: \"status\",\r\n      allowShort: true,\r\n      colType: GridColumnType.LABLE,\r\n      colSettings: {\r\n        valueField: \"status\",\r\n        getLableClass: getLabelClass,\r\n      },\r\n    },\r\n    // {\r\n    //   name: \"Progress\",\r\n    //   fieldName: \"progress\",\r\n    //   colType: GridColumnType.PROGRESS,\r\n\r\n    // },\r\n    {\r\n      name: \"Action\",\r\n      colType: GridColumnType.ACTION,\r\n      colStyle: {\r\n        width: \"15%\",\r\n      },\r\n      defaultAction: {\r\n        allowEdit: true,\r\n      },\r\n      customAction: [\r\n        {\r\n          name: \"ALLOWDISABLE\",\r\n          iconName: \"la:user-slash\",\r\n          title: \"Disable\",\r\n          className: \"disable-icon\",\r\n        },\r\n        {\r\n          name: \"ALLOWFREEZE\",\r\n          iconName: \"material-symbols:lock-outline\",\r\n          title: \"Freeze\",\r\n          className: \"freeze-icon\",\r\n        },\r\n        {\r\n          name: \"ALLOWBLOCKED\",\r\n          iconName: \"akar-icons:block\",\r\n          title: \"Blocked\",\r\n          className: \"block-icon\",\r\n        },\r\n        {\r\n          name: \"ALLOREJECT\",\r\n          iconName: \"carbon:close-outline\",\r\n          title: \"Reject\",\r\n          className: \"reject-icon\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport const PendingCustomerGridConfig = {\r\n  columns: [\r\n    {\r\n      id: ListShowCustomer.value,\r\n      name: \"Customer Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"35%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      id: ListSupplier.value,\r\n      name: \"Supplier Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"35%\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Tax Id\",\r\n      fieldName: \"taxId\",\r\n      colStyle: {\r\n        width: \"20%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Web Site\",\r\n      fieldName: \"website\",\r\n      colStyle: {\r\n        width: \"30%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    // {\r\n    //   name: \"Progress\",\r\n    //   fieldName: \"progress\",\r\n    //   colType: GridColumnType.PROGRESS,\r\n\r\n    // },\r\n    {\r\n      name: \"Action\",\r\n      colStyle: {\r\n        width: \"15%\",\r\n      },\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n        // isDisabled: true,\r\n      },\r\n      customAction: [\r\n        {\r\n          name: \"ALLOWDISABLE\",\r\n          iconName: \"la:user-slash\",\r\n          title: \"Disable\",\r\n          className: \"disable-icon\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport const SubmittedCustomerGridConfig = {\r\n  columns: [\r\n    {\r\n      id: ListShowCustomer.value,\r\n      name: \"Customer Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"35%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      id: ListSupplier.value,\r\n      name: \"Supplier Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"35%\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Tax Id\",\r\n      fieldName: \"taxId\",\r\n      colStyle: {\r\n        width: \"15%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Web Site\",\r\n      fieldName: \"website\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Approve\",\r\n      colStyle: {\r\n        width: \"10%\",\r\n      },\r\n      allowShort: false,\r\n      colType: GridColumnType.CHECKBOX,\r\n      colSettings: {\r\n        allowCheckbox: true,\r\n        isDisabled: false\r\n      },\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      colStyle: {\r\n        width: \"15%\",\r\n      },\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n        // isDisabled: true,\r\n      },\r\n      customAction: [\r\n        {\r\n          name: \"ALLOWDISABLE\",\r\n          iconName: \"la:user-slash\",\r\n          title: \"Disable\",\r\n          className: \"disable-icon\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport const ApprovedCustomerGridConfig = {\r\n  columns: [\r\n    {\r\n      id: ListShowCustomer.value,\r\n      name: \"Customer Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"70%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      id: ListSupplier.value,\r\n      name: \"Supplier Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"70%\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Tax Id\",\r\n      colStyle: {\r\n        width: \"15%\",\r\n      },\r\n      fieldName: \"taxId\",\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      colStyle: {\r\n        width: \"15%\",\r\n      },\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n      },\r\n      customAction: [\r\n        {\r\n          name: \"ALLOWDISABLE\",\r\n          iconName: \"la:user-slash\",\r\n          title: \"Disable\",\r\n          className: \"disable-icon\",\r\n        },\r\n        {\r\n          name: \"ALLOWFREEZE\",\r\n          iconName: \"material-symbols:lock-outline\",\r\n          title: \"Freeze\",\r\n          className: \"freeze-icon\",\r\n        },\r\n        {\r\n          name: \"ALLOWBLOCKED\",\r\n          iconName: \"akar-icons:block\",\r\n          title: \"Blocked\",\r\n          className: \"block-icon\",\r\n        },\r\n        {\r\n          name: \"ALLOREJECT\",\r\n          iconName: \"carbon:close-outline\",\r\n          title: \"Reject\",\r\n          className: \"reject-icon\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport const RejectedCustomerGridConfig = {\r\n  columns: [\r\n    {\r\n      id: ListShowCustomer.value,\r\n      name: \"Customer Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"70%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      id: ListSupplier.value,\r\n      name: \"Supplier Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"70%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Reason\",\r\n      fieldName: \"inActiveReason\",\r\n      colStyle: {\r\n        width: \"15%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      colStyle: {\r\n        width: \"15%\",\r\n      },\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nexport const AllInActiveCustomerGridConfig = {\r\n  columns: [\r\n    {\r\n      id: ListShowCustomer.value,\r\n      name: \"Customer Name\",\r\n      fieldName: \"name\",\r\n      allowShort: true,\r\n      colStyle: {\r\n        width: \"35%\",\r\n      },\r\n    },\r\n    {\r\n      id: ListSupplier.value,\r\n      name: \"Supplier Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"35%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Reason\",\r\n      fieldName: \"inActiveReason\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Date\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      fieldName: \"updatedAt\",\r\n      colType: GridColumnType.DATE,\r\n      colSettings: {\r\n        isUTC: true,\r\n        format: \"MM/DD/YYYY hh:mm A \",\r\n      },\r\n    },\r\n    {\r\n      name: \"Status\",\r\n      colStyle: {\r\n        width: \"15%\",\r\n      },\r\n      fieldName: \"status\",\r\n      allowShort: false,\r\n      colType: GridColumnType.LABLE,\r\n      colSettings: {\r\n        valueField: \"status\",\r\n        getLableClass: getLabelClass,\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nexport const FreezedInActiveCustomerGridConfig = {\r\n  columns: [\r\n    {\r\n      id: ListShowCustomer.value,\r\n      name: \"Customer Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      id: ListSupplier.value,\r\n      name: \"Supplier Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Reason\",\r\n      fieldName: \"inActiveReason\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Date\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      fieldName: \"updatedAt\",\r\n      colType: GridColumnType.DATE,\r\n      colSettings: {\r\n        isUTC: true,\r\n        format: \"MM/DD/YYYY hh:mm A \",\r\n      },\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n        allowDelete: false,\r\n        // allowUnfreeze: true,\r\n      },\r\n      customAction: [\r\n        {\r\n          name: \"ALLOWFREEZE\",\r\n          iconName: \"basil:unlock-outline\",\r\n          title: \"Un-Freeze\",\r\n          className: \"un-lock-icon\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport const BlockedInActiveCustomerGridConfig = {\r\n  columns: [\r\n    {\r\n      id: ListShowCustomer.value,\r\n      name: \"Customer Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      id: ListSupplier.value,\r\n      name: \"Supplier Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Reason\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      fieldName: \"inActiveReason\",\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Date\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      fieldName: \"updatedAt\",\r\n      colType: GridColumnType.DATE,\r\n      colSettings: {\r\n        isUTC: true,\r\n        format: \"MM/DD/YYYY hh:mm A \",\r\n      },\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n        // allowDelete: false,\r\n        // allowUnfreeze: false,\r\n        // allowUnblocked: true,\r\n      },\r\n      customAction: [\r\n        {\r\n          name: \"ALLOWUNBLOCKED\",\r\n          title: \"UnBlock\",\r\n          iconName: \"gg:unblock\",\r\n          className: \"un-block-icon\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport const DisabledInActiveCustomerGridConfig = {\r\n  columns: [\r\n    {\r\n      id: ListShowCustomer.value,\r\n      name: \"Customer Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"35%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      id: ListSupplier.value,\r\n      name: \"Supplier Name\",\r\n      fieldName: \"name\",\r\n      colStyle: {\r\n        width: \"35%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Reason\",\r\n      colStyle: {\r\n        width: \"35%\",\r\n      },\r\n      fieldName: \"inActiveReason\",\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Date\",\r\n      colStyle: {\r\n        width: \"35%\",\r\n      },\r\n      fieldName: \"updatedAt\",\r\n      colType: GridColumnType.DATE,\r\n      colSettings: {\r\n        isUTC: true,\r\n        format: \"MM/DD/YYYY hh:mm A \",\r\n      },\r\n    },\r\n  ],\r\n};\r\n","import { FormFieldTypes } from \"../../../../data/formFieldType\";\r\n\r\nexport const reasonData = {\r\n  name: \"\",\r\n  initialState: {responsibleUserId:0, inActiveReason: \"\" },\r\n  formFields: [\r\n    {\r\n      id: \"ResponsibleUserId\",\r\n      lable: \"Responsible User \",\r\n      Field_Name: \"Responsible User\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"responsibleUserId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Responsible User\",\r\n        isDisabled: false,\r\n        isEnableOnChange: true,\r\n        isMultiSelect: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"inActiveReason\",\r\n      lable: \"Reason :\",\r\n      Field_Name: \"Reason \",\r\n      fieldType: FormFieldTypes.TEXTAREA,\r\n      dataField: \"inActiveReason\",\r\n      fieldSetting: {\r\n        placeholder: \"please enter Reason\",\r\n        allowSpace: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 mb-2\",\r\n      },\r\n    },\r\n  ],\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./CenterModel.scss\";\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\nconst CenterModel = ({ isApprovalValidate, showModal, handleToggleModal, children, ...props }) => {\r\n  return (\r\n    <Modal\r\n      className={`center-model-popup ${props.modelSizeClass}`}\r\n      show={showModal}\r\n      onHide={handleToggleModal}\r\n      keyboard={!isApprovalValidate}\r\n      backdrop={isApprovalValidate ? \"static\" : true}\r\n    >\r\n      <Modal.Header closeButton={!isApprovalValidate}>\r\n        <div className=\"model-title\">{props.modalTitle}</div>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nCenterModel.propTypes = {\r\n  isApprovalValidate: PropTypes.bool,\r\n  showModal: PropTypes.bool.isRequired,\r\n  handleToggleModal: PropTypes.func.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  modelSizeClass: PropTypes.string,\r\n  modalTitle: PropTypes.string\r\n};\r\nexport default CenterModel;\r\n","import { createContext } from 'react';\r\n\r\nconst CustomerListContext = createContext();\r\n\r\nexport default CustomerListContext;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, {\r\n  useContext,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport CardSection from \"../../../../../../components/ui/card/CardSection\";\r\nimport {\r\n  useAddEditResponsibleUserForCustomerMutation,\r\n  useGetCustomersMutation,\r\n  useUpdateCustomerApproveStatusMutation,\r\n  useUpdateCustomerInActiveStatusMutation,\r\n} from \"../../../../../../app/services/basicdetailAPI\";\r\nimport BasicDetailContext from \"../../../../../../utils/ContextAPIs/Customer/BasicDetailContext\";\r\nimport CustomerListContext from \"../../../../../../utils/ContextAPIs/Customer/CustomerListContext\";\r\nimport { useAddCustomerNotesMutation } from \"../../../../../../app/services/notesAPI\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useLazyGetAllUserQuery } from \"../../../../../../app/services/commonAPI\";\r\nimport { excludingRoles } from \"../../../../feature/customerBasicDetail/config/CustomerBasicDetail.data\";\r\nimport { setDropDownOptionField } from \"../../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport { hasFunctionalPermission } from \"../../../../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\nimport { securityKey } from \"../../../../../../data/SecurityKey\";\r\nimport ToastService from \"../../../../../../services/toastService/ToastService\";\r\nimport { encryptUrlData } from \"../../../../../../services/CryptoService\";\r\nimport {\r\n  StatusEnums,\r\n  StatusFeild,\r\n} from \"../../../../../../utils/Enums/StatusEnums\";\r\nimport { AppIcons } from \"../../../../../../data/appIcons\";\r\nimport CenterModel from \"../../../../../../components/ui/centerModel/CenterModel\";\r\nimport FormCreator from \"../../../../../../components/Forms/FormCreator\";\r\nimport Buttons from \"../../../../../../components/ui/button/Buttons\";\r\nimport CustomerApproval from \"../../../../feature/cutomerApproval/CustomerApproval\";\r\nimport { reasonData } from \"../../../../../../common/features/component/CustomerSupplierReason/Reason.data\";\r\nimport PropTypes from \"prop-types\";\r\nimport FinalMolGrid from \"../../../../../../components/FinalMolGrid/FinalMolGrid\";\r\nimport { validateResponsibleUserId } from \"../../../../../../utils/ResponsibleUser/validateRUser\";\r\nimport { securityValidator } from \"../../../../../../utils/CustomActionSecurity/actionsSecurityValidator\";\r\n// import { securityValidator } from \"../../../../../../utils/CustomActionSecurity/actionsSecurityValidator\";\r\n//import MolGrid from \"../../../../../../components/Grid/MolGrid\";\r\n\r\nexport const CustomersList = ({\r\n  statusId,\r\n  configFile,\r\n  handleChange,\r\n  search,\r\n  handleChangeDropdown,\r\n  statusOptions,\r\n  selectedDrpvalues,\r\n  searchStatusFilter,\r\n  handleSearch,\r\n  handleClear,\r\n  handleKeyPress,\r\n  shouldRerenderFormCreator,\r\n  tabIndex\r\n}) => {\r\n  const navigate = useNavigate();\r\n  const molGridRef = useRef();\r\n  const reasonRef = useRef();\r\n  const childRef = useRef();\r\n  const [totalRowCount, setTotalRowCount] = useState(0);\r\n  const [dataSource, setDataSource] = useState();\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [formData, setFormData] = useState(reasonData);\r\n  const [customerID, setCustomerId] = useState();\r\n  const [staticId, setStaticId] = useState();\r\n  const [statusFeild, setStatusFeild] = useState();\r\n  const { listRef } = useContext(CustomerListContext);\r\n  const authState = useSelector((state) => state.auth);\r\n  const [assignRUser, setAssignRUser] = useState();\r\n  const { isResponsibleUser, setIsResponsibleUser } =\r\n    useContext(BasicDetailContext);\r\n\r\n  const [\r\n    getCustomers,\r\n    { isLoading: isListLoading, isSuccess: isListSuccess, data: isListeData },\r\n  ] = useGetCustomersMutation();\r\n  const [\r\n    updateCustomerApproveStatus,\r\n    { isSuccess: isSuccessUpdateCustomer, data: updateCustomerData },\r\n  ] = useUpdateCustomerApproveStatusMutation();\r\n  const [\r\n    updateCustomerInActiveStatus,\r\n    {\r\n      isLoading: updateCustomerInActiveStatusCustomerLoading,\r\n      isSuccess: isSuccessUpdateCustomerInActiveStatus,\r\n      data: updateCustomerInActiveStatusData,\r\n    },\r\n  ] = useUpdateCustomerInActiveStatusMutation();\r\n\r\n  const [\r\n    addEditResponsibleUserForCustomer,\r\n    {\r\n      isSuccess: isSuccessAddEditResponsibleUserForCustomer,\r\n      data: isAddEditResponsibleUserForCustomerData,\r\n    },\r\n  ] = useAddEditResponsibleUserForCustomerMutation();\r\n\r\n  const [\r\n    getAllUser,\r\n    { isSuccess: isGetAllUserSucess, data: allGetAlluserData },\r\n  ] = useLazyGetAllUserQuery();\r\n  // const [updateResponsibleUser] = useUpdateResponsibleUserMutation();\r\n\r\n  const [addCustomerNotes] = useAddCustomerNotesMutation();\r\n\r\n  useEffect(() => {\r\n    getAllUser();\r\n  }, [statusId]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      isSuccessAddEditResponsibleUserForCustomer &&\r\n      isAddEditResponsibleUserForCustomerData\r\n    ) {\r\n      ToastService.success(\r\n        isAddEditResponsibleUserForCustomerData.errorMessage\r\n      );\r\n    }\r\n  }, [\r\n    isSuccessAddEditResponsibleUserForCustomer,\r\n    isAddEditResponsibleUserForCustomerData,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (isGetAllUserSucess && allGetAlluserData) {\r\n      const filterData = allGetAlluserData.filter((item) => {\r\n        return (\r\n          item.roleName === null ||\r\n          !excludingRoles\r\n            .map((role) => role.toLowerCase())\r\n            .includes(item.roleName.toLowerCase())\r\n        );\r\n      });\r\n      // Remove duplicates based on fullName\r\n      const uniqueData = Array.from(\r\n        new Map(filterData.map((item) => [item.fullName, item])).values()\r\n      );\r\n      setDropDownOptionField(\r\n        uniqueData,\r\n        \"userId\",\r\n        \"fullName\",\r\n        reasonData,\r\n        \"responsibleUserId\"\r\n      );\r\n    }\r\n  }, [isGetAllUserSucess, allGetAlluserData]);\r\n\r\n  useEffect(() => {\r\n    onCustomeActionHandler();\r\n  }, [configFile]);\r\n\r\n  const hasResponsibleUserhasAccess = () => {\r\n    onCustomeActionHandler();\r\n  };\r\n\r\n  const onCustomeActionHandler = () => {\r\n    const actionColumn = configFile?.columns.find(\r\n      (column) => column.name === \"Action\"\r\n    );\r\n    const approvalAction = configFile?.columns.find(\r\n      (column) => column.name === \"Approve\"\r\n    );\r\n    if (actionColumn) {\r\n      const hasEdit = hasFunctionalPermission(securityKey.EDITCUSTOMER);\r\n      const hasBlock = hasFunctionalPermission(securityKey.BLOCKCUSTOMER);\r\n      const hasFreeze = hasFunctionalPermission(securityKey.FREEZECUSTOMER);\r\n      const hasDisable = hasFunctionalPermission(securityKey.DISABLECUSTOMER);\r\n      const hasUnBlock = hasFunctionalPermission(securityKey.UNBLOCKCUSTOMER);\r\n      // const hasUnFreeze = hasFunctionalPermission(securityKey.UNFREEZECUSTOMER);\r\n\r\n      if (actionColumn.defaultAction) {\r\n        actionColumn.defaultAction.allowEdit = hasEdit?.hasAccess;\r\n      }\r\n      actionColumn.customAction = securityValidator(\r\n        hasBlock?.hasAccess,\r\n        actionColumn.customAction,\r\n        \"ALLOWBLOCKED\"\r\n      );\r\n      actionColumn.customAction = securityValidator(\r\n        hasFreeze?.hasAccess,\r\n        actionColumn.customAction,\r\n        \"ALLOWFREEZE\"\r\n      );\r\n      actionColumn.customAction = securityValidator(\r\n        hasDisable?.hasAccess,\r\n        actionColumn.customAction,\r\n        \"ALLOWDISABLE\"\r\n      );\r\n      actionColumn.customAction = securityValidator(\r\n        hasUnBlock?.hasAccess,\r\n        actionColumn.customAction,\r\n        \"ALLOWUNBLOCKED\"\r\n      );\r\n    }\r\n    if (approvalAction && approvalAction.colSettings) {\r\n      approvalAction.colSettings.isDisabled = true;\r\n    }\r\n    if (isResponsibleUser) {\r\n      if (approvalAction && approvalAction.colSettings) {\r\n        approvalAction.colSettings.isDisabled = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  const handlePageChange = (page, sortingString) => {\r\n    const sortingStringObject = sortingString || molGridRef.current.generateSortingString();\r\n    const request = {\r\n      pagination: {\r\n        pageNumber: page.pageNumber,\r\n        pageSize: page.pageSize,\r\n      },\r\n      filters: { searchText: search },\r\n      statusId: Array.isArray(statusId) ? statusId.join(\",\") : String(statusId),\r\n      sortString: sortingStringObject,\r\n    };\r\n    // saveData('customerPagination', request);\r\n    getCustomers(request);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isListSuccess && isListeData) {\r\n      if (isListeData) {\r\n        const isResponsibleId = isListeData.dataSource.find((data) =>\r\n          validateResponsibleUserId(\r\n            data.responsibleUserId,\r\n            authState?.user?.userID\r\n          )\r\n        );\r\n        if (isResponsibleId) {\r\n          setIsResponsibleUser(true);\r\n          hasResponsibleUserhasAccess();\r\n        } else {\r\n          setIsResponsibleUser(false);\r\n        }\r\n        const modifyCustomerData = isListeData.dataSource.map((data) => ({\r\n          ...data,\r\n          taxId: data.taxId === \"\" ? \"-\" : data.taxId,\r\n        }));\r\n        setDataSource(modifyCustomerData);\r\n      }\r\n      if (isListeData.totalRecord) {\r\n        setTotalRowCount(isListeData.totalRecord);\r\n      }\r\n    }\r\n  }, [isListSuccess, isListeData]);\r\n\r\n  useEffect(() => {\r\n    if (isSuccessUpdateCustomer && updateCustomerData) {\r\n      ToastService.success(updateCustomerData.errorMessage);\r\n      const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n      getListApi(currentPageObject, molGridRef.current.generateSortingString());\r\n    }\r\n  }, [isSuccessUpdateCustomer, updateCustomerData]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      isSuccessUpdateCustomerInActiveStatus &&\r\n      updateCustomerInActiveStatusData\r\n    ) {\r\n      ToastService.success(updateCustomerInActiveStatusData.errorMessage);\r\n      const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n      getListApi(currentPageObject, molGridRef.current.generateSortingString());\r\n      handleToggleModal();\r\n    }\r\n  }, [isSuccessUpdateCustomerInActiveStatus, updateCustomerInActiveStatusData]);\r\n\r\n  useImperativeHandle(listRef, () => ({\r\n    getListApi,\r\n  }));\r\n\r\n  const getListApi = (pageObject, sortingString, isPreivewsValue) => {\r\n    const currentPageObject = pageObject || molGridRef.current.getCurrentPageObject();\r\n    const sortingStringObject = sortingString || molGridRef.current.generateSortingString();\r\n    if (isPreivewsValue) {\r\n      // molGridRef.current.handleGetPreviesPage(currentPageObject.pageNumber);\r\n    }\r\n    const request = {\r\n      pagination: {\r\n        pageNumber: currentPageObject.pageNumber,\r\n        pageSize: currentPageObject.pageSize,\r\n      },\r\n      filters: { searchText: search },\r\n      statusId: Array.isArray(statusId) ? statusId.join(\",\") : String(statusId),\r\n      sortString: sortingStringObject,\r\n    };\r\n    getCustomers(request);\r\n  };\r\n\r\n  const handleSorting = (shortString) => {\r\n    getListApi(molGridRef.current.getCurrentPageObject(), shortString);\r\n  };\r\n\r\n  const handleEditClick = (data) => {\r\n    const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n    const sortingStringObject = molGridRef.current.generateSortingString();\r\n    const paginationObj = {\r\n      pagination: {\r\n        pageNumber: currentPageObject.pageNumber,\r\n        pageSize: currentPageObject.pageSize,\r\n      },\r\n      filters: { searchText: search },\r\n      statusId: Array.isArray(statusId) ? statusId.join(\",\") : String(statusId),\r\n      sortString: sortingStringObject,\r\n    };\r\n    navigate(`/CustomerDetails/${encryptUrlData(data.customerId)}`, { state: { paginationObj, tabIndex } });\r\n  };\r\n\r\n  const handleGridCheckBoxChange = (fieldName, rowData) => {\r\n    if (childRef.current) {\r\n      childRef.current.callChildFunction(\r\n        rowData.customerId,\r\n        rowData.isSubCustomer ? rowData.isSubCustomer : false\r\n      );\r\n    }\r\n    setCustomerId(rowData.customerId);\r\n  };\r\n\r\n  const updateCustomerApproval = () => {\r\n    let req = {\r\n      customerId: customerID,\r\n    };\r\n    updateCustomerApproveStatus(req);\r\n  };\r\n\r\n  const handleToggleModal = () => {\r\n    setShowModal(false);\r\n    onReset();\r\n  };\r\n\r\n  const removeFields = () => {\r\n    const removeFields = [\"ResponsibleUserId\"];\r\n    const newFrom = { ...formData };\r\n    newFrom.formFields = formData.formFields.filter(\r\n      (field) => !removeFields.includes(field.id)\r\n    );\r\n    setFormData(newFrom);\r\n  };\r\n\r\n  const handlefreeze = (data) => {\r\n    removeFields();\r\n    setShowModal(true);\r\n    setCustomerId(data.customerId);\r\n    setStaticId(StatusEnums.Freeze);\r\n    setStatusFeild(StatusFeild.Freeze);\r\n  };\r\n\r\n  const handleDiseble = (data) => {\r\n    removeFields();\r\n    setShowModal(true);\r\n    setCustomerId(data.customerId);\r\n    setStaticId(StatusEnums.Disable);\r\n    setStatusFeild(StatusFeild.Disable);\r\n  };\r\n\r\n  const handleBlock = (data) => {\r\n    removeFields();\r\n    setShowModal(true);\r\n    setCustomerId(data.customerId);\r\n    setStaticId(StatusEnums.Block);\r\n    setStatusFeild(StatusFeild.Block);\r\n  };\r\n  const handleReject = (data) => {\r\n    const customerData = dataSource.find(\r\n      (customerItem) => customerItem.customerId === data.customerId\r\n    );\r\n    setShowModal(true);\r\n    setAssignRUser(false);\r\n    setCustomerId(data.customerId);\r\n    setStaticId(StatusEnums.Reject);\r\n    setStatusFeild(StatusFeild.Reject);\r\n    if (customerData.responsibleUserId) {\r\n      // removeFields();\r\n      // setAssignRUser(true);\r\n      const responsibleUserIds = customerData?.responsibleUserId\r\n        ?.split(\",\")\r\n        .map((id) => Number(id.trim()));\r\n      const formNew = { ...formData }\r\n      formNew.initialState = {\r\n        ...formNew.initialState,\r\n        responsibleUserId: responsibleUserIds,\r\n      };\r\n      setFormData(formNew);\r\n    }\r\n  };\r\n  const onReset = () => {\r\n    let restData = { ...reasonData };\r\n    restData.initialState = { ...formData };\r\n    setFormData(restData);\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    let custData = reasonRef.current.getFormData();\r\n    if (custData) {\r\n      let req = {\r\n        ...custData,\r\n        customerId: customerID,\r\n        statusId: staticId,\r\n        note: custData.inActiveReason,\r\n      };\r\n      updateCustomerInActiveStatus(req);\r\n      addCustomerNotes(req);\r\n      if (\r\n        !assignRUser &&\r\n        custData.responsibleUserId &&\r\n        custData.responsibleUserId\r\n      ) {\r\n        updateRUserData(custData.responsibleUserId);\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateRUserData = (value) => {\r\n    let req = {\r\n      customerId: customerID,\r\n      userId: String(value),\r\n    };\r\n    addEditResponsibleUserForCustomer(req);\r\n  };\r\n\r\n  const actionHandler = {\r\n    EDIT: handleEditClick,\r\n    ALLOWFREEZE: handlefreeze,\r\n    ALLOWDISABLE: handleDiseble,\r\n    ALLOWBLOCKED: handleBlock,\r\n    ALLOREJECT: handleReject,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div\r\n          className=\"col-xxl-12 col-xl-12 col-md-12 col-12\"\r\n          key={shouldRerenderFormCreator}\r\n        >\r\n          <CardSection\r\n            searchInput={true}\r\n            handleChange={handleChange}\r\n            searchInputName=\"Search By Customer Name, Tax Id , Email Address\"\r\n            searchFilter={searchStatusFilter}\r\n            handleChangeDropdown={handleChangeDropdown}\r\n            selectedOptions={selectedDrpvalues}\r\n            optionsValue={statusOptions}\r\n            isMultiSelect={true}\r\n            placeholder=\"Search by Status\"\r\n            isCardSection={true}\r\n            isdropdownOpen={true}\r\n            searchButton={true}\r\n            searchbuttonText=\"Search\"\r\n            buttonClassName=\"theme-button\"\r\n            searchTitleButtonClick={handleSearch}\r\n            clearButton={true}\r\n            clearTitleButtonClick={handleClear}\r\n            clearButtonText=\"Clear\"\r\n            clearButtonClassName=\"dark-btn\"\r\n            searchIconImg={AppIcons.SearchIcone}\r\n            searchTextWithIcon={true}\r\n            clearTextWithIcon={true}\r\n            clearIconImg={AppIcons.ClearIcone}\r\n            handleKeyPress={handleKeyPress}\r\n          >\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12 table-striped\">\r\n                {/* <div className=\"customer-list\"> */}\r\n                <FinalMolGrid\r\n                  ref={molGridRef}\r\n                  configuration={configFile}\r\n                  dataSource={dataSource}\r\n                  isLoading={isListLoading}\r\n                  pagination={{\r\n                    totalCount: totalRowCount,\r\n                    pageSize: 25,\r\n                    currentPage: 1,\r\n                  }}\r\n                  onPageChange={handlePageChange}\r\n                  onSorting={handleSorting}\r\n                  onActionChange={actionHandler}\r\n                  allowPagination={true}\r\n                  onColumnChange={handleGridCheckBoxChange}\r\n                />\r\n                {/* </div> */}\r\n              </div>\r\n            </div>\r\n          </CardSection>\r\n\r\n          <CenterModel\r\n            showModal={showModal}\r\n            handleToggleModal={handleToggleModal}\r\n            modalTitle={`${statusFeild} Reason`}\r\n            modelSizeClass=\"w-50s\"\r\n          >\r\n            <div className=\"row\">\r\n              <FormCreator config={formData} ref={reasonRef} {...formData} />\r\n              <div className=\"col-md-12 mt-2\">\r\n                <div className=\"d-flex align-item-end justify-content-end\">\r\n                  <div className=\"d-flex align-item-end\">\r\n                    <Buttons\r\n                      buttonTypeClassName=\"theme-button\"\r\n                      buttonText=\"Update\"\r\n                      isLoading={updateCustomerInActiveStatusCustomerLoading}\r\n                      onClick={handleUpdate}\r\n                    />\r\n                    <Buttons\r\n                      buttonTypeClassName=\"dark-btn ml-5\"\r\n                      buttonText=\"Cancel\"\r\n                      onClick={handleToggleModal}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </CenterModel>\r\n        </div>\r\n      </div>\r\n      <CustomerApproval\r\n        childRef={childRef}\r\n        getListApi={getListApi}\r\n        updateCustomerApproval={updateCustomerApproval}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nCustomersList.propTypes = {\r\n  statusId: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.string),\r\n    PropTypes.string,\r\n  ]).isRequired,\r\n  configFile: PropTypes.shape({\r\n    columns: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        defaultAction: PropTypes.shape({\r\n          allowActiveCustomer: PropTypes.bool,\r\n          allowBlocked: PropTypes.bool,\r\n          allowEdit: PropTypes.bool,\r\n          allowFreeze: PropTypes.bool,\r\n          allowDisable: PropTypes.bool,\r\n          allowUnblocked: PropTypes.bool,\r\n          allowUnfreeze: PropTypes.bool,\r\n        }),\r\n      })\r\n    ).isRequired,\r\n  }).isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n  search: PropTypes.string.isRequired,\r\n  handleChangeDropdown: PropTypes.func.isRequired,\r\n  statusOptions: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      value: PropTypes.number,\r\n      label: PropTypes.string,\r\n    })\r\n  ).isRequired,\r\n  selectedDrpvalues: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.number),\r\n    PropTypes.string,\r\n  ]).isRequired,\r\n  searchStatusFilter: PropTypes.bool.isRequired,\r\n  handleSearch: PropTypes.func.isRequired,\r\n  handleClear: PropTypes.func.isRequired,\r\n  shouldRerenderFormCreator: PropTypes.any,\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useContext, useEffect, useImperativeHandle, useRef, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport SwalAlert from '../../../../../../services/swalService/SwalService';\r\nimport BasicDetailContext from '../../../../../../utils/ContextAPIs/Customer/BasicDetailContext';\r\nimport { useSelector } from 'react-redux';\r\nimport { hasFunctionalPermission } from '../../../../../../utils/AuthorizeNavigation/authorizeNavigation';\r\nimport { securityKey } from '../../../../../../data/SecurityKey';\r\nimport CustomerApproval from '../../../../feature/cutomerApproval/CustomerApproval';\r\nimport ToastService from '../../../../../../services/toastService/ToastService';\r\nimport { AppIcons } from '../../../../../../data/appIcons';\r\nimport { StatusEnums } from '../../../../../../utils/Enums/StatusEnums';\r\nimport { encryptUrlData } from '../../../../../../services/CryptoService';\r\nimport CardSection from '../../../../../../components/ui/card/CardSection';\r\nimport CustomerListContext from '../../../../../../utils/ContextAPIs/Customer/CustomerListContext';\r\nimport { useGetCustomersMutation, useUpdateCustomerStatusMutation } from '../../../../../../app/services/basicdetailAPI';\r\nimport PropTypes from 'prop-types';\r\nimport FinalMolGrid from '../../../../../../components/FinalMolGrid/FinalMolGrid';\r\nimport { validateResponsibleUserId } from '../../../../../../utils/ResponsibleUser/validateRUser';\r\nimport { securityValidator } from '../../../../../../utils/CustomActionSecurity/actionsSecurityValidator';\r\n\r\nconst InActiveCustomersList = ({ statusId, configFile, handleChange,handleKeyPress, search, handleSearch, handleClear, shouldRerenderFormCreator, handleChangeDropdown, statusOptions, selectedDrpvalues, selectedStatusOptions, searchStatusFilter }) => {\r\n\r\n  const navigate = useNavigate();\r\n  const { confirm } = SwalAlert();\r\n  const childRef = useRef();\r\n  const molGridRef = useRef();\r\n  const [totalRowCount, setTotalRowCount] = useState(0);\r\n  const [dataSource, setDataSource] = useState();\r\n  const { DataRef } = useContext(CustomerListContext);\r\n  const authState = useSelector((state) => state.auth);\r\n  const { isResponsibleUser, setIsResponsibleUser } = useContext(BasicDetailContext);\r\n\r\n  const [\r\n    getCustomers,\r\n    { isLoading: isListLoading, isSuccess: isListSuccess, data: isListeData },\r\n  ] = useGetCustomersMutation();\r\n\r\n  const [updateCustomerStatus, { isLoading: updateCustomerStatusLoading, isSuccess: isSuccessUpdateCustomerStatus, data: updateCustomerStatusData }] = useUpdateCustomerStatusMutation();\r\n\r\n  const handlePageChange = (page) => {\r\n    const request = {\r\n      pagination: {\r\n        pageNumber: page.pageNumber,\r\n        pageSize: page.pageSize,\r\n      },\r\n      filters: { searchText: search },\r\n      statusId: Array.isArray(statusId) ? statusId.join(\",\") : String(statusId)\r\n    };\r\n    getCustomers(request);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (!isResponsibleUser) {\r\n      onCustomeActionHandler();\r\n    }\r\n  }, [configFile]);\r\n\r\n  const hasResponsibleUserhasAccess = () => {\r\n    onCustomeActionHandler();\r\n  }\r\n\r\n  const onCustomeActionHandler = () => {\r\n    const actionColumn = configFile?.columns.find((column) => column.name === \"Action\");\r\n    if (actionColumn) {\r\n      const hasFreeze = hasFunctionalPermission(securityKey.FREEZECUSTOMER);\r\n      //const hasActive = hasFunctionalPermission(securityKey.ACTIVECUSTOMER);\r\n      const hasUnBlock = hasFunctionalPermission(securityKey.UNBLOCKCUSTOMER);\r\n      //const hasUnFreeze = hasFunctionalPermission(securityKey.UNFREEZECUSTOMER);\r\n      const hasEdit = hasFunctionalPermission(securityKey.EDITCUSTOMER);\r\n\r\n      if (actionColumn.defaultAction) {\r\n        actionColumn.defaultAction.allowEdit = hasEdit?.hasAccess;\r\n      }\r\n      //actionColumn.customAction = securityValidator(hasBlock?.hasAccess, actionColumn.customAction, \"ALLOWBLOCKED\");\r\n      actionColumn.customAction = securityValidator(hasFreeze?.hasAccess, actionColumn.customAction, \"ALLOWFREEZE\");\r\n      //actionColumn.customAction = securityValidator(hasDisable?.hasAccess, actionColumn.customAction, \"ALLOWDISABLE\");\r\n      actionColumn.customAction = securityValidator(hasUnBlock?.hasAccess, actionColumn.customAction, \"ALLOWUNBLOCKED\");\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isListSuccess && isListeData) {\r\n      if (isListeData) {\r\n        setDataSource(isListeData.dataSource);\r\n        const isResponsibleId = isListeData.dataSource.find(data => validateResponsibleUserId(data.responsibleUserId, authState?.user?.userID));\r\n        if (isResponsibleId) {\r\n          setIsResponsibleUser(true);\r\n          hasResponsibleUserhasAccess();\r\n        } else {\r\n          setIsResponsibleUser(false);\r\n        }\r\n      }\r\n      if (isListeData.totalRecord) {\r\n        setTotalRowCount(isListeData.totalRecord);\r\n      }\r\n    }\r\n  }, [isListSuccess, isListeData]);\r\n\r\n  useEffect(() => {\r\n    if (isSuccessUpdateCustomerStatus && updateCustomerStatusData) {\r\n      ToastService.success(updateCustomerStatusData.errorMessage);\r\n      getListApi()\r\n    }\r\n  }, [isSuccessUpdateCustomerStatus, updateCustomerStatusData]);\r\n\r\n  useImperativeHandle(DataRef, () => ({\r\n    getListApi,\r\n  }));\r\n\r\n  const getListApi = () => {\r\n    const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n    const request = {\r\n      pagination: {\r\n        pageNumber: currentPageObject.pageNumber,\r\n        pageSize: currentPageObject.pageSize,\r\n      },\r\n      filters: { searchText: search },\r\n      statusId: selectedDrpvalues.length === 0 ? (Array.isArray(statusId) ? statusId.join(\",\") : String(statusId)) : (Array.isArray(selectedDrpvalues) ? selectedDrpvalues.join(\",\") : String(selectedDrpvalues))\r\n    };\r\n    getCustomers(request);\r\n  };\r\n\r\n\r\n  const handleUnfreeze = (data) => {\r\n\r\n    confirm(\r\n      \"Warning?\",\r\n      `Are you sure you want to unfreeze and change the status to approved?`,\r\n      \"Yes\",\r\n      \"Cancel\"\r\n    ).then((confirmed) => {\r\n      if (confirmed) {\r\n        handleUpdate(data)\r\n      }\r\n    });\r\n  }\r\n\r\n  const handleActiveCustomer = (data) => {\r\n    handleUpdate(data)\r\n  }\r\n\r\n  const handleUnBlock = (data) => {\r\n\r\n    confirm(\r\n      \"Warning?\",\r\n      `Are you sure you want to unblock and change the status to approved?`,\r\n      \"Yes\",\r\n      \"Cancel\"\r\n    ).then((confirmed) => {\r\n      if (confirmed) {\r\n        handleUpdate(data)\r\n      }\r\n    });\r\n  }\r\n\r\n  const handleUpdate = (data) => {\r\n    let req = {\r\n      customerId: data.customerId,\r\n      statusId: StatusEnums.Approved\r\n    }\r\n    updateCustomerStatus(req)\r\n  }\r\n\r\n  const handleEditClick = (data) => {\r\n    navigate(`/CustomerDetails/${encryptUrlData(data.customerId)}`, \"_blank\");\r\n  };\r\n\r\n  const actionHandler = {\r\n    ALLOWUNFREEZE: handleUnfreeze,\r\n    ACTIVECUSTOMER: handleActiveCustomer,\r\n    ALLOWUNBLOCKED: handleUnBlock,\r\n    EDIT: handleEditClick,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-xxl-12 col-xl-12 col-md-12 col-12\" key={shouldRerenderFormCreator}>\r\n          <CardSection\r\n            searchInput={true}\r\n            handleChange={handleChange}\r\n            searchInputName=\"Search By Customer Name, Tax Id , Email Address\"\r\n            searchFilter={searchStatusFilter}\r\n            handleChangeDropdown={handleChangeDropdown}\r\n            selectedOptions={selectedDrpvalues}\r\n            optionsValue={statusOptions}\r\n            isMultiSelect={true}\r\n            placeholder=\"Search by Status\"\r\n            isCardSection={true}\r\n            isdropdownOpen={true}\r\n            searchButton={true}\r\n            searchbuttonText=\"Search\"\r\n            buttonClassName=\"theme-button\"\r\n            searchTitleButtonClick={handleSearch}\r\n            clearButton={true}\r\n            clearTitleButtonClick={handleClear}\r\n            clearButtonText=\"Clear\"\r\n            clearButtonClassName=\"dark-btn\"\r\n            searchIconImg={AppIcons.SearchIcone}\r\n            searchTextWithIcon={true}\r\n            clearTextWithIcon={true}\r\n            clearIconImg={AppIcons.ClearIcone}\r\n            handleKeyPress={handleKeyPress}\r\n          >\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12 table-striped last-center\">\r\n                <div className='inactive-scroll-bar'>\r\n                  <FinalMolGrid\r\n                    ref={molGridRef}\r\n                    configuration={configFile}\r\n                    dataSource={dataSource}\r\n                    isLoading={isListLoading || updateCustomerStatusLoading}\r\n                    allowPagination={true}\r\n                    pagination={{\r\n                      totalCount: totalRowCount,\r\n                      pageSize: 25,\r\n                      currentPage: 1,\r\n                    }}\r\n                    onPageChange={handlePageChange}\r\n                    onActionChange={actionHandler}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </CardSection>\r\n        </div>\r\n      </div>\r\n      <CustomerApproval childRef={childRef} getListApi={getListApi} updateCustomerApproval={handleUpdate} />\r\n    </div>\r\n  )\r\n}\r\n\r\nInActiveCustomersList.propTypes = {\r\n  statusId: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.string),\r\n    PropTypes.string\r\n  ]).isRequired,\r\n  configFile: PropTypes.object.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n  search: PropTypes.string.isRequired,\r\n  handleSearch: PropTypes.func.isRequired,\r\n  handleClear: PropTypes.func.isRequired,\r\n  shouldRerenderFormCreator: PropTypes.bool.isRequired,\r\n  handleChangeDropdown: PropTypes.func.isRequired,\r\n  statusOptions: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  selectedDrpvalues: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.number),\r\n    PropTypes.string\r\n  ]).isRequired,\r\n  selectedStatusOptions: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.object),\r\n    PropTypes.string\r\n  ]).isRequired,\r\n  searchStatusFilter: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default InActiveCustomersList","import React, { useEffect, useRef, useState } from \"react\";\r\nimport useDebounce from \"../../../../../app/customHooks/useDebouce\";\r\nimport { ListSupplier } from \"../../../../../utils/Enums/commonEnums\";\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\nimport { ErrorMessage } from \"../../../../../data/appMessages\";\r\nimport { StatusEnums, StatusValue } from \"../../../../../utils/Enums/StatusEnums\";\r\nimport InActiveCustomersList  from \"../customerInActiveTabs/feature/InActiveCustomersList\";\r\nimport CardSection from \"../../../../../components/ui/card/CardSection\";\r\nimport CustomerListContext from \"../../../../../utils/ContextAPIs/Customer/CustomerListContext\";\r\nimport { AllInActiveCustomerGridConfig, BlockedInActiveCustomerGridConfig, DisabledInActiveCustomerGridConfig, FreezedInActiveCustomerGridConfig } from \"../../../../../common/features/component/CustomerSupplierListConfig/CustomerSupplierListConfig.data\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst InActiveCustomerTab = ({ statusId }) => {\r\n  const [activeTab, setActiveTab] = useState(\"0\");\r\n  const DataRef = useRef();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [statusOptions, setStatusOptions] = useState([]);\r\n  const [selectedDrpvalues, setSelectedDrpvalues] = useState(\"\")\r\n  const [selectedStatusOptions, setSelectedStatusOptions] = useState(\"\");\r\n  const [shouldRerenderFormCreator, setShouldRerenderFormCreator] = useState(false);\r\n\r\n  const [allManageData, setAllManageData] = useState(AllInActiveCustomerGridConfig);\r\n  const [freezeManageData, setFreezeManageData] = useState(FreezedInActiveCustomerGridConfig);\r\n  const [blockManageData, setBlockManageData] = useState(BlockedInActiveCustomerGridConfig);\r\n  const [disableManageData, setDisableManageData] = useState(DisabledInActiveCustomerGridConfig);\r\n  const debouncedSearch = useDebounce(search, 300);\r\n\r\n  const handleTabClick = (tabIndex) => {\r\n    setActiveTab(tabIndex.toString());\r\n  };\r\n\r\n  const getListApi = () => {\r\n    if (DataRef.current) {\r\n      DataRef.current.getListApi();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSearch(\"\");\r\n    setSelectedDrpvalues(\"\");\r\n    const updateManageData = () => {\r\n      switch (activeTab) {\r\n        case \"0\":\r\n          setAllManageData({\r\n            ...AllInActiveCustomerGridConfig,\r\n            columns: AllInActiveCustomerGridConfig.columns.filter(column => column.id !== ListSupplier.value)\r\n          });\r\n          break;\r\n        case \"1\":\r\n          setFreezeManageData({\r\n            ...FreezedInActiveCustomerGridConfig,\r\n            columns: FreezedInActiveCustomerGridConfig.columns.filter(column => column.id !== ListSupplier.value)\r\n          });\r\n          break;\r\n        case \"2\":\r\n          setBlockManageData({\r\n            ...BlockedInActiveCustomerGridConfig,\r\n            columns: BlockedInActiveCustomerGridConfig.columns.filter(column => column.id !== ListSupplier.value)\r\n          });\r\n          break;\r\n        case \"3\":\r\n          setDisableManageData({\r\n            ...BlockedInActiveCustomerGridConfig,\r\n            columns: BlockedInActiveCustomerGridConfig.columns.filter(column => column.id !== ListSupplier.value)\r\n          });\r\n          break;\r\n        default:\r\n          setAllManageData(AllInActiveCustomerGridConfig);\r\n      }\r\n    };\r\n\r\n    updateManageData(); // Initial update based on activeTab\r\n    getListApi(); // Fetch data based on activeTab (if needed)\r\n  }, [activeTab]);\r\n\r\n  const handleSearch = () => {\r\n    if (search.length >= 3 || selectedDrpvalues.length > 0) {\r\n      getListApi();\r\n    } else {\r\n      ToastService.warning(ErrorMessage.CommonErrorMessage)\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n   \r\n      setSearch(event.target.value.trim());   \r\n  };\r\n\r\n  const handleKeyPress=(event)=>{\r\n    if (event.code === \"Enter\") {\r\n      handleSearch();\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    if (StatusValue) {\r\n      const statusListData = StatusValue.filter((data) => data.value !== 1 && data.value !== 2 && data.value !== 3 && data.value !== 7).map((item) => ({\r\n        value: item.value,\r\n        label: item.label,\r\n      }));\r\n      setStatusOptions(statusListData);\r\n    }\r\n  }, []);\r\n\r\n  const handleChangeDropdown = (selectedOptions) => {\r\n    const selectedValues = selectedOptions.map(option => option.value);\r\n    if (selectedValues.length > 0) {\r\n      setSelectedDrpvalues(selectedValues);\r\n      setSelectedStatusOptions(selectedValues);\r\n    } else {\r\n      setSelectedDrpvalues(\"\");\r\n      setSelectedStatusOptions(\"\");\r\n    }\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setSelectedDrpvalues(\"\");\r\n    setSelectedStatusOptions(\"\");\r\n    setSearch(\"\");\r\n    setShouldRerenderFormCreator((prevState) => !prevState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (debouncedSearch === \"\" && selectedDrpvalues === \"\") {\r\n      getListApi();\r\n    }\r\n  }, [debouncedSearch , selectedDrpvalues]);\r\n\r\n  const tabs = [\r\n    {\r\n      sMenuItemCaption: \"ALL\",\r\n      component: (\r\n        <div className=\"mt-2\">\r\n          <InActiveCustomersList\r\n            statusId={statusId}\r\n            configFile={allManageData}\r\n            search={debouncedSearch}\r\n            handleChange={handleChange}\r\n            statusOptions={statusOptions}\r\n            selectedStatusOptions={selectedStatusOptions}\r\n            handleChangeDropdown={handleChangeDropdown}\r\n            selectedDrpvalues={selectedDrpvalues}\r\n            searchStatusFilter={true}\r\n            handleSearch={handleSearch}\r\n            handleClear={handleClear}\r\n            shouldRerenderFormCreator={shouldRerenderFormCreator}\r\n            handleKeyPress={handleKeyPress}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      sMenuItemCaption: \"FREEZED\",\r\n      component: (\r\n        <div className=\"mt-2\">\r\n          <InActiveCustomersList\r\n            statusId={StatusEnums.Freeze}\r\n            configFile={freezeManageData}\r\n            search={debouncedSearch}\r\n            handleChange={handleChange}\r\n            statusOptions={statusOptions}\r\n            selectedStatusOptions={selectedStatusOptions}\r\n            handleChangeDropdown={handleChangeDropdown}\r\n            selectedDrpvalues={selectedDrpvalues}\r\n            searchStatusFilter={false}\r\n            handleSearch={handleSearch}\r\n            handleClear={handleClear}\r\n            shouldRerenderFormCreator={shouldRerenderFormCreator}\r\n            handleKeyPress={handleKeyPress}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      sMenuItemCaption: \"BLOCK\",\r\n      component: (\r\n        <div className=\"mt-2\">\r\n          <InActiveCustomersList\r\n            statusId={StatusEnums.Block}\r\n            configFile={blockManageData}\r\n            search={debouncedSearch}\r\n            handleChange={handleChange}\r\n            statusOptions={statusOptions}\r\n            selectedStatusOptions={selectedStatusOptions}\r\n            handleChangeDropdown={handleChangeDropdown}\r\n            selectedDrpvalues={selectedDrpvalues}\r\n            searchStatusFilter={false}\r\n            handleSearch={handleSearch}\r\n            handleClear={handleClear}\r\n            shouldRerenderFormCreator={shouldRerenderFormCreator}\r\n            handleKeyPress={handleKeyPress}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      sMenuItemCaption: \"DISABLE\",\r\n      component: (\r\n        <div className=\"mt-2\">\r\n          <InActiveCustomersList\r\n            statusId={StatusEnums.Disable}\r\n            configFile={disableManageData}\r\n            search={debouncedSearch}\r\n            handleChange={handleChange}\r\n            statusOptions={statusOptions}\r\n            selectedStatusOptions={selectedStatusOptions}\r\n            handleChangeDropdown={handleChangeDropdown}\r\n            selectedDrpvalues={selectedDrpvalues}\r\n            searchStatusFilter={false}\r\n            handleSearch={handleSearch}\r\n            handleClear={handleClear}\r\n            shouldRerenderFormCreator={shouldRerenderFormCreator}\r\n            handleKeyPress={handleKeyPress}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <CustomerListContext.Provider value={{ DataRef }}>\r\n        <div className=\"main-inactive-grid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-xxl-12 col-xl-12 col-md-12 col-12 other-info-tab\">\r\n              <CardSection\r\n              //   cardTitle=\"Other Information\"\r\n              >\r\n                \r\n                  {tabs && tabs.length > 0 &&\r\n                    <div className=\"row\">\r\n                      <div className=\"col-12\">\r\n                        <div className=\"tab-sub-section mb-0\">\r\n                          <div className=\"tab-sub-header\">\r\n                            {tabs && tabs.map((tab, index) => (\r\n                              <button\r\n                                key={index}\r\n                                className={activeTab === index.toString() ? \"active\" : \"\"}\r\n                                onClick={() => handleTabClick(index, tab.sPage)}\r\n                              >\r\n                                {tab.sMenuItemCaption}\r\n                              </button>\r\n                            ))}\r\n                          </div>\r\n                          {activeTab !== -1 && tabs[activeTab].component && (\r\n                            <div className=\"tab-sub-content\">\r\n                              <div className=\"tab-sub-body-section\">\r\n                                {tabs[activeTab].component}\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                \r\n              </CardSection>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CustomerListContext.Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nInActiveCustomerTab.propTypes = {\r\n  statusId: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default InActiveCustomerTab;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport useDebounce from \"../../../../../app/customHooks/useDebouce\";\r\nimport { ListSupplier } from \"../../../../../utils/Enums/commonEnums\";\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\nimport { ErrorMessage } from \"../../../../../data/appMessages\";\r\nimport { StatusEnums, StatusValue } from \"../../../../../utils/Enums/StatusEnums\";\r\nimport { CustomersList } from \"./feature/CustomerList\";\r\nimport CardSection from \"../../../../../components/ui/card/CardSection\";\r\nimport { BasicDetailContextProvider } from \"../../../../../utils/ContextAPIs/Customer/BasicDetailContext\";\r\nimport CustomerListContext from \"../../../../../utils/ContextAPIs/Customer/CustomerListContext\";\r\nimport { AllCustomerGridConfig, ApprovedCustomerGridConfig, PendingCustomerGridConfig, RejectedCustomerGridConfig, SubmittedCustomerGridConfig } from \"../../../../../common/features/component/CustomerSupplierListConfig/CustomerSupplierListConfig.data\";\r\nimport InActiveCustomerTab from \"../customerInActiveTabs/InActiveCustomerTab\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst Customers = () => {\r\n  const listRef = useRef();\r\n  const location = useLocation();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [activeTab, setActiveTab] = useState(\"0\");\r\n  const [statusOptions, setStatusOptions] = useState([]);\r\n  const [selectedDrpvalues, setSelectedDrpvalues] = useState(\"\")\r\n  const [selectedStatusOptions, setSelectedStatusOptions] = useState(\"\");\r\n  const [allManageData, setAllManageData] = useState(AllCustomerGridConfig);\r\n  const [pendingManageData, setPendingManageData] = useState(PendingCustomerGridConfig);\r\n  const [submittedManageData, setSubmittedManageData] = useState(SubmittedCustomerGridConfig);\r\n  const [approvedManageData, setApprovedManageData] = useState(ApprovedCustomerGridConfig);\r\n  const [rejectedCManageData, setRejectedCManageData] = useState(RejectedCustomerGridConfig);\r\n  const [shouldRerenderFormCreator, setShouldRerenderFormCreator] = useState(false);\r\n\r\n  const debouncedSearch = useDebounce(search, 300);\r\n\r\n  const handleTabClick = (tabIndex) => {\r\n    setActiveTab(tabIndex.toString());\r\n  };\r\n\r\n  const getListApi = () => {\r\n    handleStorePaginationObj();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSearch(\"\");\r\n    setSelectedDrpvalues(\"\");\r\n    setShouldRerenderFormCreator((prevState) => !prevState);\r\n    // const selectedTab = getData(\"selectedTab\");\r\n    const tabIndex = activeTab;\r\n    const updateManageData = () => {\r\n      switch (activeTab) {\r\n        case \"0\":\r\n          setAllManageData({\r\n            ...AllCustomerGridConfig,\r\n            columns: AllCustomerGridConfig.columns.filter(column => column.id !== ListSupplier.value)\r\n          });\r\n          break;\r\n        case \"1\":\r\n          setPendingManageData({\r\n            ...PendingCustomerGridConfig,\r\n            columns: PendingCustomerGridConfig.columns.filter(column => column.id !== ListSupplier.value)\r\n          });\r\n          break;\r\n        case \"2\":\r\n          setSubmittedManageData({\r\n            ...SubmittedCustomerGridConfig,\r\n            columns: SubmittedCustomerGridConfig.columns.filter(column => column.id !== ListSupplier.value)\r\n          });\r\n          break;\r\n        case \"3\":\r\n          setApprovedManageData({\r\n            ...ApprovedCustomerGridConfig,\r\n            columns: ApprovedCustomerGridConfig.columns.filter(column => column.id !== ListSupplier.value)\r\n          });\r\n          break;\r\n        case \"4\":\r\n          setAllManageData({\r\n            columns: []\r\n          });\r\n          break;\r\n        case \"5\":\r\n          setRejectedCManageData({\r\n            ...RejectedCustomerGridConfig,\r\n            columns: RejectedCustomerGridConfig.columns.filter(column => column.id !== ListSupplier.value)\r\n          });\r\n          break;\r\n        default:\r\n          setAllManageData(AllCustomerGridConfig);\r\n      }\r\n    };\r\n\r\n    updateManageData(); // Initial update based on activeTab\r\n    getListApi(); // Fetch data based on activeTab (if needed)\r\n    // handleTabClick(tabIndex);\r\n  }, [activeTab]);\r\n\r\n  const handleStorePaginationObj = () => {\r\n    const pagination = location.state?.paginationObj;\r\n    if (listRef.current) {\r\n      if (pagination) {\r\n        const tabIndex = location.state?.tabIndex;\r\n        listRef.current.getListApi(pagination.pagination, pagination.sortString, true);\r\n        handleTabClick(tabIndex);\r\n      } else {\r\n        listRef.current.getListApi();\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleSearch = () => {\r\n    if (search.length >= 3 || selectedDrpvalues.length > 0) {\r\n      handleStorePaginationObj();\r\n    } else {\r\n      ToastService.warning(ErrorMessage.CommonErrorMessage)\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setSearch(event.target.value.trim());\r\n  };\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.code === \"Enter\") {\r\n      handleSearch();\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    if (StatusValue) {\r\n      const statusListData = StatusValue.map((item) => ({\r\n        value: item.value,\r\n        label: item.label,\r\n      }));\r\n      setStatusOptions(statusListData);\r\n    }\r\n  }, [StatusValue]);\r\n\r\n  const handleChangeDropdown = (selectedOptions) => {\r\n    const selectedValues = selectedOptions.map(option => option.value);\r\n    if (selectedValues.length > 0) {\r\n      setSelectedDrpvalues(selectedValues);\r\n      setSelectedStatusOptions(selectedValues);\r\n    } else {\r\n      setSelectedDrpvalues(\"\");\r\n      setSelectedStatusOptions(\"\");\r\n    }\r\n  }\r\n\r\n  const handleClear = () => {\r\n    setSelectedDrpvalues(\"\");\r\n    setSelectedStatusOptions(\"\");\r\n    setSearch(\"\");\r\n    setShouldRerenderFormCreator((prevState) => !prevState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (debouncedSearch === \"\" && selectedDrpvalues === \"\") {\r\n      handleStorePaginationObj();\r\n    }\r\n  }, [debouncedSearch, selectedDrpvalues]);\r\n\r\n  const tabs = [\r\n    {\r\n      sMenuItemCaption: \"ALL\",\r\n      component: (\r\n        <div className=\"mt-2 customer-list-all\">\r\n          <CustomersList\r\n            statusId={selectedDrpvalues}\r\n            configFile={allManageData}\r\n            search={debouncedSearch}\r\n            handleChange={handleChange}\r\n            statusOptions={statusOptions}\r\n            selectedStatusOptions={selectedStatusOptions}\r\n            handleChangeDropdown={handleChangeDropdown}\r\n            selectedDrpvalues={selectedDrpvalues}\r\n            searchStatusFilter={true}\r\n            handleSearch={handleSearch}\r\n            handleClear={handleClear}\r\n            shouldRerenderFormCreator={shouldRerenderFormCreator}\r\n            handleKeyPress={handleKeyPress}\r\n            tabIndex={0}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      sMenuItemCaption: \"PENDING\",\r\n      component: (\r\n        <div className=\"mt-2 customer-list-all\">\r\n          <CustomersList\r\n            statusId={StatusEnums.Pending}\r\n            configFile={pendingManageData}\r\n            search={debouncedSearch}\r\n            handleChange={handleChange}\r\n            statusOptions={statusOptions}\r\n            selectedStatusOptions={selectedStatusOptions}\r\n            handleChangeDropdown={handleChangeDropdown}\r\n            selectedDrpvalues={selectedDrpvalues}\r\n            searchStatusFilter={false}\r\n            handleSearch={handleSearch}\r\n            handleClear={handleClear}\r\n            shouldRerenderFormCreator={shouldRerenderFormCreator}\r\n            handleKeyPress={handleKeyPress}\r\n            tabIndex={1}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      sMenuItemCaption: \"SUBMITTED\",\r\n      component: (\r\n        <div className=\"mt-2 customer-list-submitted customer-list-all\">\r\n          <CustomersList\r\n            statusId={StatusEnums.Submitted}\r\n            configFile={submittedManageData}\r\n            search={debouncedSearch}\r\n            handleChange={handleChange}\r\n            statusOptions={statusOptions}\r\n            selectedStatusOptions={selectedStatusOptions}\r\n            handleChangeDropdown={handleChangeDropdown}\r\n            selectedDrpvalues={selectedDrpvalues}\r\n            searchStatusFilter={false}\r\n            handleSearch={handleSearch}\r\n            handleClear={handleClear}\r\n            shouldRerenderFormCreator={shouldRerenderFormCreator}\r\n            handleKeyPress={handleKeyPress}\r\n            tabIndex={2}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      sMenuItemCaption: \"APPROVED\",\r\n      component: (\r\n        <div className=\"mt-2 customer-list-all\">\r\n          <CustomersList\r\n            statusId={StatusEnums.Approved}\r\n            configFile={approvedManageData}\r\n            search={debouncedSearch}\r\n            handleChange={handleChange}\r\n            statusOptions={statusOptions}\r\n            selectedStatusOptions={selectedStatusOptions}\r\n            handleChangeDropdown={handleChangeDropdown}\r\n            selectedDrpvalues={selectedDrpvalues}\r\n            searchStatusFilter={false}\r\n            handleSearch={handleSearch}\r\n            handleClear={handleClear}\r\n            shouldRerenderFormCreator={shouldRerenderFormCreator}\r\n            handleKeyPress={handleKeyPress}\r\n            tabIndex={3}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      sMenuItemCaption: \"INACTIVE\",\r\n      component: (\r\n        <div className=\"mt-2 inactive-list-sec\">\r\n          <InActiveCustomerTab\r\n            statusId={[\r\n              StatusEnums.Freeze,\r\n              StatusEnums.Block,\r\n              StatusEnums.Disable,\r\n            ]}\r\n            tabIndex={4}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      sMenuItemCaption: \"REJECTED\",\r\n      component: (\r\n        <div className=\"mt-2 customer-list-all\">\r\n          <CustomersList\r\n            statusId={StatusEnums.Reject}\r\n            configFile={rejectedCManageData}\r\n            search={debouncedSearch}\r\n            handleChange={handleChange}\r\n            statusOptions={statusOptions}\r\n            selectedStatusOptions={selectedStatusOptions}\r\n            handleChangeDropdown={handleChangeDropdown}\r\n            selectedDrpvalues={selectedDrpvalues}\r\n            searchStatusFilter={false}\r\n            handleSearch={handleSearch}\r\n            handleClear={handleClear}\r\n            shouldRerenderFormCreator={shouldRerenderFormCreator}\r\n            handleKeyPress={handleKeyPress}\r\n            tabIndex={5}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n\r\n  return (\r\n    <BasicDetailContextProvider>\r\n      <CustomerListContext.Provider value={{ listRef }}>\r\n        <div className=\"main-customer-grid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-xxl-12 col-xl-12 col-md-12 col-12 other-info-tab main-tab-header\">\r\n              <CardSection\r\n              // cardTitle=\"Other Information\"\r\n              >\r\n                <>\r\n                  {tabs && tabs.length > 0 && (\r\n                    <div className=\"row\">\r\n                      <div className=\"col-12\">\r\n                        <div className=\"tab-section mb-0\">\r\n                          <div className=\"tab-header\">\r\n                            {tabs &&\r\n                              tabs.map((tab, index) => (\r\n                                <button\r\n                                  key={index}\r\n                                  className={\r\n                                    activeTab === index.toString()\r\n                                      ? \"active\"\r\n                                      : \"\"\r\n                                  }\r\n                                  onClick={() =>\r\n                                    handleTabClick(index, tab.sPage)\r\n                                  }\r\n                                >\r\n                                  {tab.sMenuItemCaption}\r\n                                </button>\r\n                              ))}\r\n                          </div>\r\n                          {activeTab !== -1 && tabs[activeTab].component && (\r\n                            <div className=\"tab-content\">\r\n                              <div className=\"tab-body-section\">\r\n                                {tabs[activeTab].component}\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </>\r\n              </CardSection>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CustomerListContext.Provider>\r\n    </BasicDetailContextProvider>\r\n  );\r\n};\r\n\r\nexport default Customers;\r\n","import { BasicDetailContextProvider } from \"../../../utils/ContextAPIs/Customer/BasicDetailContext\";\r\nimport Customers from \"../../customerDetail/customerGrid/feature/customerList/Customers\";\r\n\r\nconst CustomerGrid = () => {\r\n    return (\r\n        <BasicDetailContextProvider>\r\n            <Customers />\r\n        </BasicDetailContextProvider>\r\n    )\r\n}\r\n\r\nexport default CustomerGrid;","import { SuccessMessage } from \"../../../../../data/appMessages\";\r\nimport { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\nimport { GridColumnType } from \"../../../../../data/gridColumnType\";\r\nimport { getLabelClass } from \"../../../../../utils/StatusColors/StatusColors\";\r\n\r\nexport const excludingRoles = [\"Admin\", \"manager\"];\r\n\r\nexport const customerbasicData = {\r\n  initialState: {\r\n    name: \"\",\r\n    groupTypeId: 1,\r\n    countryId: 233,\r\n    territoryId: 2,\r\n    emailAddress: \"\",\r\n    website: \"\",\r\n    note: \"\",\r\n    isSubCustomer: false,\r\n    taxId: \"\",\r\n    isBuyingForThirdParty: false,\r\n    responsibleUserId: \"\",\r\n    customerNoteId: \"\",\r\n    incotermId: 11,\r\n    attachment: \"\",\r\n    base64File: \"\",\r\n    storagePath: \"\",\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"attachment\",\r\n      lable: \"Customer Logo \",\r\n      Field_Name: \"Attachment\",\r\n      fieldType: FormFieldTypes.IMAGE,\r\n      dataField: \"attachment\",\r\n      fieldSetting: {\r\n        placeholder: \"Upload Attachment\",\r\n        allowSpace: true,\r\n        isImageUpload: true,\r\n        isButtonVisible: true,\r\n        isCustomButtonVisible: false,\r\n        acceptedFiles: \".png , .jpg \",\r\n      },\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-4 col-xl-4 col-md-4 col-12 mb-input mb-0 custom-file-upload-section validation-image-uploader customer-logo-sec\",\r\n      },\r\n    },\r\n    // {\r\n    //   id: \"\",\r\n    //   lable: \"\",\r\n    //   Field_Name: \"\",\r\n    //   dataField: \"\",\r\n    //   style: {\r\n    //     containerCss: \"col-xxl-4 col-xl-4 col-md-4 col-4 col-4 remove-line\",\r\n    //   },\r\n    // },\r\n    {\r\n      id: \"name\",\r\n      lable: \"Customer Name \",\r\n      Field_Name: \"Customer Name\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"name\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Customer Name\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n        exemptBoundarySpaces: true,\r\n      },\r\n      validation: [{ type: \"require\" }, { type: \"uniqueName\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-8 col-xl-8 col-md-8 col-12 mb-input\",\r\n      },\r\n      inputButtonGroupConfig: {\r\n        isPrimaryButtonVisible: false,\r\n        // primaryButtonText: 'Verify',\r\n        infoButtonConfig: {\r\n          isInfoButtonVisible: true,\r\n          infoButtonIcon: \"fa-search\",\r\n          infoButtonTooltip: \"Customer Information\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      id: \"emailAddress\",\r\n      lable: \"Email \",\r\n      Field_Name: \"Email\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"emailAddress\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Email\",\r\n        allowSpace: false,\r\n        maxLength: 65,\r\n        exemptBoundarySpaces: true,\r\n      },\r\n      validation: [{ type: \"require\" }, { type: \"email\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"website\",\r\n      lable: \"Website \",\r\n      Field_Name: \"Website\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"website\",\r\n      fieldSetting: {\r\n        placeholder: \"https://www.xyz.com\",\r\n        allowSpace: false,\r\n        maxLength: 250,\r\n      },\r\n      validation: [{ type: \"require\" }, { type: \"website\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n\r\n    {\r\n      id: \"groupTypeId\",\r\n      lable: \"Group Type \",\r\n      Field_Name: \"Group Type\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"groupTypeId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Group Type\",\r\n        isEnableOnChange: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-4 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n\r\n    {\r\n      id: \"countryId\",\r\n      lable: \"Country \",\r\n      Field_Name: \"Country\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"countryId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Country\",\r\n        isEnableOnChange: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-4 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"territoryId\",\r\n      lable: \"Territory \",\r\n      Field_Name: \"Territory\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"territoryId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Territory\",\r\n        isEnableOnChange: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-4 col-md-4 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"incotermId\",\r\n      lable: \"Incoterm\",\r\n      Field_Name: \"Incoterm\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"incotermId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Incoterm\",\r\n        isEnableOnChange: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-4 col-md-4 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"taxId\",\r\n      lable: \"Tax Id \",\r\n      Field_Name: \"Tax Id\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"taxId\",\r\n      fieldSetting: {\r\n        placeholder: \"Tax Id\",\r\n        allowSpace: false,\r\n        minLength: 10,\r\n        maxLength: 10,\r\n        exemptBoundarySpaces: true,\r\n      },\r\n      inputIcon: {\r\n        isIconShow: true,\r\n        faIcon: \"fa-info-circle\",\r\n        message: SuccessMessage.DefaultUSATaxId,\r\n      },\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-4 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"responsibleUserId\",\r\n      lable: \"Responsible User \",\r\n      Field_Name: \"Responsible User\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"responsibleUserId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Responsible User\",\r\n        isEnableOnChange: true,\r\n        isDisabled: false,\r\n      },\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-4 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"isBuyingForThirdParty\",\r\n      lable: \"Is Buying for Third Party\",\r\n      Field_Name: \"Is Buying for Third Party\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isBuyingForThirdParty\",\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-2 col-xl-2 col-md-3 col-12 pt-2 mb-input margin-top-checkbox mt-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"isSubCustomer\",\r\n      lable: \"Is Sub Customer\",\r\n      Field_Name: \"Is Sub Customer\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isSubCustomer\",\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-2 col-xl-2 col-md-3 col-12 md-pt-0 pt-2 mb-input margin-top-checkbox margin-left0-checkbox mt-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"note\",\r\n      lable: \"Notes \",\r\n      Field_Name: \"Notes\",\r\n      fieldType: FormFieldTypes.CKEDITOR,\r\n      dataField: \"note\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Notes\",\r\n        maxLength: 1000,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-5 col-xl-5 col-md-12 col-12 mb-input mb-0\",\r\n      },\r\n    },\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false,\r\n  },\r\n};\r\n\r\nexport const basicInfoData = {\r\n  columns: [\r\n    {\r\n      name: \"Name\",\r\n      fieldName: \"name\",\r\n      width: \"15%\",\r\n      // allowShort: true,\r\n    },\r\n    {\r\n      name: \"Tax Id\",\r\n      fieldName: \"taxId\",\r\n      width: \"15%\",\r\n      // allowShort: true,\r\n    },\r\n    {\r\n      name: \"Country\",\r\n      fieldName: \"countryName\",\r\n      width: \"15%\",\r\n      // allowShort: true,\r\n    },\r\n\r\n    {\r\n      name: \"Email\",\r\n      fieldName: \"emailAddress\",\r\n      width: \"15%\",\r\n      // allowShort: true,\r\n    },\r\n    {\r\n      name: \"Group Type\",\r\n      fieldName: \"groupType\",\r\n      width: \"15%\",\r\n      // allowShort: true,\r\n    },\r\n    {\r\n      name: \"Status\",\r\n      fieldName: \"status\",\r\n      allowShort: false,\r\n      colType: GridColumnType.LABLE,\r\n      width: \"15%\",\r\n      colSettings: {\r\n        valueField: \"status\",\r\n        getLableClass: getLabelClass,\r\n      },\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      width: \"10%\",\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n        allowDisable: false,\r\n      },\r\n    },\r\n  ],\r\n};\r\n","import React, { forwardRef, useContext, useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\n//** Libs's */\r\nimport { ApprovalEnum, OwnerType } from \"../../../../utils/Enums/commonEnums\";\r\n//** Service's */\r\nimport {\r\n    useGetValidateCheckListMutation, useLazyGetCustomerAddresssInfoByIdQuery, useLazyGetCustomerContactInfoByIdQuery,\r\n    useLazyGetCustomerFinacialSettingQuery, useLazyGetCustomersInfoByIdQuery\r\n} from \"../../../../app/services/ApprovalAPI\";\r\nimport PropTypes from 'prop-types';\r\nimport BasicDetailContext from \"../../../../utils/ContextAPIs/Customer/BasicDetailContext\";\r\n//** Component's */\r\nconst ApprovalCheckList = React.lazy(() => import(\"../../../../components/ApprovalCheckList/ApprovalCheckList\"));\r\nconst ApprovalValidateData = React.lazy(() => import(\"../../../../components/ApprovalCheckList/feature/approvalValidateData/ApprovalValidateData\"));\r\n\r\n\r\nconst CustomerApproval = forwardRef(({ childRef, getListApi, updateCustomerApproval, responsibleUserIds, isDetailPage, isAddPagePage, setSelectedStatus, onRejectedCustomerFromApproval }) => {\r\n\r\n    const parentRef = useRef();\r\n    const [customerId, setCustomerId] = useState(0);\r\n    const [isSubCustomer, setIsSubCustomer] = useState(false);\r\n    const [isShowApproval, setIsShowApproval] = useState(false);\r\n    const [validateCheckList, setValidateCheckList] = useState([]);\r\n    const [isShowBothButton, setIsShowBothButton] = useState(false);\r\n    const [isShowValidateModal, setIsShowValidateModal] = useState(false);\r\n    const [showApprovalCheckList, setShowApprovalCheckList] = useState(false);\r\n    const { setRejectStatusId } = useContext(BasicDetailContext);\r\n\r\n    const [getValidateCheckList, { isLoading: isGetCheckListLoading, isSuccess: isGetCheckListSuccess, data: isGetCheckListData }] = useGetValidateCheckListMutation();\r\n\r\n    //** Approval CheckList Modal*/\r\n    const handleShowApprovalList = () => {\r\n        setIsShowApproval(!isShowApproval);\r\n    };\r\n\r\n    const onSidebarApprovalClose = () => {\r\n        if (!isDetailPage) {\r\n            getListApi();\r\n        }\r\n        setIsShowApproval(!isShowApproval);\r\n    };\r\n    const onSuccessApprovalClose = () => {\r\n        setIsShowApproval(!isShowApproval);\r\n        updateCustomerApproval();\r\n    };\r\n\r\n    //** Validate check list Modal */\r\n    const handleShowValidateModal = (customerId, isSubCustomer, isShowApprovalCheckList = true, isShowBothButton = true) => {\r\n        setIsShowValidateModal(!isShowValidateModal);\r\n        let request = {\r\n            customerId: customerId,\r\n            supplierId: 0,\r\n            isSubCustomer: isSubCustomer\r\n        }\r\n        setIsSubCustomer(isSubCustomer);\r\n        getValidateCheckList(request);\r\n        setCustomerId(customerId);\r\n        setShowApprovalCheckList(isShowApprovalCheckList);\r\n        setIsShowBothButton(isShowBothButton);\r\n    };\r\n\r\n    const handleValidateModalClose = () => {\r\n        setValidateCheckList([]);\r\n        setIsShowValidateModal(!isShowValidateModal);\r\n        if (!isDetailPage && !isAddPagePage) {\r\n            getListApi();\r\n        }\r\n    };\r\n    const handleModalClose = () => {\r\n        setIsShowValidateModal(!isShowValidateModal);\r\n    }\r\n\r\n    const handleDone = () => {\r\n        if (parentRef.current) {\r\n            parentRef.current.validateApprovalCheckList();\r\n        }\r\n    }\r\n\r\n    const handleValidateSuccess = () => {\r\n        handleModalClose();\r\n        showApprovalCheckList && handleShowApprovalList();\r\n        !showApprovalCheckList && updateCustomerApproval();\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isGetCheckListSuccess && isGetCheckListData) {\r\n            setValidateCheckList(isGetCheckListData);\r\n        }\r\n    }, [isGetCheckListSuccess, isGetCheckListData])\r\n\r\n    //** Use Imperative Handle */\r\n    useImperativeHandle(childRef, () => ({\r\n        callChildFunction: handleShowValidateModal\r\n    }))\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ApprovalValidateData parentRef={parentRef} handleValidateSuccess={handleValidateSuccess} showModal={isShowValidateModal} isSupplierApproval={false}\r\n                isGetCheckListLoading={isGetCheckListLoading} mainId={customerId} isDetailPage={isDetailPage} handleShowValidateModal={handleShowValidateModal}\r\n                handleValidateModalClose={handleValidateModalClose} handleDone={handleDone} validateCheckList={validateCheckList ? validateCheckList : null} isShowBothButton={isShowBothButton} />\r\n            {showApprovalCheckList &&\r\n                <ApprovalCheckList onSidebarClose={onSidebarApprovalClose} isModelOpen={isShowApproval} mainId={customerId} onSuccessApprovalClose={onSuccessApprovalClose}\r\n                    ApprovalData={isSubCustomer ? ApprovalEnum.APPROVESUBCUSTOMER : ApprovalEnum.APPROVECUSTOMER} isSupplierApproval={false} isSubCustomer={isSubCustomer}\r\n                    getBasicInformationById={useLazyGetCustomersInfoByIdQuery} getAddressById={useLazyGetCustomerAddresssInfoByIdQuery}\r\n                    getContactById={useLazyGetCustomerContactInfoByIdQuery} getFinacialSettingById={useLazyGetCustomerFinacialSettingQuery} ownerType={OwnerType.Customer} basicData={responsibleUserIds} setRejectStatusId={setRejectStatusId} setSelectedStatus={setSelectedStatus}\r\n                    onRejectedCustomerFromApproval={onRejectedCustomerFromApproval}\r\n                />\r\n            }\r\n        </React.Fragment>\r\n    )\r\n});\r\n\r\nCustomerApproval.propTypes = {\r\n    childRef: PropTypes.shape({\r\n        callChildFunction: PropTypes.func\r\n    }),\r\n    getListApi: PropTypes.func,\r\n    updateCustomerApproval: PropTypes.func.isRequired,\r\n    isDetailPage: PropTypes.bool\r\n};\r\n\r\nexport default CustomerApproval;","import { useEffect, useRef } from 'react';\r\nimport { useState } from 'react';\r\nimport { createContext } from 'react';\r\nimport { useGetValidateCheckListMutation } from '../../../app/services/ApprovalAPI';\r\n\r\nconst BasicDetailContext = createContext();\r\n\r\nexport default BasicDetailContext;\r\n\r\n\r\nexport const BasicDetailContextProvider = ({ children }) => {\r\n\r\n    const molGridRef = useRef();\r\n\r\n    //****  If we have supplier page we have set main id as supplierId. and If we have customer page we have set main id as customerId   */\r\n    const [mainId, setMainId] = useState(0);\r\n    const [customerId, setCustomerId] = useState(0);\r\n    const [subCustomer, setSubCustomer] = useState(false);\r\n    const [customerCountryId, setCustomerCountryId] = useState('');\r\n    //** */\r\n\r\n    //** Shipping Method's */\r\n    const [carriersList, setCarriersList] = useState([]);\r\n    const [showSubBackButton, setShowSubBackButton] = useState(false);\r\n    const [deliveryMethodsList, setDeliveryMethodsList] = useState([]);\r\n    const [isExistsFinancialSetting, setIsExistsFinancialSetting] = useState(false);\r\n    //** */\r\n\r\n    //** Using for Contact  */\r\n    // const [contactId, setContactId] = useState(0);\r\n    const [phoneNumberData, setPhoneNumberData] = useState();\r\n    const [emailAddressData, setEmailAddressData] = useState();\r\n    //** */\r\n\r\n    const [isResponsibleUser, setIsResponsibleUser] = useState(true);\r\n    const [rejectStatusId, setRejectStatusId] = useState('');\r\n\r\n    //** Use for Tab's */\r\n    const nextRef = useRef(null);\r\n    const settingRef = useRef(null);\r\n    const financialRef = useRef(null);\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    const [activeSubTab, setActiveSubTab] = useState(0);\r\n\r\n    //** Completion Changes  */\r\n    const [totalCount, setTotalCount] = useState();\r\n    const [approvalSuccessCount, setApprovalSuccessCount] = useState();\r\n    const [getValidateCheckList, { isSuccess: isGetCheckListSuccess, data: isGetCheckListData }] = useGetValidateCheckListMutation();\r\n\r\n    const getCustomerCompletionCount = (customerId, isSubCustomer) => {\r\n        let request = {\r\n            customerId: customerId,\r\n            supplierId: 0,\r\n            isSubCustomer: isSubCustomer ? isSubCustomer : false\r\n        }\r\n        getValidateCheckList(request);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isGetCheckListSuccess && isGetCheckListData) {\r\n            if (isGetCheckListData && isGetCheckListData.length > 0) {\r\n                const successCheckList = isGetCheckListData.filter(data => data.isValid);\r\n                setApprovalSuccessCount(successCheckList.length);\r\n                setTotalCount(isGetCheckListData.length);\r\n            }\r\n        }\r\n    }, [isGetCheckListSuccess, isGetCheckListData])\r\n\r\n    const handleActiveSubTabClick = (tabIndex) => {\r\n        setActiveSubTab(tabIndex);\r\n        setShowSubBackButton(false);\r\n        if (tabIndex === 1) {\r\n            setShowSubBackButton(true);\r\n        }\r\n    }\r\n\r\n    const moveNextPage = () => {\r\n        setActiveTab((prev) => prev + 1);\r\n    };\r\n    const movePreviewPage = () => {\r\n        setActiveTab((prev) => prev - 1);\r\n    };\r\n    //** */\r\n\r\n    //** Use for Move next step */\r\n    const addCustomer = (data) => {\r\n        if (activeTab === 6) {\r\n            setActiveSubTab(0)\r\n        }\r\n        if (customerId > 0 && data === 1) {\r\n            if (nextRef.current) {\r\n                nextRef.current.handleAddBasicDetails();\r\n            }\r\n        } else if (customerId > 0) {\r\n            setActiveTab((prev) => prev + 1)\r\n        }\r\n        else {\r\n            if (nextRef.current) {\r\n                nextRef.current.handleAddBasicDetails();\r\n            }\r\n        }\r\n        if (data === 5) {\r\n            setShowSubBackButton(false);\r\n            saveFinacialSetting();\r\n        }\r\n    }\r\n\r\n    const saveFinacialSetting = () => {\r\n        if (settingRef.current) {\r\n            settingRef.current.onhandleEdit();\r\n        }\r\n    }\r\n    //** */\r\n\r\n    return (\r\n        <BasicDetailContext.Provider value={{\r\n            nextRef, customerId, setCustomerId, activeTab, setActiveTab, moveNextPage, movePreviewPage, addCustomer, setPhoneNumberData, setCustomerCountryId,\r\n            customerCountryId, setIsExistsFinancialSetting, isExistsFinancialSetting, financialRef,\r\n            phoneNumberData, setMainId, mainId, setShowSubBackButton, showSubBackButton, setActiveSubTab, activeSubTab, handleActiveSubTabClick, saveFinacialSetting,\r\n            emailAddressData, setEmailAddressData, molGridRef, setDeliveryMethodsList, deliveryMethodsList, setCarriersList, carriersList, settingRef,\r\n            setIsResponsibleUser, isResponsibleUser, setRejectStatusId, rejectStatusId, totalCount, approvalSuccessCount, getCustomerCompletionCount,\r\n            subCustomer, setSubCustomer\r\n        }}>\r\n            {children}\r\n        </BasicDetailContext.Provider>\r\n    );\r\n};","/**\r\n * @param {Object[]} customAction - The list of custom actions.\r\n * @param {string} actionName - The name of the action to check or modify.\r\n * @param {boolean} hasAccess - Indicates whether access should be granted.\r\n */\r\nexport const securityValidator = (hasAccess, customAction, actionName) => {\r\n\r\n    //** This Check is action is exist in our customeAction configuration  */\r\n    const customActionExist = customAction && customAction?.some(action => action?.name === actionName);\r\n\r\n    /** This Check is action is exist in our customeAction configuration  */\r\n    const checkActionExistOnConfiguration = customAction && customAction?.some(action => action?.name === actionName);\r\n\r\n    if (customActionExist && hasAccess === false) {\r\n        // EX: Remove the blocked action if it exists\r\n        customAction = customAction?.filter(action => action?.name !== actionName);\r\n    } else {\r\n        // EX: Add the blocked action if it does not exist\r\n        if (!customActionExist && checkActionExistOnConfiguration) {\r\n            customAction = [\r\n                ...(customAction || []),\r\n                customAction.find(action => action?.name === actionName)\r\n            ];\r\n        }\r\n    }\r\n    return customAction;\r\n}","/**\r\n * Checks if a user ID is included in a comma-separated string of IDs.\r\n * @param {string} userIdsString - Comma-separated string of IDs.\r\n * @param {number} loginUserId - The login user ID to check for.\r\n * @returns {boolean} - Returns true if the login user ID is included in the string, otherwise false.\r\n */\r\nexport const validateResponsibleUserId = (userIdsString, loginUserId) => {\r\n    if (!userIdsString || !loginUserId) return false;\r\n\r\n    const idsArray = userIdsString.toString().split(',').map(id => id.trim());\r\n    const loginUserIdStr = loginUserId.toString();\r\n    return idsArray.includes(loginUserIdStr);\r\n}","export const getLabelClass = (value) => {\r\n    switch (value) {\r\n      case \"Active\":\r\n        return \"status-btn badge-gradient-success\";\r\n      case \"Open\":\r\n        return \"status-btn badge-gradient-info\";\r\n      case \"In Active\":\r\n        return \"status-btn badge-gradient-danger\";\r\n      case \"Pending\":\r\n        return \"status-btn badge-gradient-Pending\";\r\n      case \"In progress\":\r\n        return \"status-btn badge-gradient-theme\";\r\n      case \"Submitted\":\r\n        return \"status-btn badge-gradient-Submitted\";\r\n      case \"Approved\":\r\n        return \"status-btn badge-gradient-Approved\";\r\n      case \"Freeze\":\r\n        return \"status-btn badge-gradient-Frozen\";\r\n      case \"Block\":\r\n        return \"status-btn badge-gradient-Blocked\";\r\n      case \"Reject\":\r\n        return \"status-btn badge-gradient-reject\";\r\n      case \"Disable\":\r\n        return \"status-btn badge-gradient-disabled\";\r\n      default:\r\n        return \"status-btn badge-gradient-info\";\r\n    }\r\n  };"],"names":["AllCustomerGridConfig","columns","id","ListShowCustomer","value","name","fieldName","colStyle","width","allowShort","ListSupplier","colType","GridColumnType","LABLE","colSettings","valueField","getLableClass","getLabelClass","ACTION","defaultAction","allowEdit","customAction","iconName","title","className","PendingCustomerGridConfig","SubmittedCustomerGridConfig","CHECKBOX","allowCheckbox","isDisabled","ApprovedCustomerGridConfig","RejectedCustomerGridConfig","AllInActiveCustomerGridConfig","DATE","isUTC","format","FreezedInActiveCustomerGridConfig","allowDelete","BlockedInActiveCustomerGridConfig","DisabledInActiveCustomerGridConfig","reasonData","initialState","responsibleUserId","inActiveReason","formFields","lable","Field_Name","fieldType","FormFieldTypes","SELECT","dataField","fieldSetting","placeholder","isEnableOnChange","isMultiSelect","validation","type","style","containerCss","TEXTAREA","allowSpace","_ref","isApprovalValidate","showModal","handleToggleModal","children","props","_jsxs","Modal","modelSizeClass","show","onHide","keyboard","backdrop","_jsx","Header","closeButton","modalTitle","Body","createContext","CustomersList","statusId","configFile","handleChange","search","handleChangeDropdown","statusOptions","selectedDrpvalues","searchStatusFilter","handleSearch","handleClear","handleKeyPress","shouldRerenderFormCreator","tabIndex","navigate","useNavigate","molGridRef","useRef","reasonRef","childRef","totalRowCount","setTotalRowCount","useState","dataSource","setDataSource","setShowModal","formData","setFormData","customerID","setCustomerId","staticId","setStaticId","statusFeild","setStatusFeild","listRef","useContext","CustomerListContext","authState","useSelector","state","auth","assignRUser","setAssignRUser","isResponsibleUser","setIsResponsibleUser","BasicDetailContext","getCustomers","isLoading","isListLoading","isSuccess","isListSuccess","data","isListeData","useGetCustomersMutation","updateCustomerApproveStatus","isSuccessUpdateCustomer","updateCustomerData","useUpdateCustomerApproveStatusMutation","updateCustomerInActiveStatus","updateCustomerInActiveStatusCustomerLoading","isSuccessUpdateCustomerInActiveStatus","updateCustomerInActiveStatusData","useUpdateCustomerInActiveStatusMutation","addEditResponsibleUserForCustomer","isSuccessAddEditResponsibleUserForCustomer","isAddEditResponsibleUserForCustomerData","useAddEditResponsibleUserForCustomerMutation","getAllUser","isGetAllUserSucess","allGetAlluserData","useLazyGetAllUserQuery","addCustomerNotes","useAddCustomerNotesMutation","useEffect","ToastService","success","errorMessage","filterData","filter","item","roleName","excludingRoles","map","role","toLowerCase","includes","uniqueData","Array","from","Map","fullName","values","setDropDownOptionField","onCustomeActionHandler","actionColumn","find","column","approvalAction","hasEdit","hasFunctionalPermission","securityKey","EDITCUSTOMER","hasBlock","BLOCKCUSTOMER","hasFreeze","FREEZECUSTOMER","hasDisable","DISABLECUSTOMER","hasUnBlock","UNBLOCKCUSTOMER","hasAccess","securityValidator","_authState$user","validateResponsibleUserId","user","userID","modifyCustomerData","taxId","totalRecord","currentPageObject","current","getCurrentPageObject","getListApi","generateSortingString","useImperativeHandle","pageObject","sortingString","isPreivewsValue","sortingStringObject","request","pagination","pageNumber","pageSize","filters","searchText","isArray","join","String","sortString","onReset","removeFields","newFrom","field","restData","updateRUserData","req","customerId","userId","actionHandler","EDIT","paginationObj","encryptUrlData","ALLOWFREEZE","StatusEnums","Freeze","StatusFeild","ALLOWDISABLE","Disable","ALLOWBLOCKED","Block","ALLOREJECT","customerData","customerItem","Reject","_customerData$respons","responsibleUserIds","split","Number","trim","formNew","CardSection","searchInput","searchInputName","searchFilter","selectedOptions","optionsValue","isCardSection","isdropdownOpen","searchButton","searchbuttonText","buttonClassName","searchTitleButtonClick","clearButton","clearTitleButtonClick","clearButtonText","clearButtonClassName","searchIconImg","AppIcons","SearchIcone","searchTextWithIcon","clearTextWithIcon","clearIconImg","ClearIcone","FinalMolGrid","ref","configuration","totalCount","currentPage","onPageChange","handlePageChange","page","onSorting","shortString","onActionChange","allowPagination","onColumnChange","handleGridCheckBoxChange","rowData","callChildFunction","isSubCustomer","CenterModel","FormCreator","config","Buttons","buttonTypeClassName","buttonText","onClick","handleUpdate","custData","getFormData","note","CustomerApproval","updateCustomerApproval","selectedStatusOptions","confirm","SwalAlert","DataRef","updateCustomerStatus","updateCustomerStatusLoading","isSuccessUpdateCustomerStatus","updateCustomerStatusData","useUpdateCustomerStatusMutation","length","Approved","ALLOWUNFREEZE","then","confirmed","ACTIVECUSTOMER","ALLOWUNBLOCKED","activeTab","setActiveTab","setSearch","setStatusOptions","setSelectedDrpvalues","setSelectedStatusOptions","setShouldRerenderFormCreator","allManageData","setAllManageData","freezeManageData","setFreezeManageData","blockManageData","setBlockManageData","disableManageData","setDisableManageData","debouncedSearch","useDebounce","updateManageData","warning","ErrorMessage","CommonErrorMessage","event","target","code","StatusValue","statusListData","label","selectedValues","option","prevState","tabs","sMenuItemCaption","component","InActiveCustomersList","_Fragment","Provider","tab","index","toString","handleTabClick","sPage","Customers","location","useLocation","pendingManageData","setPendingManageData","submittedManageData","setSubmittedManageData","approvedManageData","setApprovedManageData","rejectedCManageData","setRejectedCManageData","handleStorePaginationObj","_location$state","_location$state2","Pending","Submitted","InActiveCustomerTab","BasicDetailContextProvider","CustomerGrid","customerbasicData","groupTypeId","countryId","territoryId","emailAddress","website","isBuyingForThirdParty","customerNoteId","incotermId","attachment","base64File","storagePath","IMAGE","isImageUpload","isButtonVisible","isCustomButtonVisible","acceptedFiles","INPUT","maxLength","exemptBoundarySpaces","inputButtonGroupConfig","isPrimaryButtonVisible","infoButtonConfig","isInfoButtonVisible","infoButtonIcon","infoButtonTooltip","minLength","inputIcon","isIconShow","faIcon","message","SuccessMessage","DefaultUSATaxId","CKEDITOR","formSetting","isViewOnly","ApprovalCheckList","React","ApprovalValidateData","forwardRef","isDetailPage","isAddPagePage","setSelectedStatus","onRejectedCustomerFromApproval","parentRef","setIsSubCustomer","isShowApproval","setIsShowApproval","validateCheckList","setValidateCheckList","isShowBothButton","setIsShowBothButton","isShowValidateModal","setIsShowValidateModal","showApprovalCheckList","setShowApprovalCheckList","setRejectStatusId","getValidateCheckList","isGetCheckListLoading","isGetCheckListSuccess","isGetCheckListData","useGetValidateCheckListMutation","handleShowValidateModal","isShowApprovalCheckList","arguments","undefined","supplierId","handleValidateSuccess","isSupplierApproval","mainId","handleValidateModalClose","handleDone","validateApprovalCheckList","onSidebarClose","onSidebarApprovalClose","isModelOpen","onSuccessApprovalClose","ApprovalData","ApprovalEnum","APPROVESUBCUSTOMER","APPROVECUSTOMER","getBasicInformationById","useLazyGetCustomersInfoByIdQuery","getAddressById","useLazyGetCustomerAddresssInfoByIdQuery","getContactById","useLazyGetCustomerContactInfoByIdQuery","getFinacialSettingById","useLazyGetCustomerFinacialSettingQuery","ownerType","OwnerType","Customer","basicData","setMainId","subCustomer","setSubCustomer","customerCountryId","setCustomerCountryId","carriersList","setCarriersList","showSubBackButton","setShowSubBackButton","deliveryMethodsList","setDeliveryMethodsList","isExistsFinancialSetting","setIsExistsFinancialSetting","phoneNumberData","setPhoneNumberData","emailAddressData","setEmailAddressData","rejectStatusId","nextRef","settingRef","financialRef","activeSubTab","setActiveSubTab","setTotalCount","approvalSuccessCount","setApprovalSuccessCount","successCheckList","isValid","saveFinacialSetting","onhandleEdit","moveNextPage","prev","movePreviewPage","addCustomer","handleAddBasicDetails","handleActiveSubTabClick","getCustomerCompletionCount","actionName","_customAction","_customAction2","customActionExist","some","action","checkActionExistOnConfiguration","_customAction3","userIdsString","loginUserId","idsArray","loginUserIdStr"],"sourceRoot":""}