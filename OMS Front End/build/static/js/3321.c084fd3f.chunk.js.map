{"version":3,"file":"static/js/3321.c084fd3f.chunk.js","mappings":"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","sources":["common/features/component/Document/Config/DocuementsData.js","common/features/component/Document/Config/MultipleDocuments.Data.js","utils/CustomHook/useValidateAndAddApproval.js","common/features/component/Document/feature/MultipleDocument.js/AddMultipleDocument.js","common/features/component/Document/DocumentGrid.js","components/ui/centerModel/CenterModel.js","utils/Enums/ApprovalFunctionalities.js"],"sourcesContent":["import { AppIcons } from \"../../../../../data/appIcons\";\r\nimport { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\nimport { GridColumnType } from \"../../../../../data/gridColumnType\";\r\n\r\nexport const DocumentFormData = {\r\n  name: \"Document Form\",\r\n  initialState: {\r\n    name: \"\",\r\n    documentTypeId: \"\",\r\n    supplierId: \"\",\r\n    customerId: \"\",\r\n    attachment: \"\",\r\n    base64File: \"\",\r\n    storagePath: \"\"\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"documentTypeId\",\r\n      lable: \"Document Type \",\r\n      Field_Name: \"Document Type\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      fieldType: FormFieldTypes.EDITABLEDROPDOWN,\r\n      dataField: \"documentTypeId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Document Type\",\r\n        isEnableOnChange: true,\r\n        options: []\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"name\",\r\n      lable: \"Document Name \",\r\n      Field_Name: \"Document Name\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"name\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Document Name\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n        isDisable: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"attachment\",\r\n      lable: \"Attachment \",\r\n      Field_Name: \"Attachment\",\r\n      fieldType: FormFieldTypes.FILE,\r\n      dataField: \"attachment\",\r\n      fieldSetting: {\r\n        placeholder: \"Upload Attachment\",\r\n        allowSpace: true,\r\n        isButtonVisible: false,\r\n        isCustomButtonVisible: true,\r\n        acceptedFiles: '.pdf , .docx ',\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 col-12 mb-input mb-0 custom-file-upload-section\",\r\n      },\r\n\r\n    },\r\n\r\n  ],\r\n};\r\n\r\n\r\n\r\nexport const DocumentGridConfig = {\r\n  columns: [\r\n    {\r\n      name: \"Document Type\",\r\n      fieldName: \"documentType\",\r\n      // allowShort: true,\r\n    },\r\n    {\r\n      name: \"Document Name\",\r\n      fieldName: \"documentName\",\r\n      // allowShort: true,\r\n    },\r\n\r\n    {\r\n      name: \"Action\",\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n        allowDelete: true,\r\n      },\r\n\r\n    },\r\n  ],\r\n};\r\n\r\n\r\nexport const DocumentTypes = [\r\n  { value: 1, label: \"Tax or Registration document\" },\r\n  { value: 2, label: \"Customer details form\" },\r\n  { value: 3, label: \"Our submitted forms\" }\r\n];\r\n\r\nexport const FileTypeIcons = [\r\n  {\r\n    type: 'pdf',\r\n    icon: AppIcons.PdfIcon\r\n  },\r\n  {\r\n    type: 'doc',\r\n    icon: AppIcons.DocIcon\r\n  },\r\n  {\r\n    type: 'docx',\r\n    icon: AppIcons.DocIcon\r\n  },\r\n  {\r\n    type: 'xlsx',\r\n    icon: AppIcons.XlsIcon\r\n  },\r\n  {\r\n    type: 'xls',\r\n    icon: AppIcons.XlsIcon\r\n  },\r\n  {\r\n    type: 'ppt',\r\n    icon: AppIcons.PptIcon\r\n  },\r\n  {\r\n    type: 'zip',\r\n    icon: AppIcons.ZipIcon\r\n  },\r\n  {\r\n    type: 'csv',\r\n    icon: AppIcons.CsvIcon\r\n  }\r\n]\r\n","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const DocumentMultipleFormData = {\r\n  name: \"Document Form\",\r\n  initialState: {\r\n    attachment: \"\",\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"attachment\",\r\n      lable: \"Attachment \",\r\n      Field_Name: \"Attachment\",\r\n      fieldType: FormFieldTypes.FILE,\r\n      dataField: \"attachment\",\r\n      fieldSetting: {\r\n        placeholder: \"Upload Attachment\",\r\n        allowSpace: true,\r\n        isButtonVisible: false,\r\n        isCustomButtonVisible: true,\r\n        acceptedFiles: \".pdf , .docx \",\r\n        isFileNameCleared: true,\r\n        isMultiple: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-12 col-xl-12 col-md-12 col-12 col-12 mb-input mb-0 custom-file-upload-section\",\r\n      },\r\n    },\r\n  ],\r\n};\r\n","import { getData } from \"../LocalStorage/LocalStorageManager\";\r\n//** Lib's */\r\nimport { AddressType, ContactType } from \"../Enums/commonEnums\";\r\nimport { ErrorMessage, SuccessMessage } from \"../../data/appMessages\";\r\nimport { FunctionalitiesName } from \"../Enums/ApprovalFunctionalities\";\r\n//** Service */\r\nimport SwalAlert from \"../../services/swalService/SwalService\";\r\nimport ToastService from \"../../services/toastService/ToastService\";\r\nimport { useAddApprovalRequestsMutation } from \"../../app/services/commonAPI\";\r\nimport { useCheckFieldValueExistsMutation } from \"../../app/services/ApprovalAPI\";\r\nimport { useState } from \"react\";\r\n\r\nconst fieldValidationMapping = {\r\n    [FunctionalitiesName.CUSTOMERUPDATE]: ['TaxId', 'Name']\r\n    // [FunctionalitiesName.SUPPLIERADDADDRESS]: ['Email']\r\n};\r\n\r\nexport const useValidateAndAddApprovalRequests = () => {\r\n    // Hook to handle API requests for adding approval requests\r\n    const { success, warning } = SwalAlert();\r\n    const [isApprovelLoading, setIsApprovelLoading] = useState(false);\r\n\r\n    const [addApprovalRequest] = useAddApprovalRequestsMutation();\r\n    const [checkFieldValueExists] = useCheckFieldValueExistsMutation();\r\n\r\n\r\n    /**\r\n     * Validates and processes request data based on approval rules.\r\n     * \r\n     * @param {Object} requestData - The data to be validated and processed. Should include:\r\n     *   - newValue: An object representing the new values.\r\n     *   - oldValue: An object representing the old values.\r\n     *   - functionalityName: A string representing the name of the functionality.\r\n     * \r\n     * @returns {Object} - The updated requestData object with normalized values.\r\n    */\r\n    const ValidateRequestByApprovalRules = async (requestData) => {\r\n        setIsApprovelLoading(true); // Start loader\r\n\r\n        // Retrieve approval rules from local storage\r\n        const approvalRulesList = getData(\"approvalRules\") || [];\r\n\r\n        // If no approval rules List are found, return the original requestData\r\n        if (!approvalRulesList.length) {\r\n            setIsApprovelLoading(false);\r\n            return requestData\r\n        }\r\n\r\n        // Destructure and provide default values for requestData properties\r\n        const { eventName = '', newValue = {}, oldValue = {} } = requestData;\r\n\r\n        // Filter the approval rules to only include those relevant to the given functionality\r\n        const relevantRules = approvalRulesList.filter(rule => rule.eventName === eventName);\r\n\r\n        // If no relevant rules are found, return the original requestData\r\n        if (!relevantRules.length) {\r\n            setIsApprovelLoading(false)\r\n            return requestData;\r\n        }\r\n\r\n        const { newValueNormalized, oldValueNormalized, originalValues } = normalizeValues(newValue, oldValue);\r\n\r\n        if (requestData.isFunctionalObjMatch) {\r\n            const isEqual = compareObj(newValue, oldValue);\r\n            if (isEqual) {\r\n                setIsApprovelLoading(false);\r\n                return requestData;\r\n            }\r\n        }\r\n\r\n        let allSuccessful = false; // Flag to track if all requests are successful\r\n        let FieldValueResponse = [];\r\n        let approvalMessage = \"\"; // Store the fields level messages\r\n\r\n        // First we Validate the Field value\r\n        for (const rule of relevantRules) {\r\n            const { fieldName, isFunctional } = rule;\r\n            if (!isFunctional) {\r\n                const fieldsToValidate = fieldValidationMapping[eventName] || [];\r\n                const shouldValidate = fieldsToValidate.includes(fieldName);\r\n                if (shouldValidate) {\r\n                    const normalizedFieldName = fieldName.toLowerCase();\r\n                    const originalKeyName = findOriginalKey(normalizedFieldName, originalValues.newValue);\r\n                    const newFieldValue = newValueNormalized[normalizedFieldName];\r\n                    const oldFieldValue = oldValueNormalized[normalizedFieldName];\r\n                    if (newFieldValue !== oldFieldValue) {\r\n                        const response = await checkFieldValueExists({ fieldName: originalKeyName, fieldValue: newFieldValue });\r\n                        if (response.data.exist) {\r\n                            setIsApprovelLoading(false);\r\n                            return warning(SuccessMessage.FieldsApprovalExists.replace(\"{0}\", fieldName));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // Process each approval rule\r\n        for (const rule of relevantRules) {\r\n            const { fieldName, moduleId, functionalityId, tableId, functionalitiesFieldId, functionalityEventId, isFunctional } = rule;\r\n\r\n            if (isFunctional) {\r\n                const request = {\r\n                    moduleId,\r\n                    functionalityId,\r\n                    tableId,\r\n                    functionalitiesFieldId,\r\n                    functionalityEventId,\r\n                    oldValue: originalValues.oldValue ? JSON.stringify(originalValues.oldValue) : null,\r\n                    newValue: JSON.stringify(originalValues.newValue)\r\n                };\r\n\r\n                try {\r\n                    // Add the approval request and revert the change in newValue\r\n                    await addApprovalRequest(request);\r\n                    allSuccessful = true;\r\n                    FieldValueResponse.push(eventName);\r\n                } catch (error) {\r\n                    console.error('Error adding approval request:', error);\r\n                }\r\n            } else if (!isFunctional) {\r\n                // Check if the rule specifies a field name to validate\r\n                if (fieldName) {\r\n                    const normalizedFieldName = fieldName.toLowerCase();\r\n                    const originalKeyName = findOriginalKey(normalizedFieldName, originalValues.newValue);\r\n                    const newFieldValue = newValueNormalized[normalizedFieldName];\r\n                    const oldFieldValue = oldValueNormalized[normalizedFieldName];\r\n\r\n                    if (newFieldValue !== oldFieldValue) {\r\n                        const request = {\r\n                            moduleId,\r\n                            functionalityId,\r\n                            tableId,\r\n                            functionalitiesFieldId,\r\n                            functionalityEventId,\r\n                            oldValue: JSON.stringify(oldValueNormalized),\r\n                            newValue: JSON.stringify(newValueNormalized)\r\n                        };\r\n                        try {\r\n                            const fieldsToValidate = fieldValidationMapping[eventName] || [];\r\n                            const shouldValidate = fieldsToValidate.includes(fieldName);\r\n\r\n                            if (shouldValidate) {\r\n                                allSuccessful = true;\r\n                                await addApprovalRequest(request);\r\n                                originalValues.newValue[originalKeyName] = oldFieldValue;\r\n                            } else {\r\n                                // For other fields, add the approval request directly\r\n                                allSuccessful = true;\r\n                                await addApprovalRequest(request);\r\n                                originalValues.newValue[originalKeyName] = oldFieldValue;\r\n                            }\r\n                            FieldValueResponse.push(fieldName);\r\n                        } catch (error) {\r\n                            ToastService.warning(error);\r\n                        }\r\n                    }\r\n                } else {\r\n                    ToastService.warning(ErrorMessage.FieldNameNotFound);\r\n                }\r\n            }\r\n        }\r\n\r\n        // // If all requests were successful, show a success message\r\n        if (allSuccessful) {\r\n            if (requestData.isCustomeMessage && FieldValueResponse.length > 0) {\r\n                const formattedResponse = FieldValueResponse.length === 1\r\n                    ? FieldValueResponse[0] : FieldValueResponse.slice(0, -1).join(', ') + ' and ' + FieldValueResponse.slice(-1);\r\n                approvalMessage = formattedResponse;\r\n            } else {\r\n                success(SuccessMessage.ApprovalSuccess);\r\n            }\r\n        }\r\n        setIsApprovelLoading(false); // End loader\r\n\r\n        // Return the updated requestData with normalized values\r\n        return {\r\n            ...requestData,\r\n            newValue: originalValues.newValue,\r\n            oldValue: originalValues.oldValue,\r\n            isallSuccessful: allSuccessful,\r\n            approvalMessage: approvalMessage\r\n        };\r\n    }\r\n    // Utility function to deep compare two objects\r\n    const compareObj = (obj1, obj2) => {\r\n        const { newValueNormalized, oldValueNormalized } = normalizeValues(obj1, obj2, true);\r\n        return JSON.stringify(newValueNormalized) === JSON.stringify(oldValueNormalized);\r\n    };\r\n    const normalizeValues = (newValue, oldValue, isStrictEquality) => {\r\n        // Recursive function to normalize keys and values\r\n        const normalize = obj => {\r\n            if (Array.isArray(obj)) {\r\n                return obj.map(item => normalize(item)); // Normalize each item in the array\r\n            } else if (obj && typeof obj === 'object') {\r\n                return Object.fromEntries(\r\n                    Object.entries(obj).map(([key, value]) => [\r\n                        key.toLowerCase(), typeof value === 'object' ? normalize(value) : isStrictEquality ? String(value) : value\r\n                    ])\r\n                );\r\n            } else {\r\n                return obj;\r\n            }\r\n        };\r\n        // const normalize = obj => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key.toLowerCase(), String(value)]));\r\n        const newValueNormalized = newValue ? normalize(newValue) : newValue;\r\n        const oldValueNormalized = oldValue ? normalize(oldValue) : oldValue;\r\n        return { newValueNormalized, oldValueNormalized, originalValues: { newValue, oldValue } }\r\n    }\r\n    const getEventName = (id, isEdit, functionalityName) => {\r\n        const getAddressEventName = () => {\r\n            if (id === AddressType.BILLING.toString()) {\r\n                return isEdit ? FunctionalitiesName.UPDATECUSTOMERBILLINGADDRESS : FunctionalitiesName.ADDCUSTOMERBILLINGADDRESS;\r\n            } else if (id === AddressType.SHIPPING.toString()) {\r\n                return isEdit ? FunctionalitiesName.UPDATECUSTOMERSHIPPINGADDRESS : FunctionalitiesName.ADDCUSTOMERSHIPPINGADDRESS;\r\n            }\r\n        };\r\n\r\n        const getContactEventName = () => {\r\n            if (id.toString() === ContactType.INVOICESUBMISSION.toString()) {\r\n                return isEdit ? FunctionalitiesName.UPDATECUSTOMERINVOICESUBMISSIONCONTACT : FunctionalitiesName.ADDCUSTOMERINVOICESUBMISSIONCONTACT;\r\n            } else if (id.toString() === ContactType.INVOICEFOLLOWUP.toString()) {\r\n                return isEdit ? FunctionalitiesName.UPDATECUSTOMERINVOICEFOLLOWUPCONTACT : FunctionalitiesName.ADDCUSTOMERINVOICEFOLLOWUPCONTACT;\r\n            }\r\n        };\r\n\r\n        switch (functionalityName) {\r\n            case \"AddEditAddressCustomer\":\r\n                return getAddressEventName();\r\n            case \"AddEditContactCustomer\":\r\n                return getContactEventName();\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n    // Utility function to find the original key by normalized key\r\n    const findOriginalKey = (normalizedKey, obj) => {\r\n        return Object.keys(obj).find(key => key.toLowerCase() === normalizedKey);\r\n    };\r\n\r\n    // const processFieldValueResponse = (response) => {\r\n    //     const findExistFields = response.filter(data => data.isExist === true);\r\n    //     const findNonExistFields = response.filter(data => data.isExist === false);\r\n\r\n    //     let message = '';\r\n    //     if (findNonExistFields.length > 0) {\r\n    //         const nonExistFieldsNames = getFieldNames(findNonExistFields);\r\n    //         message = SuccessMessage.FieldsApprovalSuccess.replace(\"{0}\", nonExistFieldsNames);\r\n    //     }\r\n    //     if (findExistFields.length > 0) {\r\n    //         const existFieldsNames = getFieldNames(findExistFields);\r\n    //         message = message !== '' ? message + SuccessMessage.FieldsApprovalExists.replace(\"{0}\", existFieldsNames) :\r\n    //             SuccessMessage.FieldsApprovalExists.replace(\"{0}\", existFieldsNames);\r\n    //     }\r\n    //     return message;\r\n    // };\r\n\r\n    // const getFieldNames = (eventNames) => {\r\n    //     if (eventNames.length > 0) {\r\n    //         const fieldNames = .map(data => data.fieldName);\r\n    //         return fieldNames.length > 1\r\n    //             ? fieldNames.slice(0, -1).join(', ') + fieldNames.slice(-1)\r\n    //             : fieldNames[0];\r\n    //     }\r\n    //     return '';\r\n    // };\r\n\r\n    return { ValidateRequestByApprovalRules, getEventName, compareObj, isApprovelLoading };\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport PropTypes from \"prop-types\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Buttons from \"../../../../../../components/ui/button/Buttons\";\r\nimport FormCreator from \"../../../../../../components/Forms/FormCreator\";\r\nimport { DocumentMultipleFormData } from \"../../Config/MultipleDocuments.Data\";\r\nimport \"../../Document.scss\";\r\nimport Iconify from \"../../../../../../components/ui/iconify/Iconify\";\r\nimport NoRecordFound from \"../../../../../../components/ui/noRecordFound/NoRecordFound\";\r\nimport { AppIcons } from \"../../../../../../data/appIcons\";\r\nimport Select from \"react-select\";\r\nimport {  ModulePathName } from \"../../../../../../utils/Enums/commonEnums\";\r\nimport ToastService from \"../../../../../../services/toastService/ToastService\";\r\nimport { ErrorMessage } from \"../../../../../../data/appMessages\";\r\nimport { useValidateAndAddApprovalRequests } from \"../../../../../../utils/CustomHook/useValidateAndAddApproval\";\r\nimport { FunctionalitiesName } from \"../../../../../../utils/Enums/ApprovalFunctionalities\";\r\nimport Input from \"../../../../../../components/ui/inputs/input/Input\";\r\n\r\nconst getFileIcon = (extension) => {\r\n  switch (extension) {\r\n    case \"pdf\":\r\n      return AppIcons.PdfIcon;\r\n    case \"doc\":\r\n    case \"docx\":\r\n      return AppIcons.DocIcon;\r\n    case \"xls\":\r\n    case \"xlsx\":\r\n      return AppIcons.XlsIcon;\r\n    case \"ppt\":\r\n    case \"pptx\":\r\n      return AppIcons.PptIcon;\r\n    case \"csv\":\r\n      return AppIcons.CsvIcon;\r\n    case \"zip\":\r\n    case \"rar\":\r\n      return AppIcons.ZipIcon;\r\n    default:\r\n      return AppIcons.defaultFileIcon;\r\n  }\r\n};\r\n\r\nconst getFileExtension = (filename) => {\r\n  const parts = filename.split(\".\");\r\n  return parts.length > 1 ? parts.pop().toLowerCase() : \"\";\r\n};\r\n\r\nconst AddMultipleDocument = ({\r\n  isSupplier,\r\n  keyId,\r\n  handleMulDocToggleModal,\r\n  addDocuments,\r\n  documentTypes,\r\n  isEditablePage,\r\n  customerStatusId,\r\n}) => {\r\n  const ref = useRef();\r\n  const [attachment, setAttachment] = useState([]);\r\n  const [uploadedFiles, setUploadedFiles] = useState([]);\r\n  const [openDropdownIndex, setOpenDropdownIndex] = useState(null);\r\n  const [editableIndexes, setEditableIndexes] = useState([]);\r\n  const { ValidateRequestByApprovalRules, isApprovelLoading } =\r\n    useValidateAndAddApprovalRequests();\r\n\r\n  /**\r\n   * This hook dynamically sets the API call based on the module (customer or supplier).\r\n   * The API endpoint and parameters are configured within the SupplierDocumentDetail OR CustomerDocumentDetail component.\r\n   */\r\n  const [\r\n    add,\r\n    { isLoading: isAddLoading, isSuccess: isAddSuccess, data: isAddData },\r\n  ] = addDocuments();\r\n\r\n  const [documentTypeInput, setDocumentTypeInput] = useState(\"\");\r\n\r\n  const toggleEdit = (index) => {\r\n    const updatedEditableIndexes = [...editableIndexes];\r\n    if (updatedEditableIndexes.includes(index)) {\r\n      updatedEditableIndexes.splice(updatedEditableIndexes.indexOf(index), 1);\r\n    } else {\r\n      updatedEditableIndexes.push(index);\r\n    }\r\n    setEditableIndexes(updatedEditableIndexes);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isAddSuccess && isAddData) {\r\n      if (isAddData.errorMessage.includes(\"exists\")) {\r\n        ToastService.warning(isAddData.errorMessage);\r\n        return;\r\n      }\r\n      ToastService.success(isAddData.errorMessage);\r\n      handleMulDocToggleModal();\r\n    }\r\n  }, [isAddSuccess, isAddData]);\r\n\r\n  // Transform the document data before submitting\r\n  const buildTransformedDocumentData = (data, isSupplier, keyId) => {\r\n    const transformDocumentTypeData = (data) => {\r\n        if (data && typeof data === 'object') {\r\n          console.log(\"Original Document Type Data:\", data);\r\n            return {\r\n                id: data.value || data.id || 0,\r\n                type: data.text || \"\",\r\n            };\r\n        }\r\n        return {\r\n            id: data || 0,\r\n            type: \"\",\r\n        };\r\n    };\r\n\r\n    const { id: documentTypeId, type: documentType } = transformDocumentTypeData(data.documentTypeId,data.documentType);\r\n\r\n    return {\r\n        ...data,\r\n        [isSupplier ? 'supplierId' : 'customerId']: keyId,\r\n        documentTypeId,\r\n        documentType:data.documentType,\r\n        createdAt: data.createdAt || new Date(),\r\n      };\r\n    };\r\n\r\n  const handleSave = async () => {\r\n    const modifyData = uploadedFiles.map((data,index) => {\r\n      \r\n      const matchingAttachment = attachment.find((att, ind) => ind === index);\r\n      \r\n      return {\r\n        ...data,\r\n        base64File: matchingAttachment ? matchingAttachment.base64Data : null,\r\n        ...buildTransformedDocumentData(data, isSupplier, keyId),  \r\n      };\r\n    });\r\n    const IsAllDetailExist = modifyData.every(\r\n          (data) => data.name && data.base64File && data.documentTypeId !== null\r\n        );\r\n  \r\n    if (IsAllDetailExist) {\r\n      const requestData = {\r\n        storagePath: isSupplier ? ModulePathName.SUPPLIER : ModulePathName.CUSTOMER,\r\n        [isSupplier ? \"supplierId\" : \"customerId\"]: keyId,\r\n        documentInfoList: modifyData,\r\n        \r\n      };\r\n  \r\n      // Uncomment and handle approval if needed\r\n      // if (!isSupplier && isEditablePage && isCustomerOrSupplierApprovedStatus(customerStatusId)) {\r\n      //   await handleApprovalRequest(requestData, null);\r\n      // } else {\r\n        add(requestData);\r\n      // }\r\n    }\r\n    else {\r\n           ToastService.warning(ErrorMessage.DocumentDetailMissing);\r\n         }\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  const handleApprovalRequest = async (newValue) => {\r\n    const request = {\r\n      newValue,\r\n      oldValue: null,\r\n      isFunctional: true,\r\n      eventName: FunctionalitiesName.UPLOADCUSTOMERDOCUMENT,\r\n    };\r\n    const modifyData = await ValidateRequestByApprovalRules(request);\r\n    if (modifyData.newValue) handleMulDocToggleModal();\r\n  };\r\n\r\n  const handleFileUpload = (value) => {\r\n    const files = value.split(\", \");\r\n\r\n    const newFiles = files.map((file) => {\r\n      const fileExtension = getFileExtension(file);\r\n      return {\r\n        name: file,\r\n        attachment: file,\r\n        extension: fileExtension,\r\n        documentTypeId: null,\r\n      };\r\n    });\r\n\r\n    setUploadedFiles((prevFiles) => [...prevFiles, ...newFiles]);\r\n  };\r\n\r\n  const handleTypeChange = (index, selectedOption) => {\r\n    const newType = selectedOption ? selectedOption.value : \"\";\r\n        setUploadedFiles((prevFiles) =>\r\n        prevFiles.map((file, i) =>\r\n            i === index ? { ...file, documentTypeId: newType } : file\r\n        )\r\n    );\r\n    setOpenDropdownIndex(index);\r\n  };\r\n  const handleFileRemove = (index) => {\r\n    setUploadedFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\r\n  };\r\n  \r\n  const onFormDataChange = (updatedData) => {\r\n    setAttachment((prevAttachments) => [\r\n      ...prevAttachments,\r\n      ...updatedData?.attachment,\r\n    ]);\r\n  };\r\n\r\n  const handleFileNameChange = (index, newName) => {\r\n    setUploadedFiles((prevFiles) =>\r\n      prevFiles.map((file, i) =>\r\n        i === index ? { ...file, name: newName} : file,\r\n\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleDocumemtTypeChange = (index, documentTypeInput) => {\r\n    \r\n    setUploadedFiles((prevFiles) =>\r\n      prevFiles.map((documentType, i) =>\r\n        i === index ? { ...documentType, documentType: documentTypeInput} : documentType,\r\n\r\n      )\r\n    );\r\n  };\r\n\r\nconst formActionHandler = {\r\n  DDL_FILE: handleFileUpload,\r\n};\r\n\r\n    return (\r\n    <div className=\"row\">\r\n      <FormCreator\r\n        config={DocumentMultipleFormData}\r\n        ref={ref}\r\n        onActionChange={formActionHandler}\r\n        onFormDataChange={onFormDataChange}\r\n        //onDropdownAction={DDLActionHandler}\r\n      />\r\n      <table className=\"custom-table mt-4\">\r\n        <thead>\r\n          <tr>\r\n            <th></th>\r\n            <th>Name</th>\r\n            <th>Type</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {/* {console.log('uploadedFiles', uploadedFiles)} */}\r\n          {uploadedFiles.length === 0 ? (\r\n            <tr>\r\n              <td colSpan=\"3\">\r\n                <NoRecordFound />\r\n              </td>\r\n            </tr>\r\n          ) : (\r\n            uploadedFiles.map((file, index) => (\r\n              <tr key={index}>\r\n                <td>\r\n                  <img\r\n                    src={getFileIcon(file.extension)}\r\n                    alt={file.name}\r\n                    className=\"file-icon\"\r\n                  />\r\n                </td>\r\n                {/* <td\r\n                  contentEditable=\"true\"\r\n                  onBlur={(e) =>\r\n                    handleFileNameChange(index, e.target.textContent)\r\n                  }\r\n                >\r\n                  {file.name}\r\n                </td> */}\r\n                <td>\r\n                  {\" \"}\r\n                  <Input\r\n                    type=\"text\"\r\n                    value={file.name}\r\n                    onChange={(e) =>\r\n                      handleFileNameChange(index, e.target.value)\r\n                    }\r\n                  />\r\n                </td>\r\n                <td>\r\n              {editableIndexes.includes(index) ? (\r\n                <div className=\"d-flex align-items-center\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    value={file.documentType }\r\n                    onChange={(e) =>\r\n                      handleDocumemtTypeChange(index, e.target.value)\r\n                    }\r\n                  />\r\n                  <button onClick={() => toggleEdit(index)} \r\n                          style={{\r\n                            background: 'none',  \r\n                            border: 'none', \r\n                            cursor: 'pointer',  \r\n                            padding: '10px' \r\n                      }}>\r\n                  <img src=\"/static/media/cancel.0c96fd8d030cbf121ac0.png\" style={{\r\n                          width: '20px',  \r\n                          height: '20px',  \r\n                          \r\n                      }}/>\r\n                  </button>\r\n                </div>\r\n              ) : (\r\n                <div className=\"d-flex align-items-center\">\r\n                  <Select\r\n                    value={\r\n                      documentTypes.find(option => option.value === file.documentTypeId) || null\r\n                    }\r\n                    onChange={(selectedOption) => {\r\n                      handleTypeChange(index, selectedOption);\r\n                      \r\n                    }}\r\n                    options={documentTypes}\r\n                    className=\"react-select\"\r\n                    classNamePrefix=\"react-select\"\r\n                    menuPortalTarget={document.body}\r\n                    menuPosition=\"absolute\"\r\n                    isOpen={openDropdownIndex === index}\r\n                    onMenuOpen={() => setOpenDropdownIndex(index)}\r\n                    onMenuClose={() => setOpenDropdownIndex(null)}\r\n                    styles={{\r\n                      menuPortal: (base) => ({ ...base, zIndex: 9999 }),\r\n                    }}\r\n                  />\r\n                  <button onClick={() => toggleEdit(index)} style={{\r\n                        background: 'none',  \r\n                        border: 'none', \r\n                        cursor: 'pointer',  \r\n                        padding: '10px' \r\n                  }}>\r\n                  <img src=\"/static/media/pencil.3c8bbd8b96aa6f946db1.png\"  \r\n                         style={{\r\n                          width: '20px',  \r\n                          height: '20px',  \r\n                          \r\n                      }} />\r\n                  </button>\r\n                </div>\r\n              )}\r\n            \r\n                  \r\n                  {/* <select\r\n                    value={file.documentTypeId || \"\"}\r\n                    onChange={(e) =>\r\n                      handleTypeChange(index, { value: e.target.value })\r\n                    }\r\n                    className=\"custom-select\"\r\n                  >\r\n                    <option value=\"\" disabled>\r\n                      Select Document Type\r\n                    </option>\r\n                    {documentTypes.map((option) => (\r\n                      <option key={option.value} value={option.value}>\r\n                        {option.label}\r\n                      </option>\r\n                    ))}\r\n                  </select> */}\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    onClick={() => handleFileRemove(index)}\r\n                    className=\"delete-button\"\r\n                  >\r\n                    {\" \"}\r\n                    <Iconify\r\n                      icon=\"mingcute:delete-2-line\"\r\n                      className=\"delete-icon-model\"\r\n                    />\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"d-flex align-item-end justify-content-end mt-3\">\r\n        <Buttons\r\n          buttonTypeClassName=\"theme-button\"\r\n          isLoading={isApprovelLoading || isAddLoading}\r\n          buttonText=\"Save\"\r\n          onClick={handleSave}\r\n        />\r\n        <Buttons\r\n          buttonTypeClassName=\"dark-btn ml-5\"\r\n          buttonText=\"Cancel\"\r\n          onClick={handleMulDocToggleModal}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nAddMultipleDocument.propTypes = {\r\n  isSupplier: PropTypes.bool.isRequired,\r\n  keyId: PropTypes.string.isRequired, // Adjust type if keyId is not a string\r\n  handleMulDocToggleModal: PropTypes.func.isRequired,\r\n  addDocuments: PropTypes.func.isRequired,\r\n  documentTypes: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      // Define the shape of each documentType object if known\r\n      id: PropTypes.number.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\n\r\nexport default AddMultipleDocument;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { AppIcons } from \"../../../../data/appIcons\";\r\nimport { DocumentFormData } from \"./Config/DocuementsData\";\r\nimport CardSection from \"../../../../components/ui/card/CardSection\";\r\nimport CenterModel from \"../../../../components/ui/centerModel/CenterModel\";\r\nimport { hasFunctionalPermission } from \"../../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\nimport PropTypes from \"prop-types\";\r\n//** Service's */\r\nimport { useLazyGetAllDocumentTypesQuery } from \"../../../../app/services/documentAPI\";\r\nimport AddMultipleDocument from \"./feature/MultipleDocument.js/AddMultipleDocument\";\r\n//** Component's */\r\nconst AddDocument = React.lazy(() => import(\"./feature/AddDocument\"));\r\nconst DocumentList = React.lazy(() => import(\"./feature/DocumentList\"));\r\n\r\nconst DocumentGrid = ({\r\n  keyId,\r\n  isSupplier,\r\n  addDocuments,\r\n  downloadDocument,\r\n  deleteDocumentsById,\r\n  isArchive,\r\n  getDocumentsById,\r\n  isEditablePage,\r\n  SecurityKey,\r\n\r\n  customerStatusId,\r\n}) => {\r\n  //** State */\r\n  const childRef = useRef();\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [documentTypes, setDocumentTypes] = useState([]);\r\n  const [showMulDocModal, setShowMulDocModal] = useState(false);\r\n  const [buttonVisible, setButtonVisible] = useState(true);\r\n  // const [editDocumentData, SetEditDocumentData] = useState(null);\r\n\r\n  //** API Call's */\r\n  const [\r\n    getAllDocumentTypes,\r\n    {\r\n      isSuccess: isGetAllDocumentTypesSucess,\r\n      data: allGetAllDocumentTypesData,\r\n    },\r\n  ] = useLazyGetAllDocumentTypesQuery();\r\n\r\n  //** UseEffect */\r\n  useEffect(() => {\r\n    getAllDocumentTypes();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isEditablePage && SecurityKey) {\r\n      const hasAddPermission = hasFunctionalPermission(SecurityKey.ADD);\r\n\r\n      if (hasAddPermission) {\r\n        if (hasAddPermission.hasAccess === true) {\r\n          setButtonVisible(true);\r\n        } else {\r\n          setButtonVisible(false);\r\n        }\r\n      }\r\n    }\r\n  }, [isEditablePage, SecurityKey]);\r\n\r\n  useEffect(() => {\r\n    if (isGetAllDocumentTypesSucess && allGetAllDocumentTypesData) {\r\n      const keyFilter = isSupplier ? \"isForSuppliers\" : \"isForCustomers\";\r\n      const getData = allGetAllDocumentTypesData\r\n        .filter((x) => x[keyFilter])\r\n        .map((item) => ({\r\n          value: item.documentTypeId,\r\n          label: item.type,\r\n        }));\r\n      const dropdownField = DocumentFormData.formFields.find(\r\n        (item) => item.dataField === \"documentTypeId\"\r\n      );\r\n      dropdownField.fieldSetting.options = getData;\r\n      setDocumentTypes(getData);\r\n    }\r\n  }, [isGetAllDocumentTypesSucess, allGetAllDocumentTypesData]);\r\n\r\n  //** Handle Change's */\r\n  const handleToggleModal = () => {\r\n    setShowModal(!showModal);\r\n  };\r\n  const handleMulDocToggleModal = () => {\r\n    setShowMulDocModal(!showMulDocModal);\r\n    if (childRef.current) {\r\n      childRef.current.callChildFunction();\r\n    }\r\n  };\r\n\r\n  const onSuccess = () => {\r\n    setShowModal(!showModal);\r\n    if (childRef.current) {\r\n      childRef.current.callChildFunction();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"document-section\">\r\n        <CardSection\r\n         \r\n          cardTitle={isArchive ? null : \"Attachments\"}\r\n          titleButtonClick={isArchive ? null : handleToggleModal}\r\n          textWithIcon={true}\r\n          iconImg={isArchive ? null : AppIcons.PlusIcon}\r\n          buttonClassName = {isArchive ? null : \"theme-button\"}\r\n          rightButton={isArchive ? null : buttonVisible ? buttonVisible : false}\r\n          buttonText= {isArchive ? null : \"Add Document\"}\r\n          multipleButton={isArchive ? null : buttonVisible ? buttonVisible : false}\r\n          rightButtonArray={isArchive ? null : [\r\n            {\r\n              buttonTypeClassName: \"theme-button\",\r\n              onClick: handleMulDocToggleModal,\r\n              buttonText: \"Add Multiple Document\",\r\n              textWithIcon: true,\r\n              imagePath: AppIcons.PlusIcon,\r\n            },\r\n          ]}\r\n        >\r\n          <div className=\"right-side-sec-padding-0\">\r\n          <DocumentList\r\n            childRef={childRef}\r\n            isEditablePage={isEditablePage}\r\n            SecurityKey={SecurityKey}\r\n            keyId={keyId}\r\n            isArchive={isArchive}\r\n            isSupplier={isSupplier}\r\n            showModal={showModal}\r\n            downloadDocument={downloadDocument}\r\n            deleteDocumentsById={deleteDocumentsById}\r\n            getDocumentsById={getDocumentsById}\r\n            setShowModal={setShowModal}\r\n            // onHandleEditDocument={handleEditDocument}\r\n          />\r\n          </div>\r\n        </CardSection>\r\n      </div>\r\n      <CenterModel\r\n        showModal={showModal}\r\n        handleToggleModal={handleToggleModal}\r\n        modalTitle=\"Add Document\"\r\n        // modalTitle={editDocumentData ? \"Update Document\" : \"Add Document\"}\r\n        modelSizeClass=\"w-50s\"\r\n      >\r\n        <AddDocument\r\n          isSupplier={isSupplier}\r\n          keyId={keyId}\r\n          showModal={showModal}\r\n          addDocuments={addDocuments}\r\n          handleToggleModal={handleToggleModal}\r\n          onSuccess={onSuccess}\r\n          isEditablePage={isEditablePage}\r\n          customerStatusId={customerStatusId}\r\n          // editDocumentData={editDocumentData}\r\n        />\r\n      </CenterModel>\r\n      <CenterModel\r\n        showModal={showMulDocModal}\r\n        handleToggleModal={handleMulDocToggleModal}\r\n        modalTitle=\"Add Multiple Document\"\r\n        // modalTitle={editDocumentData ? \"Update Document\" : \"Add Document\"}\r\n        modelSizeClass=\"w-50s\"\r\n      >\r\n        <AddMultipleDocument\r\n          addDocuments={addDocuments}\r\n          isSupplier={isSupplier}\r\n          keyId={keyId}\r\n          documentTypes={documentTypes}\r\n          handleMulDocToggleModal={handleMulDocToggleModal}\r\n          isEditablePage={isEditablePage}\r\n          customerStatusId={customerStatusId}\r\n        />\r\n      </CenterModel>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nDocumentGrid.propTypes = {\r\n  keyId: PropTypes.number.isRequired,\r\n  isSupplier: PropTypes.bool.isRequired,\r\n  addDocuments: PropTypes.func.isRequired,\r\n  downloadDocument: PropTypes.func.isRequired,\r\n  deleteDocumentsById: PropTypes.func.isRequired,\r\n  getDocumentsById: PropTypes.func.isRequired,\r\n  isEditablePage: PropTypes.bool.isRequired,\r\n  SecurityKey: PropTypes.shape({\r\n    ADD: PropTypes.string,\r\n    DELETE: PropTypes.string,\r\n    DOWNALOD: PropTypes.string,\r\n  }),\r\n};\r\nexport default DocumentGrid;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./CenterModel.scss\";\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\nconst CenterModel = ({ isApprovalValidate, showModal, handleToggleModal, children, ...props }) => {\r\n  return (\r\n    <Modal\r\n      className={`center-model-popup ${props.modelSizeClass}`}\r\n      show={showModal}\r\n      onHide={handleToggleModal}\r\n      keyboard={!isApprovalValidate}\r\n      backdrop={isApprovalValidate ? \"static\" : true}\r\n    >\r\n      <Modal.Header closeButton={!isApprovalValidate}>\r\n        <div className=\"model-title\">{props.modalTitle}</div>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nCenterModel.propTypes = {\r\n  isApprovalValidate: PropTypes.bool,\r\n  showModal: PropTypes.bool.isRequired,\r\n  handleToggleModal: PropTypes.func.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  modelSizeClass: PropTypes.string,\r\n  modalTitle: PropTypes.string\r\n};\r\nexport default CenterModel;\r\n","export const FunctionalitiesName = {\r\n    CUSTOMERBASICINFOUPDATE: \"Customer Basic info update\",\r\n    CUSTOMERADDADDRESS: \"Customer Add Address\",\r\n    CUSTOMERUPDATEADDRESS: \"Customer Update Address\",\r\n    CUSTOMERADDCONTACT: \"Customer Add Contact\",\r\n    CUSTOMERUPDATECONTACT: \"Customer Update Contact\",\r\n    CUSTOMERADDUPDATEFINANCIALSETTING: \"Customer Update Financial Setting\",\r\n    SUPPLIERBASICINFOUPDATE: \"Supplier Basic info update\",\r\n    SUPPLIERADDADDRESS: \"Supplier Add Address\",\r\n    SUPPLIERUPDATEADDRESS: \"Supplier Update Address\",\r\n    SUPPLIERADDCONTACT: \"Supplier Add Contact\",\r\n    SUPPLIERUPDATECONTACT: \"Supplier Update Contact\",\r\n    SUPPLIERADDUPDATEFINANCIALSETTING: \"Supplier Add/Update Financial Setting\",\r\n\r\n\r\n    //** This key's is not used  */\r\n    ADDCUSTOMER: \"Add Customer\",\r\n    UPDATESUPPLIER: \"Update Supplier\",\r\n    ADDSUPPLIER: \"Add Supplier\",\r\n    ADDADDRESS: \"Add Address\",\r\n    ADDBILLINGADDRESS: \"Add Billing Address\",\r\n\r\n\r\n    CUSTOMERUPDATE: \"Customer Update\",\r\n    // Address\r\n    ADDCUSTOMERBILLINGADDRESS: \"Add Customer Billing Address\",\r\n    UPDATECUSTOMERBILLINGADDRESS: \"Update Customer Billing Address\",\r\n    ADDCUSTOMERSHIPPINGADDRESS: \"Add Customer Shipping Address\",\r\n    UPDATECUSTOMERSHIPPINGADDRESS: \"Update Customer Shipping Address\",\r\n    // Contact\r\n    ADDCUSTOMERINVOICEFOLLOWUPCONTACT: \"Add Customer Invoice Follow Up Contact\",\r\n    UPDATECUSTOMERINVOICEFOLLOWUPCONTACT: \"Update Customer Invoice Follow Up Contact\",\r\n    ADDCUSTOMERINVOICESUBMISSIONCONTACT: \"Add Customer Invoice Submission Contact\",\r\n    UPDATECUSTOMERINVOICESUBMISSIONCONTACT: \"Update Customer Invoice Submission Contact\",\r\n    // Setting\r\n    ADDCUSTOMERFINANCIALSETTING: \"Add Customer Financial Setting\",\r\n    UPDATECUSTOMERFINANCIALSETTING: \"Update Customer Financial Setting\",\r\n    UPDATECUSTOMERSHIPPINGSETTING:\"Update Customer Shipping Setting\",\r\n    // Document\r\n    UPLOADCUSTOMERDOCUMENT: \"Upload Customer Document\"\r\n\r\n}"],"names":["DocumentFormData","name","initialState","documentTypeId","supplierId","customerId","attachment","base64File","storagePath","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","SELECT","EDITABLEDROPDOWN","dataField","fieldSetting","placeholder","isEnableOnChange","options","validation","type","style","containerCss","INPUT","allowSpace","maxLength","isDisable","FILE","isButtonVisible","isCustomButtonVisible","acceptedFiles","FileTypeIcons","GridColumnType","ACTION","icon","AppIcons","PdfIcon","DocIcon","XlsIcon","PptIcon","ZipIcon","CsvIcon","DocumentMultipleFormData","isFileNameCleared","isMultiple","fieldValidationMapping","FunctionalitiesName","CUSTOMERUPDATE","useValidateAndAddApprovalRequests","success","warning","SwalAlert","isApprovelLoading","setIsApprovelLoading","useState","addApprovalRequest","useAddApprovalRequestsMutation","checkFieldValueExists","useCheckFieldValueExistsMutation","compareObj","obj1","obj2","newValueNormalized","oldValueNormalized","normalizeValues","JSON","stringify","newValue","oldValue","isStrictEquality","normalize","obj","Array","isArray","map","item","Object","fromEntries","entries","_ref","key","value","toLowerCase","String","originalValues","findOriginalKey","normalizedKey","keys","find","ValidateRequestByApprovalRules","async","approvalRulesList","getData","length","requestData","eventName","relevantRules","filter","rule","isFunctionalObjMatch","allSuccessful","FieldValueResponse","approvalMessage","fieldName","isFunctional","includes","normalizedFieldName","originalKeyName","newFieldValue","fieldValue","data","exist","SuccessMessage","FieldsApprovalExists","replace","moduleId","functionalityId","tableId","functionalitiesFieldId","functionalityEventId","request","push","error","console","oldFieldValue","ToastService","ErrorMessage","FieldNameNotFound","isCustomeMessage","slice","join","ApprovalSuccess","isallSuccessful","getEventName","isEdit","functionalityName","AddressType","BILLING","toString","UPDATECUSTOMERBILLINGADDRESS","ADDCUSTOMERBILLINGADDRESS","SHIPPING","UPDATECUSTOMERSHIPPINGADDRESS","ADDCUSTOMERSHIPPINGADDRESS","ContactType","INVOICESUBMISSION","UPDATECUSTOMERINVOICESUBMISSIONCONTACT","ADDCUSTOMERINVOICESUBMISSIONCONTACT","INVOICEFOLLOWUP","UPDATECUSTOMERINVOICEFOLLOWUPCONTACT","ADDCUSTOMERINVOICEFOLLOWUPCONTACT","getFileIcon","extension","defaultFileIcon","isSupplier","keyId","handleMulDocToggleModal","addDocuments","documentTypes","isEditablePage","customerStatusId","ref","useRef","setAttachment","uploadedFiles","setUploadedFiles","openDropdownIndex","setOpenDropdownIndex","editableIndexes","setEditableIndexes","add","isLoading","isAddLoading","isSuccess","isAddSuccess","isAddData","documentTypeInput","setDocumentTypeInput","toggleEdit","index","updatedEditableIndexes","splice","indexOf","useEffect","errorMessage","buildTransformedDocumentData","documentType","log","text","transformDocumentTypeData","createdAt","Date","formActionHandler","DDL_FILE","newFiles","split","file","filename","parts","pop","getFileExtension","prevFiles","_jsxs","className","children","_jsx","FormCreator","config","onActionChange","onFormDataChange","updatedData","prevAttachments","colSpan","NoRecordFound","src","alt","Input","onChange","e","handleFileNameChange","newName","i","target","handleDocumemtTypeChange","onClick","background","border","cursor","padding","width","height","Select","option","selectedOption","handleTypeChange","newType","classNamePrefix","menuPortalTarget","document","body","menuPosition","isOpen","onMenuOpen","onMenuClose","styles","menuPortal","base","zIndex","_","handleFileRemove","Iconify","Buttons","buttonTypeClassName","buttonText","modifyData","matchingAttachment","att","ind","base64Data","every","ModulePathName","SUPPLIER","CUSTOMER","documentInfoList","DocumentDetailMissing","AddDocument","React","DocumentList","downloadDocument","deleteDocumentsById","isArchive","getDocumentsById","SecurityKey","childRef","showModal","setShowModal","setDocumentTypes","showMulDocModal","setShowMulDocModal","buttonVisible","setButtonVisible","getAllDocumentTypes","isGetAllDocumentTypesSucess","allGetAllDocumentTypesData","useLazyGetAllDocumentTypesQuery","hasAddPermission","hasFunctionalPermission","ADD","hasAccess","keyFilter","x","label","handleToggleModal","current","callChildFunction","CardSection","cardTitle","titleButtonClick","textWithIcon","iconImg","PlusIcon","buttonClassName","rightButton","multipleButton","rightButtonArray","imagePath","CenterModel","modalTitle","modelSizeClass","onSuccess","AddMultipleDocument","isApprovalValidate","props","Modal","show","onHide","keyboard","backdrop","Header","closeButton","Body","CUSTOMERBASICINFOUPDATE","CUSTOMERADDADDRESS","CUSTOMERUPDATEADDRESS","CUSTOMERADDCONTACT","CUSTOMERUPDATECONTACT","CUSTOMERADDUPDATEFINANCIALSETTING","SUPPLIERBASICINFOUPDATE","SUPPLIERADDADDRESS","SUPPLIERUPDATEADDRESS","SUPPLIERADDCONTACT","SUPPLIERUPDATECONTACT","SUPPLIERADDUPDATEFINANCIALSETTING","ADDCUSTOMER","UPDATESUPPLIER","ADDSUPPLIER","ADDADDRESS","ADDBILLINGADDRESS","ADDCUSTOMERFINANCIALSETTING","UPDATECUSTOMERFINANCIALSETTING","UPDATECUSTOMERSHIPPINGSETTING","UPLOADCUSTOMERDOCUMENT"],"sourceRoot":""}