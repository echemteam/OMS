{"version":3,"file":"static/js/1390.90a067a5.chunk.js","mappings":"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","sources":["pages/customerDetail/feature/customerSettingDetail/config/SettingData.js","pages/customerDetail/feature/customerSettingDetail/FinancialSettings.js"],"sourcesContent":["import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const SettingFormData = {\r\n  name: \"Setting Form\",\r\n  initialState: {\r\n    paymentTermId: \"\", creditLimit: 0, paymentMethodId: \"\", billingCurrency: \"USD\",\r\n    invoiceSubmissionInstruction: \"\", bankWireFee: '', salesTax: '', cardProcessingCharges: '', exemptSalesTax: true\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"paymentTermId\",\r\n      lable: \"Default Payment Terms Template \",\r\n      Field_Name: \"Default Payment Terms Template\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"paymentTermId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Default Payment Terms Template\",\r\n        isEnableOnChange: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-12 col-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"creditLimit\",\r\n      lable: \"Credit Limit \",\r\n      Field_Name: \"Credit Limit\",\r\n      fieldType: FormFieldTypes.NUMERIC,\r\n      dataField: \"creditLimit\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Credit Limit\",\r\n        allowSpace: true,\r\n        minLength: 0,\r\n        maxLength: 6,\r\n        masking: {\r\n          isMasking: true,\r\n          maskingType: 'currency',\r\n          countryCode: 'USD'\r\n        }\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-12 col-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"paymentMethodId\",\r\n      lable: \"Payment Method \",\r\n      Field_Name: \"Payment Method\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"paymentMethodId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Payment Method\",\r\n        isEnableOnChange: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-12 col-12 col-12 mb-input\",\r\n      },\r\n\r\n    },\r\n    {\r\n      id: \"billingCurrency\",\r\n      lable: \"Billing Currency \",\r\n      Field_Name: \"Billing Currency\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"billingCurrency\",\r\n      fieldSetting: {\r\n        placeholder: \"Billing Currency\",\r\n        isEnableOnChange: true,\r\n        options: [\r\n          { value: \"USD\", label: \"USD\" },\r\n          { value: \"IND\", label: \"IND\" },\r\n        ],\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-12 col-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"exemptSalesTax\",\r\n      lable: \"Exempt Sales Tax\",\r\n      Field_Name: \"Exempt Sales Tax\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"exemptSalesTax\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n        isEnableOnChange: true\r\n      },\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-6 col-xl-12 col-md-12 col-12 col-12 mb-input mt-3\",\r\n      },\r\n    },\r\n    {\r\n      id: \"salesTax\",\r\n      lable: \"Sales TAX (%)\",\r\n      Field_Name: \"Sales TAX\",\r\n      fieldType: FormFieldTypes.NUMERIC,\r\n      dataField: \"salesTax\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Sales TAX\"\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-6 col-xl-12 col-md-12 col-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"bankWireFee\",\r\n      lable: \"Bank Wire Fee ($)\",\r\n      Field_Name: \"Bank Wire Fee\",\r\n      fieldType: FormFieldTypes.NUMERIC,\r\n      dataField: \"bankWireFee\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Bank Wire Fee\",\r\n        maxLength: 4,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-6 col-xl-12 col-md-12 col-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"cardProcessingCharges\",\r\n      lable: \"Card Processing Charges (%)\",\r\n      Field_Name: \"Card Processing Charges\",\r\n      fieldType: FormFieldTypes.NUMERIC,\r\n      dataField: \"cardProcessingCharges\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Card Processing Charges\"\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-6 col-xl-12 col-md-12 col-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"invoiceSubmissionInstruction\",\r\n      lable: \"Invoice Submission Instruction \",\r\n      Field_Name: \"Invoice Submission Instruction\",\r\n      fieldType: FormFieldTypes.CKEDITOR,\r\n      dataField: \"invoiceSubmissionInstruction\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n        allowSpace: true,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false\r\n  }\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useContext, useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\n//** Libs's */\r\nimport { SettingFormData } from \"./config/SettingData\";\r\nimport { securityKey } from \"../../../../data/SecurityKey\";\r\nimport Buttons from \"../../../../components/ui/button/Buttons\";\r\nimport FormCreator from \"../../../../components/Forms/FormCreator\";\r\nimport DataLoader from \"../../../../components/ui/dataLoader/DataLoader\";\r\nimport { getFieldData, setDropDownOptionField, setFieldSetting } from \"../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport BasicDetailContext from \"../../../../utils/ContextAPIs/Customer/BasicDetailContext\";\r\nimport { hasFunctionalPermission } from \"../../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\nimport { CountryId, PaymentMethodTypes } from \"../../../../utils/Enums/commonEnums\";\r\nimport PropTypes from \"prop-types\";\r\n//** Service's */\r\nimport ToastService from \"../../../../services/toastService/ToastService\";\r\nimport { useAddEditCustomerSettingsMutation, useLazyGetAllPaymentMethodQuery, useLazyGetAllPaymentTermsQuery, useLazyGetDetailsbyCustomerIDQuery, } from \"../../../../app/services/customerSettingsAPI\";\r\nimport { isCustomerOrSupplierApprovedStatus } from \"../../../../utils/CustomerSupplier/CustomerSupplierUtils\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst ExemptSalesTax = { exemptSalesTax: true };\r\n\r\nconst FinancialSettings = ({ isEditablePage, customerStatusId }) => {\r\n\r\n  const settingFormRef = useRef();\r\n  const [isBankFee, setIsBankFee] = useState(false);\r\n  const [showButton, setShowButton] = useState(true);\r\n  const [isCardCharges, setIsCardCharges] = useState(false);\r\n  const [exemptSalesTax, setExemptSalesTax] = useState(true);\r\n  const organizationSetting = useSelector((state) => state.organization);\r\n  const [shouldRerenderFormCreator, setShouldRerenderFormCreator] = useState(false);\r\n  const [customerSettingFormData, setCustomerSettingFormData] = useState(SettingFormData);\r\n  const [customerAccountingSettingId, setCustomerAccountingSettingId] = useState(0);\r\n  const { customerId, customerCountryId, setCustomerCountryId, isResponsibleUser, settingRef, activeTab, setIsExistsFinancialSetting, financialRef,\r\n    subCustomer, getCustomerCompletionCount } = useContext(BasicDetailContext);\r\n\r\n  //** API Call's */\r\n  const [getAllPaymentTerms, { isSuccess: isGetAllPaymentTermsSuccess, data: isGetAllPaymentTermsData }] = useLazyGetAllPaymentTermsQuery();\r\n  const [getAllPaymentMethod, { isSuccess: isGetAllPaymentMethodSuccess, data: isGetAllPaymentMethodData }] = useLazyGetAllPaymentMethodQuery();\r\n  const [GetDetailsbyCustomerID, { isFetching: isGetDetailByCustomerIDFetching, isSuccess: isGetDetailByCustomerIDSuccess, data: isGetDetailByCustomerIDData }] = useLazyGetDetailsbyCustomerIDQuery();\r\n  const [addEditCustomerSettings, { isLoading: isAddEditCustomerSettingsLoading, isSuccess: isAddEditCustomerSettingsSuccess, data: isAddEditCustomerSettingsData }] = useAddEditCustomerSettingsMutation();\r\n\r\n  const { formSetting } = SettingFormData;\r\n  const hasAddEditPermission = hasFunctionalPermission(securityKey.ADDEDITCUSTOMERFINANCIAL);\r\n\r\n  useEffect(() => {\r\n    if (isEditablePage) {\r\n      if (!isResponsibleUser) {\r\n        if (hasAddEditPermission.hasAccess === true) {\r\n          setShowButton(true);\r\n          formSetting.isViewOnly = false;\r\n        } else {\r\n          setShowButton(false);\r\n          formSetting.isViewOnly = true;\r\n        }\r\n      }\r\n    }\r\n  }, [hasAddEditPermission]);\r\n\r\n  useEffect(() => {\r\n    getAllPaymentTerms();\r\n    getAllPaymentMethod();\r\n    setCustomerAccountingSettingId(0);\r\n    // removeCardProcessCharge();\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!isEditablePage && activeTab === 3) {\r\n      if (ExemptSalesTax.exemptSalesTax) {\r\n        handleCheckboxChanges(true, \"exemptSalesTax\");\r\n        // addRemoveBankFee();\r\n      }\r\n    }\r\n  }, [activeTab])\r\n\r\n  useEffect(() => {\r\n    if (customerCountryId) {\r\n      GetDetailsbyCustomerID(customerId);\r\n      addRemoveBankFee();\r\n    }\r\n  }, [customerCountryId, setCustomerCountryId, customerStatusId])\r\n\r\n  useEffect(() => {\r\n    if (customerId > 0) {\r\n      GetDetailsbyCustomerID(customerId);\r\n      addRemoveBankFee();\r\n    };\r\n  }, [customerId]);\r\n\r\n  useEffect(() => {\r\n    let formData = { ...customerSettingFormData };\r\n    const isBankFeePresent = formData.formFields.some((field) => field.dataField === 'bankWireFee');\r\n    const isCardPresent = formData.formFields.some((field) => field.dataField === 'cardProcessingCharges');\r\n    if (isBankFeePresent) {\r\n      setIsBankFee(true);\r\n    } else if (!isBankFeePresent) {\r\n      setIsBankFee(false);\r\n    }\r\n    if (isCardPresent) {\r\n      setIsCardCharges(true);\r\n    } else if (!isCardPresent) {\r\n      setIsCardCharges(false);\r\n    }\r\n  }, [customerSettingFormData])\r\n\r\n  const addRemoveBankFee = () => {\r\n    let updatedFormFields;\r\n    let formData = { ...customerSettingFormData };\r\n    const isBankFeePresent = formData.formFields.some((field) => field.dataField === 'bankWireFee');\r\n    const isSalesTaxPresent = formData.formFields.some((field) => field.dataField === 'salesTax');\r\n    if (customerCountryId === CountryId.USA) {\r\n      updatedFormFields = formData.formFields.filter((field) => field.dataField !== 'bankWireFee');\r\n      formData.formFields = updatedFormFields\r\n    } else if (customerCountryId !== CountryId.USA && !isBankFeePresent) {\r\n      const findBankFields = getFieldData(SettingFormData, 'bankWireFee');\r\n      const insertIndex = formData.formFields.length - 1;\r\n      updatedFormFields = [...formData.formFields];\r\n      updatedFormFields.splice(insertIndex, 0, findBankFields);\r\n      formData.formFields = updatedFormFields;\r\n    }\r\n    if (!isSalesTaxPresent && !exemptSalesTax) {\r\n      const findSalesTaxFields = getFieldData(SettingFormData, 'salesTax');\r\n      const insertIndex = formData.formFields.length - 2;\r\n      updatedFormFields = [...formData.formFields];\r\n      updatedFormFields.splice(insertIndex, 0, findSalesTaxFields);\r\n      formData.formFields = updatedFormFields;\r\n    }\r\n    if (exemptSalesTax) {\r\n      updatedFormFields = formData.formFields.filter((field) => field.dataField !== 'salesTax');\r\n      formData.formFields = updatedFormFields\r\n    }\r\n    formData.formFields = formData.formFields.filter((field) => field.dataField !== 'cardProcessingCharges');\r\n    if (!isGetDetailByCustomerIDData && !isGetDetailByCustomerIDData?.creditLimit && !formData.initialState.creditLimit) {\r\n      formData.initialState.creditLimit = (organizationSetting.accountingSetting && organizationSetting.accountingSetting.creditLimit) ? organizationSetting.accountingSetting.creditLimit : 1000\r\n    }\r\n    if (!isGetDetailByCustomerIDData && !isGetDetailByCustomerIDData?.paymentTermId && !formData.initialState.paymentTermId) {\r\n      formData.initialState.paymentTermId = (organizationSetting.otherCharge && organizationSetting.otherCharge.defaultPaymentTerms) ? organizationSetting.otherCharge.defaultPaymentTerms : \"\"\r\n    }\r\n    if (!isGetDetailByCustomerIDData && !isGetDetailByCustomerIDData?.cardProcessingCharges && !formData.initialState.cardProcessingCharges) {\r\n      formData.initialState.cardProcessingCharges = (organizationSetting.otherCharge && organizationSetting.otherCharge.creditCardServiceFees) ? organizationSetting.otherCharge.creditCardServiceFees : \"\"\r\n    }\r\n    if (!isGetDetailByCustomerIDData && !isGetDetailByCustomerIDData?.bankWireFee && !formData.initialState.bankWireFee) {\r\n      formData.initialState.bankWireFee = (organizationSetting.otherCharge && organizationSetting.otherCharge.bankWireFees) ? organizationSetting.otherCharge.bankWireFees : \"\"\r\n    }\r\n    setCustomerSettingFormData(formData);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isGetAllPaymentTermsSuccess && isGetAllPaymentTermsData) {\r\n      setDropDownOptionField(isGetAllPaymentTermsData, \"paymentTermId\", \"paymentTerm\", SettingFormData, \"paymentTermId\");\r\n      setShouldRerenderFormCreator((prevState) => !prevState);\r\n    }\r\n  }, [isGetAllPaymentTermsSuccess, isGetAllPaymentTermsData]);\r\n\r\n  useEffect(() => {\r\n    if (isGetAllPaymentMethodSuccess && isGetAllPaymentMethodData) {\r\n      setDropDownOptionField(isGetAllPaymentMethodData, \"paymentMethodId\", \"method\", SettingFormData, \"paymentMethodId\");\r\n      setShouldRerenderFormCreator((prevState) => !prevState);\r\n    }\r\n  }, [isGetAllPaymentMethodSuccess, isGetAllPaymentMethodData]);\r\n\r\n  useEffect(() => {\r\n    if (!isGetDetailByCustomerIDFetching && isGetDetailByCustomerIDSuccess && isGetDetailByCustomerIDData) {\r\n      if (isGetDetailByCustomerIDData && !isGetDetailByCustomerIDFetching) {\r\n        if (isCustomerOrSupplierApprovedStatus(customerStatusId)) {\r\n          setFieldSetting(customerSettingFormData, 'billingCurrency', 'isDisabled', true);\r\n        } else {\r\n          setFieldSetting(customerSettingFormData, 'billingCurrency', 'isDisabled');\r\n        }\r\n        let modifyFormFields;\r\n        if (isGetDetailByCustomerIDData.paymentMethodId !== PaymentMethodTypes.CREDITCARD) {\r\n          setIsBankFee(true);\r\n          setIsCardCharges(false);\r\n          modifyFormFields = handleExcludeCardValue(isGetDetailByCustomerIDData.paymentMethodId, false);\r\n        } else if (isGetDetailByCustomerIDData.paymentMethodId === PaymentMethodTypes.CREDITCARD) {\r\n          setIsBankFee(false);\r\n          setIsCardCharges(true);\r\n          modifyFormFields = handleCrditCardValue(isGetDetailByCustomerIDData.paymentMethodId, false);\r\n        }\r\n        let formData = { ...modifyFormFields };\r\n        formData.initialState = {\r\n          ...modifyFormFields.initialState,\r\n          customerAccountingSettingId: isGetDetailByCustomerIDData.customerAccountingSettingId,\r\n          paymentTermId: isGetDetailByCustomerIDData.paymentTermId,\r\n          creditLimit: isGetDetailByCustomerIDData.creditLimit,\r\n          paymentMethodId: isGetDetailByCustomerIDData.paymentMethodId,\r\n          billingCurrency: isGetDetailByCustomerIDData.billingCurrency,\r\n          invoiceSubmissionInstruction: isGetDetailByCustomerIDData.invoiceSubmissionInstruction,\r\n          bankWireFee: isGetDetailByCustomerIDData.bankWireFee,\r\n          salesTax: isGetDetailByCustomerIDData.salesTax,\r\n          exemptSalesTax: isGetDetailByCustomerIDData.exemptSalesTax,\r\n          cardProcessingCharges: isGetDetailByCustomerIDData.cardProcessingCharges,\r\n        };\r\n        if (isGetDetailByCustomerIDData.exemptSalesTax) {\r\n          formData.formFields = formData.formFields.filter((field) => field.dataField !== 'salesTax');\r\n        } else {\r\n          const isBankFeePresent = formData.formFields.some((field) => field.dataField === 'bankWireFee');\r\n          const isCardPresent = formData.formFields.some((field) => field.dataField === 'cardProcessingCharges');\r\n          const isSalesTaxPresent = formData.formFields.some((field) => (field.dataField === 'salesTax'));\r\n          if (!isSalesTaxPresent) {\r\n            const findSalesTaxFields = getFieldData(SettingFormData, 'salesTax');\r\n            let setIndex;\r\n            if ((isBankFeePresent && !isCardPresent) || (!isBankFeePresent && isCardPresent)) {\r\n              setIndex = 2;\r\n            } else if (isBankFeePresent && isCardPresent) {\r\n              setIndex = 3;\r\n            }\r\n            else {\r\n              setIndex = 1;\r\n            }\r\n            const insertIndex = formData.formFields.length - setIndex;\r\n            let updatedFormFields = [...formData.formFields];\r\n            updatedFormFields.splice(insertIndex, 0, findSalesTaxFields);\r\n            formData.formFields = updatedFormFields;\r\n          }\r\n        }\r\n        setCustomerSettingFormData(formData);\r\n        if (!isGetDetailByCustomerIDData.exemptSalesTax) {\r\n          setExemptSalesTax(false);\r\n        }\r\n        setShouldRerenderFormCreator((prevState) => !prevState);\r\n      }\r\n    } else {\r\n      if (isEditablePage && activeTab === 0) {\r\n        if (ExemptSalesTax.exemptSalesTax) {\r\n          handleCheckboxChanges(true, \"exemptSalesTax\")\r\n        }\r\n      }\r\n    }\r\n  }, [isGetDetailByCustomerIDFetching, isGetDetailByCustomerIDSuccess, isGetDetailByCustomerIDData,]);\r\n\r\n  useEffect(() => {\r\n    if (isAddEditCustomerSettingsSuccess && isAddEditCustomerSettingsData) {\r\n      ToastService.success(isAddEditCustomerSettingsData.errorMessage);\r\n      setIsExistsFinancialSetting(true);\r\n      setCustomerAccountingSettingId(isAddEditCustomerSettingsData.keyValue);\r\n      if (financialRef.current) {\r\n        financialRef.current.handleGetDefaultList();\r\n      }\r\n      getCustomerCompletionCount(customerId, subCustomer);\r\n    }\r\n  }, [isAddEditCustomerSettingsSuccess, isAddEditCustomerSettingsData]);\r\n\r\n  useImperativeHandle(settingRef, () => ({\r\n    onhandleEdit,\r\n  }));\r\n\r\n  const onhandleEdit = async () => {\r\n    const settingFormData = settingFormRef.current.getFormData();\r\n    const accountingSettingId = settingFormData && settingFormData.customerAccountingSettingId ? settingFormData.customerAccountingSettingId : customerAccountingSettingId;\r\n    if (settingFormData && !accountingSettingId) {\r\n      const request = {\r\n        ...settingFormData,\r\n        customerId: customerId,\r\n        paymentTermId: settingFormData.paymentTermId.value,\r\n        paymentMethodId: settingFormData.paymentMethodId.value,\r\n        billingCurrency: !settingFormData.billingCurrency?.value ? settingFormData.billingCurrency : settingFormData.billingCurrency.value,\r\n        bankWireFee: settingFormData.bankWireFee && isBankFee ? settingFormData.bankWireFee : null,\r\n        salesTax: settingFormData.salesTax && !settingFormData.exemptSalesTax ? settingFormData.salesTax : null,\r\n        exemptSalesTax: settingFormData.exemptSalesTax,\r\n        cardProcessingCharges: settingFormData.cardProcessingCharges && isCardCharges ? settingFormData.cardProcessingCharges : null,\r\n      };\r\n      if (!settingFormData.exemptSalesTax) {\r\n        setExemptSalesTax(false);\r\n      }\r\n      addEditCustomerSettings(request);\r\n    } else if (settingFormData && accountingSettingId) {\r\n      const updaterequest = updateRequestObj(settingFormData, accountingSettingId);\r\n      addEditCustomerSettings(updaterequest);\r\n    }\r\n  };\r\n\r\n  const updateRequestObj = (data, accountingSettingId) => {\r\n    return {\r\n      ...data,\r\n      customerAccountingSettingId: data.customerAccountingSettingId ? data.customerAccountingSettingId : accountingSettingId,\r\n      customerId: customerId,\r\n      paymentTermId: data.paymentTermId && typeof data.paymentTermId === \"object\"\r\n        ? data.paymentTermId.value : data.paymentTermId,\r\n      paymentMethodId: data.paymentMethodId && typeof data.paymentMethodId === \"object\"\r\n        ? data.paymentMethodId.value : data.paymentMethodId,\r\n      billingCurrency: data.billingCurrency && typeof data.billingCurrency === \"object\"\r\n        ? data.billingCurrency.value : data.billingCurrency,\r\n      bankWireFee: data.bankWireFee && isBankFee ? data.bankWireFee : null,\r\n      salesTax: data.salesTax && !data.exemptSalesTax ? data.salesTax : null,\r\n      exemptSalesTax: data.exemptSalesTax,\r\n      cardProcessingCharges: data.cardProcessingCharges && isCardCharges ? data.cardProcessingCharges : null,\r\n    };\r\n  }\r\n\r\n  const handleSalesTax = (data, dataField) => {\r\n    if (dataField === 'exemptSalesTax' && data) {\r\n      let updatedFormFields;\r\n      let formData = { ...customerSettingFormData };\r\n      formData.formFields = formData.formFields.filter((field) => field.dataField !== 'salesTax');\r\n      formData.formFields = formData.formFields.filter((field) => field.dataField !== 'cardProcessingCharges');\r\n\r\n      const isBankFeePresent = formData.formFields.some((field) => field.dataField === 'bankWireFee');\r\n      if (customerCountryId === CountryId.USA) {\r\n        updatedFormFields = formData.formFields.filter((field) => field.dataField !== 'bankWireFee');\r\n        formData.formFields = updatedFormFields\r\n      } else if (customerCountryId !== CountryId.USA && !isBankFeePresent) {\r\n        const findBankFields = getFieldData(SettingFormData, 'bankWireFee');\r\n        const insertIndex = formData.formFields.length - 1;\r\n        updatedFormFields = [...formData.formFields];\r\n        updatedFormFields.splice(insertIndex, 0, findBankFields);\r\n        formData.formFields = updatedFormFields;\r\n      }\r\n      if (!isGetDetailByCustomerIDData && !isGetDetailByCustomerIDData?.creditLimit && !formData.initialState.creditLimit) {\r\n        formData.initialState.creditLimit = (organizationSetting.accountingSetting && organizationSetting.accountingSetting.creditLimit) ? organizationSetting.accountingSetting.creditLimit : 1000\r\n      }\r\n      if (!isGetDetailByCustomerIDData && !isGetDetailByCustomerIDData?.paymentTermId && !formData.initialState.paymentTermId) {\r\n        formData.initialState.paymentTermId = (organizationSetting.otherCharge && organizationSetting.otherCharge.defaultPaymentTerms) ? organizationSetting.otherCharge.defaultPaymentTerms : \"\"\r\n      }\r\n      if (!isGetDetailByCustomerIDData && !isGetDetailByCustomerIDData?.cardProcessingCharges && !formData.initialState.cardProcessingCharges) {\r\n        formData.initialState.cardProcessingCharges = (organizationSetting.otherCharge && organizationSetting.otherCharge.creditCardServiceFees) ? organizationSetting.otherCharge.creditCardServiceFees : \"\"\r\n      }\r\n      if (!isGetDetailByCustomerIDData && !isGetDetailByCustomerIDData?.bankWireFee && !formData.initialState.bankWireFee) {\r\n        formData.initialState.bankWireFee = (organizationSetting.otherCharge && organizationSetting.otherCharge.bankWireFees) ? organizationSetting.otherCharge.bankWireFees : \"\"\r\n      }\r\n      setCustomerSettingFormData(formData);\r\n    } else if (dataField === 'exemptSalesTax' && !data) {\r\n      let updatedFormFields;\r\n      let formData = { ...customerSettingFormData };\r\n      const isBankFeePresent = formData.formFields.some((field) => field.dataField === 'bankWireFee');\r\n      const isCardPresent = formData.formFields.some((field) => field.dataField === 'cardProcessingCharges');\r\n      let setIndex;\r\n      if ((isBankFeePresent && !isCardPresent) || (!isBankFeePresent && isCardPresent)) {\r\n        setIndex = 2;\r\n      } else if (isBankFeePresent && isCardPresent) {\r\n        setIndex = 3;\r\n      } else {\r\n        setIndex = 1;\r\n      }\r\n      const isSalesTaxPresent = formData.formFields.some((field) => (field.dataField === 'salesTax'));\r\n      if (!isSalesTaxPresent) {\r\n        const findSalesTaxFields = getFieldData(SettingFormData, 'salesTax');\r\n        const insertIndex = formData.formFields.length - setIndex;\r\n        updatedFormFields = [...formData.formFields];\r\n        updatedFormFields.splice(insertIndex, 0, findSalesTaxFields);\r\n        formData.formFields = updatedFormFields;\r\n        const getFormData = settingFormRef.current.getFormDataWithoutValidation();\r\n        formData.initialState = { ...getFormData, exemptSalesTax: data, salesTax: '' };\r\n        if (!isGetDetailByCustomerIDData && !isGetDetailByCustomerIDData?.creditLimit && !formData.initialState.creditLimit) {\r\n          formData.initialState.creditLimit = (organizationSetting.accountingSetting && organizationSetting.accountingSetting.creditLimit) ? organizationSetting.accountingSetting.creditLimit : 1000\r\n        }\r\n        if (!isGetDetailByCustomerIDData && !isGetDetailByCustomerIDData?.paymentTermId && !formData.initialState.paymentTermId) {\r\n          formData.initialState.paymentTermId = (organizationSetting.otherCharge && organizationSetting.otherCharge.defaultPaymentTerms) ? organizationSetting.otherCharge.defaultPaymentTerms : \"\"\r\n        }\r\n        if (!isGetDetailByCustomerIDData && !isGetDetailByCustomerIDData?.cardProcessingCharges && !formData.initialState.cardProcessingCharges) {\r\n          formData.initialState.cardProcessingCharges = (organizationSetting.otherCharge && organizationSetting.otherCharge.creditCardServiceFees) ? organizationSetting.otherCharge.creditCardServiceFees : \"\"\r\n        }\r\n        if (!isGetDetailByCustomerIDData && !isGetDetailByCustomerIDData?.bankWireFee && !formData.initialState.bankWireFee) {\r\n          formData.initialState.bankWireFee = (organizationSetting.otherCharge && organizationSetting.otherCharge.bankWireFees) ? organizationSetting.otherCharge.bankWireFees : \"\"\r\n        }\r\n        setCustomerSettingFormData(formData);\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleCheckboxChanges = (data, dataField) => {\r\n    handleSalesTax(data, dataField);\r\n  };\r\n\r\n  const handleCrditCardValue = (dropdownValue, isHandleChange) => {\r\n    let findCreditFields = getFieldData(SettingFormData, 'cardProcessingCharges');\r\n    let formData = { ...customerSettingFormData };\r\n    if (customerCountryId === CountryId.USA) {\r\n      formData.formFields = formData.formFields.filter((field) => field.dataField !== 'bankWireFee');\r\n    }\r\n    let value = isHandleChange ? dropdownValue.value : dropdownValue;\r\n    if (customerCountryId !== CountryId.USA && value === PaymentMethodTypes.CREDITCARD) {\r\n      formData.formFields = formData.formFields.filter((field) => field.dataField !== 'bankWireFee');\r\n    }\r\n    const isCardChargePresent = formData.formFields.some((field) => field.dataField === 'cardProcessingCharges');\r\n    if (!isCardChargePresent) {\r\n      const insertIndex = formData.formFields.length - 1;\r\n      let updatedFormFields = [...formData.formFields];\r\n      updatedFormFields.splice(insertIndex, 0, findCreditFields);\r\n      formData.formFields = updatedFormFields;\r\n    }\r\n    const getFormData = settingFormRef.current.getFormDataWithoutValidation();\r\n    formData.initialState = {\r\n      ...getFormData, paymentMethodId: dropdownValue, bankWireFee: '',\r\n      cardProcessingCharges: (organizationSetting.otherCharge && organizationSetting.otherCharge.creditCardServiceFees) ? organizationSetting.otherCharge.creditCardServiceFees : \"\",\r\n    };\r\n    return formData;\r\n  }\r\n\r\n  const handleExcludeCardValue = (dropdownValue, isHandleChange) => {\r\n    let value = isHandleChange ? dropdownValue.value : dropdownValue;\r\n    const findCreditFields = getFieldData(SettingFormData, 'bankWireFee');\r\n    let formData = { ...customerSettingFormData };\r\n    formData.formFields = formData.formFields.filter((field) => field.dataField !== 'cardProcessingCharges');\r\n    const isBankFeePresent = formData.formFields.some((field) => field.dataField === 'bankWireFee');\r\n    if (!isBankFeePresent && value !== PaymentMethodTypes.ACHECHECK) {\r\n      const insertIndex = formData.formFields.length - 1;\r\n      let updatedFormFields = [...formData.formFields];\r\n      if (customerCountryId !== CountryId.USA) {\r\n        updatedFormFields.splice(insertIndex, 0, findCreditFields);\r\n      }\r\n      formData.formFields = updatedFormFields;\r\n    } else if (isBankFeePresent) {\r\n      if (customerCountryId === CountryId.USA || value === PaymentMethodTypes.ACHECHECK) {\r\n        let updatedFormFields = [...formData.formFields];\r\n        formData.formFields = formData.formFields.filter((field) => field.dataField !== 'bankWireFee');\r\n        updatedFormFields = [...formData.formFields];\r\n        formData.formFields = updatedFormFields;\r\n      }\r\n    }\r\n    if (customerCountryId !== CountryId.USA && value === PaymentMethodTypes.CREDITCARD) {\r\n      formData.formFields = formData.formFields.filter((field) => field.dataField !== 'bankWireFee');\r\n    }\r\n    const getFormData = settingFormRef.current.getFormDataWithoutValidation();\r\n    formData.initialState = {\r\n      ...getFormData, paymentMethodId: dropdownValue, cardProcessingCharges: '',\r\n      bankWireFee: (organizationSetting.otherCharge && organizationSetting.otherCharge.bankWireFees) ? organizationSetting.otherCharge.bankWireFees : \"\"\r\n    };\r\n    return formData;\r\n  }\r\n\r\n  const handleDropdownChanges = (data, dataField) => {\r\n    if (dataField === 'paymentMethodId') {\r\n      if (data.value !== PaymentMethodTypes.CREDITCARD) {\r\n        setIsBankFee(true);\r\n        setIsCardCharges(false);\r\n        const modifyFormFields = handleExcludeCardValue(data, true);\r\n        setCustomerSettingFormData(modifyFormFields);\r\n      } else if (data.value === PaymentMethodTypes.CREDITCARD) {\r\n        setIsBankFee(false);\r\n        setIsCardCharges(true);\r\n        const modifyFormFields = handleCrditCardValue(data, true);\r\n        setCustomerSettingFormData(modifyFormFields);\r\n      }\r\n    }\r\n  }\r\n  //** Action Handler */\r\n  const formActionHandler = {\r\n    DDL_CHANGED: handleDropdownChanges,\r\n    CHECK_CHANGE: handleCheckboxChanges\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {/* <Masking type=\"currency\" currencyCode=\"USD\" currencySymbol=\"$\" maxLength={4} /> */}\r\n      {!isGetDetailByCustomerIDFetching ?\r\n        <FormCreator\r\n          config={customerSettingFormData}\r\n          ref={settingFormRef}\r\n          key={shouldRerenderFormCreator}\r\n          // {...customerSettingFormData}\r\n          onCheckBoxChange={formActionHandler}\r\n          onActionChange={formActionHandler} />\r\n        : <DataLoader />\r\n      }\r\n      {isEditablePage &&\r\n        showButton ?\r\n        <div className=\"col-md-12 mt-2 mb-3\">\r\n          <div className=\"d-flex align-item-end justify-content-end\">\r\n            <div className=\"d-flex align-item-end\">\r\n              <Buttons\r\n                buttonTypeClassName=\"theme-button\"\r\n                buttonText=\"Save\"\r\n                onClick={onhandleEdit}\r\n                isLoading={isAddEditCustomerSettingsLoading}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        : null\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nFinancialSettings.propTypes = {\r\n  isEditablePage: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default FinancialSettings;\r\n"],"names":["SettingFormData","name","initialState","paymentTermId","creditLimit","paymentMethodId","billingCurrency","invoiceSubmissionInstruction","bankWireFee","salesTax","cardProcessingCharges","exemptSalesTax","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","SELECT","dataField","fieldSetting","placeholder","isEnableOnChange","validation","type","style","containerCss","NUMERIC","allowSpace","minLength","maxLength","masking","isMasking","maskingType","countryCode","options","value","label","CHECKBOX","CKEDITOR","formSetting","isViewOnly","ExemptSalesTax","_ref","isEditablePage","customerStatusId","settingFormRef","useRef","isBankFee","setIsBankFee","useState","showButton","setShowButton","isCardCharges","setIsCardCharges","setExemptSalesTax","organizationSetting","useSelector","state","organization","shouldRerenderFormCreator","setShouldRerenderFormCreator","customerSettingFormData","setCustomerSettingFormData","customerAccountingSettingId","setCustomerAccountingSettingId","customerId","customerCountryId","setCustomerCountryId","isResponsibleUser","settingRef","activeTab","setIsExistsFinancialSetting","financialRef","subCustomer","getCustomerCompletionCount","useContext","BasicDetailContext","getAllPaymentTerms","isSuccess","isGetAllPaymentTermsSuccess","data","isGetAllPaymentTermsData","useLazyGetAllPaymentTermsQuery","getAllPaymentMethod","isGetAllPaymentMethodSuccess","isGetAllPaymentMethodData","useLazyGetAllPaymentMethodQuery","GetDetailsbyCustomerID","isFetching","isGetDetailByCustomerIDFetching","isGetDetailByCustomerIDSuccess","isGetDetailByCustomerIDData","useLazyGetDetailsbyCustomerIDQuery","addEditCustomerSettings","isLoading","isAddEditCustomerSettingsLoading","isAddEditCustomerSettingsSuccess","isAddEditCustomerSettingsData","useAddEditCustomerSettingsMutation","hasAddEditPermission","hasFunctionalPermission","securityKey","ADDEDITCUSTOMERFINANCIAL","useEffect","hasAccess","handleCheckboxChanges","addRemoveBankFee","formData","isBankFeePresent","some","field","isCardPresent","updatedFormFields","isSalesTaxPresent","CountryId","USA","filter","findBankFields","getFieldData","insertIndex","length","splice","findSalesTaxFields","accountingSetting","otherCharge","defaultPaymentTerms","creditCardServiceFees","bankWireFees","setDropDownOptionField","prevState","modifyFormFields","isCustomerOrSupplierApprovedStatus","setFieldSetting","PaymentMethodTypes","CREDITCARD","handleExcludeCardValue","handleCrditCardValue","setIndex","ToastService","success","errorMessage","keyValue","current","handleGetDefaultList","useImperativeHandle","onhandleEdit","async","settingFormData","getFormData","accountingSettingId","_settingFormData$bill","request","updaterequest","updateRequestObj","handleSalesTax","getFormDataWithoutValidation","dropdownValue","isHandleChange","findCreditFields","ACHECHECK","formActionHandler","DDL_CHANGED","handleDropdownChanges","CHECK_CHANGE","_jsxs","className","children","_jsx","DataLoader","FormCreator","config","ref","onCheckBoxChange","onActionChange","Buttons","buttonTypeClassName","buttonText","onClick"],"sourceRoot":""}