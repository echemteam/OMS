{"version":3,"file":"static/js/9178.c090f56c.chunk.js","mappings":"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","sources":["components/ui/centerModel/CenterModel.js","pages/Security/securityManagement/features/config/AddEditRoleForm.data.js","pages/Security/securityManagement/features/AddEditRole.js","pages/Security/securityManagement/features/config/AssignUserForm.data.js","pages/Security/securityManagement/features/AssignUser.js","pages/Security/securityManagement/SecurityRoleManagement.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./CenterModel.scss\";\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\nconst CenterModel = ({ isApprovalValidate, showModal, handleToggleModal, children, ...props }) => {\r\n  return (\r\n    <Modal\r\n      className={`center-model-popup ${props.modelSizeClass}`}\r\n      show={showModal}\r\n      onHide={handleToggleModal}\r\n      keyboard={!isApprovalValidate}\r\n      backdrop={isApprovalValidate ? \"static\" : true}\r\n    >\r\n      <Modal.Header closeButton={!isApprovalValidate}>\r\n        <div className=\"model-title\">{props.modalTitle}</div>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nCenterModel.propTypes = {\r\n  isApprovalValidate: PropTypes.bool,\r\n  showModal: PropTypes.bool.isRequired,\r\n  handleToggleModal: PropTypes.func.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  modelSizeClass: PropTypes.string,\r\n  modalTitle: PropTypes.string\r\n};\r\nexport default CenterModel;\r\n","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\nimport { GridColumnType } from \"../../../../../data/gridColumnType\";\r\n\r\n\r\nexport const addEditRoleFormData = {\r\n  name: \"Add Edit Role Form\",\r\n  initialState: { roleName: \"\" },\r\n  formFields: [\r\n    {\r\n      id: \"roleName\",\r\n      lable: \"Role Name \",\r\n      Field_Name: \"Role Name\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"roleName\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Role Name\",\r\n        allowSpace: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 mb-input\",\r\n      },\r\n    },\r\n\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false\r\n  }\r\n};\r\n\r\nexport const SecurityRoleGridConfig = {\r\n  columns: [\r\n    {\r\n      name: \"Role Name\",\r\n      fieldName: \"roleName\",\r\n      allowShort: true,\r\n      colStyle: {\r\n        width: \"80%\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      colStyle: {\r\n        width: \"20%\",\r\n      },\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        // allowUser: true,\r\n        // allowPermission: true,\r\n        allowEdit: true,\r\n        allowDelete: true,\r\n      },\r\n      customAction: [\r\n        {\r\n          name: \"USER\",\r\n          title: \"Assign User\",\r\n          iconName: \"mi:user\",\r\n          className: \"disable-icon\"\r\n        },\r\n        {\r\n          name: \"PERMISSION\",\r\n          iconName: \"ph:key\",\r\n          title: \"Permission\",\r\n          className: \"key-icon\"\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { addEditRoleFormData } from './config/AddEditRoleForm.data';\r\nimport FormCreator from '../../../../components/Forms/FormCreator';\r\nimport Buttons from '../../../../components/ui/button/Buttons';\r\nimport { useAddRolesMutation, useUpdateRolesMutation } from '../../../../app/services/securityRoleAPI';\r\nimport ToastService from '../../../../services/toastService/ToastService';\r\nimport { securityKey } from '../../../../data/SecurityKey';\r\nimport { hasFunctionalPermission } from '../../../../utils/AuthorizeNavigation/authorizeNavigation';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddEditGroup = (props) => {\r\n\r\n  const roleFormRef = useRef();\r\n\r\n  const [roleForm, setRoleForm] = useState(addEditRoleFormData);\r\n\r\n  const { formSetting } = addEditRoleFormData;\r\n  const [isButtonDisable, setIsButtonDisable] = useState(false);\r\n  const hasAddPermission = hasFunctionalPermission(securityKey.ADDSECURITYROLE);\r\n  const hasEditPermission = hasFunctionalPermission(securityKey.EDITSECURITYROLE);\r\n\r\n  useEffect(() => {\r\n    if (props.isEdit) {\r\n      if (hasEditPermission.isViewOnly === true) {\r\n        formSetting.isViewOnly = true;\r\n        setIsButtonDisable(true);\r\n      }\r\n      else {\r\n        formSetting.isViewOnly = false;\r\n        setIsButtonDisable(false);\r\n      }\r\n    }\r\n    else if (!props.isEdit) {\r\n      if (hasAddPermission.hasAccess === true) {\r\n        formSetting.isViewOnly = false;\r\n        setIsButtonDisable(false);\r\n      }\r\n    }\r\n  }, [props.isEdit, hasEditPermission, hasAddPermission, formSetting.isViewOnly])\r\n\r\n  const [\r\n    addRoles,\r\n    { isLoading: isAddRoleLoading, isSuccess: isAddRoleSuccess, data: isAddRoleData },\r\n  ] = useAddRolesMutation();\r\n  const [\r\n    updateRoles,\r\n    {\r\n      isLoading: isUpdateRoleLoading,\r\n      isSuccess: isUpdateRoleSuccess,\r\n      data: isUpdateRoleData,\r\n    },\r\n  ] = useUpdateRolesMutation();\r\n\r\n  // const [\r\n  //   getRoleByRoleId,\r\n  //   {\r\n  //     isFetching: isGetRoleByIdFetching,\r\n  //     isSuccess: isGetRoleByIdSuccess,\r\n  //     data: isGetRoleByIdData,\r\n  //   },\r\n  // ] = useLazyGetRoleByRoleIdQuery();\r\n\r\n  const handleUser = () => {\r\n    let roleData = roleFormRef.current.getFormData(); // Get form data from the FormCreator component.\r\n    if (!props.isEdit && roleData) {\r\n      addRoles(roleData);\r\n    } else if (props.isEdit && roleData) {\r\n      updateRoles(roleData);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    onreset();\r\n  }, [props.initData])\r\n\r\n  //** Reset Form */\r\n  const onreset = () => {\r\n    let formData = { ...roleForm };\r\n    formData.initialState = { ...props.initData };\r\n    setRoleForm(formData);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   // onreset();\r\n  //   if (descrypteId) {\r\n  //     getRoleByRoleId(descrypteId, false);\r\n  //   }\r\n  // }, [descrypteId]);\r\n\r\n  useEffect(() => {\r\n    if (isAddRoleSuccess && isAddRoleData) {\r\n      if (props.onSuccess) {\r\n        props.onSuccess();\r\n      }\r\n      ToastService.success(isAddRoleData.errorMessage);\r\n    }\r\n  }, [isAddRoleSuccess, isAddRoleData]);\r\n\r\n  useEffect(() => {\r\n    if (isUpdateRoleSuccess && isUpdateRoleData) {\r\n      if (props.onSuccess) {\r\n        props.onSuccess();\r\n      }\r\n      ToastService.success(isUpdateRoleData.errorMessage);\r\n    }\r\n  }, [isUpdateRoleSuccess, isUpdateRoleData]);\r\n\r\n  // useEffect(() => {\r\n  //   if (isGetRoleByIdSuccess && isGetRoleByIdData && !isGetRoleByIdFetching) {\r\n  //     const newFrom = { ...roleForm };\r\n  //     newFrom.initialState = isGetRoleByIdData;\r\n  //     setRoleForm(newFrom);\r\n  //   }\r\n  // }, [isGetRoleByIdSuccess, isGetRoleByIdData, isGetRoleByIdFetching]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12 add-role-input\">\r\n          <div className=\"row vertical-form\">\r\n            <FormCreator\r\n              ref={roleFormRef}\r\n              config={roleForm}\r\n              {...roleForm}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-12\">\r\n          <div className=\"d-flex align-item-center justify-content-end mt-3\">\r\n            <Buttons\r\n              buttonTypeClassName=\"theme-button\"\r\n              onClick={handleUser}\r\n              buttonText={`${props.isEdit ? \"Update\" : \"Add\"}`}\r\n              isLoading={isAddRoleLoading || isUpdateRoleLoading}\r\n              isDisable={isButtonDisable}\r\n            />\r\n            <Buttons\r\n              buttonTypeClassName=\"dark-btn ml-5\"\r\n              buttonText=\"Cancel\"\r\n              onClick={props.onModalClose}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nAddEditGroup.propTypes = {\r\n  isEdit: PropTypes.bool.isRequired,\r\n  initData: PropTypes.object,\r\n  onSuccess: PropTypes.func,\r\n  onModalClose: PropTypes.func.isRequired,\r\n};\r\nexport default AddEditGroup\r\n","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\nimport { GridColumnType } from \"../../../../../data/gridColumnType\";\r\n\r\n\r\n\r\nexport const assignUserFormData = {\r\n  name: \"Add Edit Role Form\",\r\n  initialState: { userName: \"\" },\r\n  formFields: [\r\n    {\r\n      id: \"userId\",\r\n      lable: \"Users\",\r\n      Field_Name: \"Users\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"userName\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Users\",\r\n        isEnableOnChange: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-10 col-xl-10 col-md-10\",\r\n      },\r\n    },\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false\r\n  }\r\n};\r\n\r\nexport const assignUserListData = {\r\n  columns: [\r\n    {\r\n      name: \"User Name\",\r\n      fieldName: \"userName\",\r\n      colStyle: {\r\n        width: \"80%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      colStyle: {\r\n        width: \"20%\",\r\n      },\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: false,\r\n        allowDelete: true,\r\n      },\r\n    },\r\n  ],\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, {  useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport FormCreator from \"../../../../components/Forms/FormCreator\";\r\nimport {\r\n  assignUserFormData,\r\n  assignUserListData,\r\n} from \"./config/AssignUserForm.data\";\r\nimport Buttons from \"../../../../components/ui/button/Buttons\";\r\nimport {\r\n  useAddRoleMappingMutation,\r\n  useDeleteRolesMappingMutation,\r\n  useGetRolesMappingByRoleIdMutation,\r\n  useLazyGetUnAssignedUserByRoleIdQuery,\r\n} from \"../../../../app/services/rolesMappingAPI\";\r\nimport ToastService from \"../../../../services/toastService/ToastService\";\r\nimport SwalAlert from \"../../../../services/swalService/SwalService\";\r\nimport CardSection from \"../../../../components/ui/card/CardSection\";\r\nimport { securityKey } from \"../../../../data/SecurityKey\";\r\nimport { hasFunctionalPermission } from \"../../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\nimport FinalMolGrid from \"../../../../components/FinalMolGrid/FinalMolGrid\";\r\n\r\n\r\nconst AssignUser = (props) => {\r\n  const molGridRef = useRef();\r\n  const asignUserFormRef = useRef();\r\n  const [totalRowCount, setTotalRowCount] = useState(0);\r\n  const [listData, setListData] = useState();\r\n  const [userForm] = useState(assignUserFormData);\r\n  const [buttonVisible, setButtonVisible] = useState(false);\r\n  const [shouldRerenderFormCreator, setShouldRerenderFormCreator] = useState(false);\r\n\r\n  const { formSetting } = assignUserFormData;\r\n  const actionColumn = assignUserListData.columns.find(column => column.name === \"Action\");\r\n  const hasAddPermission = hasFunctionalPermission(securityKey.ADDASSIGNUSERS);\r\n  const hasDeletePermission = hasFunctionalPermission(securityKey.DELETEASSIGNUSERS);\r\n\r\n  useEffect(() => {\r\n    if (hasDeletePermission.hasAccess === true) {\r\n      actionColumn.defaultAction.allowDelete = true;\r\n    }\r\n    else if (hasDeletePermission.hasAccess === false) {\r\n      actionColumn.defaultAction.allowDelete = false;\r\n    }\r\n  }, [hasDeletePermission, actionColumn.defaultAction.allowDelete]);\r\n\r\n  useEffect(() => {\r\n    if (hasAddPermission.hasAccess) {\r\n      formSetting.isViewOnly = false;\r\n      setButtonVisible(true);\r\n    } else {\r\n      setButtonVisible(false);\r\n    }\r\n  }, [hasAddPermission, formSetting.isViewOnly])\r\n\r\n  const { confirm } = SwalAlert();\r\n\r\n  const [\r\n    addRoleMapping,\r\n    {\r\n      isLoading: isAddRoleMappingLoading,\r\n      isSuccess: isUserAddRoleMapping,\r\n      data: AddRoleMappingData,\r\n    },\r\n  ] = useAddRoleMappingMutation();\r\n\r\n  const [\r\n    getUnAssignedUserByRoleId,\r\n    {\r\n      isFetching: isGetUnAssignedUserByRoleIdFetching,\r\n      isSuccess: isGetUnAssignedUserByRoleId,\r\n      data: GetUnAssignedUserByRoleIdData,\r\n    },\r\n  ] = useLazyGetUnAssignedUserByRoleIdQuery();\r\n\r\n  const [\r\n    getRolesMappingByRoleId,\r\n    { isLoading: isListLoading, isSuccess: isListSuccess, data: isListeData },\r\n  ] = useGetRolesMappingByRoleIdMutation();\r\n\r\n  const [deleteUser, { isSuccess: isDeleteSuccess, data: isDeletData }] =\r\n    useDeleteRolesMappingMutation();\r\n\r\n  useEffect(() => {\r\n    if (props.isOpen) {\r\n      getUnAssignedUserByRoleId(props.initData.roleId);\r\n    }\r\n  }, [props.isOpen]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isGetUnAssignedUserByRoleIdFetching &&\r\n      isGetUnAssignedUserByRoleId &&\r\n      GetUnAssignedUserByRoleIdData\r\n    ) {\r\n      const listdata = GetUnAssignedUserByRoleIdData.map((item) => ({\r\n        value: item.userId,\r\n        label: item.userName,\r\n      }));\r\n      const dropdownField = assignUserFormData.formFields.find(\r\n        (item) => item.dataField === \"userName\"\r\n      );\r\n      dropdownField.fieldSetting.options = listdata;\r\n      // setUserForm(listdata)\r\n      setShouldRerenderFormCreator((prevState) => !prevState);\r\n    }\r\n  }, [\r\n    isGetUnAssignedUserByRoleIdFetching,\r\n    isGetUnAssignedUserByRoleId,\r\n    GetUnAssignedUserByRoleIdData,\r\n  ]);\r\n\r\n  const getLists = (pageObject,sortingString) => {\r\n    const request = {\r\n      pagination: {\r\n        pageNumber: pageObject.pageNumber,\r\n        pageSize: pageObject.pageSize,\r\n      },\r\n      filters: { searchText: \"\" },\r\n      roleId: props.initData.roleId,\r\n      sortString: sortingString\r\n    };\r\n    getRolesMappingByRoleId(request);\r\n  };\r\n\r\n  const handlePageChange = (page) => {\r\n    getLists(page,molGridRef.current.generateSortingString());\r\n  };\r\n\r\n  const handleSorting = (shortString) => {\r\n    getLists(molGridRef.current.getCurrentPageObject(), shortString);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isListSuccess && isListeData) {\r\n      if (isListeData) {\r\n        setListData(isListeData.dataSource);\r\n      }\r\n      if (isListeData.totalRecord) {\r\n        setTotalRowCount(isListeData.totalRecord);\r\n      }\r\n    }\r\n  }, [isListSuccess, isListeData]);\r\n\r\n  useEffect(() => {\r\n    if (molGridRef.current) {\r\n      const defaultPageObject = molGridRef.current.getCurrentPageObject();\r\n      getLists(defaultPageObject,molGridRef.current.generateSortingString());\r\n    }\r\n  }, [props.isOpen]);\r\n\r\n  const handleUser = () => {\r\n    let userData = asignUserFormRef.current.getFormData();\r\n    if (userData != null) {\r\n      if (props.initData) {\r\n        let req = {\r\n          userId: userData.userName.value,\r\n          roleId: props.initData.roleId,\r\n        };\r\n        addRoleMapping(req);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteClick = (data) => {\r\n    confirm(\r\n      \"Delete?\",\r\n      \"Are you sure you want to Delete?\",\r\n      \"Delete\",\r\n      \"Cancel\"\r\n    ).then((confirmed) => {\r\n      if (confirmed) {\r\n        deleteUser(data.userRoleId);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isUserAddRoleMapping && AddRoleMappingData) {\r\n      ToastService.success(AddRoleMappingData.errorMessage);\r\n      const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n      getLists(currentPageObject,molGridRef.current.generateSortingString());\r\n      getUnAssignedUserByRoleId(props.initData.roleId);\r\n    }\r\n  }, [isUserAddRoleMapping, AddRoleMappingData]);\r\n\r\n  useEffect(() => {\r\n    if (isDeleteSuccess && isDeletData) {\r\n      ToastService.success(isDeletData.errorMessage);\r\n      const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n      getLists(currentPageObject,molGridRef.current.generateSortingString());\r\n      getUnAssignedUserByRoleId(props.initData.roleId);\r\n    }\r\n  }, [isDeleteSuccess, isDeletData]);\r\n\r\n  const actionHandler = {\r\n    DELETE: handleDeleteClick,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-12 assign-user-form\">\r\n          <div className=\"row mt-2 assign-user-model-section\">\r\n            <FormCreator\r\n              ref={asignUserFormRef}\r\n              config={userForm}\r\n              {...userForm}\r\n              key={shouldRerenderFormCreator}\r\n            />\r\n            <div className=\"col-xxl-2 col-xl-2 col-md-2 mt-4 right-btn\">\r\n              {buttonVisible ?\r\n                <Buttons\r\n                  buttonTypeClassName=\"theme-button\"\r\n                  buttonText=\"Add\"\r\n                  onClick={handleUser}\r\n                  isLoading={isAddRoleMappingLoading}\r\n                />\r\n                : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <CardSection\r\n          cardTitle=\"Users\"\r\n        >\r\n          <div className=\"col-md-12 table-striped\">\r\n            <FinalMolGrid\r\n              ref={molGridRef}\r\n              configuration={assignUserListData}\r\n              dataSource={listData}\r\n              allowPagination={true}\r\n              pagination={{\r\n                totalCount: totalRowCount,\r\n                pageSize: 20,\r\n                currentPage: 1,\r\n              }}\r\n              onPageChange={handlePageChange}\r\n              onSorting={handleSorting}\r\n              isLoading={isListLoading}\r\n              onActionChange={actionHandler}\r\n            />\r\n          </div>\r\n        </CardSection>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nAssignUser.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  initData: PropTypes.shape({\r\n    roleId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  }),\r\n};\r\nexport default AssignUser;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport CardSection from \"../../../components/ui/card/CardSection\";\r\nimport { AppIcons } from \"../../../data/appIcons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport CenterModel from \"../../../components/ui/centerModel/CenterModel\";\r\nimport AddEditRole from \"./features/AddEditRole\";\r\nimport AssignUser from \"./features/AssignUser\";\r\nimport { SecurityRoleGridConfig, addEditRoleFormData } from \"./features/config/AddEditRoleForm.data\";\r\nimport { useDeleteRolesMutation, useGetRolesMutation } from \"../../../app/services/securityRoleAPI\";\r\nimport SwalAlert from \"../../../services/swalService/SwalService\";\r\nimport ToastService from \"../../../services/toastService/ToastService\";\r\nimport SidebarModel from \"../../../components/ui/sidebarModel/SidebarModel\";\r\nimport { encryptUrlData } from \"../../../services/CryptoService\";\r\nimport { securityKey } from \"../../../data/SecurityKey\";\r\nimport { hasFunctionalPermission } from \"../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\nimport FinalMolGrid from \"../../../components/FinalMolGrid/FinalMolGrid\";\r\nimport \"./SecurityManagement.scss\";\r\n\r\nconst SecurityRoleManagement = () => {\r\n  const molGridRef = useRef();\r\n  // const [search, setSearch] = useState(\"\");\r\n  const [totalRowCount, setTotalRowCount] = useState(0);\r\n  const [listData, setListData] = useState();\r\n  const [isModelOpen, setIsModelOpen] = useState(false);\r\n\r\n  // const debouncedSearch = useDebounce(search, 300);\r\n  const [addRoleModal, setAddRoleModal] = useState(false);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [formData, setFormData] = useState(addEditRoleFormData.initialState);\r\n\r\n  const navigate = useNavigate();\r\n  const { confirm } = SwalAlert();\r\n\r\n  const [buttonVisible, setButtonVisible] = useState(false);\r\n  const { formSetting } = addEditRoleFormData;\r\n  const actionColumn = SecurityRoleGridConfig.columns.find(column => column.name === \"Action\");\r\n\r\n  const hasAssingUser = hasFunctionalPermission(securityKey.ASSIGNUSERS);\r\n  const hasAddPermission = hasFunctionalPermission(securityKey.ADDSECURITYROLE);\r\n  const hasEditPermission = hasFunctionalPermission(securityKey.EDITSECURITYROLE);\r\n  const hasDeletePermission = hasFunctionalPermission(securityKey.DELETESECURITYROLE);\r\n  const hasPermissionsManagement = hasFunctionalPermission(securityKey.PERMISSIONMANAGEMENT);\r\n\r\n  //** Check grid Action Permission */\r\n  useEffect(() => {\r\n    if (hasEditPermission.isViewOnly === true) {\r\n      actionColumn.defaultAction.allowEdit = true;\r\n    }\r\n    else if (hasEditPermission.isEditable === true) {\r\n      actionColumn.defaultAction.allowEdit = true;\r\n    }\r\n    else {\r\n      actionColumn.defaultAction.allowEdit = false;\r\n    }\r\n  }, [hasEditPermission, actionColumn.defaultAction.allowEdit])\r\n\r\n  //** Check grid Action Permission */\r\n  useEffect(() => {\r\n    if (hasDeletePermission.hasAccess === true) {\r\n      actionColumn.defaultAction.allowDelete = true;\r\n    }\r\n    else if (hasDeletePermission.hasAccess === false) {\r\n      actionColumn.defaultAction.allowDelete = false;\r\n    }\r\n  }, [hasDeletePermission, actionColumn.defaultAction.allowDelete]);\r\n\r\n  // ** Check Form fields Permission */\r\n  useEffect(() => {\r\n    if (hasAddPermission.hasAccess) {\r\n      formSetting.isViewOnly = false;\r\n      setButtonVisible(true);\r\n    } else {\r\n      setButtonVisible(false);\r\n    }\r\n  }, [hasEditPermission, hasAddPermission, formSetting.isViewOnly])\r\n\r\n  useEffect(() => {\r\n    if (hasPermissionsManagement.hasAccess === true) {\r\n      actionColumn.defaultAction.allowPermission = true;\r\n    }\r\n    else if (hasPermissionsManagement.hasAccess === false) {\r\n      actionColumn.defaultAction.allowPermission = false;\r\n    }\r\n  }, [hasPermissionsManagement, actionColumn.defaultAction.allowPermission]);\r\n\r\n  useEffect(() => {\r\n    if (hasAssingUser.hasAccess === true) {\r\n      actionColumn.defaultAction.allowUser = true;\r\n    }\r\n    else if (hasAssingUser.hasAccess === false) {\r\n      actionColumn.defaultAction.allowUser = false;\r\n    }\r\n  }, [hasAssingUser, actionColumn.defaultAction.allowUser])\r\n\r\n  const [\r\n    getRoles,\r\n    { isLoading: isListLoading, isSuccess: isListSuccess, data: isListeData },\r\n  ] = useGetRolesMutation();\r\n\r\n  const [deleteRoles, { isSuccess: isDeleteSuccess, data: isDeletData }] =\r\n    useDeleteRolesMutation();\r\n\r\n  const handleAdd = () => {\r\n    setIsEdit(false);\r\n    resetForm();\r\n    setAddRoleModal(!addRoleModal);\r\n  };\r\n\r\n  const handleEditClick = (data) => {\r\n    resetForm();\r\n    setFormData(data);\r\n    setIsEdit(true);\r\n    setAddRoleModal(!addRoleModal);\r\n  };\r\n\r\n  const handlePermission = (data) => {\r\n    navigate(`/EditPermissions/${encryptUrlData(data.roleId)}`);\r\n  };\r\n  const handleUser = (data) => {\r\n    setIsModelOpen(true);\r\n    setFormData(data);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    let form = { ...addEditRoleFormData.initialState };\r\n    setFormData(form);\r\n  };\r\n\r\n  const getLists = (pageObject,sortingString) => {\r\n    const request = {\r\n      pagination: {\r\n        pageNumber: pageObject.pageNumber,\r\n        pageSize: pageObject.pageSize,\r\n      },\r\n      filters: { searchText: \"\" },\r\n      sortString: sortingString\r\n    };\r\n    getRoles(request);\r\n  };\r\n\r\n  // const handleChange = (event) => {\r\n  //   const value = event.target.value;\r\n  //   setSearch(value);\r\n  // };\r\n\r\n  const handlePageChange = (page) => {\r\n    getLists(page,molGridRef.current.generateSortingString());\r\n  };\r\n\r\n  const handleSorting = (shortString) => {\r\n    getLists(molGridRef.current.getCurrentPageObject(), shortString);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isListSuccess && isListeData) {\r\n      if (isListeData) {\r\n        setListData(isListeData.dataSource);\r\n      }\r\n      if (isListeData.totalRecord) {\r\n        setTotalRowCount(isListeData.totalRecord);\r\n      }\r\n    }\r\n  }, [isListSuccess, isListeData]);\r\n\r\n  useEffect(() => {\r\n    if (isDeleteSuccess && isDeletData) {\r\n      ToastService.success(isDeletData.errorMessage);\r\n      const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n      getLists(currentPageObject,molGridRef.current.generateSortingString());\r\n    }\r\n  }, [isDeleteSuccess, isDeletData]);\r\n\r\n  useEffect(() => {\r\n    if (molGridRef.current) {\r\n      const defaultPageObject = molGridRef.current.getCurrentPageObject();\r\n      getLists(defaultPageObject,molGridRef.current.generateSortingString());\r\n    }\r\n  }, []);\r\n\r\n  const handleDeleteClick = (data) => {\r\n    confirm(\r\n      \"Delete?\",\r\n      \"Are you sure you want to Delete?\",\r\n      \"Delete\",\r\n      \"Cancel\"\r\n    ).then((confirmed) => {\r\n      if (confirmed) {\r\n        deleteRoles(data.roleId);\r\n      }\r\n    });\r\n  };\r\n\r\n  const actionHandler = {\r\n    EDIT: handleEditClick,\r\n    DELETE: handleDeleteClick,\r\n    PERMISSION: handlePermission,\r\n    USER: handleUser,\r\n  };\r\n\r\n  const onModalClose = () => {\r\n    setAddRoleModal(!addRoleModal);\r\n    resetForm();\r\n  };\r\n\r\n  //** Success */\r\n  const onSuccess = () => {\r\n    onModalClose();\r\n    const defaultPageObject = molGridRef.current.getCurrentPageObject();\r\n    getLists(defaultPageObject,molGridRef.current.generateSortingString());\r\n  };\r\n\r\n  const onSidebarClose = () => {\r\n    setIsModelOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"security-list\">\r\n      <CardSection\r\n        cardTitle=\"Security Roles\"\r\n        // cardSubTitle=\"Sub title add hear\"\r\n        buttonClassName=\"btn theme-button\"\r\n        rightButton={buttonVisible }\r\n        buttonText=\"Add\"\r\n        textWithIcon={true}\r\n        iconImg={AppIcons.PlusIcon}\r\n        titleButtonClick={handleAdd}\r\n      >\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 table-striped\">\r\n            <FinalMolGrid\r\n              ref={molGridRef}\r\n              configuration={SecurityRoleGridConfig}\r\n              dataSource={listData}\r\n              allowPagination={false}\r\n              pagination={{\r\n                totalCount: totalRowCount,\r\n                pageSize: 20,\r\n                currentPage: 1,\r\n              }}\r\n              onPageChange={handlePageChange}\r\n              onSorting={handleSorting}\r\n              isLoading={isListLoading}\r\n              onActionChange={actionHandler}\r\n            />\r\n          </div>\r\n        </div>\r\n      </CardSection>\r\n      \r\n        <CenterModel\r\n          showModal={addRoleModal}\r\n          handleToggleModal={handleAdd}\r\n          modalTitle={formData.roleId ? \"Update Role\" : \"Add Role\"}\r\n          modelSizeClass=\"w-40\"\r\n        >\r\n          <AddEditRole onModalClose={onModalClose}\r\n            isEdit={isEdit}\r\n            initData={formData}\r\n            onSuccess={onSuccess}\r\n          />\r\n        </CenterModel>\r\n\r\n      <SidebarModel\r\n        modalTitle=\"Assign Users\"\r\n        contentClass=\"content-35\"\r\n        onClose={onSidebarClose}\r\n        modalTitleIcon={AppIcons.AddIcon}\r\n        isOpen={isModelOpen}\r\n      >\r\n        <AssignUser\r\n          initData={formData}\r\n          isOpen={isModelOpen}\r\n        />\r\n      </SidebarModel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SecurityRoleManagement;\r\n\r\n"],"names":["_ref","isApprovalValidate","showModal","handleToggleModal","children","props","_jsxs","Modal","className","modelSizeClass","show","onHide","keyboard","backdrop","_jsx","Header","closeButton","modalTitle","Body","addEditRoleFormData","name","initialState","roleName","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","INPUT","dataField","fieldSetting","placeholder","allowSpace","validation","type","style","containerCss","formSetting","isViewOnly","SecurityRoleGridConfig","columns","fieldName","allowShort","colStyle","width","colType","GridColumnType","ACTION","defaultAction","allowEdit","allowDelete","customAction","title","iconName","roleFormRef","useRef","roleForm","setRoleForm","useState","isButtonDisable","setIsButtonDisable","hasAddPermission","hasFunctionalPermission","securityKey","ADDSECURITYROLE","hasEditPermission","EDITSECURITYROLE","useEffect","isEdit","hasAccess","addRoles","isLoading","isAddRoleLoading","isSuccess","isAddRoleSuccess","data","isAddRoleData","useAddRolesMutation","updateRoles","isUpdateRoleLoading","isUpdateRoleSuccess","isUpdateRoleData","useUpdateRolesMutation","onreset","initData","formData","onSuccess","ToastService","success","errorMessage","FormCreator","ref","config","Buttons","buttonTypeClassName","onClick","handleUser","roleData","current","getFormData","buttonText","isDisable","onModalClose","assignUserFormData","userName","SELECT","isEnableOnChange","assignUserListData","molGridRef","asignUserFormRef","totalRowCount","setTotalRowCount","listData","setListData","userForm","buttonVisible","setButtonVisible","shouldRerenderFormCreator","setShouldRerenderFormCreator","actionColumn","find","column","ADDASSIGNUSERS","hasDeletePermission","DELETEASSIGNUSERS","confirm","SwalAlert","addRoleMapping","isAddRoleMappingLoading","isUserAddRoleMapping","AddRoleMappingData","useAddRoleMappingMutation","getUnAssignedUserByRoleId","isFetching","isGetUnAssignedUserByRoleIdFetching","isGetUnAssignedUserByRoleId","GetUnAssignedUserByRoleIdData","useLazyGetUnAssignedUserByRoleIdQuery","getRolesMappingByRoleId","isListLoading","isListSuccess","isListeData","useGetRolesMappingByRoleIdMutation","deleteUser","isDeleteSuccess","isDeletData","useDeleteRolesMappingMutation","isOpen","roleId","listdata","map","item","value","userId","label","options","prevState","getLists","pageObject","sortingString","request","pagination","pageNumber","pageSize","filters","searchText","sortString","dataSource","totalRecord","defaultPageObject","getCurrentPageObject","generateSortingString","currentPageObject","actionHandler","DELETE","then","confirmed","userRoleId","_createElement","key","userData","req","CardSection","cardTitle","FinalMolGrid","configuration","allowPagination","totalCount","currentPage","onPageChange","page","onSorting","shortString","onActionChange","SecurityRoleManagement","isModelOpen","setIsModelOpen","addRoleModal","setAddRoleModal","setIsEdit","setFormData","navigate","useNavigate","hasAssingUser","ASSIGNUSERS","DELETESECURITYROLE","hasPermissionsManagement","PERMISSIONMANAGEMENT","isEditable","allowPermission","allowUser","getRoles","useGetRolesMutation","deleteRoles","useDeleteRolesMutation","handleAdd","resetForm","form","EDIT","PERMISSION","encryptUrlData","USER","buttonClassName","rightButton","textWithIcon","iconImg","AppIcons","PlusIcon","titleButtonClick","CenterModel","AddEditRole","SidebarModel","contentClass","onClose","onSidebarClose","modalTitleIcon","AddIcon","AssignUser"],"sourceRoot":""}