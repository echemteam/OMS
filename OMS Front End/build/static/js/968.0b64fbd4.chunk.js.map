{"version":3,"file":"static/js/968.0b64fbd4.chunk.js","mappings":"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","sources":["pages/mytask/feature/ModuleList.js","pages/mytask/feature/PendingTask.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CardSection from \"../../../components/ui/card/CardSection\";\r\nimport { useLazyGetAllModulesWithPendingRequestCountQuery } from \"../../../app/services/commonAPI\";\r\n\r\nconst ModuleList = ({ moduleList, onModuleChange, isPending, setModuleList, onGetById }) => {\r\n    const [activeModule, setActiveModule] = useState(null);\r\n    const [getAllModulesWithPendingRequestCount, { isSuccess: isGetAllModulesWithPendingRequestCountSucess, data: allGetAllModulesWithPendingRequestCountData },] = useLazyGetAllModulesWithPendingRequestCountQuery();\r\n\r\n    // Set the first module as active by default when the component mounts\r\n    useEffect(() => {\r\n        getAllModulesWithPendingRequestCount(isPending);\r\n    }, [getAllModulesWithPendingRequestCount, onGetById]);\r\n\r\n    useEffect(() => {\r\n        if (isGetAllModulesWithPendingRequestCountSucess && allGetAllModulesWithPendingRequestCountData) {\r\n            setModuleList(allGetAllModulesWithPendingRequestCountData);\r\n        }\r\n    }, [isGetAllModulesWithPendingRequestCountSucess, allGetAllModulesWithPendingRequestCountData]);\r\n\r\n    useEffect(() => {\r\n        if (moduleList && moduleList.length > 0) {\r\n            setActiveModule(moduleList[0].moduleId);\r\n        }\r\n    }, [moduleList]);\r\n\r\n    const handleModuleClick = (moduleData) => {\r\n        setActiveModule(moduleData.moduleId);\r\n        if (onModuleChange) {\r\n            onModuleChange(moduleData.moduleId);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <CardSection cardTitle=\"Modules\">\r\n            <div className=\"module-listing\">\r\n                <ul>\r\n                    {moduleList && moduleList.map((data, index) => (\r\n                        <li className={activeModule === data.moduleId ? \"active\" : \"\"}\r\n                            onClick={() => handleModuleClick(data)} key={index}>\r\n                            <span>{data.moduleName} {data.requestCount > 0 ? <> <div className=\"module-count\">{data.requestCount}</div></> : null}</span>\r\n\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </CardSection>\r\n    );\r\n};\r\n\r\nModuleList.propTypes = {\r\n    moduleList: PropTypes.array.isRequired,\r\n    data: PropTypes.array.isRequired,\r\n    onModuleChange: PropTypes.func,\r\n};\r\n\r\nexport default ModuleList;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\n//** Lib's */\r\nimport \"../../mytask/MyTask.scss\";\r\nimport PropTypes from \"prop-types\";\r\nimport formatDate from \"../../../lib/formatDate\";\r\nimport CardSection from \"../../../components/ui/card/CardSection\";\r\nimport DataLoader from \"../../../components/ui/dataLoader/DataLoader\";\r\nimport NoRecordFound from \"../../../components/ui/noRecordFound/NoRecordFound\";\r\nimport { FirstSecondLetter } from \"../../../utils/FirstSecLetter/FirstSecondLetter\";\r\n//** Service's */\r\nimport { useGetApprovalRequestsListByStatusAndRoleIdMutation } from \"../../../app/services/ApprovalAPI\";\r\n//** Component's */\r\nimport ModuleList from \"./ModuleList\";\r\n\r\nconst PendingTask = (props) => {\r\n  const [orderBy, setOrderBy] = useState(\"Newest\");\r\n  const [activeTab, setActiveTab] = useState(null);\r\n  const [pendingData, setPendingData] = useState([]);\r\n  const [selectedfilterBy, setSelectedFilterBy] = useState([]);\r\n \r\n  const [selectedModule, setSelectedModule] = useState(\r\n    props.moduleList[0]?.moduleId\r\n  );\r\n\r\n  const [\r\n    getApprovalRequestsListByStatus,\r\n    {\r\n      isLoading,\r\n      isSuccess: isGetApprovalRequestsListByStatusSuccess,\r\n      data: isGetApprovalRequestsListByStatusData,\r\n    },\r\n  ] = useGetApprovalRequestsListByStatusAndRoleIdMutation();\r\n\r\n  useEffect(() => {\r\n   \r\n    if (props.moduleList && props.moduleList.length > 0) {\r\n      handleRequest();\r\n    }\r\n  }, [props.Pending, props.roleId, props.moduleList]);\r\n\r\n  useEffect(() => {\r\n    if (props.isApproval) {\r\n      handleRequest();\r\n    }\r\n    props.setIsApproval(false);\r\n  }, [props.isApproval]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      isGetApprovalRequestsListByStatusSuccess &&\r\n      isGetApprovalRequestsListByStatusData\r\n    ) {\r\n      setPendingData(isGetApprovalRequestsListByStatusData);\r\n      if (\r\n        !isGetApprovalRequestsListByStatusData ||\r\n        isGetApprovalRequestsListByStatusData?.length === 0\r\n      ) {\r\n        if (props.handleRestEventDetail) {\r\n          props.handleRestEventDetail();\r\n        }\r\n      } else {\r\n        handleTabClick(\r\n          isGetApprovalRequestsListByStatusData[0]?.approvalRequestId\r\n        );\r\n      }\r\n    }\r\n  }, [\r\n    isGetApprovalRequestsListByStatusSuccess,\r\n    isGetApprovalRequestsListByStatusData,\r\n  ]);\r\n\r\n  const handleRequest = (key, value) => {\r\n    const request = {\r\n      status: props.Pending,\r\n      roleId: props.roleId,\r\n      sortOrder: orderBy || \"Newest\",\r\n      eventIds: Array.isArray(selectedfilterBy)\r\n        ? selectedfilterBy.map(String).join(\",\")\r\n        : selectedfilterBy,\r\n      moduleId: selectedModule || props.moduleList[0]?.moduleId,\r\n    };\r\n\r\n    if (key) {\r\n      request[key] = value; // Add or update the specific key-value pair\r\n    }\r\n    if (key === \"eventIds\") {\r\n      request[key] = Array.isArray(value) ? value.map(String).join(\",\") : value;\r\n    }\r\n\r\n    getApprovalRequestsListByStatus(request);\r\n  };\r\n\r\n  const handleTabClick = (id) => {\r\n    setActiveTab(id);\r\n    if (props.onGetById) {\r\n      props.onGetById(id);\r\n     \r\n    }\r\n  };\r\n\r\n  const handleModuleClick = (moduleId) => {\r\n    setSelectedModule(moduleId);\r\n    handleRequest(\"moduleId\", moduleId);\r\n    if (props.handleRestEventDetail) {\r\n      props.handleRestEventDetail();\r\n    }\r\n  };\r\n\r\n  const selectedSortOrder = (orderBy) => {\r\n    setOrderBy(orderBy);\r\n    handleRequest(\"sortOrder\", orderBy);\r\n  };\r\n\r\n  const selectedFilterOptions = (selectedFilterOption) => {\r\n    setSelectedFilterBy(selectedFilterOption);\r\n    handleRequest(\"eventIds\", selectedFilterOption);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-5 pr-0 left-modual-sec\">\r\n          <ModuleList\r\n            moduleList={props.moduleList} isPending={true} onGetById={props.onGetById}\r\n            onModuleChange={handleModuleClick} setModuleList={props.setModuleList}\r\n          />\r\n        </div>\r\n        <div className=\"col-7 pl-1 pr-1\">\r\n          <CardSection\r\n            cardTitle=\"Events\"\r\n            rightButton={true}\r\n            isShort={true}\r\n            filtersOptions={props.eventList}\r\n            selectedFilterOptions={selectedFilterOptions}\r\n            selectedSortOrder={selectedSortOrder}\r\n          >\r\n            <div className=\"customer-info\">\r\n              {isLoading ? (\r\n                <DataLoader />\r\n              ) : (\r\n                <div className=\"tabs\">\r\n                  {pendingData && pendingData.length > 0 ? (\r\n                    pendingData.map((tab) => (\r\n                      <button\r\n                        key={tab.approvalRequestId} // Use a unique key\r\n                        className={`tab-button ${\r\n                          activeTab === tab.approvalRequestId ? \"active\" : \"\"\r\n                        }`}\r\n                        onClick={() => handleTabClick(tab.approvalRequestId)}\r\n                      >\r\n                        <div className=\"d-flex align-items-start w-100\">\r\n                          <span className=\"profile-icon\">\r\n                            {\" \"}\r\n                            {FirstSecondLetter(tab.eventName)}\r\n                          </span>\r\n                          <div className=\"right-name-desc\">\r\n                            <div className=\"title\">\r\n                              {tab.eventName}\r\n                              <div className=\"date\">\r\n                                {tab.requestedDate\r\n                                  ? formatDate(\r\n                                      tab.requestedDate,\r\n                                      \"MM/DD/YYYY hh:mm A\"\r\n                                    )\r\n                                  : \"No Date\"}\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"bage-fix\">\r\n                              <span className=\"sub-title\">\r\n                                {tab.moduleName}\r\n                              </span>\r\n                              <div\r\n                                className={`mytask-type-badge ${\r\n                                  tab.isFunctional ? \"badge-accept\" : \"\"\r\n                                }`}\r\n                              >\r\n                                {tab.isFunctional ? \"Functional\" : \"Field\"}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </button>\r\n                    ))\r\n                  ) : (\r\n                    <NoRecordFound />\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </CardSection>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nPendingTask.propTypes = {\r\n  Pending: PropTypes.string,\r\n  roleId: PropTypes.number.isRequired,\r\n  onGetById: PropTypes.func,\r\n};\r\nexport default PendingTask;\r\n"],"names":["_ref","moduleList","onModuleChange","isPending","setModuleList","onGetById","activeModule","setActiveModule","useState","getAllModulesWithPendingRequestCount","isSuccess","isGetAllModulesWithPendingRequestCountSucess","data","allGetAllModulesWithPendingRequestCountData","useLazyGetAllModulesWithPendingRequestCountQuery","useEffect","length","moduleId","_jsx","CardSection","cardTitle","children","className","map","index","onClick","handleModuleClick","moduleData","_jsxs","moduleName","requestCount","_Fragment","props","_props$moduleList$","orderBy","setOrderBy","activeTab","setActiveTab","pendingData","setPendingData","selectedfilterBy","setSelectedFilterBy","selectedModule","setSelectedModule","getApprovalRequestsListByStatus","isLoading","isGetApprovalRequestsListByStatusSuccess","isGetApprovalRequestsListByStatusData","useGetApprovalRequestsListByStatusAndRoleIdMutation","handleRequest","Pending","roleId","isApproval","setIsApproval","_isGetApprovalRequest","handleTabClick","approvalRequestId","handleRestEventDetail","key","value","_props$moduleList$2","request","status","sortOrder","eventIds","Array","isArray","String","join","id","ModuleList","rightButton","isShort","filtersOptions","eventList","selectedFilterOptions","selectedFilterOption","selectedSortOrder","DataLoader","tab","FirstSecondLetter","eventName","requestedDate","formatDate","isFunctional","NoRecordFound"],"sourceRoot":""}