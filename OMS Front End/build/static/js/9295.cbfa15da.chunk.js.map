{"version":3,"file":"static/js/9295.cbfa15da.chunk.js","mappings":"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","sources":["common/features/component/Address/feature/AddEditAddress.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { forwardRef, useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\n//** Lib's */\r\nimport Buttons from \"../../../../../components/ui/button/Buttons\";\r\nimport { AddressType, FieldSettingType } from \"../../../../../utils/Enums/commonEnums\";\r\nimport FormCreator from \"../../../../../components/Forms/FormCreator\";\r\nimport { onResetForm } from \"../../../../../utils/FormFields/ResetForm/handleResetForm\";\r\nimport { removeFormFields } from \"../../../../../utils/FormFields/RemoveFields/handleRemoveFields\";\r\nimport { setFieldSetting, setDropDownOptionField } from \"../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport { addressFormData } from \"../config/AddressForm.data\";\r\n//** Service's */\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\nimport { useLazyGetAllCountriesQuery } from \"../../../../../app/services/basicdetailAPI\";\r\nimport { useLazyGetAllAddressTypesQuery, useLazyGetAllCitiesQuery, useLazyGetAllStatesQuery } from \"../../../../../app/services/addressAPI\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SetInitialCountry = {\r\n    label: \"United States\",\r\n    value: 233\r\n}\r\n\r\nconst AddEditAddress = forwardRef(({ keyId, isSupplier, updateAddress, addAddress, getAddresssById, isModelOpen, editMode, isButtonDisable, getCompletionCount,\r\n    onSidebarClose, editRef, isOrderManage, getAddressTypeIdOrder, onHandleOrderInfoRepeatCall, orderCustomerId, isEditablePage, customerStatusId }) => {\r\n\r\n    //** States */\r\n    const ref = useRef();\r\n    const [formData, setFormData] = useState(addressFormData);\r\n    const [shouldRerenderFormCreator, setShouldRerenderFormCreator] = useState(false);\r\n    const [selectedCheckboxFeild, setSelectedCheckboxFeild] = useState(null);\r\n    const [selectedCheckbox, setSelectedCheckbox] = useState(null);\r\n    const [addressEditTableId, setAddressEditTableId] = useState(0)\r\n\r\n    //** API Call's */\r\n    /**\r\n     * This hook dynamically sets the API call based on the module (customer or supplier).\r\n     * The API endpoint and parameters are configured within the SupplierAddressDetails OR CustomerAddressDetails component.\r\n    */\r\n    const [add, { isLoading: isAddLoading, isSuccess: isAddSuccess, data: isAddData }] = addAddress();\r\n    const [update, { isLoading: isUpdateLoading, isSuccess: isUpdateSuccess, data: isUpdateData }] = updateAddress();\r\n    const [getById, { isFetching: isGetByIdFetching, isSuccess: isGetByIdSuccess, data: isGetByIdData }] = getAddresssById();\r\n\r\n    const [getAllCities, { isSuccess: isGetAllCitiesSucess, isFetching: isFetchingCities, data: allGetAllCitiesData }] = useLazyGetAllCitiesQuery();\r\n    const [getAllStates, { data: allGetAllStatesData }] = useLazyGetAllStatesQuery();\r\n    const [getAllCountries, { isSuccess: isGetAllCountriesSucess, data: allGetAllCountriesData }] = useLazyGetAllCountriesQuery();\r\n    const [getAllAddressTypes, { isSuccess: isGetAllAddressTypesSucess, data: allGetAllAddressTypesData }] = useLazyGetAllAddressTypesQuery();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (editMode || isModelOpen || !isOrderManage) {\r\n                await Promise.all([\r\n                    getAllStates(),\r\n                    getAllCountries(),\r\n                    getAllAddressTypes()\r\n                ]);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [editMode, isModelOpen]);\r\n\r\n    useEffect(() => {\r\n        if (isOrderManage) {\r\n            setFieldSetting(addressFormData, 'addressTypeId', FieldSettingType.DISABLED, true);\r\n            let form = { ...addressFormData };\r\n            if (getAddressTypeIdOrder === AddressType.BILLING) {\r\n                form = removeFormFields(addressFormData, ['isShippingAndBilling', 'isPreferredShipping']);\r\n            } else if (getAddressTypeIdOrder === AddressType.SHIPPING) {\r\n                form = removeFormFields(addressFormData, ['isShippingAndBilling', 'isPreferredBilling']);\r\n            }\r\n            form.initialState = {\r\n                ...form.initialState,\r\n                addressTypeId: getAddressTypeIdOrder,\r\n            }\r\n            setFormData(form);\r\n        } else {\r\n            setFieldSetting(addressFormData, 'addressTypeId', FieldSettingType.DISABLED);\r\n        }\r\n    }, [isOrderManage, isModelOpen])\r\n\r\n    const handleResponse = (success, data) => {\r\n        if (success && data) {\r\n            handleAddressResponse(success, data);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        handleResponse(isAddSuccess, isAddData);\r\n    }, [isAddSuccess, isAddData]);\r\n\r\n    useEffect(() => {\r\n        handleResponse(isUpdateSuccess, isUpdateData);\r\n    }, [isUpdateSuccess, isUpdateData]);\r\n\r\n    useEffect(() => {\r\n        if (isSupplier && isModelOpen) {\r\n            setFieldSetting(formData, 'cityId', FieldSettingType.DISABLED, true);\r\n            // setFieldSetting(addressFormData, 'addressTypeId', FieldSettingType.DISABLED, false);\r\n            setFieldSetting(formData, 'addressTypeId', FieldSettingType.MULTISELECT, true);\r\n            if (editMode) {\r\n                setFieldSetting(formData, 'addressTypeId', FieldSettingType.MULTISELECT, false);\r\n                // setFieldSetting(addressFormData, 'addressTypeId', FieldSettingType.DISABLED, true);\r\n            }\r\n        } else if (!isModelOpen && !isOrderManage) {\r\n            onResetForm(addressFormData, setFormData, null);\r\n        } else if (!isSupplier && !isOrderManage) {\r\n            setFieldSetting(formData, 'addressTypeId', FieldSettingType.MULTISELECT, false);\r\n            // setFieldSetting(addressFormData, 'addressTypeId', FieldSettingType.DISABLED, false);\r\n        }\r\n    }, [isSupplier, isModelOpen]);\r\n\r\n    useEffect(() => {\r\n        if (isGetAllCountriesSucess && allGetAllCountriesData) {\r\n            setDropDownOptionField(allGetAllCountriesData, 'countryId', 'name', addressFormData, 'countryId');\r\n        }\r\n    }, [isGetAllCountriesSucess, allGetAllCountriesData]);\r\n\r\n    useEffect(() => {\r\n        if (!isFetchingCities & isGetAllCitiesSucess && allGetAllCitiesData) {\r\n            const cities = allGetAllCitiesData.map((item) => ({\r\n                value: item.cityId,\r\n                label: item.name,\r\n            }));\r\n            let data = { ...formData };\r\n            const dropdownField = data?.formFields?.find(data => data.id === \"cityId\");\r\n            dropdownField.fieldSetting.options = cities;\r\n            setFormData(data);\r\n        }\r\n    }, [isGetAllCitiesSucess, allGetAllCitiesData, isFetchingCities]);\r\n\r\n    useEffect(() => {\r\n        if (isGetAllAddressTypesSucess && allGetAllAddressTypesData) {\r\n            const filterCondition = (item) => {\r\n                return isSupplier ? item.isForSuppliers : item.isForCustomers;\r\n            };\r\n            setDropDownOptionField(allGetAllAddressTypesData, 'addressTypeId', 'type', addressFormData, 'addressTypeId', filterCondition);\r\n            setShouldRerenderFormCreator((prevState) => !prevState);\r\n        }\r\n    }, [isGetAllAddressTypesSucess, allGetAllAddressTypesData, isSupplier]);\r\n\r\n    useEffect(() => {\r\n        if (!isGetByIdFetching && isGetByIdSuccess && isGetByIdData) {\r\n            setAddressEditTableId(isGetByIdData.addressId);\r\n            let form = { ...formData };\r\n            let data = isGetByIdData;\r\n            if (!isButtonDisable) {\r\n                setFieldSetting(formData, 'cityId', FieldSettingType.DISABLED);\r\n                setFieldSetting(formData, 'stateId', FieldSettingType.DISABLED);\r\n            } else if (isButtonDisable) {\r\n                setFieldSetting(formData, 'cityId', FieldSettingType.DISABLED, true);\r\n                setFieldSetting(formData, 'stateId', FieldSettingType.DISABLED, true);\r\n            }\r\n            if (data.countryId) {\r\n                setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', form, 'stateId', item => item.countryId === data.countryId);\r\n            }\r\n            if (data.stateId) {\r\n                getAllCities(data.stateId)\r\n            }\r\n            form.initialState = {\r\n                customerId: isSupplier === false ? keyId : 0,\r\n                supplierId: isSupplier === true ? keyId : 0,\r\n                addressTypeId: data.addressTypeId,\r\n                addressLine1: data.addressLine1,\r\n                addressLine2: data.addressLine2,\r\n                addressLine3: data.addressLine3,\r\n                addressLine4: data.addressLine4,\r\n                addressLine5: data.addressLine5,\r\n                countryId: data.countryId,\r\n                stateId: data.stateId,\r\n                cityId: data.cityId,\r\n                zipCode: data.zipCode,\r\n                isPreferredShipping: data.isPreferredShipping,\r\n                isPreferredBilling: data.isPreferredBilling,\r\n            };\r\n            setFormData(form);\r\n        }\r\n    }, [isGetByIdFetching, isGetByIdSuccess, isGetByIdData]);\r\n\r\n    const setInitialValue = () => {\r\n        if (!editMode) {\r\n            let updatedFormData;\r\n            updatedFormData = removeFormFields(addressFormData, ['isPreferredShipping', 'isShippingAndBilling', 'isPreferredBilling']);\r\n            if (allGetAllStatesData) {\r\n                handleChangeDropdownList(SetInitialCountry, \"countryId\");\r\n                setFieldSetting(formData, 'cityId', FieldSettingType.DISABLED, true);\r\n            }\r\n            setFormData(updatedFormData)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isOrderManage) {\r\n            setInitialValue()\r\n        }\r\n    }, [allGetAllStatesData, isModelOpen])\r\n\r\n    useEffect(() => {\r\n        if (isGetByIdData) {\r\n            let updatedFormData = { ...formData };\r\n            if (isGetByIdData.type === \"Billing\") {\r\n                updatedFormData = removeFormFields(addressFormData, ['isShippingAndBilling', 'isPreferredShipping']);\r\n            } else if (isGetByIdData.type === \"Shipping\") {\r\n                updatedFormData = removeFormFields(addressFormData, ['isShippingAndBilling', 'isPreferredBilling']);\r\n            } else if (isGetByIdData.type === \"AP\" || isGetByIdData.type === \"Primary\") {\r\n                updatedFormData = removeFormFields(addressFormData, ['isShippingAndBilling', 'isPreferredBilling', 'isPreferredShipping']);\r\n            }\r\n            updatedFormData.initialState = {\r\n                customerId: isSupplier === false ? keyId : 0,\r\n                supplierId: isSupplier === true ? keyId : 0,\r\n                addressTypeId: isGetByIdData.addressTypeId,\r\n                addressLine1: isGetByIdData.addressLine1,\r\n                addressLine2: isGetByIdData.addressLine2,\r\n                addressLine3: isGetByIdData.addressLine3,\r\n                addressLine4: isGetByIdData.addressLine4,\r\n                addressLine5: isGetByIdData.addressLine5,\r\n                countryId: isGetByIdData.countryId,\r\n                stateId: isGetByIdData.stateId,\r\n                cityId: isGetByIdData.cityId,\r\n                zipCode: isGetByIdData.zipCode,\r\n                isPreferredShipping: isGetByIdData.isPreferredShipping,\r\n                isPreferredBilling: isGetByIdData.isPreferredBilling,\r\n            };\r\n            setFormData(updatedFormData);\r\n        }\r\n    }, [isGetByIdData])\r\n\r\n    const handleAddressResponse = (isSuccess, responseData) => {\r\n        if (isSuccess && responseData) {\r\n            getCompletionCount && getCompletionCount();\r\n            if (responseData.errorMessage.includes(\"exists\")) {\r\n                ToastService.warning(responseData.errorMessage);\r\n                getById(keyId);\r\n                return;\r\n            }\r\n            onResetForm(addressFormData, setFormData, null);\r\n            ToastService.success(responseData.errorMessage);\r\n            if (!isOrderManage) {\r\n                getById(keyId);\r\n                onSidebarClose();\r\n            } else {\r\n                onHandleOrderInfoRepeatCall()\r\n            }\r\n            onSidebarClose();\r\n        }\r\n    }\r\n    const getAddressTypeId = (data, isSupplier, editMode) => {\r\n        if (isSupplier) {\r\n            if (editMode) {\r\n                return data.addressTypeId && typeof data.addressTypeId === \"object\"\r\n                    ? String(data.addressTypeId.value)\r\n                    : String(data.addressTypeId);\r\n            } else {\r\n                return Array.isArray(data.addressTypeId)\r\n                    ? data.addressTypeId.map(String).join(\",\")\r\n                    : data.addressTypeId;\r\n            }\r\n        } else {\r\n            return data.addressTypeId && typeof data.addressTypeId === \"object\"\r\n                ? String(data.addressTypeId.value)\r\n                : String(data.addressTypeId);\r\n        }\r\n    };\r\n\r\n    const buildTransformedData = (data, isSupplier, keyId, editMode) => {\r\n        const addressTypeIdValue = getAddressTypeId(data, isSupplier, editMode);\r\n        const transformLocationData = (locationData, nameField) => {\r\n            if (typeof locationData === 'object') {\r\n                if (locationData.isNew) {\r\n                    return {\r\n                        id: 0, // Set id to 0 for new entries\r\n                        name: locationData.text || \"\", // Use the text for the name, or an empty string if not provided\r\n                    };\r\n                } else {\r\n                    return {\r\n                        id: locationData.value || locationData.id || 0, // Use existing value or id, or fallback to 0\r\n                        name: nameField || \"\", // Use existing nameField or fallback to an empty string\r\n                    };\r\n                }\r\n            }\r\n            return {\r\n                id: locationData || 0, // Use locationData if present, otherwise 0\r\n                name: nameField || \"\", // Use nameField if present, otherwise an empty string\r\n            };\r\n        };\r\n\r\n        const { id: stateId, name: stateName } = transformLocationData(data.stateId, data.stateName);\r\n        const { id: cityId, name: cityName } = transformLocationData(data.cityId, data.cityName);\r\n\r\n        return {\r\n            ...data,\r\n            [isSupplier ? 'supplierId' : 'customerId']: keyId,\r\n            addressTypeId: extractValue(addressTypeIdValue),\r\n            countryId: extractValue(data.countryId),\r\n            stateId,\r\n            cityId,\r\n            stateName,\r\n            cityName,\r\n        };\r\n    };\r\n\r\n    const getCustomerAddressId = (isSupplier, isGetByIdData) => {\r\n        return isSupplier === false\r\n            ? isGetByIdData ? isGetByIdData.customerAddressId : 0\r\n            : 0;\r\n    };\r\n\r\n    const getSupplierAddressId = (isSupplier, isGetByIdData) => {\r\n        return isSupplier === true\r\n            ? isGetByIdData ? isGetByIdData.supplierAddressId : 0\r\n            : 0;\r\n    };\r\n\r\n    const buildUpdateData = (transformedData, isGetByIdData, isSupplier) => {\r\n        const customerAddressId = getCustomerAddressId(isSupplier, isGetByIdData);\r\n        const supplierAddressId = getSupplierAddressId(isSupplier, isGetByIdData);\r\n        return {\r\n            ...transformedData,\r\n            addressId: isGetByIdData === null ? addressEditTableId : isGetByIdData.addressId,\r\n            customerAddressId,\r\n            supplierAddressId,\r\n        };\r\n    };\r\n\r\n    const handleAddEdit = async () => {\r\n            const data = ref.current.getFormData();\r\n        if (!data) return;\r\n        const transformedData = buildTransformedData(data, isSupplier, keyId, editMode);\r\n        if (editMode) {\r\n            const updateData = buildUpdateData(transformedData, isGetByIdData, isSupplier);\r\n            update(updateData);\r\n        } else {\r\n            // // Add mode\r\n            const customerId = orderCustomerId ? orderCustomerId : transformedData.customerId;\r\n            const req = {\r\n                ...transformedData,\r\n                customerId: customerId,\r\n            };\r\n            add(req);\r\n        }\r\n    };\r\n\r\n    const extractValue = (field) => {\r\n        return field && typeof field === \"object\" ? field.value : field;\r\n    };\r\n\r\n    const handleEdit = (addressId) => {\r\n        \r\n        addressId && getById(addressId);\r\n    }\r\n\r\n    const handleChangeDropdownList = (data, dataField) => {\r\n        const manageData = { ...formData };\r\n        if (dataField === \"countryId\") {\r\n            setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', manageData, 'stateId', item => item.countryId === data.value);\r\n            setDropDownOptionField(null, 'cityId', 'name', manageData, 'cityId', null);\r\n            setFieldSetting(manageData, 'stateId', FieldSettingType.DISABLED, false);\r\n            ref.current.updateFormFieldValue({\r\n                countryId: data.value,\r\n                stateId: null,\r\n                cityId: null\r\n            });\r\n        } else if (dataField === \"stateId\") {\r\n            if (data) {\r\n                getAllCities(data.value);\r\n                setFieldSetting(manageData, 'cityId', FieldSettingType.DISABLED, false);\r\n                ref.current.updateFormFieldValue({\r\n                    stateId: data.value,\r\n                    cityId: null,\r\n                });\r\n            } else {\r\n                ref.current.updateFormFieldValue({\r\n                    cityId: null,\r\n                });\r\n            }\r\n\r\n        }\r\n        else if (!isSupplier && dataField === \"addressTypeId\") {\r\n            let filteredFormFields;\r\n            switch (data.label) {\r\n                case \"Billing\":\r\n                    filteredFormFields = editMode ? addressFormData.formFields.filter(field => field.dataField !== \"isPreferredShipping\" && field.dataField !== \"isShippingAndBilling\")\r\n                        : addressFormData.formFields.filter(field => field.dataField !== \"isPreferredShipping\");\r\n                    break;\r\n                case \"Shipping\":\r\n                    filteredFormFields = editMode ? addressFormData.formFields.filter(field => field.dataField !== \"isPreferredBilling\" && field.dataField !== \"isShippingAndBilling\")\r\n                        : addressFormData.formFields.filter(field => field.dataField !== \"isPreferredBilling\");\r\n                    break;\r\n                case \"AP\":\r\n                case \"Primary\":\r\n                    filteredFormFields = addressFormData.formFields.filter(field => field.dataField !== \"isPreferredBilling\" && field.dataField !== \"isPreferredShipping\" && field.dataField !== \"isShippingAndBilling\");\r\n                    break;\r\n                default:\r\n                    filteredFormFields = addressFormData.formFields;\r\n            }\r\n\r\n            manageData.formFields = filteredFormFields;\r\n            manageData.initialState = {\r\n                ...(editMode ? formData.initialState : addressFormData.initialState),\r\n                addressTypeId: data.value,\r\n            };\r\n\r\n            setFormData(manageData);\r\n        }\r\n    };\r\n\r\n    const handleCheckboxChanges = (data, dataField) => {\r\n        setSelectedCheckbox(data)\r\n        setSelectedCheckboxFeild(dataField)\r\n        if (dataField === \"isShippingAndBilling\" && data) {\r\n            const manageData = { ...formData };\r\n            let filteredFormFields;\r\n            filteredFormFields = addressFormData.formFields\r\n            manageData.formFields = filteredFormFields;\r\n            setFormData(manageData)\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let data = { ...formData }\r\n        if (selectedCheckboxFeild === \"isShippingAndBilling\" && selectedCheckbox === false && data.initialState.addressTypeId === 1) {\r\n            let updatedFormData;\r\n            updatedFormData = removeFormFields(formData, ['isPreferredShipping']);\r\n            setFormData(updatedFormData)\r\n        } else if (selectedCheckboxFeild === \"isShippingAndBilling\" && selectedCheckbox === false && data.initialState.addressTypeId === 2) {\r\n            let updatedFormData;\r\n            updatedFormData = removeFormFields(formData, ['isPreferredBilling']);\r\n            setFormData(updatedFormData)\r\n        }\r\n    }, [selectedCheckbox, selectedCheckboxFeild])\r\n\r\n    //** Use Imperative Handle */\r\n    useImperativeHandle(editRef, () => ({\r\n        callChildEditFunction: handleEdit\r\n    }));\r\n\r\n    const handleDropdownAction = (data, dataField) => {\r\n        if (dataField === 'stateId') {\r\n            setFieldSetting(formData, 'cityId', FieldSettingType.ISTEXT, data);\r\n            ref.current.updateFormFieldValue({ cityId: null });\r\n        } else if (dataField === 'cityId') {\r\n            if (!data) {\r\n                setFieldSetting(formData, 'stateId', FieldSettingType.ISTEXT, data);\r\n                ref.current.updateFormFieldValue({ cityId: null });\r\n            }\r\n        }\r\n    }\r\n\r\n    //** Action Handler */\r\n    const formActionHandler = {\r\n        DDL_CHANGED: handleChangeDropdownList,\r\n        CHECK_CHANGE: handleCheckboxChanges,\r\n        DA_CHANGED: handleDropdownAction\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"row mt-2 add-address-form\">\r\n            <FormCreator config={formData} ref={ref} {...formData} onActionChange={formActionHandler} onDropdownAction={formActionHandler}\r\n                onCheckBoxChange={formActionHandler} key={shouldRerenderFormCreator} />\r\n            <div className=\"col-md-12 mt-2\">\r\n                <div className=\"d-flex align-item-end justify-content-end\">\r\n                    <Buttons\r\n                        buttonTypeClassName=\"theme-button\"\r\n                        buttonText={editMode ? \"Update\" : \"Save\"}\r\n                        onClick={handleAddEdit}\r\n                        isLoading={isAddLoading || isUpdateLoading}\r\n                        isDisable={isButtonDisable} />\r\n                    <Buttons\r\n                        buttonTypeClassName=\"dark-btn ml-5\"\r\n                        buttonText=\"Cancel\"\r\n                        onClick={onSidebarClose} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nAddEditAddress.propTypes = {\r\n    keyId: PropTypes.number.isRequired,\r\n    isSupplier: PropTypes.bool.isRequired,\r\n    updateAddress: PropTypes.func.isRequired,\r\n    addAddress: PropTypes.func.isRequired,\r\n    getAddresssById: PropTypes.func.isRequired,\r\n    isModelOpen: PropTypes.bool.isRequired,\r\n    editMode: PropTypes.bool.isRequired,\r\n    isButtonDisable: PropTypes.bool.isRequired,\r\n    onSidebarClose: PropTypes.func,\r\n    editRef: PropTypes.object,\r\n    orderCustomerId: PropTypes.number,\r\n    isOrderManage: PropTypes.bool,\r\n    getAddressTypeIdOrder: PropTypes.string,\r\n    onHandleOrderInfoRepeatCall: PropTypes.func,\r\n};\r\n\r\nexport default AddEditAddress;"],"names":["SetInitialCountry","label","value","forwardRef","_ref","keyId","isSupplier","updateAddress","addAddress","getAddresssById","isModelOpen","editMode","isButtonDisable","getCompletionCount","onSidebarClose","editRef","isOrderManage","getAddressTypeIdOrder","onHandleOrderInfoRepeatCall","orderCustomerId","isEditablePage","customerStatusId","ref","useRef","formData","setFormData","useState","addressFormData","shouldRerenderFormCreator","setShouldRerenderFormCreator","selectedCheckboxFeild","setSelectedCheckboxFeild","selectedCheckbox","setSelectedCheckbox","addressEditTableId","setAddressEditTableId","add","isLoading","isAddLoading","isSuccess","isAddSuccess","data","isAddData","update","isUpdateLoading","isUpdateSuccess","isUpdateData","getById","isFetching","isGetByIdFetching","isGetByIdSuccess","isGetByIdData","getAllCities","isGetAllCitiesSucess","isFetchingCities","allGetAllCitiesData","useLazyGetAllCitiesQuery","getAllStates","allGetAllStatesData","useLazyGetAllStatesQuery","getAllCountries","isGetAllCountriesSucess","allGetAllCountriesData","useLazyGetAllCountriesQuery","getAllAddressTypes","isGetAllAddressTypesSucess","allGetAllAddressTypesData","useLazyGetAllAddressTypesQuery","useEffect","async","Promise","all","fetchData","setFieldSetting","FieldSettingType","DISABLED","form","AddressType","BILLING","removeFormFields","SHIPPING","initialState","addressTypeId","handleResponse","success","handleAddressResponse","MULTISELECT","onResetForm","setDropDownOptionField","_data$formFields","cities","map","item","cityId","name","dropdownField","formFields","find","id","fieldSetting","options","filterCondition","isForSuppliers","isForCustomers","prevState","addressId","countryId","stateId","customerId","supplierId","addressLine1","addressLine2","addressLine3","addressLine4","addressLine5","zipCode","isPreferredShipping","isPreferredBilling","setInitialValue","updatedFormData","handleChangeDropdownList","type","responseData","errorMessage","includes","ToastService","warning","buildTransformedData","addressTypeIdValue","getAddressTypeId","String","Array","isArray","join","transformLocationData","locationData","nameField","isNew","text","stateName","cityName","extractValue","field","handleEdit","dataField","manageData","current","updateFormFieldValue","filteredFormFields","filter","useImperativeHandle","callChildEditFunction","formActionHandler","DDL_CHANGED","CHECK_CHANGE","handleCheckboxChanges","DA_CHANGED","handleDropdownAction","ISTEXT","_jsxs","className","children","_createElement","FormCreator","config","onActionChange","onDropdownAction","onCheckBoxChange","key","_jsx","Buttons","buttonTypeClassName","buttonText","onClick","getFormData","transformedData","updateData","buildUpdateData","customerAddressId","getCustomerAddressId","supplierAddressId","getSupplierAddressId","req","isDisable"],"sourceRoot":""}