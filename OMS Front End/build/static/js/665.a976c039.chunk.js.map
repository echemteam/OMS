{"version":3,"file":"static/js/665.a976c039.chunk.js","mappings":"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","sources":["pages/supplierDetails/supplierGrid/feature/InActiveTabs/feature/InActiveSuppliersList.js","utils/CustomActionSecurity/actionsSecurityValidator.js","utils/ResponsibleUser/validateRUser.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport React, { useContext, useEffect, useImperativeHandle, useRef, useState } from 'react';\r\n//** Lib's */\r\nimport { AppIcons } from '../../../../../../data/appIcons';\r\nimport { securityKey } from '../../../../../../data/SecurityKey';\r\nimport { StatusEnums } from '../../../../../../utils/Enums/StatusEnums';\r\nimport CardSection from '../../../../../../components/ui/card/CardSection';\r\nimport SupplierContext from \"../../../../../../utils/ContextAPIs/Supplier/SupplierListContext\"\r\nimport AddSupplierContext from \"../../../../../../utils/ContextAPIs/Supplier/AddSupplierContext\";\r\nimport { hasFunctionalPermission } from '../../../../../../utils/AuthorizeNavigation/authorizeNavigation';\r\n//** Service's */\r\nimport { encryptUrlData } from '../../../../../../services/CryptoService';\r\nimport SwalAlert from '../../../../../../services/swalService/SwalService';\r\nimport ToastService from '../../../../../../services/toastService/ToastService';\r\nimport { useGetSuppliersMutation, useUpdateSupplierStatusMutation } from '../../../../../../app/services/supplierAPI';\r\nimport FinalMolGrid from '../../../../../../components/FinalMolGrid/FinalMolGrid';\r\nimport { validateResponsibleUserId } from '../../../../../../utils/ResponsibleUser/validateRUser';\r\nimport { securityValidator } from '../../../../../../utils/CustomActionSecurity/actionsSecurityValidator';\r\n//** Component's */\r\nconst SupplierApproval = React.lazy(() => import(\"../../../../feature/supplierApproval/SupplierApproval\"));\r\n\r\n\r\nconst InActiveSuppliersList = ({ statusId, configFile, handleChange, search, handleChangeDropdown, statusOptions, selectedDrpvalues, selectedStatusOptions, searchStatusFilter, handleSearch, handleClear, shouldRerenderFormCreator, handleKeyPress }) => {\r\n\r\n    const childRef = useRef();\r\n    const molGridRef = useRef();\r\n    const navigate = useNavigate();\r\n    const { confirm } = SwalAlert();\r\n    const [totalRowCount, setTotalRowCount] = useState(0);\r\n    const [dataSource, setDataSource] = useState();\r\n    const { DataRef } = useContext(SupplierContext);\r\n    const [supplierId, setSupplierId] = useState();\r\n    const authState = useSelector((state) => state.auth);\r\n    const { isResponsibleUser, setIsResponsibleUser } = useContext(AddSupplierContext);\r\n\r\n    const [\r\n        getSuppliers,\r\n        { isLoading: isListLoading, isSuccess: isListSuccess, data: isListeData },\r\n    ] = useGetSuppliersMutation();\r\n\r\n    const [updateSupplierStatus, { isLoading: updateSupplierStatusLoading, isSuccess: isSuccessUpdateSupplierStatus, data: updateSupplierStatusData }] = useUpdateSupplierStatusMutation();\r\n\r\n    const handlePageChange = (page) => {\r\n        const request = {\r\n            pagination: {\r\n                pageNumber: page.pageNumber,\r\n                pageSize: page.pageSize,\r\n            },\r\n            filters: { searchText: search },\r\n            statusId: Array.isArray(statusId) ? statusId.join(\",\") : String(statusId)\r\n        };\r\n        getSuppliers(request);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!isResponsibleUser) {\r\n            onCustomeActionHandler();\r\n        }\r\n    }, [configFile]);\r\n\r\n    const hasResponsibleUserhasAccess = () => {\r\n        onCustomeActionHandler();\r\n    }\r\n\r\n    const onCustomeActionHandler = () => {\r\n        const actionColumn = configFile?.columns.find((column) => column.name === \"Action\");\r\n        if (actionColumn) {\r\n            //const hasActive = hasFunctionalPermission(securityKey.ACTIVESUPPLIER);\r\n            const hasEdit = hasFunctionalPermission(securityKey.EDITSUPPLIER);\r\n            const hasUnBlock = hasFunctionalPermission(securityKey.UNBLOCKSUPPLIER);\r\n            const hasUnFreeze = hasFunctionalPermission(securityKey.UNFREEZESUPPLIER);\r\n\r\n            if (actionColumn.defaultAction) {\r\n                actionColumn.defaultAction.allowEdit = hasEdit?.hasAccess;\r\n            }\r\n            //actionColumn.customAction = securityValidator(hasBlock?.hasAccess, actionColumn.customAction, \"ALLOWBLOCKED\");\r\n            actionColumn.customAction = securityValidator(hasUnFreeze?.hasAccess, actionColumn.customAction, \"ALLOWFREEZE\");\r\n            //actionColumn.customAction = securityValidator(hasDisable?.hasAccess, actionColumn.customAction, \"ALLOWDISABLE\");\r\n            actionColumn.customAction = securityValidator(hasUnBlock?.hasAccess, actionColumn.customAction, \"ALLOWUNBLOCKED\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n                if (isListSuccess && isListeData) {\r\n            if (isListeData) {\r\n                setDataSource(isListeData.dataSource);\r\n                // const isResponsibleId = isListeData.dataSource.find(data => data.responsibleUserId === authState?.user?.userID);\r\n                const isResponsibleId = isListeData.dataSource.find(data => validateResponsibleUserId(data.responsibleUserId, authState?.user?.userID));\r\n                \r\n                if (isResponsibleId) {\r\n                    setIsResponsibleUser(true);\r\n                    hasResponsibleUserhasAccess();\r\n                } else {\r\n                    setIsResponsibleUser(false);\r\n                }\r\n            }\r\n            if (isListeData.totalRecord) {\r\n                setTotalRowCount(isListeData.totalRecord);\r\n            }\r\n        }\r\n    }, [isListSuccess, isListeData]);\r\n\r\n    useEffect(() => {\r\n        if (isSuccessUpdateSupplierStatus && updateSupplierStatusData) {\r\n            ToastService.success(updateSupplierStatusData.errorMessage);\r\n            getListApi()\r\n        }\r\n    }, [isSuccessUpdateSupplierStatus, updateSupplierStatusData]);\r\n\r\n    useImperativeHandle(DataRef, () => ({\r\n        getListApi,\r\n    }));\r\n\r\n    const getListApi = () => {\r\n        const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n        const request = {\r\n            pagination: {\r\n                pageNumber: currentPageObject.pageNumber,\r\n                pageSize: currentPageObject.pageSize,\r\n            },\r\n            filters: { searchText: search },\r\n            statusId: selectedDrpvalues.length === 0 ? (Array.isArray(statusId) ? statusId.join(\",\") : String(statusId)) : (Array.isArray(selectedDrpvalues) ? selectedDrpvalues.join(\",\") : String(selectedDrpvalues))\r\n        };\r\n        getSuppliers(request);\r\n    };\r\n\r\n    const approvalCheckList = (data) => {\r\n        if (childRef.current) {\r\n            childRef.current.callChildFunction(data.supplierId);\r\n        }\r\n        setSupplierId(data.supplierId);\r\n    }\r\n\r\n    const handleUnfreeze = (data) => {\r\n        // approvalCheckList(data)\r\n        confirm(\r\n            \"Warning?\",\r\n            `Are you sure you want to unfreeze and change the status to approved?`,\r\n            \"Yes\",\r\n            \"Cancel\"\r\n        ).then((confirmed) => {\r\n            if (confirmed) {\r\n                handleUpdate(data)\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleActiveSupplier = (data) => {\r\n        approvalCheckList(data)\r\n    }\r\n\r\n    const handleUnBlock = (data) => {\r\n        // approvalCheckList(data)\r\n        confirm(\r\n            \"Warning?\",\r\n            `Are you sure you want to unfreeze and change the status to approved?`,\r\n            \"Yes\",\r\n            \"Cancel\"\r\n        ).then((confirmed) => {\r\n            if (confirmed) {\r\n                handleUpdate(data)\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleUpdate = () => {\r\n        let req = {\r\n            supplierId: supplierId,\r\n            statusId: StatusEnums.Approved\r\n        }\r\n        updateSupplierStatus(req)\r\n    }\r\n\r\n\r\n    const handleEditClick = (data) => {\r\n        navigate(`/SupplierDetails/${encryptUrlData(data.supplierId)}`, \"_blank\");\r\n    }\r\n\r\n    const actionHandler = {\r\n        ALLOWUNFREEZE: handleUnfreeze,\r\n        ACTIVECUSTOMER: handleActiveSupplier,\r\n        ALLOWUNBLOCKED: handleUnBlock,\r\n        EDIT: handleEditClick,\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"col-xxl-12 col-xl-12 col-md-12 col-12\" key={shouldRerenderFormCreator}>\r\n                    <CardSection\r\n                        searchInput={true}\r\n                        handleChange={handleChange}\r\n                        searchInputName=\"Search By Supplier Name, Tax Id , Email Address\"\r\n                        searchFilter={searchStatusFilter}\r\n                        handleChangeDropdown={handleChangeDropdown}\r\n                        selectedOptions={selectedDrpvalues}\r\n                        optionsValue={statusOptions}\r\n                        isMultiSelect={true}\r\n                        placeholder=\"Search by Status\"\r\n                        isCardSection={true}\r\n                        isdropdownOpen={true}\r\n                        searchButton={true}\r\n                        searchbuttonText=\"Search\"\r\n                        buttonClassName=\"theme-button\"\r\n                        searchTitleButtonClick={handleSearch}\r\n                        clearButton={true}\r\n                        clearTitleButtonClick={handleClear}\r\n                        clearButtonText=\"Clear\"\r\n                        clearButtonClassName=\"dark-btn\"\r\n                        searchIconImg={AppIcons.SearchIcone}\r\n                        searchTextWithIcon={true}\r\n                        clearTextWithIcon={true}\r\n                        clearIconImg={AppIcons.ClearIcone}\r\n                        handleKeyPress={handleKeyPress}\r\n                    >\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-12 table-striped last-center\">\r\n                                <div className='inactive-scroll-bar '>\r\n                                    <FinalMolGrid\r\n                                        ref={molGridRef}\r\n                                        configuration={configFile}\r\n                                        dataSource={dataSource}\r\n                                        isLoading={isListLoading || updateSupplierStatusLoading}\r\n                                        allowPagination={true}\r\n                                        pagination={{\r\n                                            totalCount: totalRowCount,\r\n                                            pageSize: 25,\r\n                                            currentPage: 1,\r\n                                        }}\r\n                                        onPageChange={handlePageChange}\r\n                                        onActionChange={actionHandler}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </CardSection>\r\n                </div>\r\n            </div>\r\n            <SupplierApproval childRef={childRef} getListApi={getListApi} updateApproval={handleUpdate} />\r\n        </div>\r\n    )\r\n}\r\n\r\nInActiveSuppliersList.propTypes = {\r\n    statusId: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n        PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number]))\r\n    ]).isRequired,\r\n    configFile: PropTypes.object.isRequired,\r\n    handleChange: PropTypes.func.isRequired,\r\n    search: PropTypes.string.isRequired,\r\n    handleChangeDropdown: PropTypes.func.isRequired,\r\n    statusOptions: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n            label: PropTypes.string\r\n        })\r\n    ).isRequired,\r\n    selectedDrpvalues: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.number),\r\n        PropTypes.string\r\n    ]).isRequired,\r\n    selectedStatusOptions: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.object),\r\n        PropTypes.string\r\n    ]).isRequired,\r\n    searchStatusFilter: PropTypes.bool.isRequired,\r\n    handleSearch: PropTypes.func.isRequired,\r\n    handleClear: PropTypes.func.isRequired,\r\n    shouldRerenderFormCreator: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default InActiveSuppliersList;","/**\r\n * @param {Object[]} customAction - The list of custom actions.\r\n * @param {string} actionName - The name of the action to check or modify.\r\n * @param {boolean} hasAccess - Indicates whether access should be granted.\r\n */\r\nexport const securityValidator = (hasAccess, customAction, actionName) => {\r\n\r\n    //** This Check is action is exist in our customeAction configuration  */\r\n    const customActionExist = customAction && customAction?.some(action => action?.name === actionName);\r\n\r\n    /** This Check is action is exist in our customeAction configuration  */\r\n    const checkActionExistOnConfiguration = customAction && customAction?.some(action => action?.name === actionName);\r\n\r\n    if (customActionExist && hasAccess === false) {\r\n        // EX: Remove the blocked action if it exists\r\n        customAction = customAction?.filter(action => action?.name !== actionName);\r\n    } else {\r\n        // EX: Add the blocked action if it does not exist\r\n        if (!customActionExist && checkActionExistOnConfiguration) {\r\n            customAction = [\r\n                ...(customAction || []),\r\n                customAction.find(action => action?.name === actionName)\r\n            ];\r\n        }\r\n    }\r\n    return customAction;\r\n}","/**\r\n * Checks if a user ID is included in a comma-separated string of IDs.\r\n * @param {string} userIdsString - Comma-separated string of IDs.\r\n * @param {number} loginUserId - The login user ID to check for.\r\n * @returns {boolean} - Returns true if the login user ID is included in the string, otherwise false.\r\n */\r\nexport const validateResponsibleUserId = (userIdsString, loginUserId) => {\r\n    if (!userIdsString || !loginUserId) return false;\r\n\r\n    const idsArray = userIdsString.toString().split(',').map(id => id.trim());\r\n    const loginUserIdStr = loginUserId.toString();\r\n    return idsArray.includes(loginUserIdStr);\r\n}"],"names":["SupplierApproval","React","_ref","statusId","configFile","handleChange","search","handleChangeDropdown","statusOptions","selectedDrpvalues","selectedStatusOptions","searchStatusFilter","handleSearch","handleClear","shouldRerenderFormCreator","handleKeyPress","childRef","useRef","molGridRef","navigate","useNavigate","confirm","SwalAlert","totalRowCount","setTotalRowCount","useState","dataSource","setDataSource","DataRef","useContext","SupplierContext","supplierId","setSupplierId","authState","useSelector","state","auth","isResponsibleUser","setIsResponsibleUser","AddSupplierContext","getSuppliers","isLoading","isListLoading","isSuccess","isListSuccess","data","isListeData","useGetSuppliersMutation","updateSupplierStatus","updateSupplierStatusLoading","isSuccessUpdateSupplierStatus","updateSupplierStatusData","useUpdateSupplierStatusMutation","useEffect","onCustomeActionHandler","actionColumn","columns","find","column","name","hasEdit","hasFunctionalPermission","securityKey","EDITSUPPLIER","hasUnBlock","UNBLOCKSUPPLIER","hasUnFreeze","UNFREEZESUPPLIER","defaultAction","allowEdit","hasAccess","customAction","securityValidator","_authState$user","validateResponsibleUserId","responsibleUserId","user","userID","totalRecord","ToastService","success","errorMessage","getListApi","useImperativeHandle","currentPageObject","current","getCurrentPageObject","request","pagination","pageNumber","pageSize","filters","searchText","length","Array","isArray","join","String","handleUpdate","req","StatusEnums","Approved","actionHandler","ALLOWUNFREEZE","then","confirmed","ACTIVECUSTOMER","callChildFunction","approvalCheckList","ALLOWUNBLOCKED","EDIT","encryptUrlData","_jsxs","children","_jsx","className","CardSection","searchInput","searchInputName","searchFilter","selectedOptions","optionsValue","isMultiSelect","placeholder","isCardSection","isdropdownOpen","searchButton","searchbuttonText","buttonClassName","searchTitleButtonClick","clearButton","clearTitleButtonClick","clearButtonText","clearButtonClassName","searchIconImg","AppIcons","SearchIcone","searchTextWithIcon","clearTextWithIcon","clearIconImg","ClearIcone","FinalMolGrid","ref","configuration","allowPagination","totalCount","currentPage","onPageChange","page","onActionChange","updateApproval","actionName","_customAction","_customAction2","customActionExist","some","action","checkActionExistOnConfiguration","_customAction3","filter","userIdsString","loginUserId","idsArray","toString","split","map","id","trim","loginUserIdStr","includes"],"sourceRoot":""}