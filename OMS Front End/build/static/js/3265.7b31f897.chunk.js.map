{"version":3,"file":"static/js/3265.7b31f897.chunk.js","mappings":"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","sources":["pages/order/orderDetail/feature/ordersummary/Config/UpdateOrderDetail.Data.js","pages/order/orderDetail/feature/ordersummary/feature/UpdateOrderDetails.js"],"sourcesContent":["import { FormFieldTypes } from \"../../../../../../data/formFieldType\";\r\n\r\nconst intial = {\r\n    orderMethodId: 0,\r\n    orderReceivedDate: \"\",\r\n    referenceNumber: \"\",\r\n    poNumber: \"\"\r\n}\r\n\r\nexport const orderDetailsData = {\r\n    initialState: intial,\r\n    formFields: [\r\n        {\r\n            id: \"poNumber\",\r\n            lable: \"PO Number \",\r\n            Field_Name: \"PO Number\",\r\n            fieldType: FormFieldTypes.INPUT,\r\n            dataField: \"poNumber\",\r\n            fieldSetting: {\r\n                placeholder: \"Enter PO Number\",\r\n                allowSpace: true,\r\n                maxLength: 50,\r\n                exemptBoundarySpaces: true\r\n            },\r\n            validation: [{ type: \"require\" }, { type: \"uniqueName\" }],\r\n            style: {\r\n                containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-input\",\r\n            },\r\n            inputButtonGroupConfig: {\r\n                isPrimaryButtonVisible: false,\r\n                primaryButtonText: 'Verify',\r\n                infoButtonConfig: {\r\n                    isInfoButtonVisible: false,\r\n                    infoButtonIcon: \"fa-search\",\r\n                    infoButtonTooltip: \"PO Number\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            id: \"orderMethodId\",\r\n            lable: \"Order Method \",\r\n            Field_Name: \"Order Method\",\r\n            fieldType: FormFieldTypes.SELECT,\r\n            dataField: \"orderMethodId\",\r\n            fieldSetting: {\r\n                isDisabled: false,\r\n                placeholder: \"Select Order Method\",\r\n                isEnableOnChange: true\r\n            },\r\n            validation: [{ type: \"require\" }],\r\n            style: {\r\n                containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-input label-name-small\",\r\n            },\r\n        },\r\n        {\r\n            id: \"referenceNumber\",\r\n            lable: \"Reference Number\",\r\n            Field_Name: \"Reference Number\",\r\n            fieldType: FormFieldTypes.INPUT,\r\n            dataField: \"referenceNumber\",\r\n            fieldSetting: {\r\n                placeholder: \"Enter Reference Number\",\r\n                allowSpace: true,\r\n                maxLength: 35,\r\n            },\r\n            style: {\r\n                containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 mb-input\",\r\n            },\r\n        },\r\n        {\r\n            id: \"orderReceivedDate\",\r\n            lable: \"Order Received Date :\",\r\n            Field_Name: \"Order Received Date\",\r\n            fieldType: FormFieldTypes.DATEPICKER,\r\n            dataField: \"orderReceivedDate\",\r\n            fieldSetting: {\r\n                placeholder: \"Enter Order Received Date\",\r\n                options: [],\r\n            },\r\n            validation: [{ type: \"require\" }, { type: \"text\" }],\r\n            style: {\r\n                containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12\",\r\n            },\r\n        },\r\n    ],\r\n};\r\n","import React, { useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\n\r\n//** Lib's */\r\nimport { AppIcons } from \"../../../../../../data/appIcons\";\r\nimport { orderDetailsData } from \"../Config/UpdateOrderDetail.Data\";\r\nimport Buttons from \"../../../../../../components/ui/button/Buttons\";\r\nimport FormCreator from \"../../../../../../components/Forms/FormCreator\";\r\nimport DataLoader from \"../../../../../../components/ui/dataLoader/DataLoader\";\r\nimport { useLazyGetAllOrderMethodQuery } from \"../../../../../../app/services/commonAPI\";\r\nimport { setDropDownOptionField } from \"../../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\n\r\n//** Service's */\r\nimport ToastService from \"../../../../../../services/toastService/ToastService\";\r\nimport { useLazyGetOrderInformationByOrderIdQuery, useUpdateOrderDetailMutation } from \"../../../../../../app/services/orderAPI\";\r\n\r\n/** Lazily Loaded Components */\r\nconst SidebarModel = React.lazy(() => import(\"../../../../../../components/ui/sidebarModel/SidebarModel\"))\r\n\r\nconst UpdateOrderDetails = ({ orderId, orderDetailRef, onRefreshOrderDetails }) => {\r\n\r\n    //** State */\r\n    const ref = useRef();\r\n    const [isModelOpen, setIsModelOpen] = useState(false);\r\n    const [formData, setFormData] = useState(orderDetailsData);\r\n\r\n    //** API Call's */\r\n    const [update, { isLoading, isSuccess: isUpdateSuccess, data: isUpdateData }] = useUpdateOrderDetailMutation();\r\n    const [getAllOrderMethod, { isSuccess: isGetAllOrderMethodSucess, data: allGetAllOrderMethodData }] = useLazyGetAllOrderMethodQuery();\r\n    const [getOrderInfoByOrderId, { isFetching, isSuccess: isSuccess, data: isOrderData }] = useLazyGetOrderInformationByOrderIdQuery();\r\n\r\n    //** Use Effect's */\r\n    useEffect(() => {\r\n        getAllOrderMethod();\r\n    }, [orderId]);\r\n\r\n    useEffect(() => {\r\n        if (!isFetching && isSuccess && isOrderData) {\r\n            const form = { ...formData }\r\n            let request = {\r\n                customerId: isOrderData.customerId,\r\n                referenceNumber: isOrderData.referenceNumber,\r\n                poNumber: isOrderData.poNumber,\r\n                orderReceivedDate: isOrderData.orderReceivedDate,\r\n                orderMethod: isOrderData.orderMethod,\r\n                orderMethodId: isOrderData.orderMethodId\r\n            }\r\n            form.initialState = request\r\n            setFormData(form);\r\n\r\n        }\r\n    }, [isFetching, isSuccess, isOrderData]);\r\n\r\n    useEffect(() => {\r\n        if (isGetAllOrderMethodSucess && allGetAllOrderMethodData) {\r\n            setDropDownOptionField(allGetAllOrderMethodData, \"orderMethodId\", \"orderMethod\", formData, \"orderMethodId\");\r\n        }\r\n    }, [isGetAllOrderMethodSucess, allGetAllOrderMethodData]);\r\n\r\n    useEffect(() => {\r\n        if (isUpdateSuccess && isUpdateData) {\r\n            onSidebarClose();\r\n            onRefreshOrderDetails();\r\n            ToastService.success(isUpdateData.errorMessage);\r\n        }\r\n    }, [isUpdateSuccess, isUpdateData]);\r\n\r\n    //** Handle Change's */\r\n    const handleUpdate = () => {\r\n        const data = ref.current.getFormData();\r\n        if (data) {\r\n            let request = {\r\n                ...data,\r\n                orderId: orderId,\r\n                orderMethodId: data.orderMethodId && typeof data.orderMethodId === \"object\" ? data.orderMethodId.value : data.orderMethodId,\r\n            }\r\n            update(request);\r\n        }\r\n    }\r\n\r\n    const handleToggleModal = () => {\r\n        setIsModelOpen(!isModelOpen);\r\n        getOrderInfoByOrderId(orderId);\r\n    };\r\n\r\n    const onSidebarClose = () => {\r\n        setIsModelOpen(!isModelOpen);\r\n    }\r\n\r\n    //** Use Imperative Handle */\r\n    useImperativeHandle(orderDetailRef, () => ({\r\n        handleToggleModal\r\n    }))\r\n\r\n    return (\r\n        <SidebarModel modalTitle=\"Update Order Details\" contentClass=\"content-50\" onClose={onSidebarClose}\r\n            modalTitleIcon={AppIcons.AddIcon} isOpen={isModelOpen}>\r\n            <div className=\"row mt-2\">\r\n                <div className=\"col-md-12 add-edit-user-form\">\r\n                    <div className=\"row vertical-form\">\r\n                        {!isFetching ?\r\n                            <FormCreator\r\n                                config={formData}\r\n                                ref={ref}\r\n                                isLoading={isFetching}\r\n                            />\r\n                            : <DataLoader />}\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"d-flex align-item-center justify-content-end\">\r\n                        <Buttons\r\n                            buttonTypeClassName=\"theme-button\"\r\n                            onClick={handleUpdate}\r\n                            buttonText=\"Update\"\r\n                            isLoading={isLoading}\r\n                        />\r\n                        <Buttons\r\n                            buttonTypeClassName=\"dark-btn ml-5\"\r\n                            buttonText=\"Cancel\"\r\n                            onClick={onSidebarClose}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </SidebarModel>\r\n    )\r\n}\r\n\r\nexport default UpdateOrderDetails;"],"names":["orderDetailsData","initialState","orderMethodId","orderReceivedDate","referenceNumber","poNumber","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","INPUT","dataField","fieldSetting","placeholder","allowSpace","maxLength","exemptBoundarySpaces","validation","type","style","containerCss","inputButtonGroupConfig","isPrimaryButtonVisible","primaryButtonText","infoButtonConfig","isInfoButtonVisible","infoButtonIcon","infoButtonTooltip","SELECT","isDisabled","isEnableOnChange","DATEPICKER","options","SidebarModel","React","_ref","orderId","orderDetailRef","onRefreshOrderDetails","ref","useRef","isModelOpen","setIsModelOpen","useState","formData","setFormData","update","isLoading","isSuccess","isUpdateSuccess","data","isUpdateData","useUpdateOrderDetailMutation","getAllOrderMethod","isGetAllOrderMethodSucess","allGetAllOrderMethodData","useLazyGetAllOrderMethodQuery","getOrderInfoByOrderId","isFetching","isOrderData","useLazyGetOrderInformationByOrderIdQuery","useEffect","form","request","customerId","orderMethod","setDropDownOptionField","onSidebarClose","ToastService","success","errorMessage","handleToggleModal","useImperativeHandle","_jsx","modalTitle","contentClass","onClose","modalTitleIcon","AppIcons","AddIcon","isOpen","children","_jsxs","className","DataLoader","FormCreator","config","Buttons","buttonTypeClassName","onClick","handleUpdate","current","getFormData","value","buttonText"],"sourceRoot":""}