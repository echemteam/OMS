{"version":3,"file":"static/js/4903.8a15ab18.chunk.js","mappings":"0PASA,MAgHA,EAhHyBA,IAAkF,IAAjF,gBAAEC,EAAe,SAAEC,EAAQ,aAAEC,EAAY,aAACC,EAAY,OAAEC,EAAM,YAACC,GAAYN,EACnG,MAAMO,GAAaC,EAAAA,EAAAA,WACZC,EAAUC,IAAeC,EAAAA,EAAAA,aACzBC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,IAC7C,QAAEG,IAAYC,EAAAA,EAAAA,MACbC,GAAiBC,UAAWC,EAAsBC,UAAWC,EAAsBC,KAAMC,KAA0BC,EAAAA,EAAAA,OACnHC,GAAoBL,UAAWM,EAAyBJ,KAAMK,KAA2BC,EAAAA,EAAAA,OAEhGC,EAAAA,EAAAA,YAAU,KACR,GAAIH,GAA2BC,EAAsB,CACnDG,EAAAA,EAAaC,QAAQJ,EAAqBK,cAC1C,MAAMC,EAAoBzB,EAAW0B,QAAQC,uBAC7CC,EAASH,EAAmBzB,EAAW0B,QAAQG,wBACjD,IACC,CAACX,EAAyBC,IAE7B,MAAMS,EAAWA,CAACE,EAAYC,KAC5B,MAAMC,EAAU,CACdC,WAAY,CACVC,WAAYJ,EAAWI,WACvBC,SAAUL,EAAWK,UAEvBC,QAAS,CAAEC,WAAYvC,GACvBwC,WAAYP,GAEdtB,EAAgBuB,EAAQ,EASpBO,EAAYA,KAChB,GAAIvC,EAAW0B,QAAS,CACtB,MAAMc,EAAoBxC,EAAW0B,QAAQC,uBAC7CC,EAASY,EAAmBxC,EAAW0B,QAAQG,wBACjD,IAGFR,EAAAA,EAAAA,YAAU,KACJR,GAAyBE,IACvBA,GACFZ,EAAYY,EAAmB0B,YAE7B1B,EAAmB2B,aACrBpC,EAAiBS,EAAmB2B,aAExC,GACC,CAAC7B,EAAuBE,KAG3BM,EAAAA,EAAAA,YAAW,KACM,KAAXvB,GACDyC,GACH,GACC,CAACzC,IAEJ,MAQM6C,EAAgB,CACpBC,KAAMlD,EACNmD,OAVyB/B,IACzBP,EAAS,UAAW,mCAAoC,SAAU,UAChEuC,MAAMC,IACFA,GACF9B,EAAkBH,EAAKkC,WACzB,GACA,GASJ,OAHAC,EAAAA,EAAAA,qBAAoBtD,GAAU,MAC5BuD,kBAAmBX,OAIjBY,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKC,UAClBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uCAAsCC,UACnDF,EAAAA,EAAAA,KAACG,EAAAA,EAAY,CACXC,IAAKvD,EACLwD,cAAeC,EAAAA,EACfhB,WAAYvC,EACZwD,iBAAiB,EACjBzB,WAAY,CACV0B,WAAYtD,EACZ8B,SAAU,GACVyB,YAAa,GAEfC,aA5DgBC,IACxBlC,EAASkC,EAAM9D,EAAW0B,QAAQG,wBAAwB,EA4DlDkC,UA1DaC,IACrBpC,EAAS5B,EAAW0B,QAAQC,uBAAwBqC,EAAY,EA0DxDtD,UAAWC,EACXsD,eAAgBtB,EAChBuB,uBAAwBtE,EACxBC,aAAcA,EACdE,YAAaA,OAIb,E,qCC9FZ,MA2HA,EA3HqBoE,KACnB,MAAOC,EAAQC,IAAajE,EAAAA,EAAAA,WAAS,IAC9BkE,EAAaC,IAAkBnE,EAAAA,EAAAA,WAAS,GACzCT,GAAWM,EAAAA,EAAAA,UACXuE,GAAWC,EAAAA,EAAAA,OACV3E,EAAQ4E,IAAatE,EAAAA,EAAAA,UAAS,IAK/BuE,EAAiBA,KACrBJ,GAAe,GACfF,GAAU,EAAM,EAaZxE,EAAgB+E,IACpBF,EAAUE,EAAMC,OAAOC,MAAMC,OAAO,EAGhCxC,EAAYA,KACZ5C,EAAS+B,SACX/B,EAAS+B,QAAQwB,mBACnB,EAEItD,EAAeA,KACfE,EAAOkF,QAAU,EACnBzC,IAEAjB,EAAAA,EAAa2D,QAAQC,EAAAA,EAAaC,mBACpC,EAQIpF,EAAcA,KAClB2E,EAAU,GAAG,EAIf,OACEU,EAAAA,EAAAA,MAAA,OAAA/B,SAAA,EACEF,EAAAA,EAAAA,KAACkC,EAAAA,QAAW,CACVC,UAAU,GACVzF,aAAcA,EACd0F,gBAAgB,0BAChBC,aAAa,EACbC,cAAc,EACdC,iBAAiB,SACjBxB,uBAAwBtE,EACxB+F,aAAa,EACbC,sBAAuB7F,EACvB8F,gBAAgB,QAChBC,qBAAqB,WACrBC,cAAeC,EAAAA,EAASC,YACxBC,oBAAoB,EACpBC,mBAAmB,EACnBC,aAAcJ,EAAAA,EAASK,WACvBC,YAAaxG,EACbyG,gBAAgB,mBAChBC,aAAa,EACbC,WAAW,MACXC,cAAc,EACdC,QAASX,EAAAA,EAASY,SAClBC,iBArEoBC,KACxBvC,GAAe,EAAK,EAqEhBwC,eApCgBnC,IAED,UAAfA,EAAMoC,MACRpH,GACF,EAgCmCyD,UAE/BF,EAAAA,EAAAA,KAAC8D,EAAgB,CACf1E,UAAWA,EACX7C,gBAnEiBoB,IACvB0D,EAAS,qCAAoC0C,EAAAA,EAAAA,IAAepG,EAAKkC,cAAc,EAmEzErD,SAAUA,EACVE,aAAcA,EACdD,aAAcA,EACdE,OAAQA,EACRC,YAAaA,OAIjBoD,EAAAA,EAAAA,KAACgE,EAAAA,QAAY,CACXC,WAAYhD,EAAS,qBAAuB,mBAC5CiD,aAAa,aACbC,QAAS3C,EACT4C,eAAgBvB,EAAAA,EAASwB,QACzBC,OAAQnD,EAAYjB,UAEpBF,EAAAA,EAAAA,KAACuE,EAAAA,EAAmB,CAClBtD,OAAQA,EACRuD,UAjFUA,KAChBpD,GAAe,GACX5E,EAAS+B,SACX/B,EAAS+B,QAAQwB,mBACnB,EA8EMoE,QAAS3C,QAGT,C","sources":["pages/apiConfiguration/apiProviders/features/ApiProvidersList.js","pages/apiConfiguration/apiProviders/ApiProviders.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useRef, useState, useEffect ,useImperativeHandle} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport SwalAlert from \"../../../../services/swalService/SwalService\";\r\nimport {useDeleteApiProviderMutation,useGetApiProvidersMutation} from \"../../../../app/services/apiProviderAPI\";\r\nimport ToastService from \"../../../../services/toastService/ToastService\";\r\nimport { ApiProvidersGridConfig } from \"../config/ApiProviders.data\";\r\nimport FinalMolGrid from \"../../../../components/FinalMolGrid/FinalMolGrid\";\r\n\r\nconst ApiProvidersList = ({ handleEditClick, childRef ,handleSearch,handleChange, search,handleClear}) => {\r\n  const molGridRef = useRef();\r\n  const [listData, setListData] = useState();\r\n  const [totalRowCount, setTotalRowCount] = useState(0);\r\n  const { confirm } = SwalAlert();\r\n  const [getApiProviders,{isLoading: isApiProvidersLoading,isSuccess: isApiProvidersSuccess,data: isApiProvidersData, },] = useGetApiProvidersMutation();\r\n  const [deleteApiProvider,{ isSuccess: isDeleteProviderSuccess, data: isDeleteProviderData },] = useDeleteApiProviderMutation();\r\n\r\n  useEffect(() => {\r\n    if (isDeleteProviderSuccess && isDeleteProviderData) {\r\n      ToastService.success(isDeleteProviderData.errorMessage);\r\n      const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n      getLists(currentPageObject, molGridRef.current.generateSortingString());\r\n    }\r\n  }, [isDeleteProviderSuccess, isDeleteProviderData]);\r\n\r\n  const getLists = (pageObject, sortingString) => {\r\n    const request = {\r\n      pagination: {\r\n        pageNumber: pageObject.pageNumber,\r\n        pageSize: pageObject.pageSize,\r\n      },\r\n      filters: { searchText: search },\r\n      sortString: sortingString,\r\n          };\r\n    getApiProviders(request);\r\n  };\r\n\r\n  const handlePageChange = (page) => {\r\n    getLists(page, molGridRef.current.generateSortingString());\r\n  };\r\n  const handleSorting = (shortString) => {\r\n    getLists(molGridRef.current.getCurrentPageObject(), shortString);\r\n  };\r\n  const onGetData = () => {\r\n    if (molGridRef.current) {\r\n      const defaultPageObject = molGridRef.current.getCurrentPageObject();\r\n      getLists(defaultPageObject, molGridRef.current.generateSortingString());\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isApiProvidersSuccess && isApiProvidersData) {\r\n      if (isApiProvidersData) {\r\n        setListData(isApiProvidersData.dataSource);\r\n      }\r\n      if (isApiProvidersData.totalRecord) {\r\n        setTotalRowCount(isApiProvidersData.totalRecord);\r\n      }\r\n    }\r\n  }, [isApiProvidersSuccess, isApiProvidersData]);\r\n\r\n  \r\n  useEffect (() => {\r\n    if (search === \"\" ) {\r\n       onGetData();\r\n    }\r\n  }, [search]);\r\n\r\n  const handleDeleteClick = (data) => {\r\n    confirm( \"Delete?\", \"Are you sure you want to Delete?\", \"Delete\", \"Cancel\"\r\n    ).then((confirmed) => {\r\n      if (confirmed) {\r\n        deleteApiProvider(data.providerId);\r\n      }\r\n    });\r\n  };\r\n  const actionHandler = {\r\n    EDIT: handleEditClick,\r\n    DELETE: handleDeleteClick,\r\n  };\r\n  useImperativeHandle(childRef, () => ({\r\n    callChildFunction: onGetData,\r\n  }));\r\n  return (\r\n     \r\n      <div className=\"row\">\r\n        <div className=\"col-md-12 table-striped api-provider\">\r\n          <FinalMolGrid\r\n            ref={molGridRef}\r\n            configuration={ApiProvidersGridConfig}\r\n            dataSource={listData}\r\n            allowPagination={true}\r\n            pagination={{\r\n              totalCount: totalRowCount,\r\n              pageSize: 25,\r\n              currentPage: 1,\r\n            }}\r\n            onPageChange={handlePageChange}\r\n            onSorting={handleSorting}\r\n            isLoading={isApiProvidersLoading}\r\n            onActionChange={actionHandler}\r\n            searchTitleButtonClick={handleSearch}\r\n            handleChange={handleChange}\r\n            handleClear={handleClear}\r\n            \r\n          />\r\n        </div>\r\n      </div>\r\n     \r\n  );\r\n};\r\n\r\nApiProvidersList.propTypes = {\r\n  handleEditClick: PropTypes.func.isRequired,\r\n  childRef: PropTypes.object.isRequired,\r\n  handleSearch: PropTypes.func.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n  search: PropTypes.string.isRequired,\r\n  handleClear: PropTypes.func.isRequired,\r\n   \r\n};\r\nexport default ApiProvidersList;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CardSection from \"../../../components/ui/card/CardSection\";\r\nimport SidebarModel from \"../../../components/ui/sidebarModel/SidebarModel\";\r\nimport AddEditApiProviders from \"./features/AddEditApiProviders\";\r\nimport { AppIcons } from \"../../../data/appIcons\";\r\nimport ApiProvidersList from \"./features/ApiProvidersList\";\r\nimport ToastService from \"../../../services/toastService/ToastService\";\r\nimport { ErrorMessage } from \"../../../data/appMessages\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { encryptUrlData } from \"../../../services/CryptoService\";\r\n\r\nconst ApiProviders = () => {\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [isModelOpen, setIsModelOpen] = useState(false);\r\n  const childRef = useRef();\r\n  const navigate = useNavigate();\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const handleToggleModal = () => {\r\n    setIsModelOpen(true);\r\n  };\r\n  const onSidebarClose = () => {\r\n    setIsModelOpen(false);\r\n    setIsEdit(false);\r\n  };\r\n  const handleEditClick = (data) => {\r\n    navigate(`/configuration/APIProviderDetail/${encryptUrlData(data.providerId)}`);\r\n  };\r\n\r\n  const onSuccess = () => {\r\n    setIsModelOpen(true);\r\n    if (childRef.current) {\r\n      childRef.current.callChildFunction();\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setSearch(event.target.value.trim());\r\n  };\r\n\r\n  const onGetData = () => {\r\n    if (childRef.current) {\r\n      childRef.current.callChildFunction();\r\n    }\r\n  };\r\n  const handleSearch = () => {\r\n    if (search.length >= 3) {\r\n      onGetData();\r\n    } else {\r\n      ToastService.warning(ErrorMessage.CommonErrorMessage);\r\n    }\r\n  };\r\n  const handleKeyPress=(event)=>{\r\n    \r\n    if (event.code === \"Enter\") {\r\n      handleSearch();\r\n    }\r\n  }\r\n  const handleClear = () => {\r\n    setSearch(\"\");\r\n\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <CardSection\r\n        cardTitle=\"\"\r\n        handleChange={handleChange}\r\n        searchInputName=\"Search By Provider Name\"\r\n        searchInput={true}\r\n        searchButton={true}\r\n        searchbuttonText=\"Search\"\r\n        searchTitleButtonClick={handleSearch}\r\n        clearButton={true}\r\n        clearTitleButtonClick={handleClear}\r\n        clearButtonText=\"Clear\"\r\n        clearButtonClassName=\"dark-btn\"\r\n        searchIconImg={AppIcons.SearchIcone}\r\n        searchTextWithIcon={true}\r\n        clearTextWithIcon={true}\r\n        clearIconImg={AppIcons.ClearIcone}\r\n        searchValue={search}\r\n        buttonClassName=\"btn theme-button\"\r\n        rightButton={true}\r\n        buttonText=\"Add\"\r\n        textWithIcon={true}\r\n        iconImg={AppIcons.PlusIcon}\r\n        titleButtonClick={handleToggleModal}\r\n        handleKeyPress={handleKeyPress}\r\n      >\r\n        <ApiProvidersList\r\n          onGetData={onGetData}\r\n          handleEditClick={handleEditClick}\r\n          childRef={childRef}\r\n          handleChange={handleChange}\r\n          handleSearch={handleSearch}\r\n          search={search}\r\n          handleClear={handleClear}\r\n        />\r\n      </CardSection>\r\n\r\n      <SidebarModel\r\n        modalTitle={isEdit ? \"Update Api Provder\" : \"Add API Provider\"}\r\n        contentClass=\"content-35\"\r\n        onClose={onSidebarClose}\r\n        modalTitleIcon={AppIcons.AddIcon}\r\n        isOpen={isModelOpen}\r\n      >\r\n        <AddEditApiProviders\r\n          isEdit={isEdit}\r\n          onSuccess={onSuccess}\r\n          onClose={onSidebarClose}\r\n        />\r\n      </SidebarModel>\r\n    </div>\r\n  );\r\n};\r\n\r\nApiProviders.propTypes = {\r\n  AppIcons: PropTypes.shape({\r\n    SearchIcone: PropTypes.string.isRequired,\r\n    ClearIcone: PropTypes.string.isRequired,\r\n    PlusIcon: PropTypes.string.isRequired,\r\n    AddIcon: PropTypes.string.isRequired,\r\n  }),\r\n  ErrorMessage: PropTypes.shape({\r\n    CommonErrorMessage: PropTypes.string.isRequired,\r\n  }),\r\n  encryptUrlData: PropTypes.func,\r\n  ToastService: PropTypes.shape({\r\n    warning: PropTypes.func.isRequired,\r\n  }),\r\n};\r\n\r\nexport default ApiProviders;\r\n"],"names":["_ref","handleEditClick","childRef","handleSearch","handleChange","search","handleClear","molGridRef","useRef","listData","setListData","useState","totalRowCount","setTotalRowCount","confirm","SwalAlert","getApiProviders","isLoading","isApiProvidersLoading","isSuccess","isApiProvidersSuccess","data","isApiProvidersData","useGetApiProvidersMutation","deleteApiProvider","isDeleteProviderSuccess","isDeleteProviderData","useDeleteApiProviderMutation","useEffect","ToastService","success","errorMessage","currentPageObject","current","getCurrentPageObject","getLists","generateSortingString","pageObject","sortingString","request","pagination","pageNumber","pageSize","filters","searchText","sortString","onGetData","defaultPageObject","dataSource","totalRecord","actionHandler","EDIT","DELETE","then","confirmed","providerId","useImperativeHandle","callChildFunction","_jsx","className","children","FinalMolGrid","ref","configuration","ApiProvidersGridConfig","allowPagination","totalCount","currentPage","onPageChange","page","onSorting","shortString","onActionChange","searchTitleButtonClick","ApiProviders","isEdit","setIsEdit","isModelOpen","setIsModelOpen","navigate","useNavigate","setSearch","onSidebarClose","event","target","value","trim","length","warning","ErrorMessage","CommonErrorMessage","_jsxs","CardSection","cardTitle","searchInputName","searchInput","searchButton","searchbuttonText","clearButton","clearTitleButtonClick","clearButtonText","clearButtonClassName","searchIconImg","AppIcons","SearchIcone","searchTextWithIcon","clearTextWithIcon","clearIconImg","ClearIcone","searchValue","buttonClassName","rightButton","buttonText","textWithIcon","iconImg","PlusIcon","titleButtonClick","handleToggleModal","handleKeyPress","code","ApiProvidersList","encryptUrlData","SidebarModel","modalTitle","contentClass","onClose","modalTitleIcon","AddIcon","isOpen","AddEditApiProviders","onSuccess"],"sourceRoot":""}