{"version":3,"file":"static/js/2623.270fab28.chunk.js","mappings":"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","sources":["common/features/component/Address/feature/AddressDetailCard.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, {\r\n  useState,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\n//** Lib's */\r\n//** Component's */\r\nimport DataLoader from \"../../../../../components/ui/dataLoader/DataLoader\";\r\nimport NoRecordFound from \"../../../../../components/ui/noRecordFound/NoRecordFound\";\r\nimport PropTypes from \"prop-types\";\r\nimport SwalAlert from \"../../../../../services/swalService/SwalService\";\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\nimport Iconify from \"../../../../../components/ui/iconify/Iconify\";\r\nimport { CustomerSupplierStatus } from \"../../../../../utils/Enums/commonEnums\";\r\n\r\nconst AddressDetailCard = forwardRef(\r\n  ({\r\n    keyId,\r\n    onHandleEditAddress,\r\n    showEditIcon,\r\n    getAddresssByCustomerId,\r\n    getByIdRef,\r\n    selectedAddressTypeId,\r\n    deleteAddress,\r\n    customerStatusId,\r\n    isModelOpen,\r\n    isSupplier,\r\n    getCompletionCount\r\n  }) => {\r\n    //** States */\r\n    const [addressData, setAddressData] = useState([]);\r\n    const { confirm } = SwalAlert();\r\n\r\n    //** API Call's */\r\n    /**\r\n     * This hook dynamically sets the API call based on the module (customer or supplier).\r\n     * The API endpoint and parameters are configured within the SupplierAddressDetails OR CustomerAddressDetails component.\r\n     * It fetches address details by the customer or supplier ID.\r\n     */\r\n    const [\r\n      getById,\r\n      {\r\n        isFetching: isGetAddresssByCustomerIdFetching,\r\n        isSuccess: isGetAddresssByCustomerId,\r\n        data: GetAddresssByCustomerIdData,\r\n      },\r\n    ] = getAddresssByCustomerId();\r\n\r\n    const [\r\n      deleteAllAddress,\r\n      { isSuccess: isDeleteAddressSuccess, data: isDeleteAddressData },\r\n    ] = deleteAddress();\r\n\r\n    useEffect(() => {\r\n      if (!isModelOpen && keyId) {\r\n        getById(keyId);\r\n      }\r\n    }, [keyId, selectedAddressTypeId]);\r\n\r\n    useEffect(() => {\r\n      if (\r\n        !isGetAddresssByCustomerIdFetching &&\r\n        isGetAddresssByCustomerId &&\r\n        GetAddresssByCustomerIdData\r\n      ) {\r\n        const filteredData = selectedAddressTypeId[0]\r\n          ? GetAddresssByCustomerIdData.filter(\r\n            (address) => address.addressTypeId === selectedAddressTypeId[0]\r\n          )\r\n          : GetAddresssByCustomerIdData;\r\n        setAddressData(filteredData);\r\n      }\r\n    }, [\r\n      isGetAddresssByCustomerIdFetching,\r\n      isGetAddresssByCustomerId,\r\n      GetAddresssByCustomerIdData,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n      if (isDeleteAddressSuccess && isDeleteAddressData) {\r\n        ToastService.success(isDeleteAddressData.errorMessage);\r\n        handleGetAddress();\r\n        getCompletionCount();\r\n      }\r\n    }, [isDeleteAddressSuccess, isDeleteAddressData]);\r\n\r\n    //** Handle Changes */\r\n    const handleGetAddress = () => {\r\n      keyId && getById(keyId);\r\n    };\r\n    const handleEdit = (data) => {\r\n      onHandleEditAddress(data);\r\n    };\r\n\r\n    const handleDelete = (data) => {\r\n      // onHandleEditDelete(data);\r\n      confirm(\r\n        \"Delete?\",\r\n        \"Are you sure you want to Delete?\",\r\n        \"Delete\",\r\n        \"Cancel\"\r\n      ).then((confirmed) => {\r\n        if (confirmed) {\r\n          deleteAllAddress(data.addressId);\r\n        }\r\n      });\r\n    };\r\n\r\n    //** Use Imperative Handle */\r\n    useImperativeHandle(getByIdRef, () => ({\r\n      callChildFunction: handleGetAddress,\r\n    }));\r\n\r\n    if (!isGetAddresssByCustomerIdFetching) {\r\n      if (!Array.isArray(addressData) || addressData.length === 0) {\r\n        return (\r\n          <div className=\"no-address\">\r\n            <NoRecordFound />\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    const getAddressTypeClass = (type) => {\r\n      switch (type) {\r\n        case \"Primary\":\r\n          return \"badge-primary contact-badge\";\r\n        // Shipping Start\r\n        case \"Bank Address\":\r\n          return \"badge-primary contact-badge\";\r\n        // Shipping End\r\n        case \"Billing\":\r\n          return \"badge-purchasing contact-badge\";\r\n\r\n        // Shipping Start\r\n        case \"Physical Address- HQ\":\r\n          return \"badge-purchasing contact-badge\";\r\n        // Shipping End\r\n\r\n        case \"Shipping\":\r\n          return \"badge-followup contact-badge\";\r\n        // Shipping Start\r\n        case \"Remittance Address\":\r\n          return \"badge-followup contact-badge\";\r\n        // Shipping End\r\n        case \"AP\":\r\n          return \"badge-ap contact-badge\";\r\n\r\n        default:\r\n          return \"badge-default\";\r\n      }\r\n    };\r\n    const getStatusDescription = (address) => {\r\n      return address.isPreferredBilling && address.addressTypeId === 1\r\n        ? \"Preferred Billing\"\r\n        : address.isPreferredShipping && address.addressTypeId === 2\r\n          ? \"Preferred Shipping\"\r\n          : \"\";\r\n    };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {!isGetAddresssByCustomerIdFetching ? (\r\n          <div className=\"address-card-section\">\r\n            <div className=\"add-desc-part\">\r\n              <div className=\"address-card-list\">\r\n                {addressData.map((address) => (\r\n                  <div\r\n                    className=\"address-main-card-section\"\r\n                    key={address.addressId}\r\n                  >\r\n                    <div className=\"address-card\">\r\n                      {((address.isPreferredBilling &&\r\n                        address.addressTypeId === 1) ||\r\n                        (address.isPreferredShipping &&\r\n                          address.addressTypeId === 2)) && (\r\n                          <div className=\"status-desc\">\r\n                            <span className=\"field-info active-green-color\">\r\n                              {getStatusDescription(address)}\r\n                            </span>\r\n                          </div>\r\n                        )}\r\n                      <div\r\n                        className={`add-line ${(address.isPreferredBilling &&\r\n                          address.addressTypeId === 1) ||\r\n                          (address.isPreferredShipping &&\r\n                            address.addressTypeId === 2)\r\n                          ? \"\"\r\n                          : \"\"\r\n                          }`}\r\n                      >\r\n                        <span className=\"label-txt\">\r\n                          {address.addressLine1}\r\n                        </span>\r\n                        <span className=\"label-txt\">\r\n                          {address.addressLine2}\r\n                        </span>\r\n                        <span className=\"label-txt\">\r\n                          {address.cityName}, {address.stateCode ? address.stateCode : address.stateName}{\" \"}\r\n                          {address.zipCode}\r\n                        </span>\r\n                        <span className=\"label-txt\">{address.countryName}</span>\r\n                      </div>\r\n                      {isSupplier ?\r\n                        <div className=\"edit-delete-button\">\r\n                          {showEditIcon ? (\r\n                            <button onClick={() => handleEdit(address)} className=\"edit-btn\" >\r\n                              <Iconify icon=\"tabler:pencil\" />\r\n                            </button>\r\n                          ) : null}\r\n                          <button onClick={() => handleDelete(address)} className=\"edit-btn ml-2\" >\r\n                            <Iconify icon=\"mingcute:delete-2-line\" className=\"delete-icon\" />\r\n                          </button>\r\n                        </div> :\r\n                        <>\r\n                          {!isSupplier && customerStatusId !== CustomerSupplierStatus.APPROVED &&\r\n                            <div className=\"edit-delete-button\">\r\n                              {showEditIcon ? (\r\n                                <button onClick={() => handleEdit(address)} className=\"edit-btn\" >\r\n                                  <Iconify icon=\"tabler:pencil\" />\r\n                                </button>\r\n                              ) : null}\r\n                              <button onClick={() => handleDelete(address)} className=\"edit-btn ml-2\" >\r\n                                <Iconify icon=\"mingcute:delete-2-line\" className=\"delete-icon\" />\r\n                              </button>\r\n                            </div>\r\n                          }\r\n                        </>\r\n                      }\r\n                      <div className={`contact-type-badge ${getAddressTypeClass(address.type)}`}>\r\n                        {address.type}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <DataLoader />\r\n        )\r\n        }\r\n      </React.Fragment >\r\n    );\r\n  }\r\n);\r\n\r\nAddressDetailCard.propTypes = {\r\n  keyId: PropTypes.number.isRequired,\r\n  onHandleEditAddress: PropTypes.func.isRequired,\r\n  showEditIcon: PropTypes.bool,\r\n  getAddresssByCustomerId: PropTypes.func.isRequired,\r\n  getByIdRef: PropTypes.object.isRequired,\r\n  selectedAddressTypeId: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.string),\r\n    PropTypes.arrayOf(PropTypes.number),\r\n  ]).isRequired,\r\n};\r\n\r\nexport default AddressDetailCard;\r\n"],"names":["forwardRef","_ref","keyId","onHandleEditAddress","showEditIcon","getAddresssByCustomerId","getByIdRef","selectedAddressTypeId","deleteAddress","customerStatusId","isModelOpen","isSupplier","getCompletionCount","addressData","setAddressData","useState","confirm","SwalAlert","getById","isFetching","isGetAddresssByCustomerIdFetching","isSuccess","isGetAddresssByCustomerId","data","GetAddresssByCustomerIdData","deleteAllAddress","isDeleteAddressSuccess","isDeleteAddressData","useEffect","filteredData","filter","address","addressTypeId","ToastService","success","errorMessage","handleGetAddress","handleEdit","handleDelete","then","confirmed","addressId","useImperativeHandle","callChildFunction","Array","isArray","length","_jsx","className","children","NoRecordFound","getAddressTypeClass","type","getStatusDescription","isPreferredBilling","isPreferredShipping","React","DataLoader","map","_jsxs","addressLine1","addressLine2","cityName","stateCode","stateName","zipCode","countryName","onClick","Iconify","icon","_Fragment","CustomerSupplierStatus","APPROVED"],"sourceRoot":""}