{"version":3,"file":"static/js/7883.459602dd.chunk.js","mappings":"kKAKA,MAAMA,EAAQC,EAAAA,MAAW,IAAM,0CACzBC,EAAcD,EAAAA,MAAW,IAAM,kCAC/BE,EAAiBF,EAAAA,MAAW,IAAM,0CAiKxC,EA/J8BG,IAavB,IAbwB,UAC3BC,EAAS,KACTC,EAAI,SACJC,EAAQ,aACRC,EAAY,UACZC,EAAS,MACTC,EAAK,YACLC,EAAW,cACXC,EAAa,aACbC,EAAY,WACZC,EAAU,YACVC,KACGC,GACNZ,EACG,MAAOa,EAAeC,IAAoBC,EAAAA,EAAAA,WAAS,IAC5CC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,OAE3C,KAAEG,IAASC,EAAAA,EAAAA,KAmDXC,EAAkBA,KAChBX,GACAA,EAAa,SAEjBQ,EAAgB,MAChBH,GAAiB,GACjBF,EAAWS,MAAQ,IAAI,EAmC3B,OAjBAC,EAAAA,EAAAA,YAAU,KAEFR,IADAE,EAIJ,GACD,CAACA,KAEJM,EAAAA,EAAAA,YAAU,KACFV,EAAWS,MACXJ,EAAgBL,EAAWS,QAE3BJ,EAAgB,MAChBL,EAAWW,gBAAiB,EAChC,GACD,CAACX,EAAWS,SAGXG,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,mBAAkBD,SAAA,CAC5BzB,GAA2B,KAAdA,IACV2B,EAAAA,EAAAA,KAAChC,EAAK,CAACK,UAAWA,EAAW4B,IAAK3B,EAAMQ,WAAYA,KAExDkB,EAAAA,EAAAA,KAAC9B,EAAW,CACRgC,QAASV,EACTW,SAAUf,EACVb,SA3FW6B,IACvB,GAAI7B,EACA,GAAsB,SAAlB6B,EAAEC,OAAOC,KACTjB,EAAgB,MAChBd,EAASE,EAAW2B,EAAEC,OAAOZ,YAC1B,GAAIW,EAAEC,OAAOE,MAAM,GAAI,CAC1B,MAAMC,EAAUJ,EAAEC,OAAOE,MAAM,GAC/BlB,EAAgBmB,GAEhB,MAAMC,EAAqBzB,EAAW0B,cAChC1B,EAAW0B,cAAcC,MAAM,KAAKC,KAAKC,GAAQA,EAAIC,SACrD,GAEN,IArBYC,EAACC,EAAUC,KAC/B,GAAgC,IAA5BA,EAAiBC,OACjB,OAAO,EAEX,MAAMC,EAAUH,EAASL,MAAM,KAAKS,MAAMC,cAC1C,OAAOJ,EAAiBK,SAAS,IAAIH,IAAU,EAgBlCJ,CAAgBP,EAAQlC,KAAMmC,GAQ/B,OAPAnB,EACI,2BACA,sCAAsCmB,KAE1CpB,EAAgB,MAChBL,EAAWS,MAAQ,UACnBD,IAIJ,MAAM+B,EAAS,IAAIC,WACnBD,EAAOE,OAAUC,IACb,MAAMC,EAAcD,EAAMrB,OAAOuB,OAC3BC,EAAgB,CAClBb,SAAUR,EAAQlC,KAClBwD,WAAYH,GAEhBpD,EAASE,EAAWoD,EAAc,EAGtCN,EAAOQ,cAAcvB,EAGzB,CACJ,EAsDYwB,cA1CUC,KACtB,GAAIpD,EAAc,CACd,MAAMqD,EAAO,CACTC,kBAAmBnD,EAAWS,OAElCZ,EAAa,WAAYqD,EAC7B,GAqCYE,OAlCKC,KACb7D,GACAA,EAAaC,EACjB,EAgCY6D,gBAAiBrD,EACjBsD,WACe,OAAX5D,QAAW,IAAXA,OAAW,EAAXA,EAAa6D,cACH,OAAVxD,QAAU,IAAVA,OAAU,EAAVA,EAAYuD,aAEC,OAAb3D,QAAa,IAAbA,OAAa,EAAbA,EAAe2D,WAEnBE,iBAAkBzD,EAAWW,eAC7Be,cAAe1B,EAAW0B,cAC1B3B,YAAaA,KACTC,QAGZgB,EAAAA,EAAAA,KAAC7B,EAAc,CAACO,MAAOA,GAAS,OACjC,C","sources":["components/Forms/formField/FormImageUploadFields.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport SwalAlert from \"../../../services/swalService/SwalService\";\r\n\r\nconst Label = React.lazy(() => import(\"../../ui/label/Label\"));\r\nconst ImageUpload = React.lazy(() => import(\"../../ui/inputs/imageUpload/ImageUpload\"));\r\nconst ValidationText = React.lazy(() => import(\"../../ui/inputs/validation/ValidationText.js\"));\r\n\r\nconst FormImageUploadFields = ({\r\n    labelName,\r\n    name,\r\n    onChange,\r\n    onValidation,\r\n    dataField,\r\n    error,\r\n    formSetting,\r\n    overRideProps,\r\n    fieldActions,\r\n    isRequired,\r\n    fileFormate,\r\n    ...inputProps\r\n}) => {\r\n    const [buttonVisible, setButtonVisible] = useState(false);\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n    const { info } = SwalAlert();\r\n\r\n    const isValidFileType = (fileName, acceptedFileType) => {\r\n        if (acceptedFileType.length === 0) {\r\n            return true;\r\n        }\r\n        const fileExt = fileName.split(\".\").pop().toLowerCase();\r\n        return acceptedFileType.includes(`.${fileExt}`);\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        if (onChange) {\r\n            if (e.target.type !== \"file\") {\r\n                setSelectedFile(null);\r\n                onChange(dataField, e.target.value);\r\n            } else if (e.target.files[0]) {\r\n                const fileObj = e.target.files[0];\r\n                setSelectedFile(fileObj);\r\n\r\n                const acceptedExtensions = inputProps.acceptedFiles\r\n                    ? inputProps.acceptedFiles.split(\",\").map((ext) => ext.trim())\r\n                    : [];\r\n\r\n                if (!isValidFileType(fileObj.name, acceptedExtensions)) {\r\n                    info(\r\n                        \"Image Type doesn't match\",\r\n                        `Please select image with extension ${acceptedExtensions}`\r\n                    );\r\n                    setSelectedFile(null);\r\n                    inputProps.value = null;\r\n                    handleClearFile();\r\n                    return;\r\n                }\r\n\r\n                const reader = new FileReader();\r\n                reader.onload = (event) => {\r\n                    const fileContent = event.target.result;\r\n                    const newFileObject = {\r\n                        fileName: fileObj.name,\r\n                        base64Data: fileContent,\r\n                    };\r\n                    onChange(dataField, newFileObject);\r\n                };\r\n\r\n                reader.readAsDataURL(fileObj);\r\n\r\n                // onChange(dataField, fileObj);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleClearFile = () => {\r\n        if (fieldActions) {\r\n            fieldActions(\"CLEAR\");\r\n        }\r\n        setSelectedFile(null);\r\n        setButtonVisible(false);\r\n        inputProps.value = null;\r\n    };\r\n\r\n    const handleActionClick = () => {\r\n        if (fieldActions) {\r\n            const data = {\r\n                contractInputFile: inputProps.value,\r\n            };\r\n            fieldActions(\"DOWNLOAD\", data);\r\n        }\r\n    };\r\n\r\n    const handleOnBlur = () => {\r\n        if (onValidation) {\r\n            onValidation(dataField);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (selectedFile) {\r\n            setButtonVisible(true);\r\n        } else {\r\n            setButtonVisible(false);\r\n        }\r\n    }, [selectedFile]);\r\n\r\n    useEffect(() => {\r\n        if (inputProps.value) {\r\n            setSelectedFile(inputProps.value);\r\n        } else {\r\n            setSelectedFile(null);\r\n            inputProps.isDownloadable = false;\r\n        }\r\n    }, [inputProps.value]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"input-label-part\">\r\n                {labelName && labelName !== \"\" && (\r\n                    <Label labelName={labelName} for={name} isRequired={isRequired} />\r\n                )}\r\n                <ImageUpload\r\n                    onClear={handleClearFile}\r\n                    filename={selectedFile}\r\n                    onChange={handleInputChange}\r\n                    onActionClick={handleActionClick}\r\n                    onBlur={handleOnBlur}\r\n                    isButtonVisible={buttonVisible}\r\n                    isDisable={\r\n                        formSetting?.isViewOnly ||\r\n                        inputProps?.isDisable ||\r\n                        false ||\r\n                        overRideProps?.isDisable\r\n                    }\r\n                    isDownloadButton={inputProps.isDownloadable}\r\n                    acceptedFiles={inputProps.acceptedFiles}\r\n                    fileFormate={fileFormate}\r\n                    {...inputProps}\r\n                />\r\n            </div>\r\n            <ValidationText error={error || \"\"} />\r\n        </>\r\n    );\r\n};\r\n\r\nFormImageUploadFields.propTypes = {\r\n    labelName: PropTypes.string,\r\n    name: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    onValidation: PropTypes.func,\r\n    dataField: PropTypes.string.isRequired,\r\n    error: PropTypes.string,\r\n    formSetting: PropTypes.shape({\r\n        isViewOnly: PropTypes.bool,\r\n    }),\r\n    overRideProps: PropTypes.shape({\r\n        isDisable: PropTypes.bool,\r\n    }),\r\n    fieldActions: PropTypes.func,\r\n    isRequired: PropTypes.bool,\r\n    fileFormate: PropTypes.string,\r\n    acceptedFiles: PropTypes.string,\r\n    isDownloadable: PropTypes.bool,\r\n    isDisable: PropTypes.bool,\r\n};\r\nexport default FormImageUploadFields;\r\n"],"names":["Label","React","ImageUpload","ValidationText","_ref","labelName","name","onChange","onValidation","dataField","error","formSetting","overRideProps","fieldActions","isRequired","fileFormate","inputProps","buttonVisible","setButtonVisible","useState","selectedFile","setSelectedFile","info","SwalAlert","handleClearFile","value","useEffect","isDownloadable","_jsxs","_Fragment","children","className","_jsx","for","onClear","filename","e","target","type","files","fileObj","acceptedExtensions","acceptedFiles","split","map","ext","trim","isValidFileType","fileName","acceptedFileType","length","fileExt","pop","toLowerCase","includes","reader","FileReader","onload","event","fileContent","result","newFileObject","base64Data","readAsDataURL","onActionClick","handleActionClick","data","contractInputFile","onBlur","handleOnBlur","isButtonVisible","isDisable","isViewOnly","isDownloadButton"],"sourceRoot":""}