{"version":3,"file":"static/js/4109.3b89f45d.chunk.js","mappings":"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","sources":["pages/Security/permissions/Util/generateTreeData.js","pages/Security/permissions/features/ManagePermission.js"],"sourcesContent":["import { AppIcons } from \"../../../../data/appIcons\";\r\n\r\nexport const GetPermissionTreeData = (permissionData) => {\r\n    let treeMainNode = GetChildNode(permissionData, 0);\r\n\r\n    return treeMainNode;\r\n}\r\n\r\nconst GetChildNode = (permissionData, parenetId) => {\r\n    let treeData = [];\r\n    let treeMainNode = permissionData.filter(f => f.securityKeyParentId === parenetId)\r\n\r\n    if (treeMainNode) {\r\n\r\n        treeMainNode.forEach(function (permissionKey) {\r\n            // Perform an action on each element, such as logging it.\r\n            let childNode = GetChildNode(permissionData, permissionKey.securityKeyId)\r\n            let treeNode = {\r\n                id: permissionKey.securityKeyId,\r\n                name: permissionKey.securityKeyName,\r\n                icon: AppIcons.folderIcon,\r\n                itemData: { ...permissionKey },\r\n                isActive: false,\r\n                children: childNode\r\n            };\r\n\r\n            treeData.push(treeNode);\r\n        });\r\n    }\r\n\r\n    return treeData;\r\n\r\n}\r\n\r\n\r\nexport const GetPermissionData = (permissionData) => {\r\n\r\n    let permissionSettingData = [];\r\n    permissionSettingData = GetChildPermissionData(permissionData)\r\n    return permissionSettingData;\r\n}\r\n\r\nconst GetChildPermissionData = (permissionList) => {\r\n    let permissionData = [];\r\n\r\n    if (permissionList) {\r\n        permissionList.forEach(function (permissionItem) {\r\n            let permissionchildData = [];\r\n            if (permissionItem?.children.length > 0) {\r\n                permissionchildData = GetChildPermissionData(permissionItem?.children);\r\n                permissionData = permissionData.concat(permissionchildData);\r\n            }\r\n\r\n            let item = {\r\n                roleId: permissionItem.itemData.roleId,\r\n                securityKeyId: permissionItem.itemData.securityKeyId,\r\n                securitySettingId: permissionItem.itemData.securitySettingId,\r\n                securityPermissionId: permissionItem.itemData.securityPermissionId,\r\n            };\r\n            permissionData.push(item);\r\n\r\n        });\r\n    }\r\n\r\n    return permissionData;\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useDispatch } from \"react-redux\";\r\nimport React, {\r\n  forwardRef,\r\n  useContext,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useState,\r\n} from \"react\";\r\nimport PropTypes from 'prop-types';\r\n//** Lib's */\r\nimport { logout } from \"../../../../app/slice/authSlice\";\r\nimport { securityKey } from \"../../../../data/SecurityKey\";\r\nimport SwalAlert from \"../../../../services/swalService/SwalService\";\r\nimport CardSection from \"../../../../components/ui/card/CardSection\";\r\nimport {\r\n  GetPermissionData,\r\n  GetPermissionTreeData,\r\n} from \"../Util/generateTreeData\";\r\nimport { hasFunctionalPermission } from \"../../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\nimport { SecurityPermissionsContext } from \"../../../../utils/ContextAPIs/SecurityPermissions/SecurityPermissionsContext\";\r\n//** Service's */\r\nimport {\r\n  useAddSecurityPermissionsMutation,\r\n  useLazyGetAllPagesByRoleIdQuery,\r\n} from \"../../../../app/services/securityPermissionsAPI\";\r\n//** Component's */\r\nconst PermissionList = React.lazy(() => import(\"./PermissionList\"));\r\n\r\nconst ManagePermission = forwardRef((props, ref) => {\r\n  //** State */\r\n  const dispatch = useDispatch();\r\n  const { confirm } = SwalAlert();\r\n  const [permissionItem, setPermissionItem] = useState([]);\r\n  const [buttonVisible, setButtonVisible] = useState(true);\r\n  const [permissionsData, setPermissionsData] = useState([]);\r\n  const { togglePermissionCard, selectedRoleId, childRef } = useContext(\r\n    SecurityPermissionsContext\r\n  );\r\n\r\n  //** API Call's */\r\n  const [\r\n    addSecurityPermissions,\r\n    { isSuccess: isPermissionsAdded, data: isAddPermissionsData },\r\n  ] = useAddSecurityPermissionsMutation();\r\n  const [\r\n    getAllPagesByRoleId,\r\n    {\r\n      isFetching: isGetByIdLoading,\r\n      isSuccess: isPermissionSuccess,\r\n      data: permissionData,\r\n    },\r\n  ] = useLazyGetAllPagesByRoleIdQuery();\r\n\r\n  //** Check Permission */\r\n  const hasAddPermission = hasFunctionalPermission(securityKey.SAVEPERMISSIONS);\r\n\r\n  //** Handle Change's */\r\n  const onUpdatePermission = (data) => {\r\n    setPermissionsData(data);\r\n    onPermissionItemSet(data);\r\n  };\r\n  const onPermissionItemSet = (permissionTreeItem) => {\r\n    setPermissionItem(permissionTreeItem);\r\n  };\r\n  const handleSavePermission = () => {\r\n    if (permissionItem && permissionItem.length > 0) {\r\n      let permissionSettingList = GetPermissionData(permissionItem);\r\n      const transformedData = permissionSettingList.map((item) => ({\r\n        securitySettingId: item.securitySettingId,\r\n        securityKeyId: item.securityKeyId,\r\n        roleId: item.roleId,\r\n      }));\r\n\r\n      const requestData = {\r\n        securityPermissionsList: transformedData,\r\n      };\r\n      addSecurityPermissions(requestData);\r\n    }\r\n    // setTogglePermissionCard(true);\r\n  };\r\n  const getPermissionList = (selectedRoleId) => {\r\n    getAllPagesByRoleId(selectedRoleId);\r\n  };\r\n\r\n  //** Use Imperative Handle  */\r\n  useImperativeHandle(childRef, () => ({\r\n    callChildFunction: getPermissionList,\r\n  }));\r\n\r\n  //** Use Effect's */\r\n  useEffect(() => {\r\n    if (selectedRoleId) {\r\n      getAllPagesByRoleId(selectedRoleId);\r\n    }\r\n  }, [selectedRoleId]);\r\n\r\n  useEffect(() => {\r\n    if (isPermissionSuccess && permissionData) {\r\n      const data = GetPermissionTreeData(permissionData);\r\n      onPermissionItemSet(data);\r\n      setPermissionsData(data);\r\n    }\r\n  }, [isPermissionSuccess, permissionData]);\r\n\r\n  useEffect(() => {\r\n    if (hasAddPermission.hasAccess === true) {\r\n      setButtonVisible(true);\r\n    } else {\r\n      setButtonVisible(false);\r\n    }\r\n  }, [hasAddPermission]);\r\n\r\n  useEffect(() => {\r\n    if (isPermissionsAdded && isAddPermissionsData) {\r\n      confirm(\r\n        \"Security Permissions Updated!\",\r\n        \"You will be logged out! Please Log In again\",\r\n        \"Log Out\",\r\n        \"\",\r\n        false\r\n      ).then((confirmed) => {\r\n        if (confirmed) {\r\n          dispatch(logout());\r\n        }\r\n      });\r\n    }\r\n  }, [isPermissionsAdded, isAddPermissionsData]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {togglePermissionCard && selectedRoleId && (\r\n        <div className=\"permission-list\">\r\n          <CardSection\r\n            cardTitle=\"Security Permissions\"\r\n            rightButton={buttonVisible ? true : false}\r\n            buttonText=\"Save Permissions\"\r\n            buttonClassName=\"btn theme-button\"\r\n            titleButtonClick={handleSavePermission}\r\n          >\r\n            <PermissionList\r\n              onPermissionSet={onPermissionItemSet}\r\n              onUpdatePermission={onUpdatePermission}\r\n              isLoading={isGetByIdLoading}\r\n              permissionsData={permissionsData}\r\n            />\r\n          </CardSection>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n});\r\n\r\nManagePermission.propTypes = {\r\n  props: PropTypes.object,\r\n  ref: PropTypes.shape({\r\n    current: PropTypes.instanceOf(Element)\r\n  })\r\n};\r\nexport default ManagePermission;\r\n"],"names":["GetChildNode","permissionData","parenetId","treeData","treeMainNode","filter","f","securityKeyParentId","forEach","permissionKey","childNode","securityKeyId","treeNode","id","name","securityKeyName","icon","AppIcons","folderIcon","itemData","isActive","children","push","GetChildPermissionData","permissionList","permissionItem","permissionchildData","length","concat","item","roleId","securitySettingId","securityPermissionId","PermissionList","React","forwardRef","props","ref","dispatch","useDispatch","confirm","SwalAlert","setPermissionItem","useState","buttonVisible","setButtonVisible","permissionsData","setPermissionsData","togglePermissionCard","selectedRoleId","childRef","useContext","SecurityPermissionsContext","addSecurityPermissions","isSuccess","isPermissionsAdded","data","isAddPermissionsData","useAddSecurityPermissionsMutation","getAllPagesByRoleId","isFetching","isGetByIdLoading","isPermissionSuccess","useLazyGetAllPagesByRoleIdQuery","hasAddPermission","hasFunctionalPermission","securityKey","SAVEPERMISSIONS","onPermissionItemSet","permissionTreeItem","getPermissionList","useImperativeHandle","callChildFunction","useEffect","GetPermissionTreeData","hasAccess","then","confirmed","logout","_jsx","className","CardSection","cardTitle","rightButton","buttonText","buttonClassName","titleButtonClick","handleSavePermission","permissionSettingList","permissionSettingData","GetPermissionData","transformedData","map","securityPermissionsList","onPermissionSet","onUpdatePermission","isLoading"],"sourceRoot":""}