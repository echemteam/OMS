{"version":3,"file":"static/js/7164.4e2d57ef.chunk.js","mappings":"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","sources":["common/features/component/Contact/feature/ContactEmailsDropdown.js","common/features/component/Contact/feature/ContactPhoneNumberDropdown.js","common/features/component/Contact/config/CloneContactForm.data.js","common/features/component/Contact/feature/ContactCloneModel.js","common/features/component/Contact/feature/ContactDetailCard.js","components/ui/centerModel/CenterModel.js","utils/CopyText/CopyText.js"],"sourcesContent":["import React from \"react\";\r\nimport CopyText from \"../../../../../utils/CopyText/CopyText\";\r\nimport PropTypes from \"prop-types\";\r\nimport Iconify from \"../../../../../components/ui/iconify/Iconify\";\r\n\r\nconst ContactEmailsDropdown = ({ emailAddressesList, isOptionsOpen }) => {\r\n  let emailAddresses = emailAddressesList?.filter(\r\n    (data) => data.isPrimary === false\r\n  );\r\n  let primaryEmailAddress = emailAddressesList?.find(\r\n    (data) => data.isPrimary === true\r\n  );\r\n\r\n  if (\r\n    !primaryEmailAddress &&\r\n    emailAddressesList &&\r\n    emailAddressesList.length > 0\r\n  ) {\r\n    primaryEmailAddress = emailAddressesList[0];\r\n    emailAddresses = emailAddresses.slice(1);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"dropdown-desc-sec\">\r\n        <div className=\"icon-part\" title=\"Home\">\r\n          <i className=\"fa fa-envelope\"></i>\r\n        </div>\r\n        <div className=\"desc-part\">\r\n          {primaryEmailAddress?.emailAddress ? (\r\n            <>\r\n              <div className={`values`}>\r\n                {primaryEmailAddress?.emailAddress}\r\n              </div>\r\n              <span className={`copy-icon ${isOptionsOpen && primaryEmailAddress?.isPrimary ? \"primary-email\" : \"\"}`}>\r\n                <div className=\"copy\" style={{ cursor: \"pointer\" }} onClick={() => CopyText(primaryEmailAddress?.emailAddress, \"email\")}>\r\n                  <Iconify icon=\"bitcoin-icons:copy-outline\" />\r\n                </div>\r\n              </span>\r\n            </>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      {\r\n        isOptionsOpen ? (\r\n          <>\r\n            {emailAddresses.map((emaildata, index) => (\r\n              <span className=\"contact-list d-flex flex-row\" key={index}>\r\n                <span>{emaildata?.emailAddress}</span>\r\n                <span\r\n                  className=\"copy-icon\"\r\n                  title=\"Copy\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() => CopyText(emaildata?.emailAddress, \"email\")}\r\n                >\r\n                  {/* <i className=\"fa fa-files-o\"></i> */}\r\n                  {/* <Image imagePath={AppIcons.copyIcon} altText=\"Icon\" /> */}\r\n                  <Iconify icon=\"bitcoin-icons:copy-outline\" />\r\n                </span>\r\n              </span>\r\n            ))}\r\n          </>\r\n        ) : null\r\n      }\r\n    </React.Fragment >\r\n  );\r\n};\r\n\r\nContactEmailsDropdown.propTypes = {\r\n  emailAddressesList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      emailAddress: PropTypes.string,\r\n      isPrimary: PropTypes.bool,\r\n    })\r\n  ).isRequired,\r\n  isOptionsOpen: PropTypes.bool,\r\n};\r\n\r\nexport default ContactEmailsDropdown;\r\n","import React from \"react\";\r\nimport CopyText from \"../../../../../utils/CopyText/CopyText\";\r\nimport PropTypes from \"prop-types\";\r\nimport Iconify from \"../../../../../components/ui/iconify/Iconify\";\r\n\r\nconst ContactPhoneNumberDropdown = ({ phoneNumberList, isOptionsOpen }) => {\r\n  let phoneNumbers = phoneNumberList.filter((data) => data.isPrimary === false);\r\n  let primaryPhoneNumber = phoneNumberList.find(\r\n    (data) => data.isPrimary === true\r\n  );\r\n\r\n  if (!primaryPhoneNumber && phoneNumberList && phoneNumberList.length > 0) {\r\n    primaryPhoneNumber = phoneNumberList[0];\r\n    phoneNumbers = phoneNumbers.slice(1);\r\n  }\r\n\r\n  const phoneTypesIcon = (type) => {\r\n    switch (type) {\r\n      case 1:\r\n        return (\r\n          <span className=\"contact-type-icon\" title=\"Home\">\r\n            <i className=\"fa fa-home\"></i>\r\n          </span>\r\n        );\r\n      case 2:\r\n        return (\r\n          <span className=\"contact-type-icon\" title=\"Work\">\r\n            <i className=\"fa fa-briefcase\"></i>\r\n          </span>\r\n        );\r\n      case 3:\r\n        return (\r\n          <span className=\"contact-type-icon\" title=\"Mobile\">\r\n            <i className=\"fa fa-mobile\"></i>\r\n          </span>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"contact-sec\">\r\n        <div className=\"number-list\">\r\n          {primaryPhoneNumber ? (\r\n            <>\r\n              <div className=\"number-type\">\r\n                {phoneTypesIcon(primaryPhoneNumber?.phoneTypeId)}\r\n              </div>\r\n              <div\r\n                className={`card-value ml-0 ${primaryPhoneNumber?.isPrimary ? \"\" : \"\"\r\n                  }`}\r\n              >\r\n                {`(${primaryPhoneNumber?.phoneCode}) ${primaryPhoneNumber?.phoneNumber}`}\r\n              </div>\r\n\r\n              <div\r\n                className={`card-value ${isOptionsOpen && primaryPhoneNumber?.isPrimary ? \"primary-phone\" : \"\"\r\n                  }`}\r\n              >\r\n                {`${primaryPhoneNumber?.extension > 0\r\n                    ? \",\" + primaryPhoneNumber?.extension\r\n                    : \"\"\r\n                  }`}\r\n              </div>\r\n              {primaryPhoneNumber?.isPrimary ? (\r\n                <div className=\"primary-icon\" title=\"Is Primary\"></div>\r\n              ) : null}\r\n              <span\r\n                className=\"copy-icon\"\r\n                title=\"Copy\"\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() =>\r\n                  CopyText(\r\n                    `(${primaryPhoneNumber.phoneCode}) ${primaryPhoneNumber.phoneNumber\r\n                    } \r\n                ${primaryPhoneNumber.extension > 0\r\n                      ? primaryPhoneNumber.extension\r\n                      : \"\"\r\n                    }`,\r\n                    \"phone\"\r\n                  )\r\n                }\r\n              >\r\n                {/* <Image imagePath={AppIcons.copyIcon} altText=\"Icon\" /> */}\r\n                <Iconify icon=\"bitcoin-icons:copy-outline\" />\r\n                {/* <i className=\"fa fa-files-o\"></i> */}\r\n              </span>\r\n            </>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      {isOptionsOpen ? (\r\n        <>\r\n          {phoneNumbers.map((phoneData, index) => (\r\n            <span className=\"contact-list d-flex flex-row\" key={index}>\r\n              <span className=\"number-list\">\r\n                {phoneTypesIcon(phoneData?.phoneTypeId)}\r\n                <span className=\"\">\r\n                  {`(${phoneData.phoneCode}) ${phoneData.phoneNumber}${phoneData.extension ? `, ${phoneData.extension}` : \"\"\r\n                    }`}\r\n                </span>\r\n              </span>\r\n              <span\r\n                className=\"copy-icon\"\r\n                title=\"Copy\"\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() =>\r\n                  CopyText(\r\n                    `(${phoneData.phoneCode}) ${phoneData.phoneNumber} ${phoneData.extension > 0 ? phoneData.extension : \"\"\r\n                    }`,\r\n                    \"phone\"\r\n                  )\r\n                }\r\n              >\r\n                {/* <i className=\"fa fa-files-o\"></i> */}\r\n                {/* <Image imagePath={AppIcons.copyIcon} altText=\"Icon\" /> */}\r\n                <Iconify icon=\"bitcoin-icons:copy-outline\" />\r\n              </span>\r\n            </span>\r\n          ))}\r\n        </>\r\n      ) : null}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nContactPhoneNumberDropdown.propTypes = {\r\n  phoneNumberList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      phoneCode: PropTypes.string,\r\n      phoneNumber: PropTypes.string,\r\n      extension: PropTypes.number,\r\n      phoneTypeId: PropTypes.number,\r\n      isPrimary: PropTypes.bool,\r\n    })\r\n  ).isRequired,\r\n  isOptionsOpen: PropTypes.bool,\r\n};\r\n\r\nexport default ContactPhoneNumberDropdown;\r\n","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const cloneContactFormData = {\r\n    name: \"Contact\",\r\n    initialState: {\r\n        contactTypeId: \"\"\r\n    },\r\n    formFields: [\r\n        {\r\n            id: \"contactTypeId\",\r\n            lable: \"Contact Type \",\r\n            Field_Name: \"Contact Type\",\r\n            fieldType: FormFieldTypes.SELECT,\r\n            dataField: \"contactTypeId\",\r\n            fieldSetting: {\r\n                placeholder: \"Select Contact Type\",\r\n                isMultiSelect: true,\r\n                isDisabled: false,\r\n                isEnableOnChange: true\r\n            },\r\n            validation: [{ type: \"require\" }],\r\n            style: {\r\n                containerCss: \"col-xxl-8 col-xl-8 col-md-12 col-12 col-12 mb-input\",\r\n            },\r\n        },\r\n    ],\r\n    formSetting: {\r\n        isViewOnly: false\r\n    }\r\n};","import { useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\n//** Lib's */\r\nimport Buttons from \"../../../../../components/ui/button/Buttons\";\r\nimport FormCreator from \"../../../../../components/Forms/FormCreator\";\r\nimport { cloneContactFormData } from \"../config/CloneContactForm.data\";\r\nimport CenterModel from \"../../../../../components/ui/centerModel/CenterModel\";\r\nimport { getDropDownId } from \"../../../../../utils/TransformData/TransformAPIData\";\r\nimport { setDropDownOptionField } from \"../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\n//** Service's */\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\nimport { useAddEditContactMutation, useLazyGetAllContactTypesQuery } from \"../../../../../app/services/contactAPI\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactCloneModel = ({ cloneRef, isSupplier, onGetContactList, getCompletionCount }) => {\r\n\r\n    const ref = useRef();\r\n    const [cloneData, setCloneData] = useState();\r\n    const [isCloneModel, setIsCloneModel] = useState(false);\r\n\r\n    //** API Call's  */\r\n    const [getAllContactTypes, { isSuccess: isGetAllContactTypesSucess, data: allGetAllContactTypesData }] = useLazyGetAllContactTypesQuery();\r\n    const [addEdit, { isLoading: isAddEditLoading, isSuccess: isAddEditSuccess, data: isAddEditData }] = useAddEditContactMutation();\r\n\r\n\r\n    const handlSave = () => {\r\n        const data = ref.current.getFormData();\r\n        if (!data) return;\r\n        if (cloneData) {\r\n            const contactType = getDropDownId(data.contactTypeId);\r\n            let modifyData = {\r\n                ...cloneData,\r\n                contactTypeId: contactType,\r\n                [isSupplier ? 'supplierContactId' : 'customerContactId']: 0,\r\n                contactId: 0,\r\n                emailAddressList: cloneData.emailAddressList.map(data => ({\r\n                    emailAddress: data.emailAddress,\r\n                    isPrimary: data.isPrimary\r\n                })),\r\n                phoneNumberList: cloneData.phoneNumberList.map((data) => ({\r\n                    extension: data.extension,\r\n                    isPrimary: data.isPrimary,\r\n                    phoneCode: data.phoneCode,\r\n                    phoneNumber: data.phoneNumber,\r\n                    phoneType: data.phoneType,\r\n                    phoneTypeId: data.phoneTypeId\r\n                }))\r\n            }\r\n            addEdit(modifyData);\r\n        }\r\n    };\r\n\r\n    //** UseEffect */\r\n    useEffect(() => {\r\n        getAllContactTypes();\r\n    }, [getAllContactTypes]);\r\n\r\n    useEffect(() => {\r\n        if (isGetAllContactTypesSucess && allGetAllContactTypesData) {\r\n            const filterCondition = (item) => {\r\n                let condition = isSupplier ? item.isForSuppliers : item.isForCustomers;\r\n                return condition;\r\n            };\r\n            setDropDownOptionField(allGetAllContactTypesData, \"contactTypeId\", \"type\", cloneContactFormData, \"contactTypeId\", filterCondition);\r\n        }\r\n    }, [isGetAllContactTypesSucess, allGetAllContactTypesData]);\r\n\r\n    useEffect(() => {\r\n        if (isAddEditSuccess && isAddEditData) {\r\n            if (isAddEditData.errorMessage.includes('EXISTS')) {\r\n                ToastService.warning(isAddEditData.errorMessage);\r\n                return;\r\n            }\r\n            if (onGetContactList) {\r\n                onGetContactList();\r\n                setIsCloneModel(!isCloneModel);\r\n                ToastService.success(isAddEditData.errorMessage);\r\n            }\r\n            getCompletionCount && getCompletionCount();\r\n        }\r\n    }, [isAddEditSuccess, isAddEditData]);\r\n\r\n    const handleToggleModal = () => {\r\n        setIsCloneModel(!isCloneModel);\r\n    };\r\n\r\n    const handleContactData = (data) => {\r\n        setCloneData(data);\r\n        setIsCloneModel(!isCloneModel);\r\n    }\r\n\r\n    //** Use Imperative Handle */\r\n    useImperativeHandle(cloneRef, () => ({\r\n        callChildFunction: handleContactData\r\n    }));\r\n\r\n    return (\r\n        <CenterModel showModal={isCloneModel} handleToggleModal={handleToggleModal} modalTitle=\"Clone Contact\" modelSizeClass=\"w-40\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12 add-edit-emailAddressForm\">\r\n                    <div className=\"row vertical-form add-edit-contactForm\">\r\n                        <FormCreator config={cloneContactFormData} ref={ref} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-12 mt-2\">\r\n                    <div className=\"d-flex align-item-center justify-content-end\">\r\n                        <Buttons\r\n                            buttonTypeClassName=\"theme-button\"\r\n                            buttonText=\"Save\"\r\n                            isLoading={isAddEditLoading}\r\n                            onClick={handlSave} />\r\n                        <Buttons\r\n                            buttonTypeClassName=\"dark-btn ml-5\"\r\n                            buttonText=\"Cancel\"\r\n                            onClick={handleToggleModal} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </CenterModel >\r\n    );\r\n}\r\n\r\nContactCloneModel.propTypes = {\r\n    cloneRef: PropTypes.shape({\r\n        current: PropTypes.shape({\r\n            callChildFunction: PropTypes.func,\r\n        }),\r\n    }).isRequired,\r\n    isSupplier: PropTypes.bool.isRequired,\r\n    onGetContactList: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ContactCloneModel;","import React, { useEffect, useRef, useState, forwardRef } from \"react\";\r\nimport ContactEmailsDropdown from \"./ContactEmailsDropdown\";\r\nimport ContactPhoneNumberDropdown from \"./ContactPhoneNumberDropdown\";\r\nimport PropTypes from \"prop-types\";\r\nimport Iconify from \"../../../../../components/ui/iconify/Iconify\";\r\nimport ContactCloneModel from \"./ContactCloneModel\";\r\nimport { hasFunctionalPermission } from \"../../../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\n\r\nconst ContactDetailCard = forwardRef(({ contactItem, handleEdit, showEditIcon, openModalId, setOpenModalId, isSupplier, onGetContactList,\r\n  getCompletionCount, isEditablePage, SecurityKey }, ref) => {\r\n\r\n  const cloneRef = useRef();\r\n  const emailDropdownRef = useRef(null);\r\n  const phoneDropdownRef = useRef(null);\r\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\r\n  const [isButtonDisable, setIsButtonDisable] = useState(false);\r\n  const [showPhoneDropdown, setShowPhoneDropdown] = useState(false);\r\n  const [showEmailDropdown, setShowEmailDropdown] = useState(false);\r\n\r\n  //** API Call's */\r\n  const handleClickOutside = (event) => {\r\n    if (emailDropdownRef.current && !emailDropdownRef.current.contains(event.target)) {\r\n      setShowEmailDropdown(false);\r\n    }\r\n    if (phoneDropdownRef.current && !phoneDropdownRef.current.contains(event.target)) {\r\n      setShowPhoneDropdown(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isEditablePage && SecurityKey) {\r\n      const hasEditPermission = hasFunctionalPermission(SecurityKey.EDIT);\r\n      if (hasEditPermission) {\r\n        if (hasEditPermission.isViewOnly === true) {\r\n          setIsButtonDisable(true);\r\n        }\r\n        else {\r\n          setIsButtonDisable(false);\r\n        }\r\n      }\r\n    }\r\n  }, [isEditablePage, SecurityKey]);\r\n\r\n  const getContactTypeClass = (type) => {\r\n    switch (type) {\r\n      case \"Primary\":\r\n        return \"badge-primary contact-badge\";\r\n\r\n      case \"EndUser\":\r\n        return \"badge-endUser contact-badge\";\r\n\r\n      // Supplier Start\r\n      case \"Accounts Receivable\":\r\n        return \"badge-endUser contact-badge\";\r\n      // Supplier End\r\n\r\n      case \"Purchasing\":\r\n        return \"badge-purchasing contact-badge\";\r\n\r\n      // Supplier Start\r\n      case \"Purchase Order\":\r\n        return \"badge-purchasing contact-badge\";\r\n      // Supplier End\r\n\r\n      case \"Invoice Submission\":\r\n        return \"badge-submission contact-badge\";\r\n\r\n      // Supplier Start\r\n      case \"QC department\":\r\n        return \"badge-submission contact-badge\";\r\n      // Supplier End\r\n\r\n      case \"Invoice Follow-up\":\r\n        return \"badge-followup contact-badge\";\r\n\r\n      // Supplier Start\r\n      case \"Sales Department\":\r\n        return \"badge-followup contact-badge\";\r\n      // Supplier End\r\n\r\n      case \"AP\":\r\n        return \"badge-ap contact-badge\";\r\n\r\n      default:\r\n        return \"badge-default\";\r\n    }\r\n  };\r\n\r\n  const handleOptionsClick = () => {\r\n    setOpenModalId(\r\n      contactItem.contactId === openModalId ? null : contactItem.contactId\r\n    );\r\n    setIsOptionsOpen(!isOptionsOpen);\r\n  };\r\n\r\n  const handleBodyClick = (e) => {\r\n    if (!e.target.closest(\".right-action-icon\")) {\r\n      setIsOptionsOpen(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isOptionsOpen) {\r\n      document.body.addEventListener(\"click\", handleBodyClick);\r\n    } else {\r\n      document.body.removeEventListener(\"click\", handleBodyClick);\r\n    }\r\n    return () => {\r\n      document.body.removeEventListener(\"click\", handleBodyClick);\r\n    };\r\n  }, [isOptionsOpen]);\r\n\r\n  const handleClone = (contactItem) => {\r\n    if (cloneRef.current) {\r\n      cloneRef.current.callChildFunction(contactItem);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"contact-main-card-section d-none\">\r\n        <div className={`contact-card ${showEmailDropdown || showPhoneDropdown ? \"dropdown-open\" : \"\"}`}>\r\n          <div className=\"contact-card-desc\">\r\n            <div className=\"contact-info\">\r\n              <span className=\"user-icon\">\r\n                <i className=\"fa fa-user\"></i>\r\n              </span>\r\n              <div className=\"contact-name\">\r\n                <span className=\"contact-title\">\r\n                  <b>{contactItem.firstName + \" \" + contactItem.lastName}</b>\r\n                </span>\r\n                {contactItem.isPrimary && (\r\n                  <span className=\"primary-card\"> Primary </span>\r\n                )}\r\n              </div>\r\n              <div className=\"right-action-icon\">\r\n                <div className=\"edit-view-icon\">\r\n                  <div className=\"edit-delete-button\">\r\n                    {showEditIcon ? (\r\n                      <button\r\n                        onClick={() => handleEdit(contactItem?.contactId)}\r\n                        className=\"edit-btn\"\r\n                      >\r\n                        <Iconify icon=\"tabler:pencil\" />\r\n                      </button>\r\n                    ) : null}\r\n                  </div>\r\n                  <span\r\n                    className=\"option-icon\"\r\n                    role=\"button\"\r\n                    tabIndex=\"0\"\r\n                    onClick={handleOptionsClick}\r\n                  >\r\n                    <Iconify icon=\"mdi:ellipsis-vertical\" />\r\n                  </span>\r\n                </div>\r\n                <div\r\n                  ref={ref}\r\n                  className={`customer-detail-model ${openModalId === contactItem.contactId ? \"open-model\" : \"\"\r\n                    }`}\r\n                >\r\n                  <div className=\"customer-card-top-sec\">\r\n                    <div className=\"profile-icon\">\r\n                      <span className=\"profile-text\">\r\n                        {contactItem.firstName && contactItem.lastName\r\n                          ? contactItem.firstName.charAt(0).toUpperCase() +\r\n                          contactItem.lastName.charAt(0).toUpperCase()\r\n                          : \"\"}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"profile-name\">\r\n                      {contactItem.firstName + \" \" + contactItem.lastName}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"bottom-contact-desc\">\r\n                    {contactItem.emailAddressList?.length > 0 ? (\r\n                      <div className=\"contact-part\">\r\n                        <div className=\"contact-type-list\">\r\n                          <i className=\"fa fa-envelope-o\"></i>\r\n                          <ul>\r\n                            <li>\r\n                              {contactItem.emailAddressList?.length > 0 ? (\r\n                                <ContactEmailsDropdown\r\n                                  isOptionsOpen={isOptionsOpen}\r\n                                  emailAddressesList={\r\n                                    contactItem.emailAddressList\r\n                                  }\r\n                                />\r\n                              ) : null}\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    ) : null}\r\n                    {contactItem.phoneNumberList?.length > 0 ? (\r\n                      <div className=\"contact-part\">\r\n                        <div className=\"contact-type-list\">\r\n                          <ul className=\"number-list\">\r\n                            <li>\r\n                              {contactItem.phoneNumberList?.length > 0 ? (\r\n                                <ContactPhoneNumberDropdown\r\n                                  isOptionsOpen={isOptionsOpen}\r\n                                  phoneNumberList={contactItem.phoneNumberList}\r\n                                />\r\n                              ) : null}\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    ) : null}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"contact-details\">\r\n              <div className=\"dropdown-sec\">\r\n                {contactItem.emailAddressList?.length > 0 ? (\r\n                  <ContactEmailsDropdown\r\n                    emailAddressesList={contactItem.emailAddressList}\r\n                  />\r\n                ) : null}\r\n              </div>\r\n              <div className=\"dropdown-sec\">\r\n                {contactItem.phoneNumberList?.length > 0 ? (\r\n                  <ContactPhoneNumberDropdown\r\n                    phoneNumberList={contactItem.phoneNumberList}\r\n                  />\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={`contact-type-badge ${getContactTypeClass(contactItem.type)}`}>\r\n            {contactItem.type}\r\n          </div>\r\n          <div className=\"edit-delete-button\">\r\n            {showEditIcon ? (\r\n              <button onClick={() => handleEdit(contactItem?.contactId)} className=\"edit-btn\">\r\n                {/* <Image imagePath={AppIcons.editThemeIcon} /> */}\r\n                <Iconify icon=\"tabler:pencil\" />\r\n              </button>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"contact-main-card-section\">\r\n        <div className=\"card-section-body\">\r\n          <div className=\"top-profile-section\">\r\n            <div className=\"profile-sec\">\r\n              <span className=\"profile-icon\">\r\n                {contactItem.firstName && contactItem.lastName\r\n                  ? contactItem.firstName.charAt(0).toUpperCase() +\r\n                  contactItem.lastName.charAt(0).toUpperCase()\r\n                  : \"\"}\r\n              </span>\r\n              <span className=\"contact-name\">\r\n                {contactItem.firstName + \" \" + contactItem.lastName}\r\n              </span>\r\n              {contactItem.isPrimary && (\r\n                <span className=\"primary-card\"> Primary </span>\r\n              )}\r\n            </div>\r\n            <div className=\"right-action-icon\">\r\n              <div className=\"edit-view-icon\">\r\n                <div className=\"d-flex edit-delete-button\">\r\n                  {showEditIcon ? (\r\n                    <>\r\n                      {!isButtonDisable &&\r\n                        <button onClick={() => handleClone(contactItem)} className=\"edit-btn\">\r\n                          <Iconify icon=\"clarity:clone-line\" />\r\n                        </button>\r\n                      }\r\n                      <button onClick={() => handleEdit(contactItem?.contactId)} className=\"edit-btn ml-1\" >\r\n                        {/* <Image imagePath={AppIcons.editThemeIcon} /> */}\r\n                        <Iconify icon=\"tabler:pencil\" />\r\n                      </button>\r\n                    </>\r\n                  ) : null}\r\n                </div>\r\n                {/* <span className=\"option-icon\" onClick={handleOptionsClick}> */}\r\n                <span\r\n                  className=\"option-icon\"\r\n                  role=\"button\"\r\n                  tabIndex=\"0\"\r\n                  onClick={handleOptionsClick}\r\n                >\r\n                  {/* <Image\r\n                      imagePath={AppIcons.EllipsisIcon}\r\n                      altText=\"EllipsisIcon\"\r\n                    /> */}\r\n                  <Iconify icon=\"mdi:ellipsis-vertical\" />\r\n                </span>\r\n              </div>\r\n              <div\r\n                ref={ref}\r\n                className={`customer-detail-model ${openModalId === contactItem.contactId ? \"open-model\" : \"\"\r\n                  }`}\r\n              >\r\n                <div className=\"customer-card-top-sec\">\r\n                  <div className=\"profile-icon\">\r\n                    <span className=\"profile-text\">\r\n                      {contactItem.firstName && contactItem.lastName\r\n                        ? contactItem.firstName.charAt(0).toUpperCase() +\r\n                        contactItem.lastName.charAt(0).toUpperCase()\r\n                        : \"\"}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"profile-name\">\r\n                    {contactItem.firstName + \" \" + contactItem.lastName}\r\n                  </div>\r\n                </div>\r\n                <div className=\"bottom-contact-desc\">\r\n                  {contactItem.emailAddressList?.length > 0 ? (\r\n                    <div className=\"contact-part\">\r\n                      <div className=\"type-title\">\r\n                        <i className=\"fa fa-envelope-o\"></i>\r\n                        <span className=\"contact-type-title\">\r\n                          Email Address\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"contact-type-list\">\r\n                        <ul>\r\n                          <li>\r\n                            {contactItem.emailAddressList?.length > 0 ? (\r\n                              <ContactEmailsDropdown\r\n                                isOptionsOpen={isOptionsOpen}\r\n                                emailAddressesList={\r\n                                  contactItem.emailAddressList\r\n                                }\r\n                              />\r\n                            ) : null}\r\n                          </li>\r\n                        </ul>\r\n                      </div>\r\n                    </div>\r\n                  ) : null}\r\n                  {contactItem.phoneNumberList?.length > 0 ? (\r\n                    <div className=\"contact-part\">\r\n                      <div className=\"type-title\">\r\n                        <i className=\"fa fa-phone\"></i>\r\n                        <span className=\"contact-type-title\">\r\n                          Phone Number\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"contact-type-list\">\r\n                        <ul className=\"number-list\">\r\n                          <li>\r\n                            {contactItem.phoneNumberList?.length > 0 ? (\r\n                              <ContactPhoneNumberDropdown\r\n                                isOptionsOpen={isOptionsOpen}\r\n                                phoneNumberList={contactItem.phoneNumberList}\r\n                              />\r\n                            ) : null}\r\n                          </li>\r\n                        </ul>\r\n                      </div>\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"customer-details\">\r\n            <div className=\"email-address\">\r\n              {contactItem.emailAddressList?.length > 0 ? (\r\n                <ContactEmailsDropdown\r\n                  showEmailDropdown={showEmailDropdown}\r\n                  setShowEmailDropdown={setShowEmailDropdown}\r\n                  emailAddressesList={contactItem.emailAddressList}\r\n                />\r\n              ) : null}\r\n            </div>\r\n            <div className=\"contact-number\">\r\n              {contactItem.phoneNumberList?.length > 0 ? (\r\n                <ContactPhoneNumberDropdown\r\n                  showPhoneDropdown={showPhoneDropdown}\r\n                  setShowPhoneDropdown={setShowPhoneDropdown}\r\n                  phoneNumberList={contactItem.phoneNumberList}\r\n                />\r\n              ) : null}\r\n            </div>\r\n            <div className=\"customer-type\">\r\n              <span\r\n                className={`customer-type-icon ${getContactTypeClass(\r\n                  contactItem.type\r\n                )}`}\r\n              ></span>\r\n              <span\r\n                className={`type-value ${getContactTypeClass(\r\n                  contactItem.type\r\n                )}`}\r\n              >\r\n                {contactItem.type}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ContactCloneModel cloneRef={cloneRef} isSupplier={isSupplier} onGetContactList={onGetContactList} isEditablePage={isEditablePage}\r\n        getCompletionCount={getCompletionCount} SecurityKey={SecurityKey} />\r\n    </>\r\n  );\r\n}\r\n);\r\n\r\nContactDetailCard.propTypes = {\r\n  contactItem: PropTypes.shape({\r\n    firstName: PropTypes.string,\r\n    lastName: PropTypes.string,\r\n    isPrimary: PropTypes.bool,\r\n    emailAddressList: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        value: PropTypes.string,\r\n      })\r\n    ),\r\n    phoneNumberList: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        value: PropTypes.string,\r\n      })\r\n    ),\r\n    type: PropTypes.string,\r\n    contactId: PropTypes.number,\r\n  }).isRequired,\r\n  handleEdit: PropTypes.func.isRequired,\r\n  showEditIcon: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default ContactDetailCard;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./CenterModel.scss\";\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\nconst CenterModel = ({ isApprovalValidate, showModal, handleToggleModal, children, ...props }) => {\r\n  return (\r\n    <Modal\r\n      className={`center-model-popup ${props.modelSizeClass}`}\r\n      show={showModal}\r\n      onHide={handleToggleModal}\r\n      keyboard={!isApprovalValidate}\r\n      backdrop={isApprovalValidate ? \"static\" : true}\r\n    >\r\n      <Modal.Header closeButton={!isApprovalValidate}>\r\n        <div className=\"model-title\">{props.modalTitle}</div>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nCenterModel.propTypes = {\r\n  isApprovalValidate: PropTypes.bool,\r\n  showModal: PropTypes.bool.isRequired,\r\n  handleToggleModal: PropTypes.func.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  modelSizeClass: PropTypes.string,\r\n  modalTitle: PropTypes.string\r\n};\r\nexport default CenterModel;\r\n","import ToastService from \"../../services/toastService/ToastService\";\r\n\r\nconst CopyText =(text,field )=>{\r\n navigator.clipboard.writeText(text).then(\r\n          () => {\r\n            ToastService.success(`${field} copied to the clipboard.`);\r\n          },\r\n          (err) => {\r\n            ToastService.err(\"Could not copy text: \", err);\r\n          }\r\n        );\r\n   \r\n};\r\nexport default CopyText;"],"names":["_ref","_primaryEmailAddress","_primaryEmailAddress2","_primaryEmailAddress3","emailAddressesList","isOptionsOpen","emailAddresses","filter","data","isPrimary","primaryEmailAddress","find","length","slice","_jsxs","React","children","className","_jsx","title","emailAddress","_Fragment","style","cursor","onClick","_primaryEmailAddress4","CopyText","Iconify","icon","map","emaildata","index","_primaryPhoneNumber","_primaryPhoneNumber2","_primaryPhoneNumber3","_primaryPhoneNumber4","_primaryPhoneNumber5","_primaryPhoneNumber6","_primaryPhoneNumber7","_primaryPhoneNumber8","phoneNumberList","phoneNumbers","primaryPhoneNumber","phoneTypesIcon","type","phoneTypeId","phoneCode","phoneNumber","extension","phoneData","cloneContactFormData","name","initialState","contactTypeId","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","SELECT","dataField","fieldSetting","placeholder","isMultiSelect","isDisabled","isEnableOnChange","validation","containerCss","formSetting","isViewOnly","cloneRef","isSupplier","onGetContactList","getCompletionCount","ref","useRef","cloneData","setCloneData","useState","isCloneModel","setIsCloneModel","getAllContactTypes","isSuccess","isGetAllContactTypesSucess","allGetAllContactTypesData","useLazyGetAllContactTypesQuery","addEdit","isLoading","isAddEditLoading","isAddEditSuccess","isAddEditData","useAddEditContactMutation","useEffect","filterCondition","item","isForSuppliers","isForCustomers","setDropDownOptionField","errorMessage","includes","ToastService","warning","success","handleToggleModal","handleContactData","useImperativeHandle","callChildFunction","CenterModel","showModal","modalTitle","modelSizeClass","FormCreator","config","Buttons","buttonTypeClassName","buttonText","handlSave","current","getFormData","contactType","getDropDownId","modifyData","contactId","emailAddressList","phoneType","forwardRef","_contactItem$emailAdd","_contactItem$emailAdd2","_contactItem$phoneNum","_contactItem$phoneNum2","_contactItem$emailAdd3","_contactItem$phoneNum3","_contactItem$emailAdd4","_contactItem$emailAdd5","_contactItem$phoneNum4","_contactItem$phoneNum5","_contactItem$emailAdd6","_contactItem$phoneNum6","contactItem","handleEdit","showEditIcon","openModalId","setOpenModalId","isEditablePage","SecurityKey","emailDropdownRef","phoneDropdownRef","setIsOptionsOpen","isButtonDisable","setIsButtonDisable","showPhoneDropdown","setShowPhoneDropdown","showEmailDropdown","setShowEmailDropdown","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","hasEditPermission","hasFunctionalPermission","EDIT","getContactTypeClass","handleOptionsClick","handleBodyClick","e","closest","body","firstName","lastName","role","tabIndex","charAt","toUpperCase","ContactEmailsDropdown","ContactPhoneNumberDropdown","handleClone","ContactCloneModel","isApprovalValidate","props","Modal","show","onHide","keyboard","backdrop","Header","closeButton","Body","text","field","navigator","clipboard","writeText","then","err"],"sourceRoot":""}