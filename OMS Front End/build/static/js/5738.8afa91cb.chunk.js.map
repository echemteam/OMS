{"version":3,"file":"static/js/5738.8afa91cb.chunk.js","mappings":"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","sources":["pages/supplierDetails/supplierGrid/feature/InActiveTabs/InActiveSupplierTab.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n//** Lib's */\r\nimport PropTypes from 'prop-types';\r\nimport { ErrorMessage } from \"../../../../../data/appMessages\";\r\nimport useDebounce from \"../../../../../app/customHooks/useDebouce\";\r\nimport CardSection from \"../../../../../components/ui/card/CardSection\";\r\nimport { ListShowCustomer } from \"../../../../../utils/Enums/commonEnums\";\r\nimport { StatusEnums, StatusValue } from \"../../../../../utils/Enums/StatusEnums\";\r\nimport SupplierListContext from \"../../../../../utils/ContextAPIs/Supplier/SupplierListContext\";\r\n\r\n//** Service's */\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\nimport { AllInActiveCustomerGridConfig, BlockedInActiveCustomerGridConfig, DisabledInActiveCustomerGridConfig, FreezedInActiveCustomerGridConfig } from \"../../../../../common/features/component/CustomerSupplierListConfig/CustomerSupplierListConfig.data\";\r\n//** Component's */\r\nconst InActiveSuppliersList = React.lazy(() => import(\"./feature/InActiveSuppliersList\"));\r\n\r\n\r\nconst InActiveSupplierTab = ({ statusId }) => {\r\n  const [activeTab, setActiveTab] = useState(\"0\");\r\n  const DataRef = useRef();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [statusOptions, setStatusOptions] = useState([]);\r\n  const [selectedDrpvalues, setSelectedDrpvalues] = useState(\"\")\r\n  const [selectedStatusOptions, setSelectedStatusOptions] = useState(\"\");\r\n  const [allManageData, setAllManageData] = useState(AllInActiveCustomerGridConfig);\r\n  const [freezeManageData, setFrezzeManageData] = useState(FreezedInActiveCustomerGridConfig);\r\n  const [blockManageData, setBlockManageData] = useState(BlockedInActiveCustomerGridConfig);\r\n  const [disableManageData, setDisableManageData] = useState(DisabledInActiveCustomerGridConfig);\r\n  const [shouldRerenderFormCreator, setShouldRerenderFormCreator] = useState(false);\r\n  const debouncedSearch = useDebounce(search, 300);\r\n\r\n  const handleTabClick = (tabIndex) => {\r\n    setActiveTab(tabIndex.toString());\r\n  };\r\n\r\n  const getListApi = () => {\r\n    if (DataRef.current) {\r\n      DataRef.current.getListApi();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSearch(\"\");\r\n    setSelectedDrpvalues(\"\");\r\n    const updateManageData = () => {\r\n      switch (activeTab) {\r\n        case \"0\":\r\n          setAllManageData({\r\n            ...AllInActiveCustomerGridConfig,\r\n            columns: AllInActiveCustomerGridConfig.columns.filter(column => column.id !== ListShowCustomer.value)\r\n          });\r\n          break;\r\n        case \"1\":\r\n          setFrezzeManageData({\r\n            ...FreezedInActiveCustomerGridConfig,\r\n            columns: FreezedInActiveCustomerGridConfig.columns.filter(column => column.id !== ListShowCustomer.value)\r\n          });\r\n          break;\r\n        case \"2\":\r\n          setBlockManageData({\r\n            ...BlockedInActiveCustomerGridConfig,\r\n            columns: BlockedInActiveCustomerGridConfig.columns.filter(column => column.id !== ListShowCustomer.value)\r\n          });\r\n          break;\r\n        case \"3\":\r\n          setDisableManageData({\r\n            ...BlockedInActiveCustomerGridConfig,\r\n            columns: BlockedInActiveCustomerGridConfig.columns.filter(column => column.id !== ListShowCustomer.value)\r\n          });\r\n          break;\r\n        default:\r\n          setAllManageData(AllInActiveCustomerGridConfig);\r\n      }\r\n    };\r\n\r\n    updateManageData(); // Initial update based on activeTab\r\n    getListApi(); // Fetch data based on activeTab (if needed)\r\n  }, [activeTab]);\r\n\r\n  const handleKeyPress=(event)=>{\r\n    \r\n    if (event.code === \"Enter\") {\r\n      handleSearch();\r\n    }\r\n  }\r\n\r\n  const handleSearch = () => {\r\n    if (search.length >= 3 || selectedDrpvalues.length > 0) {\r\n      getListApi();\r\n    } else {\r\n      ToastService.warning(ErrorMessage.CommonErrorMessage)\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n   \r\n    setSearch(event.target.value.trim());\r\n  \r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (StatusValue) {\r\n      const statusListData = StatusValue.filter((data) => data.value !== 1 && data.value !== 2 && data.value !== 3 && data.value !== 7).map((item) => ({\r\n        value: item.value,\r\n        label: item.label,\r\n      }));\r\n      setStatusOptions(statusListData);\r\n    }\r\n  }, []);\r\n\r\n  const handleChangeDropdown = (selectedOptions) => {\r\n    const selectedValues = selectedOptions.map(option => option.value);\r\n    if (selectedValues.length > 0) {\r\n      setSelectedDrpvalues(selectedValues);\r\n      setSelectedStatusOptions(selectedValues);\r\n    } else {\r\n      setSelectedDrpvalues(\"\");\r\n      setSelectedStatusOptions(\"\");\r\n    }\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setSelectedDrpvalues(\"\");\r\n    setSelectedStatusOptions(\"\");\r\n    setSearch(\"\");\r\n    setShouldRerenderFormCreator((prevState) => !prevState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (debouncedSearch === \"\" && selectedDrpvalues === \"\") {\r\n      getListApi();\r\n    }\r\n  }, [debouncedSearch, selectedDrpvalues]);\r\n\r\n  const tabs = [\r\n    {\r\n      sMenuItemCaption: \"ALL\",\r\n      component: (\r\n        <div className=\"mt-2 \">\r\n          <InActiveSuppliersList statusId={statusId} configFile={allManageData}\r\n            search={debouncedSearch}\r\n            handleChange={handleChange}\r\n            statusOptions={statusOptions}\r\n            selectedStatusOptions={selectedStatusOptions}\r\n            handleChangeDropdown={handleChangeDropdown}\r\n            selectedDrpvalues={selectedDrpvalues}\r\n            searchStatusFilter={true}\r\n            handleSearch={handleSearch}\r\n            handleClear={handleClear}\r\n            shouldRerenderFormCreator={shouldRerenderFormCreator}\r\n            handleKeyPress={handleKeyPress}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      sMenuItemCaption: \"FREEZED\",\r\n      component: (\r\n        <div className=\"mt-2\">\r\n          <InActiveSuppliersList statusId={StatusEnums.Freeze} configFile={freezeManageData}\r\n            search={debouncedSearch}\r\n            handleChange={handleChange}\r\n            statusOptions={statusOptions}\r\n            selectedStatusOptions={selectedStatusOptions}\r\n            handleChangeDropdown={handleChangeDropdown}\r\n            selectedDrpvalues={selectedDrpvalues}\r\n            searchStatusFilter={false}\r\n            handleSearch={handleSearch}\r\n            handleClear={handleClear}\r\n            shouldRerenderFormCreator={shouldRerenderFormCreator}\r\n            handleKeyPress={handleKeyPress}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      sMenuItemCaption: \"BLOCK\",\r\n      component: (\r\n        <div className=\"mt-2\">\r\n          <InActiveSuppliersList statusId={StatusEnums.Block} configFile={blockManageData}\r\n            search={debouncedSearch}\r\n            handleChange={handleChange}\r\n            statusOptions={statusOptions}\r\n            selectedStatusOptions={selectedStatusOptions}\r\n            handleChangeDropdown={handleChangeDropdown}\r\n            selectedDrpvalues={selectedDrpvalues}\r\n            searchStatusFilter={false}\r\n            handleSearch={handleSearch}\r\n            handleClear={handleClear}\r\n            shouldRerenderFormCreator={shouldRerenderFormCreator}\r\n            handleKeyPress={handleKeyPress}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      sMenuItemCaption: \"DISABLE\",\r\n      component: (\r\n        <div className=\"mt-2\">\r\n          <InActiveSuppliersList statusId={StatusEnums.Disable} configFile={disableManageData}\r\n            search={debouncedSearch}\r\n            handleChange={handleChange}\r\n            statusOptions={statusOptions}\r\n            selectedStatusOptions={selectedStatusOptions}\r\n            handleChangeDropdown={handleChangeDropdown}\r\n            selectedDrpvalues={selectedDrpvalues}\r\n            searchStatusFilter={false}\r\n            handleSearch={handleSearch}\r\n            handleClear={handleClear}\r\n            shouldRerenderFormCreator={shouldRerenderFormCreator}\r\n            handleKeyPress={handleKeyPress}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <SupplierListContext.Provider value={{ DataRef }}>\r\n        <div className=\"main-inactive-grid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-xxl-12 col-xl-12 col-md-12 col-12 other-info-tab\">\r\n              <CardSection\r\n              //   cardTitle=\"Other Information\"\r\n              >\r\n                <>\r\n                  {tabs && tabs.length > 0 &&\r\n                    <div className=\"row\">\r\n                      <div className=\"col-12\">\r\n                        <div className=\"tab-sub-section mb-0\">\r\n                          <div className=\"tab-sub-header\">\r\n                            {tabs && tabs.map((tab, index) => (\r\n                              <button\r\n                                key={index}\r\n                                className={activeTab === index.toString() ? \"active\" : \"\"}\r\n                                onClick={() => handleTabClick(index, tab.sPage)}\r\n                              >\r\n                                {tab.sMenuItemCaption}\r\n                              </button>\r\n                            ))}\r\n                          </div>\r\n                          {activeTab !== -1 && tabs[activeTab].component && (\r\n                            <div className=\"tab-sub-content\">\r\n                              <div className=\"tab-sub-body-section\">\r\n                                {tabs[activeTab].component}\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                </>\r\n              </CardSection>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </SupplierListContext.Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nInActiveSupplierTab.propTypes = {\r\n  statusId: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n}\r\nexport default InActiveSupplierTab;\r\n"],"names":["InActiveSuppliersList","React","_ref","statusId","activeTab","setActiveTab","useState","DataRef","useRef","search","setSearch","statusOptions","setStatusOptions","selectedDrpvalues","setSelectedDrpvalues","selectedStatusOptions","setSelectedStatusOptions","allManageData","setAllManageData","AllInActiveCustomerGridConfig","freezeManageData","setFrezzeManageData","FreezedInActiveCustomerGridConfig","blockManageData","setBlockManageData","BlockedInActiveCustomerGridConfig","disableManageData","setDisableManageData","DisabledInActiveCustomerGridConfig","shouldRerenderFormCreator","setShouldRerenderFormCreator","debouncedSearch","useDebounce","getListApi","current","useEffect","updateManageData","columns","filter","column","id","ListShowCustomer","value","handleKeyPress","event","code","handleSearch","length","ToastService","warning","ErrorMessage","CommonErrorMessage","handleChange","target","trim","StatusValue","statusListData","data","map","item","label","handleChangeDropdown","selectedOptions","selectedValues","option","handleClear","prevState","tabs","sMenuItemCaption","component","_jsx","className","children","configFile","searchStatusFilter","StatusEnums","Freeze","Block","Disable","_Fragment","SupplierListContext","Provider","CardSection","_jsxs","tab","index","toString","onClick","handleTabClick","tabIndex","sPage"],"sourceRoot":""}