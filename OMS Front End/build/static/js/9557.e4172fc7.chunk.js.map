{"version":3,"file":"static/js/9557.e4172fc7.chunk.js","mappings":"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","sources":["common/features/component/Address/config/AddressForm.data.js","common/features/component/Address/feature/AddEditAddress.js","common/features/component/Contact/config/ContactDetailForm.data.js","common/features/component/Contact/feature/AddEditContact.js","common/features/component/Document/Config/DocuementsData.js","pages/order/orderDetail/feature/orderinformation/feature/OrderInfoAddressModel.js","pages/order/orderDetail/feature/orderinformation/feature/UserDetailsModel.js","pages/order/orderDetail/feature/orderinformation/feature/UserCardDetail.js","pages/order/orderDetail/feature/orderinformation/feature/UserCardList.js","pages/order/orderDetail/feature/orderinformation/feature/UsercardModel.js","pages/order/orderDetail/feature/orderinformation/OrderInformation.js","utils/TransformData/TransformAPIData.js"],"sourcesContent":["import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const addressFormData = {\r\n  // name: \"Email From\",\r\n  initialState: { addressTypeId: \"\", addressLine1: \"\", addressLine2: \"\", addressLine3: \"\", addressLine4: \"\", addressLine5: \"\", countryId: 233, stateId: \"\", zipCode: \"\", cityId: \"\", supplierId: 0, isPreferredBilling: false, isShippingAndBilling: false, isPreferredShipping: false, stateName: \"\", cityName: \"\" },\r\n  formFields: [\r\n    {\r\n      id: \"addressTypeId\",\r\n      lable: \"Address Type \",\r\n      Field_Name: \"Address Type\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"addressTypeId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Address Type\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n\r\n    {\r\n      id: \"addressLine1\",\r\n      lable: \"Address Line 1 \",\r\n      Field_Name: \"Address Line 1\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine1\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Address Line 1\",\r\n        allowSpace: true,\r\n        maxLength: 35,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine2\",\r\n      lable: \"Address Line 2\",\r\n      Field_Name: \"Address Line 2\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine2\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Address Line 2\",\r\n        allowSpace: true,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine3\",\r\n      lable: \"Address Line 3 \",\r\n      Field_Name: \"Address Line 3\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine3\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Address Line 3\",\r\n        allowSpace: true,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine4\",\r\n      lable: \"Address Line 4 \",\r\n      Field_Name: \"Address Line 4\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine4\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Address Line 4\",\r\n        allowSpace: true,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine5\",\r\n      lable: \"Address Line 5 \",\r\n      Field_Name: \"Address Line 5\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine5\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Address Line 5\",\r\n        allowSpace: true,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"countryId\",\r\n      lable: \"Country \",\r\n      Field_Name: \"Country\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"countryId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Country\",\r\n        isEnableOnChange: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-12 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"stateId\",\r\n      lable: \"State \",\r\n      Field_Name: \"State\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"stateId\",\r\n      fieldSetting: {\r\n        isDisable: false,\r\n        placeholder: \"Select State\",\r\n        isEnableOnChange: true,\r\n        isText: false\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-12 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"cityId\",\r\n      lable: \"City \",\r\n      Field_Name: \"City\",\r\n      fieldType: FormFieldTypes.EDITABLEDROPDOWN,\r\n      dataField: \"cityId\",\r\n      fieldSetting: {\r\n        isDisable: true,\r\n        placeholder: \"Select City\",\r\n        isEnableOnChange: true,\r\n        isText: false,\r\n        isDependDropdown: {\r\n          dataField: 'stateId'\r\n        }\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-12 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"zipCode\",\r\n      lable: \"Zip Code \",\r\n      Field_Name: \"Zip Code\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"zipCode\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Zip Code\",\r\n        allowSpace: true,\r\n        maxLength: 10,\r\n      },\r\n      validation: [{ type: \"require\" }, { type: \"validZipCode\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-8 col-md-8 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"isShippingAndBilling\",\r\n      lable: \"Is Billing And Shipping are same\",\r\n      Field_Name: \"Is Billing and Shipping\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isShippingAndBilling\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-5 col-xl-5 col-md-12 col-12 col-12 \",\r\n      },\r\n    },\r\n    {\r\n      id: \"isPreferredBilling\",\r\n      lable: \"Is Preferred Billing\",\r\n      Field_Name: \"Is PreferredBilling\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isPreferredBilling\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-12 col-12 col-12 \",\r\n      },\r\n    },\r\n    {\r\n      id: \"isPreferredShipping\",\r\n      lable: \"Is Preferred Shipping\",\r\n      Field_Name: \"Is PreferredShipping\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isPreferredShipping\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-12 col-12 col-12 \",\r\n      },\r\n    },\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false\r\n  }\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { forwardRef, useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\n//** Lib's */\r\nimport Buttons from \"../../../../../components/ui/button/Buttons\";\r\nimport { AddressType, FieldSettingType } from \"../../../../../utils/Enums/commonEnums\";\r\nimport FormCreator from \"../../../../../components/Forms/FormCreator\";\r\nimport { onResetForm } from \"../../../../../utils/FormFields/ResetForm/handleResetForm\";\r\nimport { removeFormFields } from \"../../../../../utils/FormFields/RemoveFields/handleRemoveFields\";\r\nimport { setFieldSetting, setDropDownOptionField } from \"../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport { addressFormData } from \"../config/AddressForm.data\";\r\n//** Service's */\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\nimport { useLazyGetAllCountriesQuery } from \"../../../../../app/services/basicdetailAPI\";\r\nimport { useLazyGetAllAddressTypesQuery, useLazyGetAllCitiesQuery, useLazyGetAllStatesQuery } from \"../../../../../app/services/addressAPI\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SetInitialCountry = {\r\n    label: \"United States\",\r\n    value: 233\r\n}\r\n\r\nconst AddEditAddress = forwardRef(({ keyId, isSupplier, updateAddress, addAddress, getAddresssById, isModelOpen, editMode, isButtonDisable, getCompletionCount,\r\n    onSidebarClose, editRef, isOrderManage, getAddressTypeIdOrder, onHandleOrderInfoRepeatCall, orderCustomerId, isEditablePage, customerStatusId }) => {\r\n\r\n    //** States */\r\n    const ref = useRef();\r\n    const [formData, setFormData] = useState(addressFormData);\r\n    const [shouldRerenderFormCreator, setShouldRerenderFormCreator] = useState(false);\r\n    const [selectedCheckboxFeild, setSelectedCheckboxFeild] = useState(null);\r\n    const [selectedCheckbox, setSelectedCheckbox] = useState(null);\r\n    const [addressEditTableId, setAddressEditTableId] = useState(0)\r\n\r\n    //** API Call's */\r\n    /**\r\n     * This hook dynamically sets the API call based on the module (customer or supplier).\r\n     * The API endpoint and parameters are configured within the SupplierAddressDetails OR CustomerAddressDetails component.\r\n    */\r\n    const [add, { isLoading: isAddLoading, isSuccess: isAddSuccess, data: isAddData }] = addAddress();\r\n    const [update, { isLoading: isUpdateLoading, isSuccess: isUpdateSuccess, data: isUpdateData }] = updateAddress();\r\n    const [getById, { isFetching: isGetByIdFetching, isSuccess: isGetByIdSuccess, data: isGetByIdData }] = getAddresssById();\r\n\r\n    const [getAllCities, { isSuccess: isGetAllCitiesSucess, isFetching: isFetchingCities, data: allGetAllCitiesData }] = useLazyGetAllCitiesQuery();\r\n    const [getAllStates, { data: allGetAllStatesData }] = useLazyGetAllStatesQuery();\r\n    const [getAllCountries, { isSuccess: isGetAllCountriesSucess, data: allGetAllCountriesData }] = useLazyGetAllCountriesQuery();\r\n    const [getAllAddressTypes, { isSuccess: isGetAllAddressTypesSucess, data: allGetAllAddressTypesData }] = useLazyGetAllAddressTypesQuery();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (editMode || isModelOpen || !isOrderManage) {\r\n                await Promise.all([\r\n                    getAllStates(),\r\n                    getAllCountries(),\r\n                    getAllAddressTypes()\r\n                ]);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [editMode, isModelOpen]);\r\n\r\n    useEffect(() => {\r\n        if (isOrderManage) {\r\n            setFieldSetting(addressFormData, 'addressTypeId', FieldSettingType.DISABLED, true);\r\n            let form = { ...addressFormData };\r\n            if (getAddressTypeIdOrder === AddressType.BILLING) {\r\n                form = removeFormFields(addressFormData, ['isShippingAndBilling', 'isPreferredShipping']);\r\n            } else if (getAddressTypeIdOrder === AddressType.SHIPPING) {\r\n                form = removeFormFields(addressFormData, ['isShippingAndBilling', 'isPreferredBilling']);\r\n            }\r\n            form.initialState = {\r\n                ...form.initialState,\r\n                addressTypeId: getAddressTypeIdOrder,\r\n            }\r\n            setFormData(form);\r\n        } else {\r\n            setFieldSetting(addressFormData, 'addressTypeId', FieldSettingType.DISABLED);\r\n        }\r\n    }, [isOrderManage, isModelOpen])\r\n\r\n    const handleResponse = (success, data) => {\r\n        if (success && data) {\r\n            handleAddressResponse(success, data);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        handleResponse(isAddSuccess, isAddData);\r\n    }, [isAddSuccess, isAddData]);\r\n\r\n    useEffect(() => {\r\n        handleResponse(isUpdateSuccess, isUpdateData);\r\n    }, [isUpdateSuccess, isUpdateData]);\r\n\r\n    useEffect(() => {\r\n        if (isSupplier && isModelOpen) {\r\n            setFieldSetting(formData, 'cityId', FieldSettingType.DISABLED, true);\r\n            // setFieldSetting(addressFormData, 'addressTypeId', FieldSettingType.DISABLED, false);\r\n            setFieldSetting(formData, 'addressTypeId', FieldSettingType.MULTISELECT, true);\r\n            if (editMode) {\r\n                setFieldSetting(formData, 'addressTypeId', FieldSettingType.MULTISELECT, false);\r\n                // setFieldSetting(addressFormData, 'addressTypeId', FieldSettingType.DISABLED, true);\r\n            }\r\n        } else if (!isModelOpen && !isOrderManage) {\r\n            onResetForm(addressFormData, setFormData, null);\r\n        } else if (!isSupplier && !isOrderManage) {\r\n            setFieldSetting(formData, 'addressTypeId', FieldSettingType.MULTISELECT, false);\r\n            // setFieldSetting(addressFormData, 'addressTypeId', FieldSettingType.DISABLED, false);\r\n        }\r\n    }, [isSupplier, isModelOpen]);\r\n\r\n    useEffect(() => {\r\n        if (isGetAllCountriesSucess && allGetAllCountriesData) {\r\n            setDropDownOptionField(allGetAllCountriesData, 'countryId', 'name', addressFormData, 'countryId');\r\n        }\r\n    }, [isGetAllCountriesSucess, allGetAllCountriesData]);\r\n\r\n    useEffect(() => {\r\n        if (!isFetchingCities & isGetAllCitiesSucess && allGetAllCitiesData) {\r\n            const cities = allGetAllCitiesData.map((item) => ({\r\n                value: item.cityId,\r\n                label: item.name,\r\n            }));\r\n            let data = { ...formData };\r\n            const dropdownField = data?.formFields?.find(data => data.id === \"cityId\");\r\n            dropdownField.fieldSetting.options = cities;\r\n            setFormData(data);\r\n        }\r\n    }, [isGetAllCitiesSucess, allGetAllCitiesData, isFetchingCities]);\r\n\r\n    useEffect(() => {\r\n        if (isGetAllAddressTypesSucess && allGetAllAddressTypesData) {\r\n            const filterCondition = (item) => {\r\n                return isSupplier ? item.isForSuppliers : item.isForCustomers;\r\n            };\r\n            setDropDownOptionField(allGetAllAddressTypesData, 'addressTypeId', 'type', addressFormData, 'addressTypeId', filterCondition);\r\n            setShouldRerenderFormCreator((prevState) => !prevState);\r\n        }\r\n    }, [isGetAllAddressTypesSucess, allGetAllAddressTypesData, isSupplier]);\r\n\r\n    useEffect(() => {\r\n        if (!isGetByIdFetching && isGetByIdSuccess && isGetByIdData) {\r\n            setAddressEditTableId(isGetByIdData.addressId);\r\n            let form = { ...formData };\r\n            let data = isGetByIdData;\r\n            if (!isButtonDisable) {\r\n                setFieldSetting(formData, 'cityId', FieldSettingType.DISABLED);\r\n                setFieldSetting(formData, 'stateId', FieldSettingType.DISABLED);\r\n            } else if (isButtonDisable) {\r\n                setFieldSetting(formData, 'cityId', FieldSettingType.DISABLED, true);\r\n                setFieldSetting(formData, 'stateId', FieldSettingType.DISABLED, true);\r\n            }\r\n            if (data.countryId) {\r\n                setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', form, 'stateId', item => item.countryId === data.countryId);\r\n            }\r\n            if (data.stateId) {\r\n                getAllCities(data.stateId)\r\n            }\r\n            form.initialState = {\r\n                customerId: isSupplier === false ? keyId : 0,\r\n                supplierId: isSupplier === true ? keyId : 0,\r\n                addressTypeId: data.addressTypeId,\r\n                addressLine1: data.addressLine1,\r\n                addressLine2: data.addressLine2,\r\n                addressLine3: data.addressLine3,\r\n                addressLine4: data.addressLine4,\r\n                addressLine5: data.addressLine5,\r\n                countryId: data.countryId,\r\n                stateId: data.stateId,\r\n                cityId: data.cityId,\r\n                zipCode: data.zipCode,\r\n                isPreferredShipping: data.isPreferredShipping,\r\n                isPreferredBilling: data.isPreferredBilling,\r\n            };\r\n            setFormData(form);\r\n        }\r\n    }, [isGetByIdFetching, isGetByIdSuccess, isGetByIdData]);\r\n\r\n    const setInitialValue = () => {\r\n        if (!editMode) {\r\n            let updatedFormData;\r\n            updatedFormData = removeFormFields(addressFormData, ['isPreferredShipping', 'isShippingAndBilling', 'isPreferredBilling']);\r\n            if (allGetAllStatesData) {\r\n                handleChangeDropdownList(SetInitialCountry, \"countryId\");\r\n                setFieldSetting(formData, 'cityId', FieldSettingType.DISABLED, true);\r\n            }\r\n            setFormData(updatedFormData)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isOrderManage) {\r\n            setInitialValue()\r\n        }\r\n    }, [allGetAllStatesData, isModelOpen])\r\n\r\n    useEffect(() => {\r\n        if (isGetByIdData) {\r\n            let updatedFormData = { ...formData };\r\n            if (isGetByIdData.type === \"Billing\") {\r\n                updatedFormData = removeFormFields(addressFormData, ['isShippingAndBilling', 'isPreferredShipping']);\r\n            } else if (isGetByIdData.type === \"Shipping\") {\r\n                updatedFormData = removeFormFields(addressFormData, ['isShippingAndBilling', 'isPreferredBilling']);\r\n            } else if (isGetByIdData.type === \"AP\" || isGetByIdData.type === \"Primary\") {\r\n                updatedFormData = removeFormFields(addressFormData, ['isShippingAndBilling', 'isPreferredBilling', 'isPreferredShipping']);\r\n            }\r\n            updatedFormData.initialState = {\r\n                customerId: isSupplier === false ? keyId : 0,\r\n                supplierId: isSupplier === true ? keyId : 0,\r\n                addressTypeId: isGetByIdData.addressTypeId,\r\n                addressLine1: isGetByIdData.addressLine1,\r\n                addressLine2: isGetByIdData.addressLine2,\r\n                addressLine3: isGetByIdData.addressLine3,\r\n                addressLine4: isGetByIdData.addressLine4,\r\n                addressLine5: isGetByIdData.addressLine5,\r\n                countryId: isGetByIdData.countryId,\r\n                stateId: isGetByIdData.stateId,\r\n                cityId: isGetByIdData.cityId,\r\n                zipCode: isGetByIdData.zipCode,\r\n                isPreferredShipping: isGetByIdData.isPreferredShipping,\r\n                isPreferredBilling: isGetByIdData.isPreferredBilling,\r\n            };\r\n            setFormData(updatedFormData);\r\n        }\r\n    }, [isGetByIdData])\r\n\r\n    const handleAddressResponse = (isSuccess, responseData) => {\r\n        if (isSuccess && responseData) {\r\n            getCompletionCount && getCompletionCount();\r\n            if (responseData.errorMessage.includes(\"exists\")) {\r\n                ToastService.warning(responseData.errorMessage);\r\n                getById(keyId);\r\n                return;\r\n            }\r\n            onResetForm(addressFormData, setFormData, null);\r\n            ToastService.success(responseData.errorMessage);\r\n            if (!isOrderManage) {\r\n                getById(keyId);\r\n                onSidebarClose();\r\n            } else {\r\n                onHandleOrderInfoRepeatCall()\r\n            }\r\n            onSidebarClose();\r\n        }\r\n    }\r\n    const getAddressTypeId = (data, isSupplier, editMode) => {\r\n        if (isSupplier) {\r\n            if (editMode) {\r\n                return data.addressTypeId && typeof data.addressTypeId === \"object\"\r\n                    ? String(data.addressTypeId.value)\r\n                    : String(data.addressTypeId);\r\n            } else {\r\n                return Array.isArray(data.addressTypeId)\r\n                    ? data.addressTypeId.map(String).join(\",\")\r\n                    : data.addressTypeId;\r\n            }\r\n        } else {\r\n            return data.addressTypeId && typeof data.addressTypeId === \"object\"\r\n                ? String(data.addressTypeId.value)\r\n                : String(data.addressTypeId);\r\n        }\r\n    };\r\n\r\n    const buildTransformedData = (data, isSupplier, keyId, editMode) => {\r\n        const addressTypeIdValue = getAddressTypeId(data, isSupplier, editMode);\r\n        const transformLocationData = (locationData, nameField) => {\r\n            if (typeof locationData === 'object') {\r\n                if (locationData.isNew) {\r\n                    return {\r\n                        id: 0, // Set id to 0 for new entries\r\n                        name: locationData.text || \"\", // Use the text for the name, or an empty string if not provided\r\n                    };\r\n                } else {\r\n                    return {\r\n                        id: locationData.value || locationData.id || 0, // Use existing value or id, or fallback to 0\r\n                        name: nameField || \"\", // Use existing nameField or fallback to an empty string\r\n                    };\r\n                }\r\n            }\r\n            return {\r\n                id: locationData || 0, // Use locationData if present, otherwise 0\r\n                name: nameField || \"\", // Use nameField if present, otherwise an empty string\r\n            };\r\n        };\r\n\r\n        const { id: stateId, name: stateName } = transformLocationData(data.stateId, data.stateName);\r\n        const { id: cityId, name: cityName } = transformLocationData(data.cityId, data.cityName);\r\n\r\n        return {\r\n            ...data,\r\n            [isSupplier ? 'supplierId' : 'customerId']: keyId,\r\n            addressTypeId: extractValue(addressTypeIdValue),\r\n            countryId: extractValue(data.countryId),\r\n            stateId,\r\n            cityId,\r\n            stateName,\r\n            cityName,\r\n        };\r\n    };\r\n\r\n    const getCustomerAddressId = (isSupplier, isGetByIdData) => {\r\n        return isSupplier === false\r\n            ? isGetByIdData ? isGetByIdData.customerAddressId : 0\r\n            : 0;\r\n    };\r\n\r\n    const getSupplierAddressId = (isSupplier, isGetByIdData) => {\r\n        return isSupplier === true\r\n            ? isGetByIdData ? isGetByIdData.supplierAddressId : 0\r\n            : 0;\r\n    };\r\n\r\n    const buildUpdateData = (transformedData, isGetByIdData, isSupplier) => {\r\n        const customerAddressId = getCustomerAddressId(isSupplier, isGetByIdData);\r\n        const supplierAddressId = getSupplierAddressId(isSupplier, isGetByIdData);\r\n        return {\r\n            ...transformedData,\r\n            addressId: isGetByIdData === null ? addressEditTableId : isGetByIdData.addressId,\r\n            customerAddressId,\r\n            supplierAddressId,\r\n        };\r\n    };\r\n\r\n    const handleAddEdit = async () => {\r\n            const data = ref.current.getFormData();\r\n        if (!data) return;\r\n        const transformedData = buildTransformedData(data, isSupplier, keyId, editMode);\r\n        if (editMode) {\r\n            const updateData = buildUpdateData(transformedData, isGetByIdData, isSupplier);\r\n            update(updateData);\r\n        } else {\r\n            // // Add mode\r\n            const customerId = orderCustomerId ? orderCustomerId : transformedData.customerId;\r\n            const req = {\r\n                ...transformedData,\r\n                customerId: customerId,\r\n            };\r\n            add(req);\r\n        }\r\n    };\r\n\r\n    const extractValue = (field) => {\r\n        return field && typeof field === \"object\" ? field.value : field;\r\n    };\r\n\r\n    const handleEdit = (addressId) => {\r\n        \r\n        addressId && getById(addressId);\r\n    }\r\n\r\n    const handleChangeDropdownList = (data, dataField) => {\r\n        const manageData = { ...formData };\r\n        if (dataField === \"countryId\") {\r\n            setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', manageData, 'stateId', item => item.countryId === data.value);\r\n            setDropDownOptionField(null, 'cityId', 'name', manageData, 'cityId', null);\r\n            setFieldSetting(manageData, 'stateId', FieldSettingType.DISABLED, false);\r\n            ref.current.updateFormFieldValue({\r\n                countryId: data.value,\r\n                stateId: null,\r\n                cityId: null\r\n            });\r\n        } else if (dataField === \"stateId\") {\r\n            if (data) {\r\n                getAllCities(data.value);\r\n                setFieldSetting(manageData, 'cityId', FieldSettingType.DISABLED, false);\r\n                ref.current.updateFormFieldValue({\r\n                    stateId: data.value,\r\n                    cityId: null,\r\n                });\r\n            } else {\r\n                ref.current.updateFormFieldValue({\r\n                    cityId: null,\r\n                });\r\n            }\r\n\r\n        }\r\n        else if (!isSupplier && dataField === \"addressTypeId\") {\r\n            let filteredFormFields;\r\n            switch (data.label) {\r\n                case \"Billing\":\r\n                    filteredFormFields = editMode ? addressFormData.formFields.filter(field => field.dataField !== \"isPreferredShipping\" && field.dataField !== \"isShippingAndBilling\")\r\n                        : addressFormData.formFields.filter(field => field.dataField !== \"isPreferredShipping\");\r\n                    break;\r\n                case \"Shipping\":\r\n                    filteredFormFields = editMode ? addressFormData.formFields.filter(field => field.dataField !== \"isPreferredBilling\" && field.dataField !== \"isShippingAndBilling\")\r\n                        : addressFormData.formFields.filter(field => field.dataField !== \"isPreferredBilling\");\r\n                    break;\r\n                case \"AP\":\r\n                case \"Primary\":\r\n                    filteredFormFields = addressFormData.formFields.filter(field => field.dataField !== \"isPreferredBilling\" && field.dataField !== \"isPreferredShipping\" && field.dataField !== \"isShippingAndBilling\");\r\n                    break;\r\n                default:\r\n                    filteredFormFields = addressFormData.formFields;\r\n            }\r\n\r\n            manageData.formFields = filteredFormFields;\r\n            manageData.initialState = {\r\n                ...(editMode ? formData.initialState : addressFormData.initialState),\r\n                addressTypeId: data.value,\r\n            };\r\n\r\n            setFormData(manageData);\r\n        }\r\n    };\r\n\r\n    const handleCheckboxChanges = (data, dataField) => {\r\n        setSelectedCheckbox(data)\r\n        setSelectedCheckboxFeild(dataField)\r\n        if (dataField === \"isShippingAndBilling\" && data) {\r\n            const manageData = { ...formData };\r\n            let filteredFormFields;\r\n            filteredFormFields = addressFormData.formFields\r\n            manageData.formFields = filteredFormFields;\r\n            setFormData(manageData)\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let data = { ...formData }\r\n        if (selectedCheckboxFeild === \"isShippingAndBilling\" && selectedCheckbox === false && data.initialState.addressTypeId === 1) {\r\n            let updatedFormData;\r\n            updatedFormData = removeFormFields(formData, ['isPreferredShipping']);\r\n            setFormData(updatedFormData)\r\n        } else if (selectedCheckboxFeild === \"isShippingAndBilling\" && selectedCheckbox === false && data.initialState.addressTypeId === 2) {\r\n            let updatedFormData;\r\n            updatedFormData = removeFormFields(formData, ['isPreferredBilling']);\r\n            setFormData(updatedFormData)\r\n        }\r\n    }, [selectedCheckbox, selectedCheckboxFeild])\r\n\r\n    //** Use Imperative Handle */\r\n    useImperativeHandle(editRef, () => ({\r\n        callChildEditFunction: handleEdit\r\n    }));\r\n\r\n    const handleDropdownAction = (data, dataField) => {\r\n        if (dataField === 'stateId') {\r\n            setFieldSetting(formData, 'cityId', FieldSettingType.ISTEXT, data);\r\n            ref.current.updateFormFieldValue({ cityId: null });\r\n        } else if (dataField === 'cityId') {\r\n            if (!data) {\r\n                setFieldSetting(formData, 'stateId', FieldSettingType.ISTEXT, data);\r\n                ref.current.updateFormFieldValue({ cityId: null });\r\n            }\r\n        }\r\n    }\r\n\r\n    //** Action Handler */\r\n    const formActionHandler = {\r\n        DDL_CHANGED: handleChangeDropdownList,\r\n        CHECK_CHANGE: handleCheckboxChanges,\r\n        DA_CHANGED: handleDropdownAction\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"row mt-2 add-address-form\">\r\n            <FormCreator config={formData} ref={ref} {...formData} onActionChange={formActionHandler} onDropdownAction={formActionHandler}\r\n                onCheckBoxChange={formActionHandler} key={shouldRerenderFormCreator} />\r\n            <div className=\"col-md-12 mt-2\">\r\n                <div className=\"d-flex align-item-end justify-content-end\">\r\n                    <Buttons\r\n                        buttonTypeClassName=\"theme-button\"\r\n                        buttonText={editMode ? \"Update\" : \"Save\"}\r\n                        onClick={handleAddEdit}\r\n                        isLoading={isAddLoading || isUpdateLoading}\r\n                        isDisable={isButtonDisable} />\r\n                    <Buttons\r\n                        buttonTypeClassName=\"dark-btn ml-5\"\r\n                        buttonText=\"Cancel\"\r\n                        onClick={onSidebarClose} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nAddEditAddress.propTypes = {\r\n    keyId: PropTypes.number.isRequired,\r\n    isSupplier: PropTypes.bool.isRequired,\r\n    updateAddress: PropTypes.func.isRequired,\r\n    addAddress: PropTypes.func.isRequired,\r\n    getAddresssById: PropTypes.func.isRequired,\r\n    isModelOpen: PropTypes.bool.isRequired,\r\n    editMode: PropTypes.bool.isRequired,\r\n    isButtonDisable: PropTypes.bool.isRequired,\r\n    onSidebarClose: PropTypes.func,\r\n    editRef: PropTypes.object,\r\n    orderCustomerId: PropTypes.number,\r\n    isOrderManage: PropTypes.bool,\r\n    getAddressTypeIdOrder: PropTypes.string,\r\n    onHandleOrderInfoRepeatCall: PropTypes.func,\r\n};\r\n\r\nexport default AddEditAddress;","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const contactDetailFormData = {\r\n  name: \"Email From\",\r\n  initialState: {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    contactTypeId: \"\",\r\n    isPrimary: false\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"firstName\",\r\n      lable: \"First Name \",\r\n      Field_Name: \"First Name\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"firstName\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter First Name\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n      },\r\n      validation: [{ type: \"require\" } , { type: \"onlyText\"}],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"lastName\",\r\n      lable: \"Last Name \",\r\n      Field_Name: \"Last Name\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"lastName\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Last Name\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n      },\r\n      validation: [{ type: \"require\" } , { type: \"onlyText\"}],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"contactTypeId\",\r\n      lable: \"Contact Type \",\r\n      Field_Name: \"Contact Type\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"contactTypeId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Contact Type\",\r\n        isMultiSelect: true,\r\n       // isDisabled: false,\r\n        isEnableOnChange: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-8 col-xl-8 col-md-12 col-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"isPrimary\",\r\n      lable: \"Is Primary\",\r\n      Field_Name: \"Is Primary\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isPrimary\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n        allowSpace: true,\r\n      },\r\n      style: {\r\n        containerCss:\r\n          \"col-xxl-4 col-xl-4 col-md-12 col-12 col-12 mb-input mt-3 margin-left0-checkbox margin-top-checkbox\",\r\n      },\r\n    },\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false\r\n  }\r\n};\r\n\r\nexport const ContactTypes = [\r\n  { value: 1, label: \"Primary\" },\r\n  { value: 2, label: \"EndUser\" },\r\n  { value: 3, label: \"Purchasing\" },\r\n  { value: 4, label: \"Invoice Submission\" },\r\n  { value: 5, label: \"Invoice Follow-up\" },\r\n  { value: 6, label: \"AP\" }\r\n];","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\n//** Lib's */\r\nimport Buttons from \"../../../../../components/ui/button/Buttons\";\r\nimport { FieldSettingType } from \"../../../../../utils/Enums/commonEnums\";\r\nimport FormCreator from \"../../../../../components/Forms/FormCreator\";\r\nimport { contactDetailFormData } from \"../config/ContactDetailForm.data\";\r\nimport DataLoader from \"../../../../../components/ui/dataLoader/DataLoader\";\r\nimport { getDropDownId, modifyEmailAddressData, modifyPhoneNumberData } from \"../../../../../utils/TransformData/TransformAPIData\";\r\nimport { setDropDownOptionField, setFieldSetting } from \"../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport { hasFunctionalPermission } from \"../../../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\nimport PropTypes from \"prop-types\";\r\n//** Service's */\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\nimport { ErrorMessage } from \"../../../../../data/appMessages\";\r\n//** Component's */\r\nconst EmailAddressGrid = React.lazy(() => import(\"../../EmailAddress/EmailAddressGrid\"));\r\nconst ContactNumbersGrid = React.lazy(() => import(\"../../ContactNumber/ContactNumbersGrid\"));\r\n\r\nconst AddEditContact = forwardRef(({ keyId, isUpdateContactModel, addEditContactMutation, onSidebarClose, onSuccess, childRef, editRef, SecurityKey, customerStatusId, allGetAllContactTypesData, isGetAllContactTypesSucess,\r\n    isEditablePage, isSupplier, isEdit, isOpen, getContactById, getContectTypeId, customerId, isOrderManage, onhandleApiCall, contryIdCode, orderResetValue,\r\n    getCompletionCount }) => {\r\n\r\n    //** State */\r\n    const ref = useRef();\r\n    const { formSetting } = contactDetailFormData;\r\n    const [contactId, setContactId] = useState(0);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [customerContactId, setCustomerContactId] = useState(0);\r\n    const [supplierContactId, setSupplierContactId] = useState(0);\r\n    const [isButtonDisable, setIsButtonDisable] = useState(false);\r\n    const [phoneNumberList, setPhoneNumberList] = useState([]);\r\n    const [, setShouldRerenderFormCreator] = useState(false);\r\n    const [emailAddressList, setEmailAddressList] = useState([]);\r\n    const [formData, setFormData] = useState(contactDetailFormData);\r\n\r\n    //** API Call's */\r\n    /**\r\n        * This hook dynamically sets the API call based on the module (customer or supplier).\r\n        * The API endpoint and parameters are configured within the SupplierContactDetail OR CustomerContactDetail component.\r\n    */\r\n    const [getById, { isFetching: isGetByIdFetching, isSuccess: isGetByIdSucess, data: isGetByIdData }] = getContactById();\r\n    const [addEdit, { isLoading: isAddEditLoading, isSuccess: isAddEditSuccess, data: isAddEditData }] = addEditContactMutation();\r\n\r\n    const handleAddEdit = async () => {\r\n        handlWithoutApprovalAddEdit();\r\n    }\r\n    useEffect(() => {\r\n        if (isUpdateContactModel && isGetAllContactTypesSucess) {\r\n            const filterCondition = (item) => {\r\n                let condition = isSupplier ? item.isForSuppliers : item.isForCustomers;\r\n                return condition;\r\n            };\r\n            setDropDownOptionField(allGetAllContactTypesData, \"contactTypeId\", \"type\", formData, \"contactTypeId\", filterCondition);\r\n            setShouldRerenderFormCreator((prevState) => !prevState);\r\n     \r\n        }\r\n    }, [ isGetAllContactTypesSucess,isUpdateContactModel])\r\n\r\n    const handlWithoutApprovalAddEdit = () => {\r\n        const data = ref.current.getFormData();\r\n        if (!data) return;\r\n        if (emailAddressList.length > 0) {\r\n            const contactTypeId = getDropDownId(data.contactTypeId, isEdit);\r\n            const request = requestData(data, contactTypeId, isSupplier, keyId, emailAddressList, phoneNumberList, supplierContactId, customerContactId);\r\n            let req = {\r\n                ...request,\r\n                customerId: customerId ? customerId : request.customerId\r\n            }\r\n            addEdit(req);\r\n        } else {\r\n            ToastService.warning(ErrorMessage.ContactEmailAddressRequired);\r\n        }\r\n    };\r\n\r\n    const requestData = (data, contactTypeId, isSupplier, keyId, emailAddressList, phoneNumberList, supplierContactId, customerContactId) => {\r\n        return {\r\n            ...data,\r\n            contactId: contactId,\r\n            contactTypeId: String(contactTypeId),\r\n            [isSupplier ? 'supplierId' : 'customerId']: keyId,\r\n            emailAddressList: emailAddressList.length > 0 ? modifyEmailAddressData(emailAddressList) : null,\r\n            phoneNumberList: phoneNumberList.length > 0 ? modifyPhoneNumberData(phoneNumberList) : null,\r\n            [isSupplier ? 'supplierContactId' : 'customerContactId']: isSupplier ? supplierContactId : customerContactId,\r\n        };\r\n    };\r\n\r\n    //** UseEffect */\r\n    useEffect(() => {\r\n        if (isAddEditSuccess && isAddEditData) {\r\n            if (isAddEditData.errorMessage.includes('EXISTS')) {\r\n\r\n                ToastService.warning(isAddEditData.errorMessage);\r\n                return;\r\n            }\r\n            if (onSuccess) {\r\n                onSuccess();\r\n                ToastService.success(isAddEditData.errorMessage);\r\n                setContactId(isAddEditData?.keyValue);\r\n                if (isOrderManage) {\r\n                    onhandleApiCall(getContectTypeId)\r\n                }\r\n            }\r\n            getCompletionCount && getCompletionCount();\r\n        }\r\n    }, [isAddEditSuccess, isAddEditData]);\r\n\r\n    useEffect(() => {\r\n        if (!isGetByIdFetching && isGetByIdSucess && isGetByIdData) {\r\n            let data = isGetByIdData;\r\n            let form = { ...contactDetailFormData };\r\n            form.initialState = {\r\n                firstName: data.firstName,\r\n                lastName: data.lastName,\r\n                contactTypeId: data.contactTypeId,\r\n                isPrimary: data.isPrimary\r\n            }\r\n            setFormData(form);\r\n            setContactId(data.contactId);\r\n            isSupplier ? setSupplierContactId(data?.supplierContactId) : setCustomerContactId(data?.customerContactId);\r\n            setFieldSetting(form, 'contactTypeId', FieldSettingType.MULTISELECT);\r\n            const sortedPhoneList = [...isGetByIdData.phoneNumberList].sort((a, b) => a.phoneId - b.phoneId);\r\n            const modifyPhoneNumberList = sortedPhoneList.map((item, index) => ({\r\n                ...item,\r\n                id: index + 1,\r\n                extension: item.extension === 0 ? '-' : item.extension\r\n            }));\r\n\r\n            const sortedEmailList = [...isGetByIdData.emailAddressList].sort((a, b) => b.emailId - a.emailId);\r\n            const modifyEmailAddressLst = sortedEmailList.map((item, index) => ({\r\n                ...item,\r\n                id: index + 1\r\n            }));\r\n            setPhoneNumberList(modifyPhoneNumberList);\r\n            setEmailAddressList(modifyEmailAddressLst);\r\n        }\r\n    }, [isGetByIdFetching, isGetByIdSucess]);\r\n\r\n    //** Use Imperative Handle  */\r\n    useImperativeHandle(editRef, () => ({\r\n        callEditFunction: handleEditMode,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (isEditablePage && SecurityKey) {\r\n            const hasEditPermission = hasFunctionalPermission(SecurityKey.EDIT);\r\n            const hasAddPermission = hasFunctionalPermission(SecurityKey.ADD);\r\n            if (hasEditPermission && formSetting) {\r\n                if (editMode) {\r\n                    if (hasEditPermission.isViewOnly === true) {\r\n                        formSetting.isViewOnly = true;\r\n                        setIsButtonDisable(true);\r\n                    }\r\n                    else {\r\n                        formSetting.isViewOnly = false;\r\n                        setIsButtonDisable(false);\r\n                    }\r\n                }\r\n                else if (!editMode) {\r\n                    if (hasAddPermission.hasAccess === true) {\r\n                        formSetting.isViewOnly = false;\r\n                        setIsButtonDisable(false);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [editMode, editRef, SecurityKey]);\r\n\r\n    const handleEditMode = (contactId) => {\r\n        setEditMode(true);\r\n        contactId && getById(contactId);\r\n        // setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.DISABLED, true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isEdit && !isOrderManage) {\r\n            if (isSupplier) {\r\n                setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.MULTISELECT, false);\r\n            } else {\r\n                setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.MULTISELECT, true);\r\n            }\r\n            let form = { ...contactDetailFormData };\r\n\r\n            setFormData(form);\r\n            if (isOpen) {\r\n                setContactId(0);\r\n                setEditMode(false);\r\n                setPhoneNumberList([]);\r\n                setEmailAddressList([])\r\n            }\r\n        }\r\n        if (isOrderManage) {\r\n            setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.DISABLED, true);\r\n            setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.MULTISELECT, false);\r\n            let form = { ...contactDetailFormData };\r\n            form.initialState = {\r\n                ...form.initialState,\r\n                contactTypeId: getContectTypeId,\r\n            }\r\n            setFormData(form);\r\n            // setShouldRerenderFormCreator((prevState) => !prevState);\r\n        }\r\n    }, [isOpen])\r\n\r\n    //** Reset Data */\r\n    const onResetData = () => {\r\n        setFieldSetting(contactDetailFormData, 'contactTypeId', FieldSettingType.DISABLED, false);\r\n        let form = { ...contactDetailFormData };\r\n        form.initialState = { ...contactDetailFormData.initialState };\r\n        setFormData(form);\r\n        setCustomerContactId(0);\r\n        setSupplierContactId(0);\r\n    };\r\n\r\n    //** Use Imperative Handle  */\r\n    useImperativeHandle(childRef, () => ({\r\n        callChildFunction: onResetData,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (orderResetValue && isOrderManage) {\r\n            setPhoneNumberList([]);\r\n            setEmailAddressList([])\r\n        }\r\n    }, [orderResetValue])\r\n\r\n    return (\r\n        <div>\r\n            {!isGetByIdFetching ?\r\n                <React.Fragment>\r\n                    <div className=\"row mt-2 addEditContact-form\">\r\n                        <FormCreator config={formData} ref={ref} {...formData} />\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <EmailAddressGrid isButtonDisable={isButtonDisable} emailAddressList={emailAddressList}\r\n                            setEmailAddressList={setEmailAddressList} contactId={contactId} isOrderManage={isOrderManage} />\r\n                        <ContactNumbersGrid isButtonDisable={isButtonDisable} phoneNumberList={phoneNumberList}\r\n                            setPhoneNumberList={setPhoneNumberList} contactId={contactId} contryIdCode={contryIdCode} isOrderManage={isOrderManage} />\r\n                    </div>\r\n                </React.Fragment>\r\n                : <DataLoader />\r\n            }\r\n            <div className=\"col-md-12 mt-3\">\r\n                <div className=\"d-flex align-item-end justify-content-end\">\r\n                    <div className=\"d-flex align-item-end\">\r\n                        {/* {!enableDisableButton && */}\r\n                        <Buttons\r\n                            buttonTypeClassName=\"theme-button\"\r\n                            buttonText='Save'\r\n                            isLoading={isAddEditLoading}\r\n                            onClick={handleAddEdit}\r\n                            isDisable={isButtonDisable} />\r\n                        {/* } */}\r\n                        <Buttons\r\n                            buttonTypeClassName=\"dark-btn ml-5\"\r\n                            buttonText=\"Cancel\"\r\n                            onClick={onSidebarClose} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nAddEditContact.propTypes = {\r\n    keyId: PropTypes.number,\r\n    addEditContactMutation: PropTypes.func.isRequired,\r\n    onSidebarClose: PropTypes.func,\r\n    onSuccess: PropTypes.func,\r\n    childRef: PropTypes.shape({\r\n        current: PropTypes.object\r\n    }),\r\n    editRef: PropTypes.shape({\r\n        current: PropTypes.object\r\n    }),\r\n    SecurityKey: PropTypes.shape({\r\n        EDIT: PropTypes.string,\r\n        ADD: PropTypes.string\r\n    }),\r\n    isEditablePage: PropTypes.bool,\r\n    isSupplier: PropTypes.bool,\r\n    isEdit: PropTypes.bool,\r\n    isOpen: PropTypes.bool,\r\n    getContactById: PropTypes.func.isRequired,\r\n    getContectTypeId: PropTypes.string,\r\n    customerId: PropTypes.number,\r\n    isOrderManage: PropTypes.bool,\r\n    onhandleApiCall: PropTypes.func\r\n};\r\n\r\nexport default AddEditContact;\r\n","import { AppIcons } from \"../../../../../data/appIcons\";\r\nimport { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\nimport { GridColumnType } from \"../../../../../data/gridColumnType\";\r\n\r\nexport const DocumentFormData = {\r\n  name: \"Document Form\",\r\n  initialState: {\r\n    name: \"\",\r\n    documentTypeId: \"\",\r\n    supplierId: \"\",\r\n    customerId: \"\",\r\n    attachment: \"\",\r\n    base64File: \"\",\r\n    storagePath: \"\"\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"documentTypeId\",\r\n      lable: \"Document Type \",\r\n      Field_Name: \"Document Type\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      fieldType: FormFieldTypes.EDITABLEDROPDOWN,\r\n      dataField: \"documentTypeId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Document Type\",\r\n        isEnableOnChange: true,\r\n        options: []\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"name\",\r\n      lable: \"Document Name \",\r\n      Field_Name: \"Document Name\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"name\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Document Name\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n        isDisable: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"attachment\",\r\n      lable: \"Attachment \",\r\n      Field_Name: \"Attachment\",\r\n      fieldType: FormFieldTypes.FILE,\r\n      dataField: \"attachment\",\r\n      fieldSetting: {\r\n        placeholder: \"Upload Attachment\",\r\n        allowSpace: true,\r\n        isButtonVisible: false,\r\n        isCustomButtonVisible: true,\r\n        acceptedFiles: '.pdf , .docx ',\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 col-12 mb-input mb-0 custom-file-upload-section\",\r\n      },\r\n\r\n    },\r\n\r\n  ],\r\n};\r\n\r\n\r\n\r\nexport const DocumentGridConfig = {\r\n  columns: [\r\n    {\r\n      name: \"Document Type\",\r\n      fieldName: \"documentType\",\r\n      // allowShort: true,\r\n    },\r\n    {\r\n      name: \"Document Name\",\r\n      fieldName: \"documentName\",\r\n      // allowShort: true,\r\n    },\r\n\r\n    {\r\n      name: \"Action\",\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n        allowDelete: true,\r\n      },\r\n\r\n    },\r\n  ],\r\n};\r\n\r\n\r\nexport const DocumentTypes = [\r\n  { value: 1, label: \"Tax or Registration document\" },\r\n  { value: 2, label: \"Customer details form\" },\r\n  { value: 3, label: \"Our submitted forms\" }\r\n];\r\n\r\nexport const FileTypeIcons = [\r\n  {\r\n    type: 'pdf',\r\n    icon: AppIcons.PdfIcon\r\n  },\r\n  {\r\n    type: 'doc',\r\n    icon: AppIcons.DocIcon\r\n  },\r\n  {\r\n    type: 'docx',\r\n    icon: AppIcons.DocIcon\r\n  },\r\n  {\r\n    type: 'xlsx',\r\n    icon: AppIcons.XlsIcon\r\n  },\r\n  {\r\n    type: 'xls',\r\n    icon: AppIcons.XlsIcon\r\n  },\r\n  {\r\n    type: 'ppt',\r\n    icon: AppIcons.PptIcon\r\n  },\r\n  {\r\n    type: 'zip',\r\n    icon: AppIcons.ZipIcon\r\n  },\r\n  {\r\n    type: 'csv',\r\n    icon: AppIcons.CsvIcon\r\n  }\r\n]\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Checkbox from \"../../../../../../components/ui/inputs/checkBox/CheckBox\";\r\nimport Buttons from \"../../../../../../components/ui/button/Buttons\";\r\nimport { useLazyGetAddresssByCustomerIdQuery } from \"../../../../../../app/services/addressAPI\";\r\nimport { useUpdateOrderAddressMutation } from \"../../../../../../app/services/orderAPI\";\r\nimport SwalAlert from \"../../../../../../services/swalService/SwalService\";\r\nimport { toast } from \"react-toastify\";\r\nimport ToastService from \"../../../../../../services/toastService/ToastService\";\r\n\r\nconst OrderInfoAddressModel = ({\r\n  handleAddClick,\r\n  onUpdate,\r\n  onSidebarCloseUpdateAddress,\r\n  addressContactType,\r\n  onSidebarCloseShippingAddress,\r\n  handleRefreshOrderDetails,\r\n  customerId,\r\n  orderDetails,\r\n  onGetData,\r\n  defaultId,\r\n  orderItemId\r\n}) => {\r\n  const [dataList, setDataList] = useState([]);\r\n  const { confirm } = SwalAlert();\r\n  const [selectedAddressId, setSelectedAddressId] = useState(null);\r\n  const [isButtonDisable, setIsButtonDisable] = useState(false);\r\n  const [\r\n    getAddresssByCustomerId,\r\n    {\r\n      isFetching: isGetAddresssByCustomerIdFetching,\r\n      isSuccess: isGetAddresssByCustomerId,\r\n      data: GetAddresssByCustomerIdData,\r\n    },\r\n  ] = useLazyGetAddresssByCustomerIdQuery();\r\n  const [\r\n    updateOrderAddress,\r\n    {\r\n      isLoading: isUpdateOrderAddressLoading,\r\n      isSuccess: isUpdateOrderAddressSuccess,\r\n      data: isUpdateOrderAddressData,\r\n    },\r\n  ] = useUpdateOrderAddressMutation();\r\n\r\nuseEffect(()=>{\r\n  if(defaultId===selectedAddressId){\r\n    setIsButtonDisable(true);\r\n  }\r\n  else{\r\n    setIsButtonDisable(false);\r\n  }\r\n},[selectedAddressId])\r\n\r\n  useEffect(() => {\r\n    if (isUpdateOrderAddressSuccess && isUpdateOrderAddressData) {\r\n      ToastService.success(isUpdateOrderAddressData.errorMessage);\r\n      onSidebarCloseShippingAddress();\r\n      handleRefreshOrderDetails();\r\n    }\r\n  }, [isUpdateOrderAddressSuccess, isUpdateOrderAddressData]);\r\n\r\n  useEffect(() => {\r\n    if (customerId) {\r\n      getAddresssByCustomerId(customerId);\r\n    }\r\n  }, [customerId, addressContactType, onSidebarCloseUpdateAddress]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isGetAddresssByCustomerIdFetching &&\r\n      isGetAddresssByCustomerId &&\r\n      GetAddresssByCustomerIdData\r\n    ) {\r\n      if (\r\n        addressContactType === \"Shipping\" ||\r\n        addressContactType === \"Billing\"\r\n      ) {\r\n        const filteredData = addressContactType\r\n          ? GetAddresssByCustomerIdData.filter(\r\n            (address) => address.type === addressContactType\r\n          )\r\n          : GetAddresssByCustomerIdData;\r\n        setDataList(filteredData);\r\n      }\r\n    }\r\n  }, [\r\n    isGetAddresssByCustomerIdFetching,\r\n    isGetAddresssByCustomerId,\r\n    GetAddresssByCustomerIdData,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if(defaultId){\r\n    setSelectedAddressId(defaultId);\r\n    onGetData(defaultId);\r\n    }\r\n  }, [defaultId]);\r\n\r\n  const handleCheckboxChange = (id) => {\r\n    if (selectedAddressId === id) {\r\n      setSelectedAddressId(null);\r\n      if (onGetData) {\r\n        onGetData(null);\r\n      }\r\n    } else {\r\n      setSelectedAddressId(id);\r\n      if (onGetData) {\r\n        onGetData(id);\r\n      }\r\n    }\r\n  };\r\n  const handlevalidate = () => {\r\n    if (!selectedAddressId) {\r\n      toast.error(\"Please select an Address .\");\r\n      return;\r\n    }\r\n  };\r\n  // const handleEditAddress = () => {\r\n  //   if (selectedAddressId) {\r\n  //     onUpdate();\r\n  //   } else {\r\n  //     handlevalidate();\r\n  //   }\r\n  // };\r\n\r\n\r\n  const handleChangeAddress = () => {\r\n    if (selectedAddressId) {\r\n      confirm(\r\n        \"Change?\",\r\n        \"Are you sure you want to Change Address?\",\r\n        \"Change\",\r\n        \"Cancel\"\r\n      ).then((confirmed) => {\r\n        if (confirmed) {\r\n                    const req = {\r\n            orderAddressId: orderDetails.orderAddressId,\r\n            orderId: orderDetails.orderId,\r\n            billingAddressId: addressContactType === \"Billing\" ? selectedAddressId : 0,\r\n            shippingAddressId: addressContactType === \"Shipping\" ? selectedAddressId : 0,\r\n            orderItemId: orderItemId ? orderItemId : 0\r\n          };\r\n          updateOrderAddress(req);\r\n        }\r\n      });\r\n    } else {\r\n      handlevalidate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-list-section\">\r\n      <div className=\"row\">\r\n        {dataList.map((address) => (\r\n          <div\r\n            className=\"col-xxl-4 col-xl-4 col-lg-4 col-md-6 col-12 mb-3\"\r\n            key={address.id}\r\n          >\r\n            <div\r\n              className={`address-card-main ${selectedAddressId === address.addressId ? \"active-card\" : \"\"\r\n                }`}\r\n            >\r\n              <div className=\"add-desc\">\r\n                <div className=\"add-line-part first-add-sec\">\r\n                  <span className=\"add-info\">{address.addressLine1}</span>\r\n                  <span className=\"checkbox-part\">\r\n                    <Checkbox\r\n                      name={`addressId_${address.addressId}`}\r\n                      checked={selectedAddressId ? selectedAddressId === address.addressId : selectedAddressId}\r\n                      onChange={() => handleCheckboxChange(address.addressId)}\r\n                    />\r\n                  </span>\r\n                </div>\r\n                <div className=\"add-line-part\">{address.addressLine2}</div>\r\n                <div className=\"add-line-part\">{address.addressLine3}</div>\r\n\r\n                <span className=\"add-line-part\"> {address?.cityName},{\" \"}\r\n                  {address.stateCode\r\n                    ? address.stateCode\r\n                    : address.stateName}{\" \"}\r\n                  {address?.zipCode}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"d-flex align-item-end justify-content-end mt-3\">\r\n        <Buttons\r\n          buttonTypeClassName=\"theme-button\"\r\n          buttonText=\"Change Address\"\r\n          isLoading={isUpdateOrderAddressLoading}\r\n          onClick={handleChangeAddress}\r\n          isDisable={isButtonDisable}\r\n        />\r\n        {/* <Buttons\r\n          buttonTypeClassName=\"theme-button ml-3\"\r\n          buttonText=\"Edit Address\"\r\n          onClick={ handleEditAddress}\r\n        /> */}\r\n        <Buttons\r\n          buttonTypeClassName=\"theme-button ml-3\"\r\n          buttonText=\"Add Address\"\r\n          onClick={handleAddClick}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrderInfoAddressModel;\r\n","import React from \"react\";\r\nimport Iconify from \"../../../../../../components/ui/iconify/Iconify\";\r\n\r\nconst UserDetailsModel = ({contact}) => {\r\n\r\n  const getInitials = (firstName, lastName) => {\r\n    return (\r\n      (firstName?.[0] || \"\").toUpperCase() + (lastName?.[0] || \"\").toUpperCase()\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"customer-popup-sec\">\r\n        <div className=\"popup-body-sec\">\r\n          <div className=\"name-icon-status\">\r\n            <div className=\"icon-sec\">{getInitials(contact?.firstName, contact?.lastName)}</div>\r\n            <div className=\"name-status\">\r\n              <div className=\"name-sec\">{contact?.firstName} {contact?.lastName}</div>\r\n              {/* <div className=\"status-sec pending\">Pending</div> */}\r\n            </div>\r\n          </div>\r\n          <div className=\"desc-sec-bottom user-desc\">\r\n            {/* Email Start */}\r\n            <div className=\"icon-detail\">\r\n             \r\n              <span className=\"icon-part\">\r\n                <Iconify icon=\"ic:round-email\" /> \r\n              </span>\r\n              <span className=\"info-part email-list\">\r\n                <div class=\"values\">{\r\n                    contact?.emailAddressList?.find((email) => !email.isPrimary)\r\n                      ?.emailAddress\r\n                  }</div>\r\n                <div class=\"values primary-email\"> {\r\n                    contact?.emailAddressList?.find((email) => email.isPrimary)\r\n                      ?.emailAddress\r\n                  }</div>\r\n                {/* <span class=\"primary-email\"></span> */}\r\n              </span>\r\n            </div>\r\n            {/* Email End */}\r\n            {/* Phone Start */}\r\n            <div className=\"icon-detail\">\r\n              <span className=\"icon-part contact-icon\">\r\n                <Iconify icon=\"ic:round-phone\" />\r\n              </span>\r\n              <span className=\"info-part contact-info\">\r\n                <div class=\"values\">   {contact?.phoneNumberList?.find((number) => number.isPrimary)\r\n                    ? `${contact?.phoneNumberList.find(\r\n                      (number) => !number.isPrimary\r\n                    )?.phoneCode || ''\r\n                    } ${contact?.phoneNumberList.find(\r\n                      (number) => !number.isPrimary\r\n                    )?.phoneNumber || ''\r\n                    }`\r\n                    : null}</div>\r\n                <div class=\"values primary-email\">   {contact?.phoneNumberList?.find((number) => number.isPrimary)\r\n                    ? `${contact?.phoneNumberList.find(\r\n                      (number) => number.isPrimary\r\n                    )?.phoneCode || ''\r\n                    } ${contact?.phoneNumberList.find(\r\n                      (number) => number.isPrimary\r\n                    )?.phoneNumber || ''\r\n                    }`\r\n                    : null}</div>\r\n                {/* <span class=\"primary-email\"></span> */}\r\n              </span>\r\n            </div>\r\n            {/* Phone End */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserDetailsModel;\r\n","import React from \"react\";\r\nimport Iconify from \"../../../../../../components/ui/iconify/Iconify\";\r\nimport UserDetailsModel from \"./UserDetailsModel\";\r\n\r\nconst UserCardDetail = ({ contact, handleToggleModalUsers }) => {\r\n  return (\r\n    <>\r\n      <div className=\"contact-card\">\r\n        <div className=\"profile-name-btn\">\r\n          <div className=\"right-info\">\r\n            <div className=\"right-name-btn\">\r\n              <div className=\"user-name text-ellipsis\">\r\n                {contact?.firstName} {contact?.lastName}\r\n              </div>\r\n              <div className=\"btn-sec\">\r\n                <div\r\n                  className=\"select-icon tooltip-div\"\r\n                  onClick={handleToggleModalUsers}\r\n                >\r\n                  <Iconify\r\n                    icon=\"icon-park-outline:change\"\r\n                    className=\"swap-icon\"\r\n                  />\r\n                  <div className=\"tooltip-show\">\r\n                    <p>Change Customer</p>\r\n                  </div>\r\n                  <div className=\"tooltip-arrow-icon\"></div>\r\n                </div>\r\n                <div className=\"info-display info-user user-card\">\r\n                  <Iconify icon=\"ep:info-filled\" className=\"info\" />\r\n                  <UserDetailsModel contact={contact} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"user-details\">\r\n              <div className=\"email\">\r\n                <Iconify icon=\"ic:round-email\" />\r\n                <span>\r\n                  {\r\n                    contact?.emailAddressList?.find((email) => email.isPrimary)\r\n                      ?.emailAddress\r\n                  }\r\n                </span>\r\n              </div>\r\n              <div className=\"number\">\r\n                <Iconify icon=\"mingcute:phone-fill\" />\r\n                <span>\r\n                  {/* {contact?.phoneNumberList?.find((number) => number.isPrimary)?.phoneNumber} */}\r\n                  {contact?.phoneNumberList?.find((number) => number.isPrimary)\r\n                    ? `${\r\n                        contact?.phoneNumberList.find(\r\n                          (number) => number.isPrimary\r\n                        )?.phoneCode\r\n                      } ${\r\n                        contact?.phoneNumberList.find(\r\n                          (number) => number.isPrimary\r\n                        )?.phoneNumber\r\n                      }`\r\n                    : \"\"}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserCardDetail;\r\n","import React from \"react\";\r\nimport Iconify from \"../../../../../../components/ui/iconify/Iconify\";\r\nimport Checkbox from \"../../../../../../components/ui/inputs/checkBox/CheckBox\";\r\nimport UserDetailsModel from \"./UserDetailsModel\";\r\n\r\n\r\nconst UserCardList = ({contact,handleCheckboxChange,selectedContactId}) => {\r\n  const getInitials = (firstName, lastName) => {\r\n    return (\r\n      (firstName?.[0] || \"\").toUpperCase() + (lastName?.[0] || \"\").toUpperCase()\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"contact-card card-list-popup\">\r\n        <div className=\"profile-name-btn\">\r\n          <div className=\"profile-icon-sec\">{getInitials(contact?.firstName, contact?.lastName)}</div>\r\n          <div className=\"right-info\">\r\n            <div className=\"right-name-btn\">\r\n              <div className=\"user-name text-ellipsis\">{`${contact.firstName} ${contact.lastName}`}</div>\r\n              <div className=\"btn-sec\">\r\n                <div className=\"info-display info-user user-card\">\r\n                  <Iconify icon=\"ep:info-filled\" className=\"info\" />\r\n                  <UserDetailsModel contact={contact} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"user-details\">\r\n              <div className=\"email\">\r\n                <Iconify icon=\"ic:round-email\" /> \r\n                <span> {\r\n                  contact?.emailAddressList?.find((email) => email.isPrimary)\r\n                    ?.emailAddress\r\n                }</span>\r\n              \r\n              </div>\r\n              <div className=\"number\">\r\n                <Iconify icon=\"mingcute:phone-fill\" />\r\n                \r\n                <span> {contact?.phoneNumberList?.find((number) => number.isPrimary)\r\n                  ? `${contact?.phoneNumberList.find(\r\n                    (number) => number.isPrimary\r\n                  )?.phoneCode\r\n                  } ${contact?.phoneNumberList.find(\r\n                    (number) => number.isPrimary\r\n                  )?.phoneNumber\r\n                  }`\r\n                  : \"\"}</span>\r\n            \r\n              </div>\r\n            </div>\r\n            <span className=\"checkbox-sec\">\r\n              <Checkbox name={`addressId_${contact.contactId}`}\r\n               checked={selectedContactId ? selectedContactId === contact.contactId :selectedContactId} \r\n               onChange={() => handleCheckboxChange(contact.contactId)} />\r\n\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserCardList;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport UserCardList from \"./UserCardList\";\r\nimport SwalAlert from \"../../../../../../services/swalService/SwalService\";\r\nimport { useLazyGetContactByCustomerIdQuery, useUpdateOrderContactMutation } from \"../../../../../../app/services/orderAPI\";\r\nimport { toast } from \"react-toastify\";\r\nimport Buttons from \"../../../../../../components/ui/button/Buttons\";\r\nimport ToastService from \"../../../../../../services/toastService/ToastService\";\r\n\r\nconst UsercardModel = ({onGetContactId,handleAddContact,handleRefreshOrderDetails,orderContactId,onSidebarCloseUserModel,onSidebarCloseUpdateContact,  defaultId, onUpdate,selectedContactId,setSelectedContactId, contactTypeId, addressContactType,customerId,orderDetails,}) => {\r\n  const [dataList, setDataList] = useState([]);\r\n  const { confirm } = SwalAlert();\r\n  const [isButtonDisable, setIsButtonDisable] = useState(false);\r\nconst [ getContactByCustomerId, {   isFetching: isGetContactByCustomerIdFetching,isSuccess: isGetContactByCustomerIdSuccess, data: isGetContactByCustomerIdItem },] = useLazyGetContactByCustomerIdQuery();\r\n  const [\r\n    updateOrderContact,\r\n    {\r\n      isLoading: isUpdateOrderContactLoading,\r\n      isSuccess: isUpdateOrderContactSuccess,\r\n      data: isUpdateOrderContactData,\r\n    },\r\n  ] = useUpdateOrderContactMutation();\r\n\r\n  useEffect(() => {\r\n    if (isUpdateOrderContactSuccess && isUpdateOrderContactData) {\r\n      ToastService.success(isUpdateOrderContactData.errorMessage);   \r\n      onSidebarCloseUserModel();\r\n      handleRefreshOrderDetails();\r\n    }\r\n  }, [isUpdateOrderContactSuccess, isUpdateOrderContactData]);\r\n\r\n  useEffect(()=>{\r\n    if(defaultId===selectedContactId){\r\n      setIsButtonDisable(true);\r\n    }\r\n    else{\r\n      setIsButtonDisable(false);\r\n    }\r\n  },[selectedContactId])\r\n  \r\n  const handleChangeContact = () => {\r\n    if (selectedContactId) {\r\n      confirm(\r\n        \"Change?\",\r\n        \"Are you sure you want to Change Contact?\",\r\n        \"Change\",\r\n        \"Cancel\"\r\n      ).then((confirmed) => {\r\n        if (confirmed) {\r\n          const req = {\r\n            orderContactId: orderContactId,\r\n            orderId: orderDetails.orderId,\r\n            contactId: selectedContactId,\r\n            contactTypeId:contactTypeId,\r\n          };\r\n          updateOrderContact(req);\r\n        }\r\n      });\r\n    } else {\r\n      handlevalidate();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n  \r\n     if (addressContactType) {\r\n      const req={\r\n        customerId:customerId,\r\n        searchText: \"\", \r\n        searchContactType:contactTypeId,\r\n      }\r\n      getContactByCustomerId(req);\r\n     }\r\n  }, [addressContactType,onSidebarCloseUpdateContact]);\r\n\r\n  useEffect(()=>{\r\n    setSelectedContactId(defaultId)\r\n  },[defaultId]);\r\n\r\n  useEffect(() => {\r\n    if (!isGetContactByCustomerIdFetching && isGetContactByCustomerIdSuccess && isGetContactByCustomerIdItem) {\r\n     \r\n      if (addressContactType === \"Invoice Submission\" || addressContactType === \"Purchasing\" ||  addressContactType === \"EndUser\") {\r\n        const filteredData = addressContactType\r\n          ? isGetContactByCustomerIdItem.filter((contact) => contact.type === addressContactType)\r\n          : isGetContactByCustomerIdItem;\r\n        setDataList(filteredData);\r\n            \r\n      }\r\n     \r\n    }\r\n  }, [isGetContactByCustomerIdFetching, isGetContactByCustomerIdSuccess, isGetContactByCustomerIdItem]);\r\n\r\n  const handlevalidate = () => {\r\n    if (!selectedContactId) {\r\n      toast.error(\"Please select an Address .\");\r\n      return;\r\n    }\r\n  };\r\n  // const handleEditContact = () => {\r\n  //   if (selectedContactId) {\r\n  //     onUpdate();\r\n  //   } else {\r\n  //     handlevalidate();\r\n  //   }\r\n  // };\r\n  const handleCheckboxChange = (id) => {\r\n    if (selectedContactId === id) {\r\n      setSelectedContactId(null);\r\n      if (onGetContactId) {\r\n        onGetContactId(null);\r\n      }\r\n    } else {\r\n      setSelectedContactId(id);\r\n      if (onGetContactId) {\r\n        onGetContactId(id);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row mt-3\">\r\n        {dataList.map((contact)=>(\r\n        <div className=\"col-xxl-4 col-xl-4 col-lg-4 col-md-6 col-12 mb-3\" key={contact.contactId}>\r\n          <UserCardList contact={contact} \r\n          onGetContactId={onGetContactId} \r\n          handleCheckboxChange={handleCheckboxChange} \r\n          selectedContactId={selectedContactId} \r\n          setSelectedContactId={setSelectedContactId}\r\n           />\r\n        </div>\r\n        ))}\r\n      <div className=\"d-flex align-item-end justify-content-end mt-3\">\r\n        <Buttons\r\n          buttonTypeClassName=\"theme-button\"\r\n          buttonText=\"Change Contact\"\r\n          isLoading={isUpdateOrderContactLoading}\r\n          onClick={handleChangeContact}\r\n          isDisable={isButtonDisable}\r\n        />\r\n        {/* <Buttons\r\n          buttonTypeClassName=\"theme-button ml-3\"\r\n          buttonText=\"Edit Contact\"\r\n          onClick={handleEditContact}\r\n        /> */}\r\n        <Buttons\r\n          buttonTypeClassName=\"theme-button ml-3\"\r\n          buttonText=\"Add Contact\"\r\n          onClick={handleAddContact}\r\n        />\r\n      </div>\r\n        \r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UsercardModel;\r\n","import React, { useEffect, useState, useImperativeHandle } from \"react\";\r\nimport CardSection from \"../../../../../components/ui/card/CardSection\";\r\nimport Iconify from \"../../../../../components/ui/iconify/Iconify\";\r\nimport { AppIcons } from \"../../../../../data/appIcons\";\r\nimport SidebarModel from \"../../../../../components/ui/sidebarModel/SidebarModel\";\r\nimport OrderInfoAddressModel from \"./feature/OrderInfoAddressModel\";\r\nimport UserCardDetail from \"./feature/UserCardDetail\";\r\nimport UsercardModel from \"./feature/UsercardModel\";\r\nimport DataLoader from \"../../../../../components/ui/dataLoader/DataLoader\";\r\nimport {\r\n  useAddAddressMutation,\r\n  useLazyGetCustomerAddresssByAddressIdQuery,\r\n  useUpdateAddAddressMutation,\r\n} from \"../../../../../app/services/addressAPI\";\r\nimport AddEditAddress from \"../../../../../common/features/component/Address/feature/AddEditAddress\";\r\nimport {\r\n  useAddEditContactMutation,\r\n  useLazyGetAllContactTypesQuery,\r\n  useLazyGetCustomerContactByContactIdQuery,\r\n} from \"../../../../../app/services/contactAPI\";\r\nimport AddEditContact from \"../../../../../common/features/component/Contact/feature/AddEditContact\";\r\n\r\nconst OrderInformation = ({\r\n  orderDetails,\r\n  orderItemShippingAddRef,\r\n  handleRefreshOrderDetails,\r\n}) => {\r\n  const [orderInfo, setOrderInfo] = useState(null);\r\n  const [orderAddressDetails, setOrderAddressDetails] = useState(null);\r\n  const [orderContactDetails, setOrderContactDetails] = useState(null);\r\n  const [selectedAddressId, setSelectedAddressId] = useState(null);\r\n  const [contactTypeId, setContactTypeId] = useState(null);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [customerId, setCustomerId] = useState(null);\r\n  const [addressContactType, setAddressContactType] = useState(\"\");\r\n  const [isModelOpenShippingAddress, setIsModelOpenShippingAddress] =\r\n    useState(false);\r\n  const [isModelOpenUpdateAddress, setIsModelOpenUpdateAddress] =\r\n    useState(false);\r\n  const [isModelOpenModelUserModel, setIsModelOpenUserModel] = useState(false);\r\n  const [isUpdateContactModel, setIsUpdateContactModel] = useState(false);\r\n  const [selectedContactId, setSelectedContactId] = useState(null);\r\n  const [defaultId, setDefaultId] = useState(null);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [orderContactId, setOrderContactId] = useState(null);\r\n  const [orderItemId, setOrderItemId] = useState(0);\r\n\r\n  const [\r\n    getAllContactTypes,\r\n    { isSuccess: isGetAllContactTypesSucess, data: allGetAllContactTypesData },\r\n  ] = useLazyGetAllContactTypesQuery();\r\n\r\n  const onSidebarCloseShippingAddress = () => {\r\n    setIsModelOpenShippingAddress(false);\r\n    setAddressContactType(\"\");\r\n    setDefaultId(\"\");\r\n    setOrderItemId(0);\r\n  };\r\n\r\n  const handleToggleModalShippingAddress = (type, addressId, orderItemId) => {\r\n    setOrderItemId(orderItemId);\r\n    setIsModelOpenShippingAddress(true);\r\n    setAddressContactType(type);\r\n    setDefaultId(addressId);\r\n  };\r\n\r\n  useImperativeHandle(orderItemShippingAddRef, () => ({\r\n    handleToggleModalShippingAddress,\r\n  }));\r\n\r\n  const onSidebarCloseUpdateAddress = () => {\r\n    setIsModelOpenUpdateAddress(false);\r\n    setEditMode(false);\r\n    setIsModelOpenShippingAddress(true);\r\n    setOrderItemId(0);\r\n  };\r\n\r\n  // const handleUpdateAddress = () => {\r\n\r\n  //   setIsModelOpenShippingAddress(false);\r\n  //   setEditMode(true);\r\n  //   setIsModelOpenUpdateAddress(true);\r\n   \r\n  // };\r\n  const handleAddClick = () => {\r\n    setIsModelOpenShippingAddress(false);\r\n    setEditMode(false);\r\n    setIsModelOpenUpdateAddress(true);\r\n  };\r\n\r\n  const handleAddContact = () => {\r\n\r\n    setIsModelOpenUserModel(false);\r\n    setEditMode(false);\r\n    setIsUpdateContactModel(true);\r\n    getAllContactTypes();\r\n   \r\n    \r\n  }\r\n  const onSidebarCloseUserModel = () => {\r\n    setIsModelOpenUserModel(false);\r\n    setAddressContactType(\"\");\r\n    setDefaultId(\"\");\r\n  };\r\n  const handleToggleModalUserModel = (\r\n    typrId,\r\n    type,\r\n    contactId,\r\n    orderContactId\r\n  ) => {\r\n    setContactTypeId(typrId);\r\n    setIsModelOpenUserModel(true);\r\n    setAddressContactType(type);\r\n    setDefaultId(contactId);\r\n    setOrderContactId(orderContactId);\r\n  };\r\n\r\n  // const handleUpdateContact = () => {\r\n\r\n  //   getAllContactTypes();\r\n  //   setIsModelOpenUserModel(false);\r\n  //   setIsUpdateContactModel(true);\r\n  //   setIsEdit(true);\r\n  // }\r\n\r\n  const onSidebarCloseUpdateContact = () => {\r\n    setIsUpdateContactModel(false);\r\n    setIsEdit(false);\r\n    setIsModelOpenUserModel(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (orderDetails) {\r\n      setOrderInfo(orderDetails);\r\n      setCustomerId(orderDetails.customerId);\r\n\r\n      if (orderDetails.orderAddressInformation) {\r\n        const { billingAddress, shippingAddress } =\r\n          orderDetails.orderAddressInformation;\r\n        const addressArray = [billingAddress, shippingAddress];\r\n        setOrderAddressDetails(addressArray);\r\n      }\r\n      if (orderDetails.orderContactList) {\r\n        setOrderContactDetails(orderDetails.orderContactList);\r\n      }\r\n    }\r\n  }, [orderDetails]);\r\n\r\n  const onGetContactId = (id) => {\r\n    setSelectedContactId(id);\r\n  };\r\n\r\n  const onGetData = (id) => {\r\n    setSelectedAddressId(id);\r\n  };\r\n  const onSuccess = () => {\r\n    onSidebarCloseUpdateContact();\r\n  };\r\n\r\n  const getOrderMethodIcon = (orderMethod) => {\r\n    switch (orderMethod) {\r\n      case \"Online\":\r\n        return \"mdi:web\";\r\n      case \"Email\":\r\n        return \"lucide:mail\";\r\n      case \"Fax\":\r\n        return \"fluent:fax-20-regular\";\r\n      case \"Phone Call\":\r\n        return \"mi:call\";\r\n      default:\r\n        return \"svg-spinners:ring-resize\";\r\n    }\r\n  };\r\n\r\n  const formatClassName = (value) => {\r\n    return value ? value.toLowerCase().replace(/\\s+/g, \"-\") : \"\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"order-information-card\">\r\n      <CardSection\r\n        cardTitle=\"Order Information\"\r\n        headerContent={\r\n          <div className=\"d-flex order-method\">\r\n            <Iconify icon={getOrderMethodIcon(orderInfo?.orderMethod)} />\r\n            <div className=\"order-method-value\">{orderInfo?.orderMethod}</div>\r\n          </div>\r\n        }\r\n      >\r\n        {orderDetails ? (\r\n          <div className=\"order-info-list\">\r\n            <div className=\"row\">\r\n              {/* <div className=\"col-xxl-12 col-lg-12 col-md-12 col-12\">\r\n                <div className=\"order-title\">\r\n                  <span>Order Method &nbsp;:&nbsp;</span>\r\n                  <span className=\"desc\">{orderInfo?.orderMethod}</span>\r\n                </div>\r\n              </div> */}\r\n            </div>\r\n            {/* Address Details */}\r\n            <div className=\"row\">\r\n              {orderAddressDetails?.map((address) => (\r\n                <div\r\n                  className=\"col-xxl-6 col-lg-6 col-md-6 col-12 relative mt-1\"\r\n                  key={address.type}\r\n                >\r\n                  <div className={`order-title ${address.type}`}>\r\n                    <span>{address.type} Address</span>\r\n                  </div>\r\n                  <div className=\"address-card\">\r\n                    <div className=\"title-swap-btn\">\r\n                      <span>{address.addressLine1}</span>\r\n                      <span\r\n                        className=\"swap-btn tooltip-div\"\r\n                        onClick={() =>\r\n                          handleToggleModalShippingAddress(\r\n                            address.type,\r\n                            address.addressId\r\n                          )\r\n                        }\r\n                      >\r\n                        <Iconify\r\n                          icon=\"icon-park-outline:change\"\r\n                          className=\"swap-icon\"\r\n                        />\r\n                        <div className=\"tooltip-show\">\r\n                          <p>Change Address</p>\r\n                        </div>\r\n                        <div className=\"tooltip-arrow-icon\"></div>\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"desc-add-sec\">\r\n                      <span>{address?.addressLine2}</span>\r\n                      <span>\r\n                        {address?.cityName},{\" \"}\r\n                        {address.stateCode\r\n                          ? address.stateCode\r\n                          : address.stateName}{\" \"}\r\n                        {address?.zipCode}\r\n                      </span>\r\n                      <span>{address?.countryName}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Contact Details */}\r\n            <div className=\"row mt-2\">\r\n              {orderContactDetails?.map((contact, index) => (\r\n                <>\r\n                  <div\r\n                    className=\"col-xxl-4 col-lg-6 col-md-6 col-12 relative mt-2\"\r\n                    key={index}\r\n                  >\r\n                    <div\r\n                      className={`order-title ${formatClassName(\r\n                        contact?.contactType\r\n                      )}`}\r\n                    >\r\n                      <span>{contact?.contactType}</span>\r\n                    </div>\r\n                    {/* \r\n                <UserCardDetail\r\n                  contact={contact}\r\n                  index={index}\r\n                  handleToggleModalUsers={handleToggleModalShippingAddress}\r\n                /> */}\r\n                    <UserCardDetail\r\n                      contact={contact}\r\n                      index={index}\r\n                      handleToggleModalUsers={() =>\r\n                        handleToggleModalUserModel(\r\n                          contact?.contactTypeId,\r\n                          contact.contactType,\r\n                          contact.contactId,\r\n                          contact.orderContactId\r\n                        )\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <DataLoader />\r\n        )}\r\n      </CardSection>\r\n      <SidebarModel\r\n        modalTitle={`Change ${addressContactType} Address`}\r\n        contentClass=\"content-50\"\r\n        onClose={onSidebarCloseShippingAddress}\r\n        modalTitleIcon={AppIcons.AddIcon}\r\n        isOpen={isModelOpenShippingAddress}\r\n      >\r\n        <OrderInfoAddressModel\r\n          handleRefreshOrderDetails={handleRefreshOrderDetails}\r\n          onSidebarCloseUpdateAddress={onSidebarCloseUpdateAddress}\r\n         // onUpdate={handleUpdateAddress}\r\n          handleAddClick={handleAddClick}\r\n          onSidebarCloseShippingAddress={onSidebarCloseShippingAddress}\r\n          onGetData={onGetData}\r\n          orderDetails={orderDetails}\r\n          addressContactType={addressContactType}\r\n          customerId={customerId}\r\n          defaultId={defaultId}\r\n          orderItemId={orderItemId}\r\n        />\r\n      </SidebarModel>\r\n      {isModelOpenUpdateAddress ? (\r\n        <SidebarModel\r\n          modalTitle={`${editMode ? \"Update\" : \"Add\"} Address`}\r\n          contentClass=\"content-50\"\r\n          onClose={onSidebarCloseUpdateAddress}\r\n          modalTitleIcon={AppIcons.AddIcon}\r\n          isOpen={isModelOpenUpdateAddress}\r\n        >\r\n          <AddEditAddress\r\n           // editMode={editMode}\r\n            selectedAddressId={selectedAddressId}\r\n            isModelOpenUpdateAddress={isModelOpenUpdateAddress}\r\n            keyId={customerId}\r\n            updateAddress={useUpdateAddAddressMutation}\r\n            addAddress={useAddAddressMutation}\r\n            getAddresssById={useLazyGetCustomerAddresssByAddressIdQuery}\r\n            onSidebarClose={onSidebarCloseUpdateAddress}\r\n          />\r\n        </SidebarModel>\r\n      ) : null}\r\n      {isModelOpenModelUserModel ? (\r\n        <SidebarModel\r\n          modalTitle=\"Update Users\"\r\n          contentClass=\"content-50\"\r\n          onClose={onSidebarCloseUserModel}\r\n          modalTitleIcon={AppIcons.AddIcon}\r\n          isOpen={isModelOpenModelUserModel}\r\n        >\r\n          <UsercardModel\r\n            handleRefreshOrderDetails={handleRefreshOrderDetails}\r\n            orderContactId={orderContactId}\r\n            // isUpdateContactModel={isUpdateContactModel}\r\n            onGetContactId={onGetContactId}\r\n            onSidebarCloseUpdateContact={onSidebarCloseUpdateContact}\r\n            // onUpdate={handleUpdateContact}\r\n            orderDetails={orderDetails}\r\n            contactTypeId={contactTypeId}\r\n            handleAddContact={handleAddContact}\r\n            selectedContactId={selectedContactId}\r\n            addressContactType={addressContactType}\r\n            setSelectedContactId={setSelectedContactId}\r\n            onSidebarCloseUserModel={onSidebarCloseUserModel}\r\n            customerId={customerId}\r\n            defaultId={defaultId}\r\n          />\r\n        </SidebarModel>\r\n      ) : null}\r\n      {isUpdateContactModel ? (\r\n        <SidebarModel\r\n          modalTitle=\"Add/Edit Contact\"\r\n          contentClass=\"content-40\"\r\n          onClose={onSidebarCloseUpdateContact}\r\n          modalTitleIcon={AppIcons.AddIcon}\r\n          isOpen={isUpdateContactModel}\r\n        >\r\n          <AddEditContact\r\n            onSuccess={onSuccess}\r\n            addEditContactMutation={useAddEditContactMutation}\r\n            customerId={customerId}\r\n            getContactById={useLazyGetCustomerContactByContactIdQuery}\r\n            isUpdateContactModel={isUpdateContactModel}\r\n            selectedContactId={selectedContactId}\r\n            // isEdit={isEdit}\r\n            isGetAllContactTypesSucess={isGetAllContactTypesSucess}\r\n            allGetAllContactTypesData={allGetAllContactTypesData}\r\n            onSidebarClose={onSidebarCloseUpdateContact}\r\n            isSupplier={false}\r\n          />\r\n        </SidebarModel>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrderInformation;\r\n","import formatDate from \"../../lib/formatDate\";\r\nimport { FileTypeIcons } from \"../../common/features/component/Document/Config/DocuementsData\";\r\n\r\nexport const modifyContactType = (apiResponseData) => {\r\n  const allType = {\r\n    id: 0,\r\n    type: \"All\", // It's used for all the types\r\n    isForSuppliers: true,\r\n    isForCustomers: true,\r\n    contactTypeId: \"\",\r\n  };\r\n  return [allType, ...apiResponseData];\r\n};\r\n\r\nexport const getDropDownId = (id, isEdit) => {\r\n  if (isEdit) {\r\n    return id && typeof id === \"object\" ? String(id.value) : String(id);\r\n  } else {\r\n    return Array.isArray(id) ? id.map(String).join(\",\") : id && typeof id === \"object\" ? String(id.value) : String(id);;\r\n  }\r\n};\r\n\r\nexport const modifyAddressType = (apiResponseData) => {\r\n  const allType = {\r\n    id: 0,\r\n    type: \"All\", // It's used for all the types\r\n    isForSuppliers: true,\r\n    isForCustomers: true,\r\n    addressTypeId: \"\",\r\n  };\r\n  return [allType, ...apiResponseData];\r\n};\r\n\r\nexport const modifyPhoneNumberData = (phoneDataArray) => {\r\n  const noPrimaryFound = phoneDataArray.every(data => !data.isPrimary);\r\n  const newArray = phoneDataArray.map((phoneData, index) => ({\r\n    ...phoneData,\r\n    extension: phoneData.extension === \"-\" ? 0 : phoneData.extension,\r\n    isPrimary: noPrimaryFound && index === 0 ? true : phoneData.isPrimary,\r\n  }));\r\n  return newArray;\r\n};\r\n\r\nexport const modifyEmailAddressData = (emailDataArray) => {\r\n  const noPrimaryFound = emailDataArray.every(data => !data.isPrimary);\r\n  const newArray = emailDataArray.map((emailData, index) => ({\r\n    ...emailData,\r\n    isPrimary: noPrimaryFound && index === 0 ? true : emailData.isPrimary\r\n  }));\r\n  return newArray;\r\n};\r\n\r\nexport const modifyTimeLineData = (timelineData) => {\r\n  const newArray = timelineData.map((data) => ({\r\n    ...data,\r\n    description:\r\n      data.description +\r\n      \" by \" +\r\n      data.name +\r\n      \" on \" +\r\n      formatDate(data.changedAt, \"MM/DD/YYYY hh:mm A\"),\r\n  }));\r\n  return newArray;\r\n};  \r\n\r\nexport const getFileTypeIcon = (filename) => {\r\n  const parts = filename?.split(\".\");\r\n  const fileType = parts?.length > 1 ? parts[parts.length - 1] : \"\";\r\n  return getIconForFileType(fileType);\r\n};\r\n\r\nconst getIconForFileType = (fileType) => {\r\n  const fileTypeIcon = FileTypeIcons.find((icon) => icon.type === fileType);\r\n  return fileTypeIcon ? fileTypeIcon.icon : null;\r\n};\r\n\r\nexport const documentTransformData = (data) => {\r\n\r\n\r\n  return data.reduce((acc, item) => {\r\n    const {\r\n      type,\r\n      attachment,\r\n      customerDocumentId,\r\n      customerId,\r\n      documentTypeId,\r\n      name,\r\n      createdAt,\r\n      isArchive,\r\n    } = item;\r\n\r\n    // Extract the file type and get the file icon basde on the file type\r\n    const documentIcon = getFileTypeIcon(attachment);\r\n\r\n    const transformedItem = {\r\n      attachment,\r\n      customerDocumentId,\r\n      customerId,\r\n      documentTypeId,\r\n      name,\r\n      documentIcon,\r\n      createdAt,\r\n      isArchive,\r\n      type\r\n    };\r\n\r\n    if (!acc[type]) {\r\n      acc[type] = [];\r\n    }\r\n\r\n    acc[type].push(transformedItem);\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nexport const supplierDocumentTransformData = (data) => {\r\n  return data.reduce((acc, item) => {\r\n    const {\r\n      type,\r\n      attachment,\r\n      supplierDocumentId,\r\n      supplierId,\r\n      documentTypeId,\r\n      name,\r\n      createdAt,\r\n      isArchive\r\n    } = item;\r\n\r\n    // Extract the file type and get the file icon basde on the file type\r\n    const documentIcon = getFileTypeIcon(attachment);\r\n\r\n    const transformedItem = {\r\n      attachment,\r\n      supplierDocumentId,\r\n      supplierId,\r\n      documentTypeId,\r\n      name,\r\n      documentIcon,\r\n      createdAt,\r\n      isArchive\r\n    };\r\n\r\n    if (!acc[type]) {\r\n      acc[type] = [];\r\n    }\r\n\r\n    acc[type].push(transformedItem);\r\n    return acc;\r\n  }, {});\r\n};\r\n"],"names":["addressFormData","initialState","addressTypeId","addressLine1","addressLine2","addressLine3","addressLine4","addressLine5","countryId","stateId","zipCode","cityId","supplierId","isPreferredBilling","isShippingAndBilling","isPreferredShipping","stateName","cityName","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","SELECT","dataField","fieldSetting","placeholder","isEnableOnChange","isMultiSelect","validation","type","style","containerCss","INPUT","allowSpace","maxLength","isDisable","isText","EDITABLEDROPDOWN","isDependDropdown","CHECKBOX","formSetting","isViewOnly","SetInitialCountry","label","value","forwardRef","_ref","keyId","isSupplier","updateAddress","addAddress","getAddresssById","isModelOpen","editMode","isButtonDisable","getCompletionCount","onSidebarClose","editRef","isOrderManage","getAddressTypeIdOrder","onHandleOrderInfoRepeatCall","orderCustomerId","isEditablePage","customerStatusId","ref","useRef","formData","setFormData","useState","shouldRerenderFormCreator","setShouldRerenderFormCreator","selectedCheckboxFeild","setSelectedCheckboxFeild","selectedCheckbox","setSelectedCheckbox","addressEditTableId","setAddressEditTableId","add","isLoading","isAddLoading","isSuccess","isAddSuccess","data","isAddData","update","isUpdateLoading","isUpdateSuccess","isUpdateData","getById","isFetching","isGetByIdFetching","isGetByIdSuccess","isGetByIdData","getAllCities","isGetAllCitiesSucess","isFetchingCities","allGetAllCitiesData","useLazyGetAllCitiesQuery","getAllStates","allGetAllStatesData","useLazyGetAllStatesQuery","getAllCountries","isGetAllCountriesSucess","allGetAllCountriesData","useLazyGetAllCountriesQuery","getAllAddressTypes","isGetAllAddressTypesSucess","allGetAllAddressTypesData","useLazyGetAllAddressTypesQuery","useEffect","async","Promise","all","fetchData","setFieldSetting","FieldSettingType","DISABLED","form","AddressType","BILLING","removeFormFields","SHIPPING","handleResponse","success","handleAddressResponse","MULTISELECT","onResetForm","setDropDownOptionField","_data$formFields","cities","map","item","name","dropdownField","find","options","filterCondition","isForSuppliers","isForCustomers","prevState","addressId","customerId","setInitialValue","updatedFormData","handleChangeDropdownList","responseData","errorMessage","includes","ToastService","warning","buildTransformedData","addressTypeIdValue","getAddressTypeId","String","Array","isArray","join","transformLocationData","locationData","nameField","isNew","text","extractValue","field","handleEdit","manageData","current","updateFormFieldValue","filteredFormFields","filter","useImperativeHandle","callChildEditFunction","formActionHandler","DDL_CHANGED","CHECK_CHANGE","handleCheckboxChanges","DA_CHANGED","handleDropdownAction","ISTEXT","_jsxs","className","children","_createElement","FormCreator","config","onActionChange","onDropdownAction","onCheckBoxChange","key","_jsx","Buttons","buttonTypeClassName","buttonText","onClick","getFormData","transformedData","updateData","buildUpdateData","customerAddressId","getCustomerAddressId","supplierAddressId","getSupplierAddressId","req","contactDetailFormData","firstName","lastName","contactTypeId","isPrimary","EmailAddressGrid","React","ContactNumbersGrid","isUpdateContactModel","addEditContactMutation","onSuccess","childRef","SecurityKey","allGetAllContactTypesData","isGetAllContactTypesSucess","isEdit","isOpen","getContactById","getContectTypeId","onhandleApiCall","contryIdCode","orderResetValue","contactId","setContactId","setEditMode","customerContactId","setCustomerContactId","supplierContactId","setSupplierContactId","setIsButtonDisable","phoneNumberList","setPhoneNumberList","emailAddressList","setEmailAddressList","isGetByIdSucess","addEdit","isAddEditLoading","isAddEditSuccess","isAddEditData","handlWithoutApprovalAddEdit","length","getDropDownId","request","requestData","ErrorMessage","ContactEmailAddressRequired","modifyEmailAddressData","modifyPhoneNumberData","keyValue","modifyPhoneNumberList","sort","a","b","phoneId","index","extension","modifyEmailAddressLst","emailId","callEditFunction","handleEditMode","hasEditPermission","hasFunctionalPermission","EDIT","hasAddPermission","ADD","hasAccess","onResetData","callChildFunction","DataLoader","DocumentFormData","documentTypeId","attachment","base64File","storagePath","FILE","isButtonVisible","isCustomButtonVisible","acceptedFiles","FileTypeIcons","GridColumnType","ACTION","icon","AppIcons","PdfIcon","DocIcon","XlsIcon","PptIcon","ZipIcon","CsvIcon","handleAddClick","onUpdate","onSidebarCloseUpdateAddress","addressContactType","onSidebarCloseShippingAddress","handleRefreshOrderDetails","orderDetails","onGetData","defaultId","orderItemId","dataList","setDataList","confirm","SwalAlert","selectedAddressId","setSelectedAddressId","getAddresssByCustomerId","isGetAddresssByCustomerIdFetching","isGetAddresssByCustomerId","GetAddresssByCustomerIdData","useLazyGetAddresssByCustomerIdQuery","updateOrderAddress","isUpdateOrderAddressLoading","isUpdateOrderAddressSuccess","isUpdateOrderAddressData","useUpdateOrderAddressMutation","filteredData","address","Checkbox","checked","onChange","handleCheckboxChange","stateCode","handleChangeAddress","then","confirmed","orderAddressId","orderId","billingAddressId","shippingAddressId","toast","error","_contact$emailAddress","_contact$emailAddress2","_contact$emailAddress3","_contact$emailAddress4","_contact$phoneNumberL","_contact$phoneNumberL2","_contact$phoneNumberL3","_contact$phoneNumberL4","_contact$phoneNumberL5","_contact$phoneNumberL6","contact","_Fragment","toUpperCase","Iconify","class","email","emailAddress","number","phoneCode","phoneNumber","getInitials","handleToggleModalUsers","UserDetailsModel","selectedContactId","onGetContactId","handleAddContact","orderContactId","onSidebarCloseUserModel","onSidebarCloseUpdateContact","setSelectedContactId","getContactByCustomerId","isGetContactByCustomerIdFetching","isGetContactByCustomerIdSuccess","isGetContactByCustomerIdItem","useLazyGetContactByCustomerIdQuery","updateOrderContact","isUpdateOrderContactLoading","isUpdateOrderContactSuccess","isUpdateOrderContactData","useUpdateOrderContactMutation","searchText","searchContactType","handlevalidate","UserCardList","handleChangeContact","orderItemShippingAddRef","orderInfo","setOrderInfo","orderAddressDetails","setOrderAddressDetails","orderContactDetails","setOrderContactDetails","setContactTypeId","setCustomerId","setAddressContactType","isModelOpenShippingAddress","setIsModelOpenShippingAddress","isModelOpenUpdateAddress","setIsModelOpenUpdateAddress","isModelOpenModelUserModel","setIsModelOpenUserModel","setIsUpdateContactModel","setDefaultId","setIsEdit","setOrderContactId","setOrderItemId","getAllContactTypes","useLazyGetAllContactTypesQuery","handleToggleModalShippingAddress","orderAddressInformation","billingAddress","shippingAddress","orderContactList","CardSection","cardTitle","headerContent","orderMethod","getOrderMethodIcon","countryName","contactType","toLowerCase","replace","UserCardDetail","handleToggleModalUserModel","typrId","SidebarModel","modalTitle","contentClass","onClose","modalTitleIcon","AddIcon","OrderInfoAddressModel","AddEditAddress","useUpdateAddAddressMutation","useAddAddressMutation","useLazyGetCustomerAddresssByAddressIdQuery","UsercardModel","AddEditContact","useAddEditContactMutation","useLazyGetCustomerContactByContactIdQuery","modifyContactType","apiResponseData","modifyAddressType","phoneDataArray","noPrimaryFound","every","phoneData","emailDataArray","emailData","modifyTimeLineData","timelineData","description","formatDate","changedAt","getFileTypeIcon","filename","parts","split","fileType","getIconForFileType","fileTypeIcon","documentTransformData","reduce","acc","customerDocumentId","createdAt","isArchive","transformedItem","documentIcon","push","supplierDocumentTransformData","supplierDocumentId"],"sourceRoot":""}