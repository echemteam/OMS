{"version":3,"file":"static/js/3830.8f2b725e.chunk.js","mappings":"2KAOA,MAAMA,EAAwBC,EAAAA,MAAW,IAAM,kCA+B/C,EA7BwBC,IAGpB,MAAM,mBAAEC,EAAkB,UAAEC,EAAS,gBAAEC,GAAoBH,EAE3D,OACII,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wCAAuCC,SAAA,EAClDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,SAC/BE,EAAAA,GAAwBC,KAAI,CAACC,EAAQC,KAClCJ,EAAAA,EAAAA,KAAA,OAAiBF,UAAWK,EAAOL,UAAUC,SAAEI,EAAOE,MAA5CD,QAGlBJ,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,SACxBJ,GAIIK,EAAAA,EAAAA,KAACM,EAAAA,EAAU,KAJFN,EAAAA,EAAAA,KAACT,EAAqB,CACjCgB,SAAUX,EACVY,MAAO,EACPC,qBAAsBf,QAG5B,C,8ECbSgB,EAAAA,EAAeC,OAuBjBC,EAAAA,EAAeC,OAW7B,MAAMC,EAA0B,CACnC,CAAEC,MAAO,EAAGC,MAAO,SACnB,CAAED,MAAO,EAAGC,MAAO,QACnB,CAAED,MAAO,EAAGC,MAAO,SAGVC,EAAyB,CAClC,CAAEF,MAAO,EAAGC,MAAO,aACnB,CAAED,MAAO,EAAGC,MAAO,cACnB,CAAED,MAAO,EAAGC,MAAO,SAGVf,EAA0B,CACnC,CACII,KAAM,OACNP,UAAW,kBAEf,CACIO,KAAM,eACNP,UAAW,gBAEf,CACIO,KAAM,kBACNP,UAAW,uB","sources":["pages/Security/permissions/features/PermissionList.js","pages/Security/permissions/features/config/securityPermissions.Data.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n//** Lib's */\r\nimport { SecurityPermissionsGrid } from \"../../permissions/features/config/securityPermissions.Data\";\r\nimport DataLoader from '../../../../components/ui/dataLoader/DataLoader';\r\n//** Component's */\r\nconst PermissionListWrapper = React.lazy(() => import(\"./PermissionWrapper\"));\r\n\r\nconst PermissionList = (props) => {\r\n\r\n    //** State */\r\n    const { onUpdatePermission, isLoading, permissionsData } = props;\r\n\r\n    return (\r\n        <div className=\"tree-section-view security-permission\">\r\n            <div className=\"section-header-part\">\r\n                {SecurityPermissionsGrid.map((column, index) => (\r\n                    <div key={index} className={column.className}>{column.name}</div>\r\n                ))}\r\n            </div>\r\n            <div className=\"inner-section\">\r\n                {!isLoading ? (<PermissionListWrapper\r\n                    treeData={permissionsData}\r\n                    level={0}\r\n                    onTreeNodeDataChange={onUpdatePermission}\r\n                />) : <DataLoader />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nPermissionList.propTypes = {\r\n    onUpdatePermission: PropTypes.func.isRequired,\r\n    isLoading: PropTypes.bool,\r\n    permissionsData: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default PermissionList;","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\nimport { GridColumnType } from \"../../../../../data/gridColumnType\";\r\n\r\n\r\nconst SecurityPermissions = {\r\n    name: \"Security Permissions\",\r\n    initialState: {\r\n        roles: \"\"\r\n    },\r\n\r\n    formFields: [\r\n        {\r\n            id: \"roles\",\r\n            lable: \"\",\r\n            Field_Name: \"Role Name\",\r\n            fieldType: FormFieldTypes.SELECT,\r\n            dataField: \"roles\",\r\n            fieldSetting: {\r\n                placeholder: \"Select Role Name\",\r\n                options: [],\r\n                isEnableOnChange: true\r\n            },\r\n            validation: [{ type: \"require\" }],\r\n            style: {\r\n                containerCss: \"col-md-6\",\r\n            },\r\n        }\r\n    ],\r\n};\r\nexport const DatabaseConfigGird = {\r\n    columns: [\r\n        {\r\n            name: \"Data Set Name\",\r\n            fieldName: \"dataSetName\",\r\n            allowShort: false,\r\n        },\r\n        {\r\n            name: \"Action\",\r\n            colType: GridColumnType.ACTION,\r\n            defaultAction: {\r\n                allowEdit: false,\r\n                allowDelete: true\r\n            }\r\n        }\r\n    ],\r\n}\r\nexport default SecurityPermissions;\r\n\r\n\r\nexport const SelectGrantDenyDropdown = [\r\n    { value: 1, label: \"Grant\" },\r\n    { value: 2, label: \"Deny\" },\r\n    { value: 5, label: \"None\" }\r\n];\r\n\r\nexport const SelectViewEditDropdown = [\r\n    { value: 3, label: \"View Only\" },\r\n    { value: 4, label: \"Read/Write\" },\r\n    { value: 5, label: \"None\" }\r\n];\r\n\r\nexport const SecurityPermissionsGrid = [\r\n    {\r\n        name: \"Drop\",\r\n        className: 'drop-menu-icon'\r\n    },\r\n    {\r\n        name: \"Security Key\",\r\n        className: 'security-key'\r\n    },\r\n    {\r\n        name: \"Permission Type\",\r\n        className: 'permission-dropdown'\r\n    }\r\n]"],"names":["PermissionListWrapper","React","props","onUpdatePermission","isLoading","permissionsData","_jsxs","className","children","_jsx","SecurityPermissionsGrid","map","column","index","name","DataLoader","treeData","level","onTreeNodeDataChange","FormFieldTypes","SELECT","GridColumnType","ACTION","SelectGrantDenyDropdown","value","label","SelectViewEditDropdown"],"sourceRoot":""}