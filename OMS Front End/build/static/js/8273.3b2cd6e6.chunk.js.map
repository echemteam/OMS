{"version":3,"file":"static/js/8273.3b2cd6e6.chunk.js","mappings":"mMAUA,MAwGA,EAxGoBA,IAAkI,IAAjI,MAAEC,EAAK,WAAEC,EAAU,cAAEC,EAAa,WAAEC,EAAU,WAAEC,EAAU,eAAEC,EAAc,gBAAEC,EAAe,kBAAEC,EAAiB,UAAEC,GAAWT,EAG5I,MAAMU,GAAMC,EAAAA,EAAAA,WACLC,EAAUC,IAAeC,EAAAA,EAAAA,UAASC,EAAAA,IAClCC,EAAgBC,IAAqBH,EAAAA,EAAAA,UAAS,IAC9CI,EAAgBC,IAAqBL,EAAAA,EAAAA,UAAS,IAO9CM,GAAYC,UAAWC,EAAmBC,UAAWC,EAAmBC,KAAMC,IAAoBxB,KAClGyB,GAAeN,UAAWO,EAAsBL,UAAWM,EAAsBJ,KAAMK,IAAuB3B,KAGrH4B,EAAAA,EAAAA,YAAU,KACFP,GAAqBE,GACrBM,EAAsBR,EAAmBE,GAEzCG,GAAwBC,GACxBE,EAAsBH,EAAsBC,EAChD,GACD,CAACN,EAAmBE,EAAgBG,EAAsBC,KAE7DC,EAAAA,EAAAA,YAAU,KACN,GAAI1B,GAAcC,EAAgB,CAC9B,MAAM2B,EAAc,IAAKrB,GACzBqB,EAAYC,aAAe,CACvBC,KAAM7B,EAAe6B,MAEzB/B,EAAaa,EAAkBX,EAAeU,gBAAkBG,EAAkBb,EAAeY,gBACjGL,EAAYoB,EAChB,IACD,CAAC5B,EAAYC,IAGhB,MAAM0B,EAAwBA,CAACT,EAAWa,KACtC,GAAIb,GAAaa,EAAc,CAC3B,GAAIA,EAAaC,aAAaC,SAAS,UAEnC,YADAC,EAAAA,EAAaC,QAAQJ,EAAaC,cAGtCE,EAAAA,EAAaE,QAAQL,EAAaC,cAClC5B,GACJ,GAmBJ,OACIiC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4CAA2CC,SAAA,EACtDC,EAAAA,EAAAA,KAACC,EAAAA,EAAW,CAACC,OAAQnC,EAAUF,IAAKA,KAASE,KAC7CiC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UACtBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,4CAA2CC,UACtDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EAClCC,EAAAA,EAAAA,KAACG,EAAAA,EAAO,CACJC,oBAAoB,eACpBC,WAAY7C,EAAa,SAAW,MACpC8C,QA1BJC,KAChB,IAAIC,EAAY3C,EAAI4C,QAAQC,cAC5B,GAAIF,EAAW,CACX,IAAIG,EAAU,CACVrB,KAAMkB,EAAUlB,KAChB,CAAC/B,EAAa,aAAe,cAAeH,EAC5C,CAACG,EAAa,iBAAmB,kBAAmBA,EAAaY,EAAiBE,GAElFF,GAAkBE,EAClBS,EAAY6B,GAEZpC,EAASoC,EAEjB,GAcoBnC,UAAWC,GAAqBM,EAChC6B,UAAWlD,KACfsC,EAAAA,EAAAA,KAACG,EAAAA,EAAO,CACJC,oBAAoB,gBACpBC,WAAW,SACXC,QAAS3C,aAIvB,C","sources":["common/features/component/Note/feature/AddEditNote.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useEffect, useRef, useState } from \"react\";\r\n//** Lib's */\r\nimport { NotesData } from \"../config/Notes.data\";\r\nimport Buttons from \"../../../../../components/ui/button/Buttons\";\r\nimport FormCreator from \"../../../../../components/Forms/FormCreator\";\r\n//** Service's */\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddEditNote = ({ keyId, onAddNotes, onUpdateNotes, isSupplier, isEditMode, isEditModeData, isButtonDisable, handleToggleModal, onSuccess }) => {\r\n\r\n    //** States */\r\n    const ref = useRef();\r\n    const [formData, setFormData] = useState(NotesData);\r\n    const [supplierNoteId, setSupplierNoteId] = useState(0);\r\n    const [customerNoteId, setCustomerNoteId] = useState(0);\r\n\r\n    //** API Call's */\r\n    /**\r\n        * This hook dynamically sets the API call based on the module (customer or supplier).\r\n        * The API endpoint and parameters are configured within the SupplierNoteDetail OR CustomerNoteDetail component.\r\n    */\r\n    const [addNotes, { isLoading: isAddNotesLoading, isSuccess: isAddNotesSuccess, data: isAddNotesData }] = onAddNotes();\r\n    const [updateNotes, { isLoading: isUpdateNotesLoading, isSuccess: isUpdateNotesSuccess, data: isUpdateNotesData }] = onUpdateNotes();\r\n\r\n    //** UseEffect */\r\n    useEffect(() => {\r\n        if (isAddNotesSuccess && isAddNotesData) {\r\n            handleAddEditResponse(isAddNotesSuccess, isAddNotesData);\r\n        }\r\n        if (isUpdateNotesSuccess && isUpdateNotesData) {\r\n            handleAddEditResponse(isUpdateNotesSuccess, isUpdateNotesData);\r\n        }\r\n    }, [isAddNotesSuccess, isAddNotesData, isUpdateNotesSuccess, isUpdateNotesData]);\r\n\r\n    useEffect(() => {\r\n        if (isEditMode && isEditModeData) {\r\n            const newformData = { ...formData };\r\n            newformData.initialState = {\r\n                note: isEditModeData.note\r\n            };\r\n            isSupplier ? setSupplierNoteId(isEditModeData.supplierNoteId) : setCustomerNoteId(isEditModeData.customerNoteId)\r\n            setFormData(newformData);\r\n        }\r\n    }, [isEditMode, isEditModeData]);\r\n\r\n    //** Handle Changes */\r\n    const handleAddEditResponse = (isSuccess, responseData) => {\r\n        if (isSuccess && responseData) {\r\n            if (responseData.errorMessage.includes(\"EXISTS\")) {\r\n                ToastService.warning(responseData.errorMessage);\r\n                return;\r\n            }\r\n            ToastService.success(responseData.errorMessage);\r\n            onSuccess();\r\n        }\r\n    }\r\n    const handleNotes = () => {\r\n        let notesData = ref.current.getFormData();\r\n        if (notesData) {\r\n            let request = {\r\n                note: notesData.note,\r\n                [isSupplier ? 'supplierId' : 'customerId']: keyId,\r\n                [isSupplier ? 'supplierNoteId' : 'customerNoteId']: isSupplier ? supplierNoteId : customerNoteId,\r\n            };\r\n            if (supplierNoteId || customerNoteId) {\r\n                updateNotes(request);\r\n            } else {\r\n                addNotes(request);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"row custom-height-tiny add-edit-notesForm\">\r\n            <FormCreator config={formData} ref={ref} {...formData} />\r\n            <div className=\"col-md-12\">\r\n                <div className=\"d-flex align-item-end justify-content-end\">\r\n                    <div className=\"d-flex align-item-end\">\r\n                        <Buttons\r\n                            buttonTypeClassName=\"theme-button\"\r\n                            buttonText={isEditMode ? \"Update\" : \"Add\"}\r\n                            onClick={handleNotes}\r\n                            isLoading={isAddNotesLoading || isUpdateNotesLoading}\r\n                            isDisable={isButtonDisable} />\r\n                        <Buttons\r\n                            buttonTypeClassName=\"dark-btn ml-5\"\r\n                            buttonText=\"Cancel\"\r\n                            onClick={handleToggleModal} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nAddEditNote.propTypes = {\r\n    keyId: PropTypes.number.isRequired,\r\n    onAddNotes: PropTypes.func.isRequired,\r\n    onUpdateNotes: PropTypes.func.isRequired,\r\n    isSupplier: PropTypes.bool.isRequired,\r\n    isEditMode: PropTypes.bool.isRequired,\r\n    isEditModeData: PropTypes.shape({\r\n        note: PropTypes.string,\r\n        supplierNoteId: PropTypes.number,\r\n        customerNoteId: PropTypes.number\r\n    }),\r\n    isButtonDisable: PropTypes.bool.isRequired,\r\n    handleToggleModal: PropTypes.func.isRequired,\r\n    onSuccess: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddEditNote;"],"names":["_ref","keyId","onAddNotes","onUpdateNotes","isSupplier","isEditMode","isEditModeData","isButtonDisable","handleToggleModal","onSuccess","ref","useRef","formData","setFormData","useState","NotesData","supplierNoteId","setSupplierNoteId","customerNoteId","setCustomerNoteId","addNotes","isLoading","isAddNotesLoading","isSuccess","isAddNotesSuccess","data","isAddNotesData","updateNotes","isUpdateNotesLoading","isUpdateNotesSuccess","isUpdateNotesData","useEffect","handleAddEditResponse","newformData","initialState","note","responseData","errorMessage","includes","ToastService","warning","success","_jsxs","className","children","_jsx","FormCreator","config","Buttons","buttonTypeClassName","buttonText","onClick","handleNotes","notesData","current","getFormData","request","isDisable"],"sourceRoot":""}