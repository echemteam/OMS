{"version":3,"file":"static/js/1020.014559c8.chunk.js","mappings":"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","sources":["pages/thirdPartyApi/thirdPartyApiConfigurationGrid/feature/thirdPartyApiConfigurationList/config/ThirdPartyApiConfigurationList.data.js","pages/thirdPartyApi/thirdPartyApiConfigurationGrid/feature/thirdPartyApiConfigurationList/ThirdPartyApiConfigurationList.js"],"sourcesContent":["import { GridColumnType } from \"../../../../../../data/gridColumnType\";\r\n\r\nexport const thirdPartyListConfigurationData = {\r\n    columns: [\r\n        {\r\n            name: \"Event Name\",\r\n            fieldName: \"eventName\",\r\n            colStyle: {\r\n                width: \"20%\",\r\n            },\r\n            allowShort: true,\r\n        },\r\n        {\r\n            name: \"Description\",\r\n            fieldName: \"description\",\r\n            colStyle: {\r\n                width: \"60%\",\r\n            },\r\n            allowShort: true,\r\n        },\r\n        {\r\n            name: \"Action\",\r\n            colStyle: {\r\n                width: \"20%\",\r\n            },\r\n            colType: GridColumnType.ACTION,\r\n            defaultAction: {\r\n                allowDelete: true,\r\n            },\r\n            customAction: [\r\n                {\r\n                    name: \"TESTAPI\",\r\n                    iconName: \"hugeicons:api\",\r\n                    title: \"Test Api\",\r\n                    className: \"api-icon\"\r\n                },\r\n                {\r\n                    name: \"VIEWCONFIGURATION\",\r\n                    iconName: \"lets-icons:view\",\r\n                    title: \"View\",\r\n                    className: \"view-icon\"\r\n                },\r\n            ],\r\n        },\r\n    ],\r\n\r\n};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useImperativeHandle, useRef, useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { thirdPartyListConfigurationData } from './config/ThirdPartyApiConfigurationList.data';\r\nimport { useDeleteApiEventMutation, useGetApiEventsMutation, useThirdPartyAPICallMutation } from '../../../../../app/services/thirdPartyAPI';\r\nimport ToastService from '../../../../../services/toastService/ToastService';\r\nimport SwalAlert from '../../../../../services/swalService/SwalService';\r\nimport { encryptUrlData } from '../../../../../services/CryptoService';\r\nimport FinalMolGrid from '../../../../../components/FinalMolGrid/FinalMolGrid';\r\nimport { ErrorMessage } from '../../../../../data/appMessages';\r\n\r\nconst ThirdPartyApiConfigurationList = ({ childRef }) => {\r\n    const molGridRef = useRef();\r\n    const navigate = useNavigate();\r\n    const { confirm } = SwalAlert();\r\n    const [listData, setListData] = useState();\r\n    const [totalRowCount, setTotalRowCount] = useState(0);\r\n\r\n    const [deleteApiEvent, { isSuccess: isDeleteApiEventSuccess, data: isDeleteApiEventData },] = useDeleteApiEventMutation();\r\n    const [getThirdPartyApiResponse, { isSuccess: isApiResponseSucess, data: isApiResponseData }] = useThirdPartyAPICallMutation();\r\n    const [getApiEvents, { isLoading: isGetApiEventsLoading, isSuccess: isGetApiEventsSuccess, data: isGetApiEventsData, },] = useGetApiEventsMutation();\r\n\r\n    const getLists = (pageObject, sortingString) => {\r\n        const request = {\r\n            pagination: {\r\n                pageNumber: pageObject.pageNumber,\r\n                pageSize: pageObject.pageSize,\r\n            },\r\n            filters: { searchText: \"\" },\r\n            sortString: sortingString,\r\n        };\r\n        getApiEvents(request);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isDeleteApiEventSuccess && isDeleteApiEventData) {\r\n            ToastService.success(isDeleteApiEventData.errorMessage);\r\n            const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n            getLists(currentPageObject, molGridRef.current.generateSortingString());\r\n        }\r\n    }, [isDeleteApiEventSuccess, isDeleteApiEventData]);\r\n\r\n    const handlePageChange = (page) => {\r\n        getLists(page, molGridRef.current.generateSortingString());\r\n    };\r\n\r\n    const handleSorting = (shortString) => {\r\n        getLists(molGridRef.current.getCurrentPageObject(), shortString);\r\n    };\r\n\r\n    const onGetData = () => {\r\n        if (molGridRef.current) {\r\n            const defaultPageObject = molGridRef.current.getCurrentPageObject();\r\n            getLists(defaultPageObject, molGridRef.current.generateSortingString());\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isGetApiEventsSuccess && isGetApiEventsData) {\r\n            if (isGetApiEventsData) {\r\n                setListData(isGetApiEventsData.dataSource);\r\n            }\r\n            if (isGetApiEventsData.totalRecord) {\r\n                setTotalRowCount(isGetApiEventsData.totalRecord);\r\n            }\r\n        }\r\n    }, [isGetApiEventsSuccess, isGetApiEventsData]);\r\n\r\n    const handleDeleteClick = (data) => {\r\n        confirm(\"Delete?\", \"Are you sure you want to Delete?\", \"Delete\", \"Cancel\"\r\n        ).then((confirmed) => {\r\n            if (confirmed) {\r\n                deleteApiEvent(data.apiEventId);\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isApiResponseSucess && isApiResponseData) {\r\n            if (isApiResponseData.isSuccess) {\r\n                const responseData = JSON.parse(isApiResponseData.data);\r\n                // console.log('isApiResponseData =>', responseData?.data);\r\n                ToastService.success(responseData?.message);\r\n            } else if (!isApiResponseData.isSuccess) {\r\n                ToastService.warning(isApiResponseData.message);\r\n            } else {\r\n                ToastService.warning(ErrorMessage.DefaultMessage);\r\n            }\r\n        }\r\n    }, [isApiResponseSucess, isApiResponseData]);\r\n\r\n    useEffect(() => {\r\n        if (molGridRef.current) {\r\n            const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n            const currentsortingString = molGridRef.current.generateSortingString();\r\n            const request = {\r\n                pagination: {\r\n                    pageNumber: currentPageObject.pageNumber,\r\n                    pageSize: currentPageObject.pageSize,\r\n                },\r\n                filters: { searchText: \"\" },\r\n                sortString: currentsortingString,\r\n            };\r\n            getApiEvents(request);\r\n        }\r\n    }, []);\r\n\r\n\r\n    const handleViewClick = (data) => {\r\n        navigate(`/configuration/ThirdPartyApiConfigurationViewDetails/${encryptUrlData(data.apiEventId)}`, \"_blank\");\r\n    }\r\n\r\n    const handleTestClick = (data) => {\r\n        let parameter = {\r\n            searchText: \"acid\"\r\n        }\r\n        let request = {\r\n            eventName: data.eventName,\r\n            isDynamicParameter: false,\r\n            parameters: JSON.stringify(parameter)\r\n        }\r\n        getThirdPartyApiResponse(request);\r\n    };\r\n\r\n\r\n    const actionHandler = {\r\n        VIEWCONFIGURATION: handleViewClick,\r\n        DELETE: handleDeleteClick,\r\n        TESTAPI: handleTestClick\r\n    };\r\n\r\n    useImperativeHandle(childRef, () => ({\r\n        callChildFunction: onGetData,\r\n    }));\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-12 table-striped api-provider\">\r\n                <FinalMolGrid\r\n                    ref={molGridRef}\r\n                    configuration={thirdPartyListConfigurationData}\r\n                    dataSource={listData}\r\n                    allowPagination={false}\r\n                    pagination={{\r\n                        totalCount: totalRowCount,\r\n                        pageSize: 20,\r\n                        currentPage: 1,\r\n                    }}\r\n                    onPageChange={handlePageChange}\r\n                    onSorting={handleSorting}\r\n                    isLoading={isGetApiEventsLoading}\r\n                    onActionChange={actionHandler}\r\n\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nThirdPartyApiConfigurationList.propTypes = {\r\n    childRef: PropTypes.shape({\r\n        current: PropTypes.shape({\r\n            callChildFunction: PropTypes.func\r\n        })\r\n    })\r\n};\r\nexport default ThirdPartyApiConfigurationList"],"names":["thirdPartyListConfigurationData","columns","name","fieldName","colStyle","width","allowShort","colType","GridColumnType","ACTION","defaultAction","allowDelete","customAction","iconName","title","className","_ref","childRef","molGridRef","useRef","navigate","useNavigate","confirm","SwalAlert","listData","setListData","useState","totalRowCount","setTotalRowCount","deleteApiEvent","isSuccess","isDeleteApiEventSuccess","data","isDeleteApiEventData","useDeleteApiEventMutation","getThirdPartyApiResponse","isApiResponseSucess","isApiResponseData","useThirdPartyAPICallMutation","getApiEvents","isLoading","isGetApiEventsLoading","isGetApiEventsSuccess","isGetApiEventsData","useGetApiEventsMutation","getLists","pageObject","sortingString","request","pagination","pageNumber","pageSize","filters","searchText","sortString","useEffect","ToastService","success","errorMessage","currentPageObject","current","getCurrentPageObject","generateSortingString","onGetData","defaultPageObject","dataSource","totalRecord","responseData","JSON","parse","message","warning","ErrorMessage","DefaultMessage","currentsortingString","actionHandler","VIEWCONFIGURATION","encryptUrlData","apiEventId","DELETE","then","confirmed","TESTAPI","eventName","isDynamicParameter","parameters","stringify","useImperativeHandle","callChildFunction","_jsx","children","FinalMolGrid","ref","configuration","allowPagination","totalCount","currentPage","onPageChange","page","onSorting","shortString","onActionChange"],"sourceRoot":""}