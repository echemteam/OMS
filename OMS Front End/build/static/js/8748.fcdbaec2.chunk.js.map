{"version":3,"file":"static/js/8748.fcdbaec2.chunk.js","mappings":"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","sources":["components/ui/inputs/fileUpload/FileUpload.js","components/Forms/formField/FormFileUploadField.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TextInputType } from \"../../../../data/formControlTypes\";\r\nimport \"./FileUpload.scss\";\r\nimport Image from \"../../../image/Image\";\r\nimport { AppIcons } from \"../../../../data/appIcons\";\r\nimport Buttons from \"../../button/Buttons\";\r\n\r\nconst FileUpload = ({\r\n  type = TextInputType.FILE,\r\n  name = \"\",\r\n  placeholder = `Please Enter ${name}`,\r\n  filename,\r\n  onChange,\r\n  onClear,\r\n  onBlur,\r\n  onActionClick,\r\n  cssClass = \"input-field\",\r\n  isDisable,\r\n  isButtonVisible,\r\n  acceptedFiles,\r\n  isCustomButtonVisible,\r\n  dataField,\r\n  fieldActions,\r\n  isMultiple = false,\r\n  ...inputProps\r\n}) => {\r\n  const [fileValue, setFileValue] = useState(null);\r\n\r\n  const fileRef = useRef();\r\n  const handleInputChange = (data) => {\r\n    onChange(data);\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    if (onClear) {\r\n      fileRef.current.value = null;\r\n      setFileValue(null);\r\n      filename = null;\r\n      onClear();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (filename && typeof filename === \"object\") {\r\n      setFileValue(filename.name || filename.fileName);\r\n    } else if (filename) {\r\n      setFileValue(filename);\r\n    } else {\r\n      setFileValue(null);\r\n      fileRef.current.value = null;\r\n      handleClearClick();\r\n    }\r\n    /** This flag is used for the user is upload the file then clear the fileName.  */\r\n    if (inputProps?.isFileNameCleared) {\r\n      handleClearClick();\r\n    }\r\n  }, [filename]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`form-field custom-file-uploader ${isDisable ? \"field-disabled\" : \"\"\r\n          }`}\r\n      >\r\n        <input\r\n          ref={fileRef}\r\n          id={name}\r\n          name={name}\r\n          filename={fileValue ? fileValue : null}\r\n          type={type ? type : \"file\"}\r\n          className={cssClass}\r\n          placeholder={placeholder}\r\n          onChange={handleInputChange}\r\n          onBlur={onBlur}\r\n          disabled={isDisable}\r\n          accept={acceptedFiles}\r\n          multiple={isMultiple}\r\n        />\r\n        <div className=\"custom-file-selector-design\">\r\n          <Image\r\n            imagePath={AppIcons.Uploaddocumenticon}\r\n            altText=\"Please Upload File\"\r\n          ></Image>\r\n          {/* <Iconify icon=\"iconamoon:file-document-thin\" /> */}\r\n\r\n          {fileValue ? (\r\n            <p className=\"file-name\">{fileValue}</p>\r\n          ) : (\r\n            <>\r\n              <div className=\"drag-drop-txt\">\r\n                <p>Drag & Drop Your File</p>\r\n                {acceptedFiles === \"\" ? (\r\n                  <span className=\"small-txt\">All File Formats we support</span>\r\n                ) : (\r\n                  <span className=\"small-txt\">\r\n                    {acceptedFiles}\r\n                    Formats we support\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n\r\n          {fileValue ? null : (\r\n            <>\r\n              <div className=\"buttons\">\r\n                <Buttons\r\n                  textWithIcon={true}\r\n                  imagePath={AppIcons.UploadIcon}\r\n                  buttonTypeClassName=\"upload-button\"\r\n                  buttonText=\"Upload Manually\"\r\n                  onClick={handleClearClick}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n          {isCustomButtonVisible && (\r\n            <>\r\n              <div className=\"row clear-buttons clear-btn-sec\">\r\n                {fileValue && (\r\n                  <Buttons\r\n                    buttonTypeClassName=\"btn dark-btn\"\r\n                    buttonText=\"Clear\"\r\n                    onClick={handleClearClick}\r\n                  />\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n        {isButtonVisible && (\r\n          <>\r\n            <div className=\"row clear-buttons\">\r\n              {fileValue && (\r\n                <span className=\"dark-btn\" onClick={handleClearClick}>\r\n                  X\r\n                </span>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nFileUpload.propTypes = {\r\n  type: PropTypes.oneOf([TextInputType.FILE]),\r\n  name: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  filename: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      fileName: PropTypes.string,\r\n    }),\r\n  ]),\r\n  onChange: PropTypes.func.isRequired,\r\n  onClear: PropTypes.func,\r\n  onBlur: PropTypes.func,\r\n  onActionClick: PropTypes.func,\r\n  cssClass: PropTypes.string,\r\n  isDisable: PropTypes.bool,\r\n  isButtonVisible: PropTypes.bool,\r\n  acceptedFiles: PropTypes.string,\r\n  isCustomButtonVisible: PropTypes.bool,\r\n};\r\nexport default FileUpload;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport SwalAlert from \"../../../services/swalService/SwalService\";\r\nimport FileUpload from \"../../ui/inputs/fileUpload/FileUpload\";\r\nconst Label = React.lazy(() => import(\"../../ui/label/Label\"));\r\nconst ValidationText = React.lazy(() =>\r\n  import(\"../../ui/inputs/validation/ValidationText.js\")\r\n);\r\n\r\nconst FormFileUploadField = ({\r\n  labelName,\r\n  name,\r\n  onChange,\r\n  onValidation,\r\n  dataField,\r\n  error,\r\n  formSetting,\r\n  overRideProps,\r\n  fieldActions,\r\n  isRequired,\r\n  fileFormate,\r\n  ...inputProps\r\n}) => {\r\n  const [buttonVisible, setButtonVisible] = useState(false);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n  const { info } = SwalAlert();\r\n\r\n  const isValidFileType = (fileName, acceptedFileType) => {\r\n    if (acceptedFileType.length === 0) {\r\n      return true;\r\n    }\r\n    const fileExt = fileName.split(\".\").pop().toLowerCase();\r\n    return acceptedFileType.includes(`.${fileExt}`);\r\n  };\r\n\r\n  const handleInputChange = async (e) => {\r\n    if (onChange) {\r\n      if (e.target.type !== \"file\") {\r\n        setSelectedFile(null);\r\n        onChange(dataField, e.target.value);\r\n      } else if (e.target.files[0]) {\r\n        const fileObj = e.target.files[0];\r\n        setSelectedFile(fileObj);\r\n        const acceptedExtensions = inputProps.acceptedFiles ? inputProps.acceptedFiles.split(\",\").map((ext) => ext.trim()) : [];\r\n        if (!isValidFileType(fileObj.name, acceptedExtensions)) {\r\n          info(\"File Type doesn't match\", `Please select file with extension ${acceptedExtensions}`);\r\n          setSelectedFile(null);\r\n          inputProps.value = null;\r\n          handleClearFile();\r\n          return;\r\n        }\r\n\r\n        const files = e.target.files;\r\n        let value = inputProps.isMultiple ? Array.from(files).map((file) => file.name).join(\", \") : files[0].name;\r\n        if (inputProps.isMultiple) {\r\n          const fileReaders = Array.from(files).map(file => {\r\n            return new Promise((resolve, reject) => {\r\n              const reader = new FileReader();\r\n              reader.onload = (event) => {\r\n                resolve({\r\n                  fileName: file.name,\r\n                  base64Data: event.target.result,\r\n                });\r\n              };\r\n              reader.onerror = reject;\r\n              reader.readAsDataURL(file);\r\n            });\r\n          });\r\n          await Promise.all(fileReaders).then(fileObjects => {\r\n            onChange(dataField, fileObjects);\r\n          }).catch(error => {\r\n            console.error(\"Error reading files:\", error);\r\n          });\r\n        } else {\r\n          const reader = new FileReader();\r\n          reader.onload = (event) => {\r\n            const fileContent = event.target.result;\r\n            const newFileObject = {\r\n              fileName: fileObj.name,\r\n              base64Data: fileContent,\r\n            };\r\n            onChange(dataField, newFileObject);\r\n          };\r\n\r\n          reader.readAsDataURL(fileObj);\r\n        }\r\n\r\n        if (fieldActions && inputProps) {\r\n          fieldActions(\"DDL_FILE\", dataField, value);\r\n        }\r\n        // onChange(dataField, fileObj);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleClearFile = () => {\r\n    if (fieldActions) {\r\n      fieldActions(\"CLEAR\");\r\n    }\r\n    setSelectedFile(null);\r\n    setButtonVisible(false);\r\n    inputProps.value = null;\r\n  };\r\n\r\n  const handleActionClick = () => {\r\n    if (fieldActions) {\r\n      const data = {\r\n        contractInputFile: inputProps.value,\r\n      };\r\n      fieldActions(\"DOWNLOAD\", data);\r\n    }\r\n  };\r\n\r\n  const handleOnBlur = () => {\r\n    if (onValidation) {\r\n      onValidation(dataField);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedFile) {\r\n      setButtonVisible(true);\r\n    } else {\r\n      setButtonVisible(false);\r\n    }\r\n  }, [selectedFile]);\r\n\r\n  useEffect(() => {\r\n    if (inputProps.value) {\r\n      setSelectedFile(inputProps.value);\r\n    } else {\r\n      setSelectedFile(null);\r\n      inputProps.isDownloadable = false;\r\n    }\r\n  }, [inputProps.value]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"input-label-part\">\r\n        {labelName && labelName !== \"\" && (\r\n          <Label labelName={labelName} for={name} isRequired={isRequired} />\r\n        )}\r\n        <FileUpload\r\n          onClear={handleClearFile}\r\n          filename={selectedFile}\r\n          onChange={handleInputChange}\r\n          onActionClick={handleActionClick}\r\n          onBlur={handleOnBlur}\r\n          isButtonVisible={buttonVisible}\r\n          isDisable={\r\n            formSetting?.isViewOnly ||\r\n            inputProps?.isDisable ||\r\n            false ||\r\n            overRideProps?.isDisable\r\n          }\r\n          isDownloadButton={inputProps.isDownloadable}\r\n          acceptedFiles={inputProps.acceptedFiles}\r\n          fileFormate={fileFormate}\r\n          dataField={dataField}\r\n          fieldActions={fieldActions}\r\n          {...inputProps}\r\n        />\r\n      </div>\r\n      <ValidationText error={error || \"\"} />\r\n    </>\r\n  );\r\n};\r\n\r\nFormFileUploadField.propTypes = {\r\n  labelName: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  onValidation: PropTypes.func,\r\n  dataField: PropTypes.string.isRequired,\r\n  error: PropTypes.string,\r\n  formSetting: PropTypes.shape({\r\n    isViewOnly: PropTypes.bool,\r\n  }),\r\n  overRideProps: PropTypes.shape({\r\n    isDisable: PropTypes.bool,\r\n  }),\r\n  fieldActions: PropTypes.func,\r\n  isRequired: PropTypes.bool,\r\n  fileFormate: PropTypes.string,\r\n  acceptedFiles: PropTypes.string,\r\n  isDownloadable: PropTypes.bool,\r\n  isDisable: PropTypes.bool,\r\n};\r\n\r\nexport default FormFileUploadField;\r\n"],"names":["_ref","type","TextInputType","FILE","name","placeholder","filename","onChange","onClear","onBlur","onActionClick","cssClass","isDisable","isButtonVisible","acceptedFiles","isCustomButtonVisible","dataField","fieldActions","isMultiple","inputProps","fileValue","setFileValue","useState","fileRef","useRef","handleClearClick","current","value","useEffect","fileName","isFileNameCleared","_jsx","_Fragment","children","_jsxs","className","ref","id","data","disabled","accept","multiple","Image","imagePath","AppIcons","Uploaddocumenticon","altText","Buttons","textWithIcon","UploadIcon","buttonTypeClassName","buttonText","onClick","Label","React","ValidationText","labelName","onValidation","error","formSetting","overRideProps","isRequired","fileFormate","buttonVisible","setButtonVisible","selectedFile","setSelectedFile","info","SwalAlert","handleClearFile","isDownloadable","for","FileUpload","async","e","target","files","fileObj","acceptedExtensions","split","map","ext","trim","isValidFileType","acceptedFileType","length","fileExt","pop","toLowerCase","includes","Array","from","file","join","fileReaders","Promise","resolve","reject","reader","FileReader","onload","event","base64Data","result","onerror","readAsDataURL","all","then","fileObjects","catch","console","fileContent","newFileObject","handleActionClick","contractInputFile","handleOnBlur","isViewOnly","isDownloadButton"],"sourceRoot":""}