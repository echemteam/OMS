{"version":3,"file":"static/js/1291.be830d4e.chunk.js","mappings":"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","sources":["pages/apiConfiguration/apiProviders/features/apiAuthentication/config/ApiAuthentication.data.js","pages/apiConfiguration/apiProviders/features/apiAuthentication/features/ApiAuthenticationList.js","pages/apiConfiguration/apiProviders/features/apiAuthentication/features/AddEditApiAuthentication.js","pages/apiConfiguration/apiProviders/features/apiAuthentication/ApiAuthentication.js"],"sourcesContent":["import { FormFieldTypes } from \"../../../../../../data/formFieldType\";\r\nimport { GridColumnType } from \"../../../../../../data/gridColumnType\";\r\n\r\n\r\nexport const addEditApiAuthenticationFormData = {\r\n  initialState: {\r\n\r\n    authKey: \"\",\r\n    clientId: \"\",\r\n    clientSecret: \"\",\r\n    tokenEndpoint: \"\",\r\n    tokenExpires: \"\",\r\n  },\r\n  formFields: [\r\n\r\n\r\n    {\r\n      id: \"authKey\",\r\n      lable: \"AuthKey \",\r\n      Field_Name: \"authKey\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"authKey\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter AuthKey\",\r\n        allowSpace: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-2 \",\r\n      },\r\n    },\r\n    {\r\n      id: \"clientId\",\r\n      lable: \"Client Id\",\r\n      Field_Name: \"Client Id\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"clientId\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter ClientId\",\r\n        allowSpace: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"clientSecret\",\r\n      lable: \"Client Secret\",\r\n      Field_Name: \"Client Secret\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"clientSecret\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Client Secret\",\r\n        allowSpace: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"tokenEndpoint\",\r\n      lable: \"Token Endpoint\",\r\n      Field_Name: \"Token Endpoint\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"tokenEndpoint\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Token Endpoint\",\r\n        allowSpace: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"tokenExpires\",\r\n      lable: \"Token Expires Date\",\r\n      Field_Name: \"TokenExpires\",\r\n      fieldType: FormFieldTypes.DATEPICKER,\r\n      dataField: \"tokenExpires\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Expire Date\",\r\n        allowSpace: true,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 mb-2\",\r\n      },\r\n    },\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false\r\n  }\r\n\r\n}\r\nexport const ApiAuthenticationtGridConfig = {\r\n  columns: [\r\n    {\r\n      name: \"AuthKey\",\r\n      fieldName: \"authKey\",\r\n      colStyle: {\r\n        width: \"15%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"ClientId\",\r\n      fieldName: \"clientId\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Client Secret\",\r\n      fieldName: \"clientSecret\",\r\n      colStyle: {\r\n        width: \"15%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Token Endpoint\",\r\n      fieldName: \"tokenEndpoint\",\r\n      colStyle: {\r\n        width: \"20%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Token Expires\",\r\n      fieldName: \"tokenExpires\",\r\n      colStyle: {\r\n        width: \"20%\",\r\n      },\r\n      colType: GridColumnType.DATE,\r\n      allowShort: true,\r\n      colSettings: {\r\n        format: \"DD/MM/YYYY\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      colStyle: {\r\n        width: \"10%\",\r\n      },\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n        allowDelete: true,\r\n      },\r\n    },\r\n  ],\r\n\r\n};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useEffect, useRef, useState , useImperativeHandle} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ApiAuthenticationtGridConfig, } from \"../config/ApiAuthentication.data\";\r\nimport ToastService from \"../../../../../../services/toastService/ToastService\";\r\nimport SwalAlert from \"../../../../../../services/swalService/SwalService\";\r\nimport { useDeleteApiAuthenticationMutation, useGetApiAuthenticationsMutation } from \"../../../../../../app/services/apiAuthenticationAPI\";\r\nimport FinalMolGrid from \"../../../../../../components/FinalMolGrid/FinalMolGrid\";\r\n\r\nconst ApiAuthenticationList = ({ handleEditClick, getDataRef, providerId , handleListData }) => {\r\n\r\n  const molGridRef = useRef();\r\n  const [listData, setListData] = useState();\r\n  const [totalRowCount, setTotalRowCount] = useState(0);\r\n  const { confirm } = SwalAlert();\r\n  const [deleteApiAuthentication, { isSuccess: isDeleteApiAuthenticationSuccess, data: isDeleteApiAuthenticationData },] = useDeleteApiAuthenticationMutation();\r\n\r\n  const [getApiAuthentications, { isLoading: isApiAuthenticationLoading, isSuccess: isApiAuthenticationSuccess, data: isApiAuthenticationeData },] = useGetApiAuthenticationsMutation();\r\n\r\n  useEffect(() => {\r\n    onGetData()\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isApiAuthenticationSuccess && isApiAuthenticationeData) {\r\n      \r\n      if (isApiAuthenticationeData) {\r\n        setListData(isApiAuthenticationeData.dataSource);\r\n        handleListData(isApiAuthenticationeData.dataSource.length)\r\n\r\n      }\r\n      if (isApiAuthenticationeData.totalRecord) {\r\n        setTotalRowCount(isApiAuthenticationeData.totalRecord);\r\n      }\r\n    }\r\n  }, [isApiAuthenticationSuccess, isApiAuthenticationeData]);\r\n\r\n  useEffect(() => {\r\n    if (isDeleteApiAuthenticationSuccess && isDeleteApiAuthenticationData) {\r\n      ToastService.success(isDeleteApiAuthenticationData.errorMessage);\r\n      const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n      handlePageChange(currentPageObject)\r\n    }\r\n  }, [isDeleteApiAuthenticationSuccess, isDeleteApiAuthenticationData]);\r\n\r\n\r\n  const getLists = (pageObject, sortingString) => {\r\n\r\n    const request = {\r\n      pagination: {\r\n        pageNumber: pageObject.pageNumber,\r\n        pageSize: pageObject.pageSize,\r\n      },\r\n      filters: { searchText: \"\" },\r\n      sortString: sortingString,\r\n      providerId: providerId,\r\n    };\r\n    getApiAuthentications(request);\r\n  };\r\n\r\n  const handlePageChange = (page) => {\r\n    getLists(page, molGridRef.current.generateSortingString());\r\n  };\r\n\r\n  const handleSorting = (shortString) => {\r\n    getLists(molGridRef.current.getCurrentPageObject(), shortString);\r\n  }\r\n  const onGetData = () => {\r\n\r\n    if (molGridRef.current) {\r\n      const defaultPageObject = molGridRef.current.getCurrentPageObject();\r\n      getLists(defaultPageObject, molGridRef.current.generateSortingString());\r\n    }\r\n  }\r\n\r\n  const handleDeleteClick = (data) => {\r\n    confirm(\"Delete?\", \"Are you sure you want to Delete?\", \"Delete\", \"Cancel\")\r\n      .then((confirmed) => {\r\n        if (confirmed) {\r\n          deleteApiAuthentication(data.authId);\r\n        }\r\n      });\r\n  };\r\n\r\n  const actionHandler = {\r\n    EDIT: handleEditClick,\r\n    DELETE: handleDeleteClick,\r\n  };\r\n\r\n\r\n  useImperativeHandle(getDataRef, () => ({\r\n    callChildFunction: onGetData\r\n  }));\r\n  return (\r\n\r\n    <div className=\"row\">\r\n      <div className=\"col-md-12 table-striped api-provider pagination-none first-word-break api-management\">\r\n        <FinalMolGrid\r\n          ref={molGridRef}\r\n          configuration={ApiAuthenticationtGridConfig}\r\n          dataSource={listData}\r\n          allowPagination={true}\r\n          pagination={{\r\n            totalCount: totalRowCount,\r\n            pageSize: 20,\r\n            currentPage: 1,\r\n          }}\r\n          onPageChange={handlePageChange}\r\n          onSorting={handleSorting}\r\n          isLoading={isApiAuthenticationLoading}\r\n          onActionChange={actionHandler}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nApiAuthenticationList.propTypes = {\r\n  handleEditClick: PropTypes.func.isRequired,\r\n  getDataRef: PropTypes.shape({\r\n    current: PropTypes.shape({\r\n      callChildFunction: PropTypes.func,\r\n    }),\r\n  }),\r\n  providerId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  handleListData: PropTypes.func,\r\n};\r\nexport default ApiAuthenticationList;","/* eslint-disable react-hooks/exhaustive-deps */\r\n\r\nimport { useState ,useRef,useEffect,useImperativeHandle} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { addEditApiAuthenticationFormData } from \"../config/ApiAuthentication.data\";\r\nimport { removeFormFields } from \"../../../../../../utils/FormFields/RemoveFields/handleRemoveFields\";\r\nimport { setFieldSetting } from \"../../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport FormCreator from \"../../../../../../components/Forms/FormCreator\";\r\nimport Buttons from \"../../../../../../components/ui/button/Buttons\";\r\nimport { AuthenticationTypes, FieldSettingType } from \"../../../../../../utils/Enums/commonEnums\";\r\nimport ToastService from \"../../../../../../services/toastService/ToastService\";\r\nimport { onResetForm } from \"../../../../../../utils/FormFields/ResetForm/handleResetForm\";\r\nimport { useAddEditApiAuthenticationMutation, useLazyGetApiAuthenticationByAuthIdQuery,  } from \"../../../../../../app/services/apiAuthenticationAPI\";\r\n\r\n\r\nconst AddEditApiAuthentication = (props) => {\r\n  const apiAuthenticationRef = useRef();\r\n  const authId = props.authId;\r\n  const [authenticationFormData, setAuthenticationFormData] = useState(addEditApiAuthenticationFormData);\r\n  const [addEditApiAuthentication, { isLoading: isAddEditApiAuthenticationLoading, isSuccess: isAddEditApiAuthenticationSuccess, data: addEditApiAuthenticationData }] = useAddEditApiAuthenticationMutation();\r\n  const [getApiAuthenticationByAuthId, { isFetching: isGetApiAuthenticationByAuthIdFetching, isSuccess: isGetApiAuthenticationByAuthIdSuccess, data: apiAuthenticationData }] = useLazyGetApiAuthenticationByAuthIdQuery();\r\n\r\n  useEffect(() => {\r\n    let newFormData = { ...addEditApiAuthenticationFormData }\r\n    if (authId && props.isEdit) {\r\n      setAuthenticationFormData(newFormData);\r\n      getApiAuthenticationByAuthId(authId);\r\n    }\r\n    else {\r\n      handlePageLoad();\r\n    }\r\n  }, [authId, getApiAuthenticationByAuthId, props.isEdit, props.isModelOpen]);\r\n\r\n  useEffect(() => {\r\n    if (isGetApiAuthenticationByAuthIdSuccess && apiAuthenticationData && !isGetApiAuthenticationByAuthIdFetching) {\r\n      const authFieldsMap = {\r\n        [AuthenticationTypes?.OAuth]: ['authKey'],\r\n        [AuthenticationTypes?.APIKey]: ['clientSecret', 'clientId','tokenExpires','tokenEndpoint']\r\n      };\r\n\r\n      let formData = { ...authenticationFormData };\r\n      const fieldsToRemove = authFieldsMap[apiAuthenticationData.authenticationType];\r\n\r\n      if (fieldsToRemove) {\r\n        formData = removeFormFields(formData, fieldsToRemove);\r\n      }\r\n      setFieldSetting(formData, 'providerId', FieldSettingType.DISABLED, true);\r\n      const initialState = {\r\n        authId: apiAuthenticationData.authId,\r\n        providerId: apiAuthenticationData.providerId,\r\n        authKey: apiAuthenticationData.authKey,\r\n        clientId: apiAuthenticationData.clientId,\r\n        clientSecret: apiAuthenticationData.clientSecret,\r\n        tokenEndpoint: apiAuthenticationData.tokenEndpoint,\r\n        tokenExpires: apiAuthenticationData.tokenExpires,\r\n      };\r\n\r\n      // Remove the same fields from the initialState\r\n      fieldsToRemove.forEach(field => {\r\n        delete initialState[field];\r\n      });\r\n      const newFormData = {\r\n        ...formData,\r\n        initialState\r\n      };\r\n      setAuthenticationFormData(newFormData);\r\n    }\r\n  }, [isGetApiAuthenticationByAuthIdSuccess, apiAuthenticationData, isGetApiAuthenticationByAuthIdFetching]);\r\n\r\n  useEffect(() => {\r\n  \r\n    if (isAddEditApiAuthenticationSuccess && addEditApiAuthenticationData) {\r\n      props.onSuccess();\r\n      ToastService.success(addEditApiAuthenticationData.errorMessage);\r\n      props.onClose();\r\n      \r\n    }\r\n  }, [isAddEditApiAuthenticationSuccess, addEditApiAuthenticationData]);\r\n\r\nconst handlePageLoad=() => {\r\n\r\n    if (props.providerId) {\r\n      const selectedProvider = props.providerData;\r\n      let newFormData = { ...addEditApiAuthenticationFormData };\r\n\r\n      const authFieldsMap = {\r\n        [AuthenticationTypes.OAuth]: ['authKey'],\r\n        [AuthenticationTypes.APIKey]: ['clientSecret', 'clientId','tokenExpires','tokenEndpoint']\r\n      };\r\n\r\n      const fieldsToRemove = authFieldsMap[selectedProvider.authenticationType];\r\n      if (fieldsToRemove) {\r\n        newFormData = removeFormFields(newFormData, fieldsToRemove);\r\n      }\r\n\r\n      setAuthenticationFormData(newFormData);\r\n    }\r\n  };\r\n\r\n  const handleAPIAuthentication = () => {\r\n    const formData = apiAuthenticationRef.current.getFormData();\r\n    if (formData) {\r\n      const requestData = {\r\n        ...formData,\r\n        providerId: props.providerId,\r\n        tokenExpires: formData.tokenExpires ? formData.tokenExpires :null,\r\n        ...(authId && { authId }),\r\n      };\r\n      addEditApiAuthentication(requestData);\r\n    }\r\n  };\r\n\r\n  const onResetData = () => {\r\n    let formData = { ...addEditApiAuthenticationFormData };\r\n    setFieldSetting(formData, 'providerId', FieldSettingType.DISABLED, false);\r\n    onResetForm(formData, setAuthenticationFormData, null);\r\n  };\r\n\r\n\r\n  useImperativeHandle(props.childRef, () => ({\r\n    callChildFunction: onResetData,\r\n  }));\r\n\r\n\r\n  return (\r\n     \r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <div className=\"row vertical-form\">\r\n              <FormCreator\r\n                ref={apiAuthenticationRef}\r\n                config={authenticationFormData}\r\n                 {...authenticationFormData}\r\n            \r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-12 mt-2\">\r\n            <div className=\"d-flex align-item-center justify-content-end\">\r\n              <Buttons\r\n                buttonTypeClassName=\"theme-button\"\r\n                buttonText={props.isEdit ? \"Update\" : \"Save\"}\r\n                onClick={handleAPIAuthentication}\r\n                isLoading={isAddEditApiAuthenticationLoading}\r\n              />\r\n              <Buttons\r\n                buttonTypeClassName=\"dark-btn ml-5\"\r\n                buttonText=\"Cancel\"\r\n                onClick={props.onClose}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n     \r\n  );\r\n};\r\n\r\nAddEditApiAuthentication.propTypes = {\r\n  authId: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),\r\n  isEdit: PropTypes.bool.isRequired,\r\n  isModelOpen: PropTypes.bool.isRequired,\r\n  providerId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  providerData: PropTypes.shape({\r\n    authenticationType: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  onSuccess: PropTypes.func.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  childRef: PropTypes.shape({\r\n    current: PropTypes.shape({\r\n      callChildFunction: PropTypes.func.isRequired,\r\n    }),\r\n  }).isRequired,\r\n};\r\nexport default AddEditApiAuthentication;\r\n","import { useState,useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CardSection from \"../../../../../components/ui/card/CardSection\";\r\nimport ApiAuthenticationList from \"./features/ApiAuthenticationList\";\r\nimport SidebarModel from \"../../../../../components/ui/sidebarModel/SidebarModel\";\r\nimport AddEditApiAuthentication from \"./features/AddEditApiAuthentication\";\r\nimport { AppIcons } from \"../../../../../data/appIcons\";\r\n\r\n\r\nconst ApiAuthentication = ({ providerId, providerObject }) => {\r\n  const childRef = useRef();\r\n  const getDataRef=useRef()\r\n  const [isModelOpen, setIsModelOpen] = useState(false);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [authId, setAuthId] = useState(false);\r\n  const [listData , setListData] = useState(0)\r\n\r\n  const handleToggleModal = () => {\r\n    setIsModelOpen(true);\r\n  };\r\n\r\n  const onSidebarClose = () => {\r\n    setIsModelOpen(false);\r\n    setIsEdit(false);\r\n    if (childRef.current) {\r\n      childRef.current.callChildFunction();\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (data) => {\r\n    setAuthId(data.authId);\r\n    setIsEdit(true);\r\n    setIsModelOpen(true);\r\n  };\r\n\r\n  const onSuccess = () => {\r\n    if (getDataRef.current) {\r\n      getDataRef.current.callChildFunction();\r\n    }\r\n    setIsModelOpen(false);\r\n  };\r\n\r\n  const handleListData = (data) => {\r\n    setListData(data)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <CardSection\r\n        cardTitle=\"API Authentication\"\r\n        buttonClassName=\"btn theme-button\"\r\n        rightButton={listData !== 1 && true}\r\n        buttonText=\"Add\"\r\n        textWithIcon={true}\r\n        iconImg={AppIcons.PlusIcon}\r\n        titleButtonClick={handleToggleModal}\r\n      >\r\n        <ApiAuthenticationList\r\n          providerId={providerId}\r\n          getDataRef={getDataRef}\r\n          handleEditClick={handleEditClick}\r\n          handleListData={handleListData}\r\n        />\r\n      </CardSection>\r\n\r\n      <SidebarModel\r\n        modalTitle={\r\n          isEdit ? \"Upadte API Authentication\" : \"Add API Authentication\"\r\n        }\r\n        contentClass=\"content-40\"\r\n        onClose={onSidebarClose}\r\n        modalTitleIcon={AppIcons.AddIcon}\r\n        isOpen={isModelOpen}\r\n      >\r\n        <AddEditApiAuthentication\r\n          isEdit={isEdit}\r\n          providerId={providerId}\r\n          providerData={providerObject}\r\n          authId={authId}\r\n         onClose={onSidebarClose}\r\n          onSuccess={onSuccess}\r\n          isModelOpen={isModelOpen}\r\n          childRef={childRef}\r\n        />\r\n      </SidebarModel>\r\n    </div>\r\n  );\r\n};\r\nApiAuthentication.propTypes = {\r\n  providerId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  providerObject: PropTypes.object.isRequired,\r\n};\r\nexport default ApiAuthentication;\r\n"],"names":["addEditApiAuthenticationFormData","initialState","authKey","clientId","clientSecret","tokenEndpoint","tokenExpires","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","INPUT","dataField","fieldSetting","placeholder","allowSpace","validation","type","style","containerCss","DATEPICKER","formSetting","isViewOnly","ApiAuthenticationtGridConfig","columns","name","fieldName","colStyle","width","allowShort","colType","GridColumnType","DATE","colSettings","format","ACTION","defaultAction","allowEdit","allowDelete","_ref","handleEditClick","getDataRef","providerId","handleListData","molGridRef","useRef","listData","setListData","useState","totalRowCount","setTotalRowCount","confirm","SwalAlert","deleteApiAuthentication","isSuccess","isDeleteApiAuthenticationSuccess","data","isDeleteApiAuthenticationData","useDeleteApiAuthenticationMutation","getApiAuthentications","isLoading","isApiAuthenticationLoading","isApiAuthenticationSuccess","isApiAuthenticationeData","useGetApiAuthenticationsMutation","useEffect","onGetData","dataSource","length","totalRecord","ToastService","success","errorMessage","currentPageObject","current","getCurrentPageObject","handlePageChange","getLists","pageObject","sortingString","request","pagination","pageNumber","pageSize","filters","searchText","sortString","page","generateSortingString","defaultPageObject","actionHandler","EDIT","DELETE","then","confirmed","authId","useImperativeHandle","callChildFunction","_jsx","className","children","FinalMolGrid","ref","configuration","allowPagination","totalCount","currentPage","onPageChange","onSorting","shortString","onActionChange","props","apiAuthenticationRef","authenticationFormData","setAuthenticationFormData","addEditApiAuthentication","isAddEditApiAuthenticationLoading","isAddEditApiAuthenticationSuccess","addEditApiAuthenticationData","useAddEditApiAuthenticationMutation","getApiAuthenticationByAuthId","isFetching","isGetApiAuthenticationByAuthIdFetching","isGetApiAuthenticationByAuthIdSuccess","apiAuthenticationData","useLazyGetApiAuthenticationByAuthIdQuery","newFormData","isEdit","handlePageLoad","isModelOpen","authFieldsMap","AuthenticationTypes","OAuth","APIKey","formData","fieldsToRemove","authenticationType","removeFormFields","setFieldSetting","FieldSettingType","DISABLED","forEach","field","onSuccess","onClose","selectedProvider","providerData","onResetData","onResetForm","childRef","_jsxs","FormCreator","config","Buttons","buttonTypeClassName","buttonText","onClick","handleAPIAuthentication","getFormData","requestData","providerObject","setIsModelOpen","setIsEdit","setAuthId","onSidebarClose","CardSection","cardTitle","buttonClassName","rightButton","textWithIcon","iconImg","AppIcons","PlusIcon","titleButtonClick","handleToggleModal","ApiAuthenticationList","SidebarModel","modalTitle","contentClass","modalTitleIcon","AddIcon","isOpen","AddEditApiAuthentication"],"sourceRoot":""}