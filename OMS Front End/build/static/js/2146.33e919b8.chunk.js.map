{"version":3,"file":"static/js/2146.33e919b8.chunk.js","mappings":"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","sources":["components/ui/customdropdown/StatusDisplay.js","components/ui/customdropdown/CustomDropdown.js","components/ui/customdropdown/Dropdown.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst StatusDisplay = ({ status, isSelected, colorMap, textMap, iconMap }) => {\r\n\r\n  const color = isSelected ? \"#fff\" : (colorMap[status] || \"black\");\r\n  const iconSrc = iconMap[status] || \"\";\r\n  const text = textMap[status]?.text || status;\r\n\r\n  return (\r\n    <div className=\"status-container\">\r\n      {iconSrc && (\r\n        <span className=\"status-icon\" style={{ color }}>\r\n          <img src={iconSrc} alt={status} className=\"status-image\" />\r\n        </span>\r\n      )}\r\n      {text && (\r\n        <span className=\"status-text\" style={{ color }}>\r\n          {text}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nStatusDisplay.propTypes = {\r\n  status: PropTypes.string.isRequired,\r\n  isSelected: PropTypes.bool,\r\n};\r\nexport default StatusDisplay;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Select, { components } from \"react-select\";\r\nimport \"./CustomDropdown.scss\";\r\nimport StatusDisplay from \"./StatusDisplay\";\r\nimport formatDate from \"../../../lib/formatDate\";\r\n\r\nconst CustomOption = (props) => {\r\n  const { data, isSelected, selectProps } = props;\r\n  const { status, label, date } = data;\r\n  const { colorMap, textMap, iconMap } = selectProps.dropDownSettings;\r\n\r\n  return (\r\n    <components.Option {...props}>\r\n      <div className=\"custom-option\">\r\n        <span className=\"option-label\">{label}</span>\r\n        <span className=\"option-date\">{date ? formatDate(date, 'MM/DD/YYYY') : null}</span>\r\n        <StatusDisplay\r\n          status={status}\r\n          isSelected={isSelected}\r\n          colorMap={colorMap}\r\n          textMap={textMap}\r\n          iconMap={iconMap}\r\n        />\r\n      </div>\r\n    </components.Option>\r\n  );\r\n};\r\n\r\nfunction CustomDropdown(props) {\r\n  const { dropDownSettings, inputButtonGroup } = props;\r\n  const base64Icon = inputButtonGroup?.icon;\r\n\r\n  return (\r\n    <span className=\"d-inline-block custom-input\">\r\n      <Select\r\n        className=\"custom-checkbox-select\"\r\n        value={props.value}\r\n        onChange={props.handleDropdownChange}\r\n        onBlur={props.handleDropdownBlur}\r\n        options={props.optionsValue}\r\n        isMulti={props.isMultiSelect}\r\n        placeholder={props.placeholder}\r\n        isDisabled={props.isDropdownDisabled}\r\n        closeMenuOnSelect={!props.isMultiSelect}\r\n        components={{ Option: CustomOption }}\r\n        dropDownSettings={dropDownSettings}\r\n      />\r\n\r\n      {inputButtonGroup?.isInputButton && (\r\n        <button\r\n          className=\"select-button\"\r\n          // disabled={!props.value}\r\n          type=\"button\"\r\n          // onClick={props.handleInputGroupButton}\r\n          onClick={() => props.handleInputGroupButton(props.inputButtonGroup?.GetByID)}\r\n        >\r\n          {base64Icon && (\r\n            <img\r\n              src={base64Icon}\r\n              alt=\"icon\"\r\n              className=\"input-button-icon\"\r\n            />\r\n          )}\r\n          {inputButtonGroup.buttonText}\r\n        </button>\r\n      )}\r\n    </span>\r\n  );\r\n}\r\n\r\nCustomDropdown.propTypes = {\r\n  dropDownSettings: PropTypes.shape({\r\n    colorMap: PropTypes.object,\r\n    textMap: PropTypes.object,\r\n    iconMap: PropTypes.object\r\n  }).isRequired,\r\n  inputButtonGroup: PropTypes.shape({\r\n    icon: PropTypes.string,\r\n    buttonText: PropTypes.string.isRequired,\r\n    isInputButton: PropTypes.bool.isRequired\r\n  }),\r\n  handleInputGroupButton: PropTypes.func,\r\n  value: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.array\r\n  ]),\r\n  handleDropdownChange: PropTypes.func.isRequired,\r\n  handleDropdownBlur: PropTypes.func,\r\n  optionsValue: PropTypes.array,\r\n  isMultiSelect: PropTypes.bool,\r\n  placeholder: PropTypes.string,\r\n  isDropdownDisabled: PropTypes.bool\r\n};\r\nexport default CustomDropdown;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport CustomDropdown from \"./CustomDropdown\";\r\n\r\nconst DropDown = (props) => {\r\n\r\n  let defaultSelectedOption = props.value\r\n    ? props.options?.find((option) => option.value === props.value)\r\n    : null;\r\n\r\n  if (!defaultSelectedOption) {\r\n    defaultSelectedOption = props.value\r\n      ? props.options?.find((option) => option.label === props.value)\r\n      : null;\r\n  }\r\n\r\n  const defaultSelectedOptionMultiSelect = Array.isArray(props.value)\r\n    ? props.options.filter((option) => props.value.includes(option.value))\r\n    : [];\r\n \r\n  return (\r\n    <>\r\n      <span className=\"d-inline-block custom-input\">\r\n        <CustomDropdown\r\n          placeholder={props.placeholder}\r\n          isMultiSelect={props.isMultiSelect}\r\n          optionsValue={props.options}\r\n          value={\r\n            props.isMultiSelect\r\n              ? defaultSelectedOptionMultiSelect\r\n              : defaultSelectedOption\r\n          }\r\n          handleDropdownChange={props.onChange}\r\n          handleDropdownBlur={props.onBlur}\r\n          isDropdownDisabled={props.isDisabled}\r\n          dropDownSettings={props.dropDownSettings}\r\n          inputButtonGroup={props.inputButtonGroup}\r\n          handleInputGroupButton={props.handleInputGroupButton}\r\n        />\r\n      </span>\r\n    </>\r\n  );\r\n};\r\nDropDown.propTypes = {\r\n  value: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.arrayOf(PropTypes.string),\r\n  ]),\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      value: PropTypes.number.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  onBlur: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  isMultiSelect: PropTypes.bool,\r\n  isDisabled: PropTypes.bool,\r\n  dropDownSettings: PropTypes.shape({\r\n    colorMap: PropTypes.object.isRequired,\r\n    textMap: PropTypes.object.isRequired,\r\n    iconMap: PropTypes.object.isRequired\r\n  }),\r\n  inputButtonGroup: PropTypes.shape({\r\n    icon: PropTypes.string,\r\n    buttonText: PropTypes.string,\r\n    isInputButton: PropTypes.bool,\r\n  }),\r\n  handleInputGroupButton: PropTypes.func,\r\n};\r\nexport default DropDown;\r\n"],"names":["_ref","_textMap$status","status","isSelected","colorMap","textMap","iconMap","color","iconSrc","text","_jsxs","className","children","_jsx","style","src","alt","CustomOption","props","data","selectProps","label","date","dropDownSettings","components","Option","formatDate","StatusDisplay","inputButtonGroup","base64Icon","icon","Select","value","onChange","handleDropdownChange","onBlur","handleDropdownBlur","options","optionsValue","isMulti","isMultiSelect","placeholder","isDisabled","isDropdownDisabled","closeMenuOnSelect","isInputButton","type","onClick","_props$inputButtonGro","handleInputGroupButton","GetByID","buttonText","_props$options","defaultSelectedOption","find","option","_props$options2","defaultSelectedOptionMultiSelect","Array","isArray","filter","includes","_Fragment","CustomDropdown"],"sourceRoot":""}