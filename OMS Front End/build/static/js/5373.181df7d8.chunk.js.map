{"version":3,"file":"static/js/5373.181df7d8.chunk.js","mappings":"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","sources":["pages/supplierDetails/supplierGrid/feature/SupplierViewDetail/SupplierDetails.js","utils/ResponsibleUser/validateRUser.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\n//** Lib's */\r\nimport \"../../../../customerDetail/CustomerSupplier.scss\";\r\nimport { AppIcons } from \"../../../../../data/appIcons\";\r\nimport Buttons from \"../../../../../components/ui/button/Buttons\";\r\nimport { decryptUrlData } from \"../../../../../services/CryptoService\";\r\nimport CardSection from \"../../../../../components/ui/card/CardSection\";\r\nimport SidebarModel from \"../../../../../components/ui/sidebarModel/SidebarModel\";\r\nimport AddSupplierContext from \"../../../../../utils/ContextAPIs/Supplier/AddSupplierContext\";\r\n//** Service's */\r\nimport { useLazyGetSupplierBasicInformationByIdQuery } from \"../../../../../app/services/supplierAPI\";\r\nimport { validateResponsibleUserId } from \"../../../../../utils/ResponsibleUser/validateRUser\";\r\n\r\n//** Component's */\r\nconst SupplierViewTab = React.lazy(() => import(\"../../../feature/supplierViewDetail/supplierViewTabs/SupplierViewTab\"));\r\nconst SupplierBasicDetail = React.lazy(() => import(\"../../../feature/supplierBasicDetail/SupplierBasicDetail\"));\r\nconst SupplierBasicInfoCard = React.lazy(() => import(\"../../../feature/supplierViewDetail/SupplierBasicInfo/SupplierBasicInfoCard\"));\r\n\r\nconst SupplierDetails = () => {\r\n  const navigate = useNavigate();\r\n  const { id } = useParams();\r\n  const keyId = id ? decryptUrlData(id) : 0;\r\n  const [isModelOpen, setisModelOpen] = useState(false);\r\n  const [supplierData, setSupplierData] = useState(null);\r\n  const authState = useSelector((state) => state.auth);\r\n\r\n  const { setSupplierId, supplierId, setIsResponsibleUser } = useContext(AddSupplierContext);\r\n\r\n  const [\r\n    getSupplierBasicInformationById,\r\n    {\r\n      isFetching: isGetSupplierBasicInformationByIdFetching,\r\n      isSuccess: isGetSupplierBasicInformationById,\r\n      data: GetSupplierBasicInformationByIdData,\r\n    },\r\n  ] = useLazyGetSupplierBasicInformationByIdQuery();\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (\r\n      isGetSupplierBasicInformationById &&\r\n      GetSupplierBasicInformationByIdData &&\r\n      !isGetSupplierBasicInformationByIdFetching\r\n    ) {\r\n      setSupplierData(GetSupplierBasicInformationByIdData);\r\n      // if (authState?.user?.userID !== GetSupplierBasicInformationByIdData.responsibleUserId) {\r\n      //   setIsResponsibleUser(false);\r\n      // }\r\n      setIsResponsibleUser(validateResponsibleUserId(GetSupplierBasicInformationByIdData.responsibleUserId, authState?.user?.userID));\r\n    }\r\n  }, [\r\n    isGetSupplierBasicInformationById,\r\n    GetSupplierBasicInformationByIdData,\r\n    isGetSupplierBasicInformationByIdFetching,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (keyId) {\r\n      setSupplierId(keyId);\r\n      getSupplierById(keyId);\r\n    }\r\n  }, []);\r\n\r\n  const getSupplierById = (keyId) => {\r\n    keyId && getSupplierBasicInformationById(keyId);\r\n  };\r\n\r\n  const onSuccess = () => {\r\n    keyId && getSupplierBasicInformationById(keyId);\r\n  }\r\n\r\n  const handleToggleModal = () => {\r\n    setisModelOpen(true);\r\n  };\r\n  const onSidebarClose = () => {\r\n    setisModelOpen(false);\r\n  };\r\n  const handleBackClick = () => {\r\n    navigate(\"/Suppliers\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"card-bottom-m-0\">\r\n        <div className=\"row\">\r\n          <div className=\"col-xxl-12 col-xl-12 col-md-12 col-12 basic-left-part customer-desc-left-sec mb-2 mt-2\">\r\n            <CardSection>\r\n              <SupplierBasicInfoCard\r\n                editClick={handleToggleModal}\r\n                supplierData={supplierData}\r\n                isLoading={!isModelOpen ? isGetSupplierBasicInformationByIdFetching : null}\r\n                supplierId={supplierId}\r\n                getSupplierById={onSuccess}\r\n                isGetSupplierBasicInformationByIdFetching={isGetSupplierBasicInformationByIdFetching}\r\n                GetSupplierBasicInformationByIdData={GetSupplierBasicInformationByIdData}\r\n                isGetSupplierBasicInformationById={isGetSupplierBasicInformationById}\r\n              />\r\n            </CardSection>\r\n          </div>\r\n          <div className=\"col-xxl-12 col-xl-12 col-md-12 col-12 other-info-tab\">\r\n            <Buttons buttonTypeClassName=\"back-button btn dark-btn\" onClick={handleBackClick}\r\n              textWithIcon={true} buttonText=\"Back\" imagePath={AppIcons.BackArrowIcon}></Buttons>\r\n            {/* Supplier Tab's */}\r\n            <SupplierViewTab supplierId={supplierId} contryIdCode={supplierData?.countryId} supplierStatus={supplierData?.statusId} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <SidebarModel\r\n        modalTitle=\"Edit Basic Information\"\r\n        contentClass=\"content-50 basic-info-model\"\r\n        onClose={onSidebarClose}\r\n        modalTitleIcon={AppIcons.AddIcon}\r\n        isOpen={isModelOpen}>\r\n        <SupplierBasicDetail\r\n          onSidebarClose={onSidebarClose}\r\n          isOpen={isModelOpen}\r\n          supplierData={supplierData}\r\n          keyId={keyId}\r\n          getSupplierById={onSuccess}\r\n          isEditablePage={true}\r\n        />\r\n      </SidebarModel>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SupplierDetails;\r\n","/**\r\n * Checks if a user ID is included in a comma-separated string of IDs.\r\n * @param {string} userIdsString - Comma-separated string of IDs.\r\n * @param {number} loginUserId - The login user ID to check for.\r\n * @returns {boolean} - Returns true if the login user ID is included in the string, otherwise false.\r\n */\r\nexport const validateResponsibleUserId = (userIdsString, loginUserId) => {\r\n    if (!userIdsString || !loginUserId) return false;\r\n\r\n    const idsArray = userIdsString.toString().split(',').map(id => id.trim());\r\n    const loginUserIdStr = loginUserId.toString();\r\n    return idsArray.includes(loginUserIdStr);\r\n}"],"names":["SupplierViewTab","React","SupplierBasicDetail","SupplierBasicInfoCard","SupplierDetails","navigate","useNavigate","id","useParams","keyId","decryptUrlData","isModelOpen","setisModelOpen","useState","supplierData","setSupplierData","authState","useSelector","state","auth","setSupplierId","supplierId","setIsResponsibleUser","useContext","AddSupplierContext","getSupplierBasicInformationById","isFetching","isGetSupplierBasicInformationByIdFetching","isSuccess","isGetSupplierBasicInformationById","data","GetSupplierBasicInformationByIdData","useLazyGetSupplierBasicInformationByIdQuery","useEffect","_authState$user","validateResponsibleUserId","responsibleUserId","user","userID","getSupplierById","onSuccess","onSidebarClose","_jsxs","_Fragment","children","_jsx","className","CardSection","editClick","handleToggleModal","isLoading","Buttons","buttonTypeClassName","onClick","handleBackClick","textWithIcon","buttonText","imagePath","AppIcons","BackArrowIcon","contryIdCode","countryId","supplierStatus","statusId","SidebarModel","modalTitle","contentClass","onClose","modalTitleIcon","AddIcon","isOpen","isEditablePage","userIdsString","loginUserId","idsArray","toString","split","map","trim","loginUserIdStr","includes"],"sourceRoot":""}