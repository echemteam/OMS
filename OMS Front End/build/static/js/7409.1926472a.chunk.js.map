{"version":3,"file":"static/js/7409.1926472a.chunk.js","mappings":"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","sources":["common/features/component/Address/AddressGrid.js","common/features/component/Address/config/AddressForm.data.js","common/features/component/Document/Config/DocuementsData.js","utils/TransformData/TransformAPIData.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n//** Lib's */\r\nimport { AppIcons } from \"../../../../data/appIcons\";\r\nimport CardSection from \"../../../../components/ui/card/CardSection\";\r\nimport SidebarModel from \"../../../../components/ui/sidebarModel/SidebarModel\";\r\nimport { hasFunctionalPermission } from \"../../../../utils/AuthorizeNavigation/authorizeNavigation\";\r\nimport { addressFormData } from \"./config/AddressForm.data\";\r\nimport RenderTabs from \"../../../../components/ui/tabs/RenderTabs\";\r\nimport { useLazyGetAllAddressTypesQuery } from \"../../../../app/services/addressAPI\";\r\nimport { modifyAddressType } from \"../../../../utils/TransformData/TransformAPIData\";\r\nimport PropTypes from 'prop-types';\r\n//** Compoent's */\r\nconst AddEditAddress = React.lazy(() => import(\"./feature/AddEditAddress\"));\r\nconst AddressDetailCard = React.lazy(() =>\r\n  import(\"./feature/AddressDetailCard\")\r\n);\r\n\r\nconst AddressGrid = ({\r\n  keyId,\r\n  isSupplier,\r\n  isEditablePage,\r\n  SecurityKey,\r\n  getAddresssByCustomerId,\r\n  updateAddress,\r\n  addAddress,\r\n  getAddresssById,\r\n  deleteAddress,\r\n  customerStatusId,\r\n  getCompletionCount\r\n}) => {\r\n  //** States */\r\n  const editRef = useRef();\r\n  const getByIdRef = useRef();\r\n  const { formSetting } = addressFormData;\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [isModelOpen, setIsModelOpen] = useState(false);\r\n  const [showEditIcon, setShowEditIcon] = useState(true);\r\n  const [buttonVisible, setButtonVisible] = useState(true);\r\n  const [isButtonDisable, setIsButtonDisable] = useState(false);\r\n  const [tabAddressType, setTabAddressType] = useState([]);\r\n\r\n  const [\r\n    getAllAddressTypes,\r\n    { isSuccess: isGetAllAddressTypesSucess, data: allGetAllAddressTypesData },\r\n  ] = useLazyGetAllAddressTypesQuery();\r\n\r\n\r\n  //** Use Effect */\r\n  useEffect(() => {\r\n    if (isEditablePage) {\r\n      if (SecurityKey) {\r\n        const hasAddPermission = hasFunctionalPermission(SecurityKey.ADD);\r\n        const hasEditPermission = hasFunctionalPermission(SecurityKey.EDIT);\r\n        if (hasAddPermission) {\r\n          if (hasAddPermission.hasAccess === true) {\r\n            setButtonVisible(true);\r\n          } else {\r\n            setButtonVisible(false);\r\n          }\r\n        }\r\n        if (hasEditPermission && formSetting) {\r\n          if (editMode) {\r\n            if (hasEditPermission.isViewOnly === true) {\r\n              formSetting.isViewOnly = true;\r\n              setIsButtonDisable(true);\r\n            } else {\r\n              formSetting.isViewOnly = false;\r\n              setIsButtonDisable(false);\r\n            }\r\n          } else if (!editMode) {\r\n            if (hasAddPermission.hasAccess === true) {\r\n              formSetting.isViewOnly = false;\r\n              setIsButtonDisable(false);\r\n            }\r\n            if (hasEditPermission && hasEditPermission.isViewOnly === true) {\r\n              setShowEditIcon(true);\r\n            } else if (hasEditPermission.isEditable === true) {\r\n              setShowEditIcon(true);\r\n            } else {\r\n              setShowEditIcon(false);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [isEditablePage, isSupplier, SecurityKey, editMode]);\r\n\r\n  useEffect(() => {\r\n    getAllAddressTypes();\r\n  }, [keyId]);\r\n\r\n  useEffect(() => {\r\n    if (isGetAllAddressTypesSucess && allGetAllAddressTypesData) {\r\n      setTabAddressType(modifyAddressType(allGetAllAddressTypesData));\r\n    }\r\n  }, [isGetAllAddressTypesSucess, allGetAllAddressTypesData]);\r\n\r\n  //** Handle Changes */\r\n  const handleToggleModal = () => {\r\n    setEditMode(false);\r\n    setIsModelOpen(true);\r\n  };\r\n  const handleEditAddress = (data) => {\r\n    setIsModelOpen(true);\r\n    setEditMode(true);\r\n    if (editRef.current) {\r\n      editRef.current.callChildEditFunction(data?.addressId);\r\n    }\r\n  };\r\n  const onSidebarClose = () => {\r\n    setIsModelOpen(false);\r\n    setEditMode(false);\r\n    if (getByIdRef.current) {\r\n      getByIdRef.current.callChildFunction();\r\n    }\r\n  };\r\n\r\n  const components = [\r\n    (addressTypeId) => (\r\n      <div className=\"mt-2\">\r\n        <AddressDetailCard\r\n          keyId={keyId}\r\n          getAddresssByCustomerId={getAddresssByCustomerId}\r\n          onHandleEditAddress={handleEditAddress}\r\n          showEditIcon={showEditIcon}\r\n          getByIdRef={getByIdRef}\r\n          selectedAddressTypeId={addressTypeId}\r\n          deleteAddress={deleteAddress}\r\n          customerStatusId={customerStatusId}\r\n          isModelOpen={isModelOpen}\r\n          isSupplier={isSupplier}\r\n          getCompletionCount={getCompletionCount}\r\n        />\r\n      </div>\r\n    ),\r\n\r\n    (addressTypeId) => (\r\n      <div className=\"mt-2\">\r\n        <AddressDetailCard\r\n          keyId={keyId}\r\n          getAddresssByCustomerId={getAddresssByCustomerId}\r\n          onHandleEditAddress={handleEditAddress}\r\n          showEditIcon={showEditIcon}\r\n          getByIdRef={getByIdRef}\r\n          selectedAddressTypeId={addressTypeId}\r\n          deleteAddress={deleteAddress}\r\n          customerStatusId={customerStatusId}\r\n          isModelOpen={isModelOpen}\r\n          isSupplier={isSupplier}\r\n          getCompletionCount={getCompletionCount}\r\n        />\r\n      </div>\r\n    ),\r\n\r\n    (addressTypeId) => (\r\n      <div className=\"mt-2\">\r\n        <AddressDetailCard\r\n          keyId={keyId}\r\n          getAddresssByCustomerId={getAddresssByCustomerId}\r\n          onHandleEditAddress={handleEditAddress}\r\n          showEditIcon={showEditIcon}\r\n          getByIdRef={getByIdRef}\r\n          selectedAddressTypeId={addressTypeId}\r\n          deleteAddress={deleteAddress}\r\n          customerStatusId={customerStatusId}\r\n          isModelOpen={isModelOpen}\r\n          isSupplier={isSupplier}\r\n          getCompletionCount={getCompletionCount}\r\n        />\r\n      </div>\r\n    ),\r\n\r\n    (addressTypeId) => (\r\n      <div className=\"mt-2\">\r\n        <AddressDetailCard\r\n          keyId={keyId}\r\n          getAddresssByCustomerId={getAddresssByCustomerId}\r\n          onHandleEditAddress={handleEditAddress}\r\n          showEditIcon={showEditIcon}\r\n          getByIdRef={getByIdRef}\r\n          selectedAddressTypeId={addressTypeId}\r\n          deleteAddress={deleteAddress}\r\n          customerStatusId={customerStatusId}\r\n          isModelOpen={isModelOpen}\r\n          isSupplier={isSupplier}\r\n          getCompletionCount={getCompletionCount}\r\n        />\r\n      </div>\r\n    ),\r\n\r\n    (addressTypeId) => (\r\n      <div className=\"mt-2\">\r\n        <AddressDetailCard\r\n          keyId={keyId}\r\n          getAddresssByCustomerId={getAddresssByCustomerId}\r\n          onHandleEditAddress={handleEditAddress}\r\n          showEditIcon={showEditIcon}\r\n          getByIdRef={getByIdRef}\r\n          selectedAddressTypeId={addressTypeId}\r\n          deleteAddress={deleteAddress}\r\n          customerStatusId={customerStatusId}\r\n          isModelOpen={isModelOpen}\r\n          isSupplier={isSupplier}\r\n          getCompletionCount={getCompletionCount}\r\n        />\r\n      </div>\r\n    ),\r\n  ];\r\n\r\n\r\n  const filteredTabs = tabAddressType?.filter(item => isSupplier ? item.isForSuppliers : item.isForCustomers);\r\n\r\n  const tabs = filteredTabs?.map((data, index) => {\r\n    const component = components[index] ? components[index]([data.addressTypeId]) : <div className=\"mt-2\">Default Tab</div>;\r\n    return {\r\n      sMenuItemCaption: data.type,\r\n      component\r\n    };\r\n  });\r\n\r\n  return (\r\n    //<React.Fragment>\r\n    <div className=\"address-main-card-sec vertical-tab-card\">\r\n      <CardSection\r\n        cardTitle=\"Address\"\r\n        buttonClassName=\"theme-button\"\r\n        textWithIcon={true}\r\n        iconImg={AppIcons.PlusIcon}\r\n        rightButton={buttonVisible ? true : false}\r\n\r\n        buttonText=\"Add\"\r\n        titleButtonClick={handleToggleModal}\r\n      >\r\n        <div className=\"vertical-tab-inner\">\r\n          <RenderTabs tabs={tabs} isCollapse={true} />\r\n        </div>\r\n      </CardSection>\r\n      <div className=\"address-model\">\r\n        <SidebarModel\r\n          modalTitle={editMode ? \"Update Address\" : \"Add Address\"}\r\n          contentClass=\"content-35\"\r\n          onClose={onSidebarClose}\r\n          modalTitleIcon={AppIcons.AddIcon}\r\n          isOpen={isModelOpen}\r\n        >\r\n          <AddEditAddress\r\n            isOrderManage={false}\r\n            isEditablePage={isEditablePage}\r\n            editRef={editRef}\r\n            isSupplier={isSupplier}\r\n            isModelOpen={isModelOpen}\r\n            editMode={editMode}\r\n            keyId={keyId}\r\n            isButtonDisable={isButtonDisable}\r\n            updateAddress={updateAddress}\r\n            addAddress={addAddress}\r\n            getAddresssById={getAddresssById}\r\n            onSidebarClose={onSidebarClose}\r\n            getAddressTypeIdOrder={null}\r\n            orderCustomerId={null}\r\n            customerStatusId={customerStatusId}\r\n            getCompletionCount={getCompletionCount}\r\n          />\r\n        </SidebarModel>\r\n      </div>\r\n    </div>\r\n    //</React.Fragment>\r\n  );\r\n};\r\n\r\nAddressGrid.propTypes = {\r\n  keyId: PropTypes.number.isRequired,\r\n  isSupplier: PropTypes.bool.isRequired,\r\n  isEditablePage: PropTypes.bool.isRequired,\r\n  SecurityKey: PropTypes.shape({\r\n    ADD: PropTypes.string,\r\n    EDIT: PropTypes.string,\r\n  }),\r\n  getAddresssByCustomerId: PropTypes.func.isRequired,\r\n  updateAddress: PropTypes.func.isRequired,\r\n  addAddress: PropTypes.func.isRequired,\r\n  deleteAddress: PropTypes.func.isRequired,\r\n  getAddresssById: PropTypes.func.isRequired,\r\n};\r\nexport default AddressGrid;\r\n","import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const addressFormData = {\r\n  // name: \"Email From\",\r\n  initialState: { addressTypeId: \"\", addressLine1: \"\", addressLine2: \"\", addressLine3: \"\", addressLine4: \"\", addressLine5: \"\", countryId: 233, stateId: \"\", zipCode: \"\", cityId: \"\", supplierId: 0, isPreferredBilling: false, isShippingAndBilling: false, isPreferredShipping: false, stateName: \"\", cityName: \"\" },\r\n  formFields: [\r\n    {\r\n      id: \"addressTypeId\",\r\n      lable: \"Address Type \",\r\n      Field_Name: \"Address Type\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"addressTypeId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Address Type\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n\r\n    {\r\n      id: \"addressLine1\",\r\n      lable: \"Address Line 1 \",\r\n      Field_Name: \"Address Line 1\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine1\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Address Line 1\",\r\n        allowSpace: true,\r\n        maxLength: 35,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine2\",\r\n      lable: \"Address Line 2\",\r\n      Field_Name: \"Address Line 2\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine2\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Address Line 2\",\r\n        allowSpace: true,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine3\",\r\n      lable: \"Address Line 3 \",\r\n      Field_Name: \"Address Line 3\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine3\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Address Line 3\",\r\n        allowSpace: true,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine4\",\r\n      lable: \"Address Line 4 \",\r\n      Field_Name: \"Address Line 4\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine4\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Address Line 4\",\r\n        allowSpace: true,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine5\",\r\n      lable: \"Address Line 5 \",\r\n      Field_Name: \"Address Line 5\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine5\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Address Line 5\",\r\n        allowSpace: true,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"countryId\",\r\n      lable: \"Country \",\r\n      Field_Name: \"Country\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"countryId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Country\",\r\n        isEnableOnChange: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-12 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"stateId\",\r\n      lable: \"State \",\r\n      Field_Name: \"State\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"stateId\",\r\n      fieldSetting: {\r\n        isDisable: false,\r\n        placeholder: \"Select State\",\r\n        isEnableOnChange: true,\r\n        isText: false\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-12 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"cityId\",\r\n      lable: \"City \",\r\n      Field_Name: \"City\",\r\n      fieldType: FormFieldTypes.EDITABLEDROPDOWN,\r\n      dataField: \"cityId\",\r\n      fieldSetting: {\r\n        isDisable: true,\r\n        placeholder: \"Select City\",\r\n        isEnableOnChange: true,\r\n        isText: false,\r\n        isDependDropdown: {\r\n          dataField: 'stateId'\r\n        }\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-12 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"zipCode\",\r\n      lable: \"Zip Code \",\r\n      Field_Name: \"Zip Code\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"zipCode\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Zip Code\",\r\n        allowSpace: true,\r\n        maxLength: 10,\r\n      },\r\n      validation: [{ type: \"require\" }, { type: \"validZipCode\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-8 col-md-8 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"isShippingAndBilling\",\r\n      lable: \"Is Billing And Shipping are same\",\r\n      Field_Name: \"Is Billing and Shipping\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isShippingAndBilling\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-5 col-xl-5 col-md-12 col-12 col-12 \",\r\n      },\r\n    },\r\n    {\r\n      id: \"isPreferredBilling\",\r\n      lable: \"Is Preferred Billing\",\r\n      Field_Name: \"Is PreferredBilling\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isPreferredBilling\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-12 col-12 col-12 \",\r\n      },\r\n    },\r\n    {\r\n      id: \"isPreferredShipping\",\r\n      lable: \"Is Preferred Shipping\",\r\n      Field_Name: \"Is PreferredShipping\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isPreferredShipping\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-12 col-12 col-12 \",\r\n      },\r\n    },\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false\r\n  }\r\n};\r\n","import { AppIcons } from \"../../../../../data/appIcons\";\r\nimport { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\nimport { GridColumnType } from \"../../../../../data/gridColumnType\";\r\n\r\nexport const DocumentFormData = {\r\n  name: \"Document Form\",\r\n  initialState: {\r\n    name: \"\",\r\n    documentTypeId: \"\",\r\n    supplierId: \"\",\r\n    customerId: \"\",\r\n    attachment: \"\",\r\n    base64File: \"\",\r\n    storagePath: \"\"\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"documentTypeId\",\r\n      lable: \"Document Type \",\r\n      Field_Name: \"Document Type\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      fieldType: FormFieldTypes.EDITABLEDROPDOWN,\r\n      dataField: \"documentTypeId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Document Type\",\r\n        isEnableOnChange: true,\r\n        options: []\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"name\",\r\n      lable: \"Document Name \",\r\n      Field_Name: \"Document Name\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"name\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Document Name\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n        isDisable: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-6 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"attachment\",\r\n      lable: \"Attachment \",\r\n      Field_Name: \"Attachment\",\r\n      fieldType: FormFieldTypes.FILE,\r\n      dataField: \"attachment\",\r\n      fieldSetting: {\r\n        placeholder: \"Upload Attachment\",\r\n        allowSpace: true,\r\n        isButtonVisible: false,\r\n        isCustomButtonVisible: true,\r\n        acceptedFiles: '.pdf , .docx ',\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 col-12 mb-input mb-0 custom-file-upload-section\",\r\n      },\r\n\r\n    },\r\n\r\n  ],\r\n};\r\n\r\n\r\n\r\nexport const DocumentGridConfig = {\r\n  columns: [\r\n    {\r\n      name: \"Document Type\",\r\n      fieldName: \"documentType\",\r\n      // allowShort: true,\r\n    },\r\n    {\r\n      name: \"Document Name\",\r\n      fieldName: \"documentName\",\r\n      // allowShort: true,\r\n    },\r\n\r\n    {\r\n      name: \"Action\",\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowEdit: true,\r\n        allowDelete: true,\r\n      },\r\n\r\n    },\r\n  ],\r\n};\r\n\r\n\r\nexport const DocumentTypes = [\r\n  { value: 1, label: \"Tax or Registration document\" },\r\n  { value: 2, label: \"Customer details form\" },\r\n  { value: 3, label: \"Our submitted forms\" }\r\n];\r\n\r\nexport const FileTypeIcons = [\r\n  {\r\n    type: 'pdf',\r\n    icon: AppIcons.PdfIcon\r\n  },\r\n  {\r\n    type: 'doc',\r\n    icon: AppIcons.DocIcon\r\n  },\r\n  {\r\n    type: 'docx',\r\n    icon: AppIcons.DocIcon\r\n  },\r\n  {\r\n    type: 'xlsx',\r\n    icon: AppIcons.XlsIcon\r\n  },\r\n  {\r\n    type: 'xls',\r\n    icon: AppIcons.XlsIcon\r\n  },\r\n  {\r\n    type: 'ppt',\r\n    icon: AppIcons.PptIcon\r\n  },\r\n  {\r\n    type: 'zip',\r\n    icon: AppIcons.ZipIcon\r\n  },\r\n  {\r\n    type: 'csv',\r\n    icon: AppIcons.CsvIcon\r\n  }\r\n]\r\n","import formatDate from \"../../lib/formatDate\";\r\nimport { FileTypeIcons } from \"../../common/features/component/Document/Config/DocuementsData\";\r\n\r\nexport const modifyContactType = (apiResponseData) => {\r\n  const allType = {\r\n    id: 0,\r\n    type: \"All\", // It's used for all the types\r\n    isForSuppliers: true,\r\n    isForCustomers: true,\r\n    contactTypeId: \"\",\r\n  };\r\n  return [allType, ...apiResponseData];\r\n};\r\n\r\nexport const getDropDownId = (id, isEdit) => {\r\n  if (isEdit) {\r\n    return id && typeof id === \"object\" ? String(id.value) : String(id);\r\n  } else {\r\n    return Array.isArray(id) ? id.map(String).join(\",\") : id && typeof id === \"object\" ? String(id.value) : String(id);;\r\n  }\r\n};\r\n\r\nexport const modifyAddressType = (apiResponseData) => {\r\n  const allType = {\r\n    id: 0,\r\n    type: \"All\", // It's used for all the types\r\n    isForSuppliers: true,\r\n    isForCustomers: true,\r\n    addressTypeId: \"\",\r\n  };\r\n  return [allType, ...apiResponseData];\r\n};\r\n\r\nexport const modifyPhoneNumberData = (phoneDataArray) => {\r\n  const noPrimaryFound = phoneDataArray.every(data => !data.isPrimary);\r\n  const newArray = phoneDataArray.map((phoneData, index) => ({\r\n    ...phoneData,\r\n    extension: phoneData.extension === \"-\" ? 0 : phoneData.extension,\r\n    isPrimary: noPrimaryFound && index === 0 ? true : phoneData.isPrimary,\r\n  }));\r\n  return newArray;\r\n};\r\n\r\nexport const modifyEmailAddressData = (emailDataArray) => {\r\n  const noPrimaryFound = emailDataArray.every(data => !data.isPrimary);\r\n  const newArray = emailDataArray.map((emailData, index) => ({\r\n    ...emailData,\r\n    isPrimary: noPrimaryFound && index === 0 ? true : emailData.isPrimary\r\n  }));\r\n  return newArray;\r\n};\r\n\r\nexport const modifyTimeLineData = (timelineData) => {\r\n  const newArray = timelineData.map((data) => ({\r\n    ...data,\r\n    description:\r\n      data.description +\r\n      \" by \" +\r\n      data.name +\r\n      \" on \" +\r\n      formatDate(data.changedAt, \"MM/DD/YYYY hh:mm A\"),\r\n  }));\r\n  return newArray;\r\n};  \r\n\r\nexport const getFileTypeIcon = (filename) => {\r\n  const parts = filename?.split(\".\");\r\n  const fileType = parts?.length > 1 ? parts[parts.length - 1] : \"\";\r\n  return getIconForFileType(fileType);\r\n};\r\n\r\nconst getIconForFileType = (fileType) => {\r\n  const fileTypeIcon = FileTypeIcons.find((icon) => icon.type === fileType);\r\n  return fileTypeIcon ? fileTypeIcon.icon : null;\r\n};\r\n\r\nexport const documentTransformData = (data) => {\r\n\r\n\r\n  return data.reduce((acc, item) => {\r\n    const {\r\n      type,\r\n      attachment,\r\n      customerDocumentId,\r\n      customerId,\r\n      documentTypeId,\r\n      name,\r\n      createdAt,\r\n      isArchive,\r\n    } = item;\r\n\r\n    // Extract the file type and get the file icon basde on the file type\r\n    const documentIcon = getFileTypeIcon(attachment);\r\n\r\n    const transformedItem = {\r\n      attachment,\r\n      customerDocumentId,\r\n      customerId,\r\n      documentTypeId,\r\n      name,\r\n      documentIcon,\r\n      createdAt,\r\n      isArchive,\r\n      type\r\n    };\r\n\r\n    if (!acc[type]) {\r\n      acc[type] = [];\r\n    }\r\n\r\n    acc[type].push(transformedItem);\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nexport const supplierDocumentTransformData = (data) => {\r\n  return data.reduce((acc, item) => {\r\n    const {\r\n      type,\r\n      attachment,\r\n      supplierDocumentId,\r\n      supplierId,\r\n      documentTypeId,\r\n      name,\r\n      createdAt,\r\n      isArchive\r\n    } = item;\r\n\r\n    // Extract the file type and get the file icon basde on the file type\r\n    const documentIcon = getFileTypeIcon(attachment);\r\n\r\n    const transformedItem = {\r\n      attachment,\r\n      supplierDocumentId,\r\n      supplierId,\r\n      documentTypeId,\r\n      name,\r\n      documentIcon,\r\n      createdAt,\r\n      isArchive\r\n    };\r\n\r\n    if (!acc[type]) {\r\n      acc[type] = [];\r\n    }\r\n\r\n    acc[type].push(transformedItem);\r\n    return acc;\r\n  }, {});\r\n};\r\n"],"names":["AddEditAddress","React","AddressDetailCard","_ref","keyId","isSupplier","isEditablePage","SecurityKey","getAddresssByCustomerId","updateAddress","addAddress","getAddresssById","deleteAddress","customerStatusId","getCompletionCount","editRef","useRef","getByIdRef","formSetting","addressFormData","editMode","setEditMode","useState","isModelOpen","setIsModelOpen","showEditIcon","setShowEditIcon","buttonVisible","setButtonVisible","isButtonDisable","setIsButtonDisable","tabAddressType","setTabAddressType","getAllAddressTypes","isSuccess","isGetAllAddressTypesSucess","data","allGetAllAddressTypesData","useLazyGetAllAddressTypesQuery","useEffect","hasAddPermission","hasFunctionalPermission","ADD","hasEditPermission","EDIT","hasAccess","isViewOnly","isEditable","modifyAddressType","handleEditAddress","current","callChildEditFunction","addressId","onSidebarClose","callChildFunction","components","addressTypeId","_jsx","className","children","onHandleEditAddress","selectedAddressTypeId","filteredTabs","filter","item","isForSuppliers","isForCustomers","tabs","map","index","component","sMenuItemCaption","type","_jsxs","CardSection","cardTitle","buttonClassName","textWithIcon","iconImg","AppIcons","PlusIcon","rightButton","buttonText","titleButtonClick","handleToggleModal","RenderTabs","isCollapse","SidebarModel","modalTitle","contentClass","onClose","modalTitleIcon","AddIcon","isOpen","isOrderManage","getAddressTypeIdOrder","orderCustomerId","initialState","addressLine1","addressLine2","addressLine3","addressLine4","addressLine5","countryId","stateId","zipCode","cityId","supplierId","isPreferredBilling","isShippingAndBilling","isPreferredShipping","stateName","cityName","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","SELECT","dataField","fieldSetting","placeholder","isEnableOnChange","isMultiSelect","validation","style","containerCss","INPUT","allowSpace","maxLength","isDisable","isText","EDITABLEDROPDOWN","isDependDropdown","CHECKBOX","DocumentFormData","name","documentTypeId","customerId","attachment","base64File","storagePath","options","FILE","isButtonVisible","isCustomButtonVisible","acceptedFiles","FileTypeIcons","GridColumnType","ACTION","icon","PdfIcon","DocIcon","XlsIcon","PptIcon","ZipIcon","CsvIcon","modifyContactType","apiResponseData","contactTypeId","getDropDownId","isEdit","String","value","Array","isArray","join","modifyPhoneNumberData","phoneDataArray","noPrimaryFound","every","isPrimary","phoneData","extension","modifyEmailAddressData","emailDataArray","emailData","modifyTimeLineData","timelineData","description","formatDate","changedAt","getFileTypeIcon","filename","parts","split","fileType","length","getIconForFileType","fileTypeIcon","find","documentTransformData","reduce","acc","customerDocumentId","createdAt","isArchive","transformedItem","documentIcon","push","supplierDocumentTransformData","supplierDocumentId"],"sourceRoot":""}