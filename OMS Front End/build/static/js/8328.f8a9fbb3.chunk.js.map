{"version":3,"file":"static/js/8328.f8a9fbb3.chunk.js","mappings":"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","sources":["common/features/component/Address/config/AddressForm.data.js","common/features/component/Address/feature/AddEditAddress.js","common/features/component/ExistingInfo/Config/Existing.data.js","common/features/component/ExistingInfo/ExistingCustomerSupplierInfo.js","pages/order/feature/addOrderBasic/config/OrderInformation.data.js","pages/order/feature/addOrderBasic/AddOrderBasicInformation.js","utils/StatusColors/StatusColors.js"],"sourcesContent":["import { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\n\r\nexport const addressFormData = {\r\n  // name: \"Email From\",\r\n  initialState: { addressTypeId: \"\", addressLine1: \"\", addressLine2: \"\", addressLine3: \"\", addressLine4: \"\", addressLine5: \"\", countryId: 233, stateId: \"\", zipCode: \"\", cityId: \"\", supplierId: 0, isPreferredBilling: false, isShippingAndBilling: false, isPreferredShipping: false, stateName: \"\", cityName: \"\" },\r\n  formFields: [\r\n    {\r\n      id: \"addressTypeId\",\r\n      lable: \"Address Type \",\r\n      Field_Name: \"Address Type\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"addressTypeId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Address Type\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n\r\n    {\r\n      id: \"addressLine1\",\r\n      lable: \"Address Line 1 \",\r\n      Field_Name: \"Address Line 1\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine1\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Address Line 1\",\r\n        allowSpace: true,\r\n        maxLength: 35,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine2\",\r\n      lable: \"Address Line 2\",\r\n      Field_Name: \"Address Line 2\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine2\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Address Line 2\",\r\n        allowSpace: true,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine3\",\r\n      lable: \"Address Line 3 \",\r\n      Field_Name: \"Address Line 3\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine3\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Address Line 3\",\r\n        allowSpace: true,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine4\",\r\n      lable: \"Address Line 4 \",\r\n      Field_Name: \"Address Line 4\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine4\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Address Line 4\",\r\n        allowSpace: true,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"addressLine5\",\r\n      lable: \"Address Line 5 \",\r\n      Field_Name: \"Address Line 5\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"addressLine5\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Address Line 5\",\r\n        allowSpace: true,\r\n        maxLength: 35,\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-12 col-xl-12 col-md-12 col-12 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"countryId\",\r\n      lable: \"Country \",\r\n      Field_Name: \"Country\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"countryId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Country\",\r\n        isEnableOnChange: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-12 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"stateId\",\r\n      lable: \"State \",\r\n      Field_Name: \"State\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"stateId\",\r\n      fieldSetting: {\r\n        isDisable: false,\r\n        placeholder: \"Select State\",\r\n        isEnableOnChange: true,\r\n        isText: false\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-12 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"cityId\",\r\n      lable: \"City \",\r\n      Field_Name: \"City\",\r\n      fieldType: FormFieldTypes.EDITABLEDROPDOWN,\r\n      dataField: \"cityId\",\r\n      fieldSetting: {\r\n        isDisable: true,\r\n        placeholder: \"Select City\",\r\n        isEnableOnChange: true,\r\n        isText: false,\r\n        isDependDropdown: {\r\n          dataField: 'stateId'\r\n        }\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-12 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"zipCode\",\r\n      lable: \"Zip Code \",\r\n      Field_Name: \"Zip Code\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"zipCode\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Zip Code\",\r\n        allowSpace: true,\r\n        maxLength: 10,\r\n      },\r\n      validation: [{ type: \"require\" }, { type: \"validZipCode\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-8 col-md-8 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    {\r\n      id: \"isShippingAndBilling\",\r\n      lable: \"Is Billing And Shipping are same\",\r\n      Field_Name: \"Is Billing and Shipping\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isShippingAndBilling\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-5 col-xl-5 col-md-12 col-12 col-12 \",\r\n      },\r\n    },\r\n    {\r\n      id: \"isPreferredBilling\",\r\n      lable: \"Is Preferred Billing\",\r\n      Field_Name: \"Is PreferredBilling\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isPreferredBilling\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-3 col-xl-3 col-md-12 col-12 col-12 \",\r\n      },\r\n    },\r\n    {\r\n      id: \"isPreferredShipping\",\r\n      lable: \"Is Preferred Shipping\",\r\n      Field_Name: \"Is PreferredShipping\",\r\n      fieldType: FormFieldTypes.CHECKBOX,\r\n      dataField: \"isPreferredShipping\",\r\n      fieldSetting: {\r\n        placeholder: \"\",\r\n      },\r\n      // validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-12 col-12 col-12 \",\r\n      },\r\n    },\r\n  ],\r\n  formSetting: {\r\n    isViewOnly: false\r\n  }\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { forwardRef, useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\n//** Lib's */\r\nimport Buttons from \"../../../../../components/ui/button/Buttons\";\r\nimport { AddressType, FieldSettingType } from \"../../../../../utils/Enums/commonEnums\";\r\nimport FormCreator from \"../../../../../components/Forms/FormCreator\";\r\nimport { onResetForm } from \"../../../../../utils/FormFields/ResetForm/handleResetForm\";\r\nimport { removeFormFields } from \"../../../../../utils/FormFields/RemoveFields/handleRemoveFields\";\r\nimport { setFieldSetting, setDropDownOptionField } from \"../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport { addressFormData } from \"../config/AddressForm.data\";\r\n//** Service's */\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\nimport { useLazyGetAllCountriesQuery } from \"../../../../../app/services/basicdetailAPI\";\r\nimport { useLazyGetAllAddressTypesQuery, useLazyGetAllCitiesQuery, useLazyGetAllStatesQuery } from \"../../../../../app/services/addressAPI\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SetInitialCountry = {\r\n    label: \"United States\",\r\n    value: 233\r\n}\r\n\r\nconst AddEditAddress = forwardRef(({ keyId, isSupplier, updateAddress, addAddress, getAddresssById, isModelOpen, editMode, isButtonDisable, getCompletionCount,\r\n    onSidebarClose, editRef, isOrderManage, getAddressTypeIdOrder, onHandleOrderInfoRepeatCall, orderCustomerId, isEditablePage, customerStatusId }) => {\r\n\r\n    //** States */\r\n    const ref = useRef();\r\n    const [formData, setFormData] = useState(addressFormData);\r\n    const [shouldRerenderFormCreator, setShouldRerenderFormCreator] = useState(false);\r\n    const [selectedCheckboxFeild, setSelectedCheckboxFeild] = useState(null);\r\n    const [selectedCheckbox, setSelectedCheckbox] = useState(null);\r\n    const [addressEditTableId, setAddressEditTableId] = useState(0)\r\n\r\n    //** API Call's */\r\n    /**\r\n     * This hook dynamically sets the API call based on the module (customer or supplier).\r\n     * The API endpoint and parameters are configured within the SupplierAddressDetails OR CustomerAddressDetails component.\r\n    */\r\n    const [add, { isLoading: isAddLoading, isSuccess: isAddSuccess, data: isAddData }] = addAddress();\r\n    const [update, { isLoading: isUpdateLoading, isSuccess: isUpdateSuccess, data: isUpdateData }] = updateAddress();\r\n    const [getById, { isFetching: isGetByIdFetching, isSuccess: isGetByIdSuccess, data: isGetByIdData }] = getAddresssById();\r\n\r\n    const [getAllCities, { isSuccess: isGetAllCitiesSucess, isFetching: isFetchingCities, data: allGetAllCitiesData }] = useLazyGetAllCitiesQuery();\r\n    const [getAllStates, { data: allGetAllStatesData }] = useLazyGetAllStatesQuery();\r\n    const [getAllCountries, { isSuccess: isGetAllCountriesSucess, data: allGetAllCountriesData }] = useLazyGetAllCountriesQuery();\r\n    const [getAllAddressTypes, { isSuccess: isGetAllAddressTypesSucess, data: allGetAllAddressTypesData }] = useLazyGetAllAddressTypesQuery();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (editMode || isModelOpen || !isOrderManage) {\r\n                await Promise.all([\r\n                    getAllStates(),\r\n                    getAllCountries(),\r\n                    getAllAddressTypes()\r\n                ]);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [editMode, isModelOpen]);\r\n\r\n    useEffect(() => {\r\n        if (isOrderManage) {\r\n            setFieldSetting(addressFormData, 'addressTypeId', FieldSettingType.DISABLED, true);\r\n            let form = { ...addressFormData };\r\n            if (getAddressTypeIdOrder === AddressType.BILLING) {\r\n                form = removeFormFields(addressFormData, ['isShippingAndBilling', 'isPreferredShipping']);\r\n            } else if (getAddressTypeIdOrder === AddressType.SHIPPING) {\r\n                form = removeFormFields(addressFormData, ['isShippingAndBilling', 'isPreferredBilling']);\r\n            }\r\n            form.initialState = {\r\n                ...form.initialState,\r\n                addressTypeId: getAddressTypeIdOrder,\r\n            }\r\n            setFormData(form);\r\n        } else {\r\n            setFieldSetting(addressFormData, 'addressTypeId', FieldSettingType.DISABLED);\r\n        }\r\n    }, [isOrderManage, isModelOpen])\r\n\r\n    const handleResponse = (success, data) => {\r\n        if (success && data) {\r\n            handleAddressResponse(success, data);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        handleResponse(isAddSuccess, isAddData);\r\n    }, [isAddSuccess, isAddData]);\r\n\r\n    useEffect(() => {\r\n        handleResponse(isUpdateSuccess, isUpdateData);\r\n    }, [isUpdateSuccess, isUpdateData]);\r\n\r\n    useEffect(() => {\r\n        if (isSupplier && isModelOpen) {\r\n            setFieldSetting(formData, 'cityId', FieldSettingType.DISABLED, true);\r\n            // setFieldSetting(addressFormData, 'addressTypeId', FieldSettingType.DISABLED, false);\r\n            setFieldSetting(formData, 'addressTypeId', FieldSettingType.MULTISELECT, true);\r\n            if (editMode) {\r\n                setFieldSetting(formData, 'addressTypeId', FieldSettingType.MULTISELECT, false);\r\n                // setFieldSetting(addressFormData, 'addressTypeId', FieldSettingType.DISABLED, true);\r\n            }\r\n        } else if (!isModelOpen && !isOrderManage) {\r\n            onResetForm(addressFormData, setFormData, null);\r\n        } else if (!isSupplier && !isOrderManage) {\r\n            setFieldSetting(formData, 'addressTypeId', FieldSettingType.MULTISELECT, false);\r\n            // setFieldSetting(addressFormData, 'addressTypeId', FieldSettingType.DISABLED, false);\r\n        }\r\n    }, [isSupplier, isModelOpen]);\r\n\r\n    useEffect(() => {\r\n        if (isGetAllCountriesSucess && allGetAllCountriesData) {\r\n            setDropDownOptionField(allGetAllCountriesData, 'countryId', 'name', addressFormData, 'countryId');\r\n        }\r\n    }, [isGetAllCountriesSucess, allGetAllCountriesData]);\r\n\r\n    useEffect(() => {\r\n        if (!isFetchingCities & isGetAllCitiesSucess && allGetAllCitiesData) {\r\n            const cities = allGetAllCitiesData.map((item) => ({\r\n                value: item.cityId,\r\n                label: item.name,\r\n            }));\r\n            let data = { ...formData };\r\n            const dropdownField = data?.formFields?.find(data => data.id === \"cityId\");\r\n            dropdownField.fieldSetting.options = cities;\r\n            setFormData(data);\r\n        }\r\n    }, [isGetAllCitiesSucess, allGetAllCitiesData, isFetchingCities]);\r\n\r\n    useEffect(() => {\r\n        if (isGetAllAddressTypesSucess && allGetAllAddressTypesData) {\r\n            const filterCondition = (item) => {\r\n                return isSupplier ? item.isForSuppliers : item.isForCustomers;\r\n            };\r\n            setDropDownOptionField(allGetAllAddressTypesData, 'addressTypeId', 'type', addressFormData, 'addressTypeId', filterCondition);\r\n            setShouldRerenderFormCreator((prevState) => !prevState);\r\n        }\r\n    }, [isGetAllAddressTypesSucess, allGetAllAddressTypesData, isSupplier]);\r\n\r\n    useEffect(() => {\r\n        if (!isGetByIdFetching && isGetByIdSuccess && isGetByIdData) {\r\n            setAddressEditTableId(isGetByIdData.addressId);\r\n            let form = { ...formData };\r\n            let data = isGetByIdData;\r\n            if (!isButtonDisable) {\r\n                setFieldSetting(formData, 'cityId', FieldSettingType.DISABLED);\r\n                setFieldSetting(formData, 'stateId', FieldSettingType.DISABLED);\r\n            } else if (isButtonDisable) {\r\n                setFieldSetting(formData, 'cityId', FieldSettingType.DISABLED, true);\r\n                setFieldSetting(formData, 'stateId', FieldSettingType.DISABLED, true);\r\n            }\r\n            if (data.countryId) {\r\n                setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', form, 'stateId', item => item.countryId === data.countryId);\r\n            }\r\n            if (data.stateId) {\r\n                getAllCities(data.stateId)\r\n            }\r\n            form.initialState = {\r\n                customerId: isSupplier === false ? keyId : 0,\r\n                supplierId: isSupplier === true ? keyId : 0,\r\n                addressTypeId: data.addressTypeId,\r\n                addressLine1: data.addressLine1,\r\n                addressLine2: data.addressLine2,\r\n                addressLine3: data.addressLine3,\r\n                addressLine4: data.addressLine4,\r\n                addressLine5: data.addressLine5,\r\n                countryId: data.countryId,\r\n                stateId: data.stateId,\r\n                cityId: data.cityId,\r\n                zipCode: data.zipCode,\r\n                isPreferredShipping: data.isPreferredShipping,\r\n                isPreferredBilling: data.isPreferredBilling,\r\n            };\r\n            setFormData(form);\r\n        }\r\n    }, [isGetByIdFetching, isGetByIdSuccess, isGetByIdData]);\r\n\r\n    const setInitialValue = () => {\r\n        if (!editMode) {\r\n            let updatedFormData;\r\n            updatedFormData = removeFormFields(addressFormData, ['isPreferredShipping', 'isShippingAndBilling', 'isPreferredBilling']);\r\n            if (allGetAllStatesData) {\r\n                handleChangeDropdownList(SetInitialCountry, \"countryId\");\r\n                setFieldSetting(formData, 'cityId', FieldSettingType.DISABLED, true);\r\n            }\r\n            setFormData(updatedFormData)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isOrderManage) {\r\n            setInitialValue()\r\n        }\r\n    }, [allGetAllStatesData, isModelOpen])\r\n\r\n    useEffect(() => {\r\n        if (isGetByIdData) {\r\n            let updatedFormData = { ...formData };\r\n            if (isGetByIdData.type === \"Billing\") {\r\n                updatedFormData = removeFormFields(addressFormData, ['isShippingAndBilling', 'isPreferredShipping']);\r\n            } else if (isGetByIdData.type === \"Shipping\") {\r\n                updatedFormData = removeFormFields(addressFormData, ['isShippingAndBilling', 'isPreferredBilling']);\r\n            } else if (isGetByIdData.type === \"AP\" || isGetByIdData.type === \"Primary\") {\r\n                updatedFormData = removeFormFields(addressFormData, ['isShippingAndBilling', 'isPreferredBilling', 'isPreferredShipping']);\r\n            }\r\n            updatedFormData.initialState = {\r\n                customerId: isSupplier === false ? keyId : 0,\r\n                supplierId: isSupplier === true ? keyId : 0,\r\n                addressTypeId: isGetByIdData.addressTypeId,\r\n                addressLine1: isGetByIdData.addressLine1,\r\n                addressLine2: isGetByIdData.addressLine2,\r\n                addressLine3: isGetByIdData.addressLine3,\r\n                addressLine4: isGetByIdData.addressLine4,\r\n                addressLine5: isGetByIdData.addressLine5,\r\n                countryId: isGetByIdData.countryId,\r\n                stateId: isGetByIdData.stateId,\r\n                cityId: isGetByIdData.cityId,\r\n                zipCode: isGetByIdData.zipCode,\r\n                isPreferredShipping: isGetByIdData.isPreferredShipping,\r\n                isPreferredBilling: isGetByIdData.isPreferredBilling,\r\n            };\r\n            setFormData(updatedFormData);\r\n        }\r\n    }, [isGetByIdData])\r\n\r\n    const handleAddressResponse = (isSuccess, responseData) => {\r\n        if (isSuccess && responseData) {\r\n            getCompletionCount && getCompletionCount();\r\n            if (responseData.errorMessage.includes(\"exists\")) {\r\n                ToastService.warning(responseData.errorMessage);\r\n                getById(keyId);\r\n                return;\r\n            }\r\n            onResetForm(addressFormData, setFormData, null);\r\n            ToastService.success(responseData.errorMessage);\r\n            if (!isOrderManage) {\r\n                getById(keyId);\r\n                onSidebarClose();\r\n            } else {\r\n                onHandleOrderInfoRepeatCall()\r\n            }\r\n            onSidebarClose();\r\n        }\r\n    }\r\n    const getAddressTypeId = (data, isSupplier, editMode) => {\r\n        if (isSupplier) {\r\n            if (editMode) {\r\n                return data.addressTypeId && typeof data.addressTypeId === \"object\"\r\n                    ? String(data.addressTypeId.value)\r\n                    : String(data.addressTypeId);\r\n            } else {\r\n                return Array.isArray(data.addressTypeId)\r\n                    ? data.addressTypeId.map(String).join(\",\")\r\n                    : data.addressTypeId;\r\n            }\r\n        } else {\r\n            return data.addressTypeId && typeof data.addressTypeId === \"object\"\r\n                ? String(data.addressTypeId.value)\r\n                : String(data.addressTypeId);\r\n        }\r\n    };\r\n\r\n    const buildTransformedData = (data, isSupplier, keyId, editMode) => {\r\n        const addressTypeIdValue = getAddressTypeId(data, isSupplier, editMode);\r\n        const transformLocationData = (locationData, nameField) => {\r\n            if (typeof locationData === 'object') {\r\n                if (locationData.isNew) {\r\n                    return {\r\n                        id: 0, // Set id to 0 for new entries\r\n                        name: locationData.text || \"\", // Use the text for the name, or an empty string if not provided\r\n                    };\r\n                } else {\r\n                    return {\r\n                        id: locationData.value || locationData.id || 0, // Use existing value or id, or fallback to 0\r\n                        name: nameField || \"\", // Use existing nameField or fallback to an empty string\r\n                    };\r\n                }\r\n            }\r\n            return {\r\n                id: locationData || 0, // Use locationData if present, otherwise 0\r\n                name: nameField || \"\", // Use nameField if present, otherwise an empty string\r\n            };\r\n        };\r\n\r\n        const { id: stateId, name: stateName } = transformLocationData(data.stateId, data.stateName);\r\n        const { id: cityId, name: cityName } = transformLocationData(data.cityId, data.cityName);\r\n\r\n        return {\r\n            ...data,\r\n            [isSupplier ? 'supplierId' : 'customerId']: keyId,\r\n            addressTypeId: extractValue(addressTypeIdValue),\r\n            countryId: extractValue(data.countryId),\r\n            stateId,\r\n            cityId,\r\n            stateName,\r\n            cityName,\r\n        };\r\n    };\r\n\r\n    const getCustomerAddressId = (isSupplier, isGetByIdData) => {\r\n        return isSupplier === false\r\n            ? isGetByIdData ? isGetByIdData.customerAddressId : 0\r\n            : 0;\r\n    };\r\n\r\n    const getSupplierAddressId = (isSupplier, isGetByIdData) => {\r\n        return isSupplier === true\r\n            ? isGetByIdData ? isGetByIdData.supplierAddressId : 0\r\n            : 0;\r\n    };\r\n\r\n    const buildUpdateData = (transformedData, isGetByIdData, isSupplier) => {\r\n        const customerAddressId = getCustomerAddressId(isSupplier, isGetByIdData);\r\n        const supplierAddressId = getSupplierAddressId(isSupplier, isGetByIdData);\r\n        return {\r\n            ...transformedData,\r\n            addressId: isGetByIdData === null ? addressEditTableId : isGetByIdData.addressId,\r\n            customerAddressId,\r\n            supplierAddressId,\r\n        };\r\n    };\r\n\r\n    const handleAddEdit = async () => {\r\n            const data = ref.current.getFormData();\r\n        if (!data) return;\r\n        const transformedData = buildTransformedData(data, isSupplier, keyId, editMode);\r\n        if (editMode) {\r\n            const updateData = buildUpdateData(transformedData, isGetByIdData, isSupplier);\r\n            update(updateData);\r\n        } else {\r\n            // // Add mode\r\n            const customerId = orderCustomerId ? orderCustomerId : transformedData.customerId;\r\n            const req = {\r\n                ...transformedData,\r\n                customerId: customerId,\r\n            };\r\n            add(req);\r\n        }\r\n    };\r\n\r\n    const extractValue = (field) => {\r\n        return field && typeof field === \"object\" ? field.value : field;\r\n    };\r\n\r\n    const handleEdit = (addressId) => {\r\n        \r\n        addressId && getById(addressId);\r\n    }\r\n\r\n    const handleChangeDropdownList = (data, dataField) => {\r\n        const manageData = { ...formData };\r\n        if (dataField === \"countryId\") {\r\n            setDropDownOptionField(allGetAllStatesData, 'stateId', 'name', manageData, 'stateId', item => item.countryId === data.value);\r\n            setDropDownOptionField(null, 'cityId', 'name', manageData, 'cityId', null);\r\n            setFieldSetting(manageData, 'stateId', FieldSettingType.DISABLED, false);\r\n            ref.current.updateFormFieldValue({\r\n                countryId: data.value,\r\n                stateId: null,\r\n                cityId: null\r\n            });\r\n        } else if (dataField === \"stateId\") {\r\n            if (data) {\r\n                getAllCities(data.value);\r\n                setFieldSetting(manageData, 'cityId', FieldSettingType.DISABLED, false);\r\n                ref.current.updateFormFieldValue({\r\n                    stateId: data.value,\r\n                    cityId: null,\r\n                });\r\n            } else {\r\n                ref.current.updateFormFieldValue({\r\n                    cityId: null,\r\n                });\r\n            }\r\n\r\n        }\r\n        else if (!isSupplier && dataField === \"addressTypeId\") {\r\n            let filteredFormFields;\r\n            switch (data.label) {\r\n                case \"Billing\":\r\n                    filteredFormFields = editMode ? addressFormData.formFields.filter(field => field.dataField !== \"isPreferredShipping\" && field.dataField !== \"isShippingAndBilling\")\r\n                        : addressFormData.formFields.filter(field => field.dataField !== \"isPreferredShipping\");\r\n                    break;\r\n                case \"Shipping\":\r\n                    filteredFormFields = editMode ? addressFormData.formFields.filter(field => field.dataField !== \"isPreferredBilling\" && field.dataField !== \"isShippingAndBilling\")\r\n                        : addressFormData.formFields.filter(field => field.dataField !== \"isPreferredBilling\");\r\n                    break;\r\n                case \"AP\":\r\n                case \"Primary\":\r\n                    filteredFormFields = addressFormData.formFields.filter(field => field.dataField !== \"isPreferredBilling\" && field.dataField !== \"isPreferredShipping\" && field.dataField !== \"isShippingAndBilling\");\r\n                    break;\r\n                default:\r\n                    filteredFormFields = addressFormData.formFields;\r\n            }\r\n\r\n            manageData.formFields = filteredFormFields;\r\n            manageData.initialState = {\r\n                ...(editMode ? formData.initialState : addressFormData.initialState),\r\n                addressTypeId: data.value,\r\n            };\r\n\r\n            setFormData(manageData);\r\n        }\r\n    };\r\n\r\n    const handleCheckboxChanges = (data, dataField) => {\r\n        setSelectedCheckbox(data)\r\n        setSelectedCheckboxFeild(dataField)\r\n        if (dataField === \"isShippingAndBilling\" && data) {\r\n            const manageData = { ...formData };\r\n            let filteredFormFields;\r\n            filteredFormFields = addressFormData.formFields\r\n            manageData.formFields = filteredFormFields;\r\n            setFormData(manageData)\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let data = { ...formData }\r\n        if (selectedCheckboxFeild === \"isShippingAndBilling\" && selectedCheckbox === false && data.initialState.addressTypeId === 1) {\r\n            let updatedFormData;\r\n            updatedFormData = removeFormFields(formData, ['isPreferredShipping']);\r\n            setFormData(updatedFormData)\r\n        } else if (selectedCheckboxFeild === \"isShippingAndBilling\" && selectedCheckbox === false && data.initialState.addressTypeId === 2) {\r\n            let updatedFormData;\r\n            updatedFormData = removeFormFields(formData, ['isPreferredBilling']);\r\n            setFormData(updatedFormData)\r\n        }\r\n    }, [selectedCheckbox, selectedCheckboxFeild])\r\n\r\n    //** Use Imperative Handle */\r\n    useImperativeHandle(editRef, () => ({\r\n        callChildEditFunction: handleEdit\r\n    }));\r\n\r\n    const handleDropdownAction = (data, dataField) => {\r\n        if (dataField === 'stateId') {\r\n            setFieldSetting(formData, 'cityId', FieldSettingType.ISTEXT, data);\r\n            ref.current.updateFormFieldValue({ cityId: null });\r\n        } else if (dataField === 'cityId') {\r\n            if (!data) {\r\n                setFieldSetting(formData, 'stateId', FieldSettingType.ISTEXT, data);\r\n                ref.current.updateFormFieldValue({ cityId: null });\r\n            }\r\n        }\r\n    }\r\n\r\n    //** Action Handler */\r\n    const formActionHandler = {\r\n        DDL_CHANGED: handleChangeDropdownList,\r\n        CHECK_CHANGE: handleCheckboxChanges,\r\n        DA_CHANGED: handleDropdownAction\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"row mt-2 add-address-form\">\r\n            <FormCreator config={formData} ref={ref} {...formData} onActionChange={formActionHandler} onDropdownAction={formActionHandler}\r\n                onCheckBoxChange={formActionHandler} key={shouldRerenderFormCreator} />\r\n            <div className=\"col-md-12 mt-2\">\r\n                <div className=\"d-flex align-item-end justify-content-end\">\r\n                    <Buttons\r\n                        buttonTypeClassName=\"theme-button\"\r\n                        buttonText={editMode ? \"Update\" : \"Save\"}\r\n                        onClick={handleAddEdit}\r\n                        isLoading={isAddLoading || isUpdateLoading}\r\n                        isDisable={isButtonDisable} />\r\n                    <Buttons\r\n                        buttonTypeClassName=\"dark-btn ml-5\"\r\n                        buttonText=\"Cancel\"\r\n                        onClick={onSidebarClose} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nAddEditAddress.propTypes = {\r\n    keyId: PropTypes.number.isRequired,\r\n    isSupplier: PropTypes.bool.isRequired,\r\n    updateAddress: PropTypes.func.isRequired,\r\n    addAddress: PropTypes.func.isRequired,\r\n    getAddresssById: PropTypes.func.isRequired,\r\n    isModelOpen: PropTypes.bool.isRequired,\r\n    editMode: PropTypes.bool.isRequired,\r\n    isButtonDisable: PropTypes.bool.isRequired,\r\n    onSidebarClose: PropTypes.func,\r\n    editRef: PropTypes.object,\r\n    orderCustomerId: PropTypes.number,\r\n    isOrderManage: PropTypes.bool,\r\n    getAddressTypeIdOrder: PropTypes.string,\r\n    onHandleOrderInfoRepeatCall: PropTypes.func,\r\n};\r\n\r\nexport default AddEditAddress;","import { GridColumnType } from \"../../../../../data/gridColumnType\";\r\nimport { getLabelClass } from \"../../../../../utils/StatusColors/StatusColors\";\r\n\r\nexport const basicInfoData = {\r\n    columns: [\r\n        {\r\n            name: \"Search Match (%)\",\r\n            fieldName: \"matchPercentage\",\r\n            colType: GridColumnType.CUSTOM,\r\n            colStyle: {\r\n                width: \"10%\",\r\n            },\r\n            renderCustomCol: (rowData) => {\r\n                return (\r\n                    <>\r\n                        {rowData?.matchPercentage ? `${rowData.matchPercentage} %` : 'N/A'}\r\n                    </>\r\n                );\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Name\",\r\n            fieldName: \"name\",\r\n            colStyle: {\r\n                width: \"20%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Tax Id\",\r\n            fieldName: \"taxId\",\r\n            colStyle: {\r\n                width: \"10%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Country\",\r\n            fieldName: \"countryName\",\r\n            colStyle: {\r\n                width: \"15%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n\r\n        {\r\n            name: \"Email\",\r\n            fieldName: \"emailAddress\",\r\n            colStyle: {\r\n                width: \"15%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Group Type\",\r\n            fieldName: \"groupType\",\r\n            colStyle: {\r\n                width: \"15%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Status\",\r\n            fieldName: \"status\",\r\n            allowShort: false,\r\n            colType: GridColumnType.LABLE,\r\n            colStyle: {\r\n                width: \"14%\",\r\n            },\r\n            colSettings: {\r\n                valueField: \"status\",\r\n                getLableClass: getLabelClass,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: \"Action\",\r\n            colStyle: {\r\n                width: \"8%\",\r\n            },\r\n            colType: GridColumnType.ACTION,\r\n            defaultAction: {\r\n                allowEdit: true,\r\n                allowDisable: false,\r\n            },\r\n        },\r\n    ],\r\n};\r\n\r\nexport const OrderBasicInfoData = {\r\n    columns: [\r\n        {\r\n            name: \"Customer Name\",\r\n            fieldName: \"customerName\",\r\n            colStyle: {\r\n                width: \"25%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Po Number\",\r\n            fieldName: \"poNumber\",\r\n            colStyle: {\r\n                width: \"25%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Order Received Date\",\r\n            colStyle: {\r\n                width: \"25%\",\r\n            },\r\n            fieldName: \"orderReceivedDate\",\r\n            colType: GridColumnType.DATE,\r\n            colSettings: {\r\n                isUTC: true,\r\n                format: \"MM/DD/YYYY hh:mm A \",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n\r\n        {\r\n            name: \"Action\",\r\n            colStyle: {\r\n                width: \"25%\",\r\n                textAlign: \"center\",\r\n                justifyContent: \"center\"\r\n            },\r\n            colType: GridColumnType.ACTION,\r\n            defaultAction: {\r\n                allowEdit: true,\r\n                allowDisable: false,\r\n            },\r\n        },\r\n    ],\r\n};\r\n\r\nexport const validateNameEmailWebsiteGrid = {\r\n    columns: [\r\n\r\n        {\r\n            name: \"Name\",\r\n            fieldName: \"name\",\r\n            colStyle: {\r\n                width: \"10%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Tax Id\",\r\n            fieldName: \"taxId\",\r\n            colStyle: {\r\n                width: \"10%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        {\r\n            name: \"Website\",\r\n            fieldName: \"website\",\r\n            colStyle: {\r\n                width: \"10%\",\r\n            },\r\n            // allowShort: true,\r\n        },\r\n        // {\r\n        //     name: \"Country\",\r\n        //     fieldName: \"countryName\",\r\n        //     colStyle: {\r\n        //         width: \"15%\",\r\n        //     },\r\n        // },\r\n\r\n        {\r\n            name: \"Email\",\r\n            fieldName: \"emailAddress\",\r\n            colStyle: {\r\n                width: \"15%\",\r\n            },\r\n        },\r\n        {\r\n            name: \"Reason\",\r\n            fieldName: \"reason\",\r\n            colStyle: {\r\n                width: \"30%\",\r\n            },\r\n        },\r\n        {\r\n            name: \"Status\",\r\n            fieldName: \"status\",\r\n            allowShort: false,\r\n            colType: GridColumnType.LABLE,\r\n            colStyle: {\r\n                width: \"12%\",\r\n            },\r\n            colSettings: {\r\n                valueField: \"status\",\r\n                getLableClass: getLabelClass,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: \"Action\",\r\n            colStyle: {\r\n                width: \"8%\",\r\n            },\r\n            colType: GridColumnType.ACTION,\r\n            defaultAction: {\r\n                allowEdit: true,\r\n                allowDisable: false,\r\n            },\r\n        },\r\n    ],\r\n};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n//** Libs's */\r\nimport { OrderBasicInfoData, basicInfoData } from './Config/Existing.data';\r\nimport CardSection from '../../../../components/ui/card/CardSection';\r\nimport SidebarModel from '../../../../components/ui/sidebarModel/SidebarModel';\r\n//** Service's */\r\nimport { encryptUrlData } from '../../../../services/CryptoService';\r\nimport ToastService from '../../../../services/toastService/ToastService';\r\nimport { ErrorMessage } from '../../../../data/appMessages';\r\nimport FinalMolGrid from '../../../../components/FinalMolGrid/FinalMolGrid';\r\n\r\nconst ExistingCustomerSupplierInfo = forwardRef(({ parentRef, isSupplier, getExistingInfoByName, isOrderManage }) => {\r\n\r\n    //** State */\r\n    const molGridRef = useRef();\r\n    const [isExistingModel, setIsExistingModel] = useState(false);\r\n    const [existingInfoData, setExistingInfoData] = useState([]);\r\n    const [isClickOpenModle, setIsClickOpenModle] = useState(false);\r\n\r\n    //** API Call's */\r\n    const [checkExistingInformation, { isFetching: isGetSupplierDetailsBySupplierNameFetching, isSuccess: isGetSupplierDetailsBySupplierNameSucess,\r\n        data: isGetSupplierDetailsBySupplierNameData, }] = getExistingInfoByName();\r\n\r\n    //** UseEffect's */\r\n    useEffect(() => {\r\n        setIsClickOpenModle(false);\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!isGetSupplierDetailsBySupplierNameFetching && isGetSupplierDetailsBySupplierNameSucess && isGetSupplierDetailsBySupplierNameData) {\r\n            if (isClickOpenModle) {\r\n                if (isGetSupplierDetailsBySupplierNameData.length > 0) {\r\n                    setIsExistingModel(true);\r\n                    setExistingInfoData(isGetSupplierDetailsBySupplierNameData);\r\n                } else {\r\n                    ToastService.info(ErrorMessage.NoFound);\r\n                }\r\n            }\r\n        }\r\n    }, [isGetSupplierDetailsBySupplierNameFetching, isGetSupplierDetailsBySupplierNameSucess, isGetSupplierDetailsBySupplierNameData]);\r\n\r\n    //** Handle Function's */\r\n    const handleEditClick = (data) => {\r\n        let url;\r\n        if (!isSupplier) {\r\n            url = `/CustomerDetails/${encryptUrlData(data.customerId)}`;\r\n        } else {\r\n            url = `/SupplierDetails/${encryptUrlData(data.supplierId)}`;\r\n        }\r\n        window.open(url, \"_blank\");\r\n    };\r\n    const onHandleExistingInfo = (name) => {\r\n        checkExistingInformation(name);\r\n        setIsClickOpenModle(true);\r\n    };\r\n\r\n    //** Action Handler */\r\n    const actionHandler = {\r\n        EDIT: handleEditClick,\r\n    };\r\n\r\n    const sidebarClose = () => {\r\n        setIsExistingModel(false);\r\n        setIsClickOpenModle(false);\r\n        // setIsDialogOpen(false);\r\n    }\r\n\r\n    //** Use Imperative Handle */\r\n    useImperativeHandle(parentRef, () => ({\r\n        callChildFunction: onHandleExistingInfo\r\n    }));\r\n\r\n    return (\r\n        <SidebarModel modalTitle={isOrderManage ? \"Order Information\" : !isSupplier ? \"Existing Customer Information\" : \" Existing Supplier Information\"} contentClass=\"content-75 basic-info-model\"\r\n            onClose={sidebarClose} isOpen={isExistingModel}>\r\n            <div className='pop-up-input-btn mt-3'>\r\n                <CardSection>\r\n                    <div className=\"row input-list-button\">\r\n                        <div className=\"col-lg-12 table-striped\">\r\n                            <FinalMolGrid\r\n                                ref={molGridRef}\r\n                                configuration={isOrderManage ? OrderBasicInfoData : basicInfoData}\r\n                                dataSource={existingInfoData}\r\n                                onActionChange={actionHandler}\r\n                                isLoading={isGetSupplierDetailsBySupplierNameFetching} />\r\n                        </div>\r\n                    </div>\r\n                </CardSection>\r\n            </div>\r\n        </SidebarModel>\r\n    )\r\n});\r\n\r\nExistingCustomerSupplierInfo.propTypes = {\r\n    parentRef: PropTypes.shape({\r\n        current: PropTypes.shape({\r\n            callChildFunction: PropTypes.func\r\n        })\r\n    }).isRequired,\r\n    isSupplier: PropTypes.bool.isRequired,\r\n    getExistingInfoByName: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ExistingCustomerSupplierInfo;","import { AppIcons } from \"../../../../../data/appIcons\";\r\nimport { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\nimport { AddressType, OrderInformationField } from \"../../../../../utils/Enums/commonEnums\";\r\n\r\nexport const orderInformationData = {\r\n  initialState: {\r\n    customerId: \"\",\r\n    subCustomerMainCustomerId: null,\r\n    poNumber: \"\",\r\n    isBillingId: \"\",\r\n    isShippingId: \"\",\r\n    orderMethodId: \"\",\r\n    orderReceivedDate: new Date(),\r\n\r\n  },\r\n  formFields: [\r\n    {\r\n      id: \"customerId\",\r\n      lable: \"Customer Name \",\r\n      Field_Name: \"Customer Name\",\r\n      fieldType: FormFieldTypes.CUSTOMSELECT,\r\n      dataField: \"customerId\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Customer Name\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n        exemptBoundarySpaces: true,\r\n        validation: [{ type: \"require\" }],\r\n        isEnableOnChange: true,\r\n      },\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-6 mb-input\",\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      dropdownSettings: {\r\n        colorMap: {\r\n          Approved: \"#00b100\",\r\n          Pending: \"#ffd500\",\r\n          Block: \"#6444d8\",\r\n          Disable: \"#808080\",\r\n          Freeze: \"#867bf2\",\r\n          Reject: \"#ff4c51\",\r\n          Submitted: \"#06bcd2\"\r\n        },\r\n        textMap: {\r\n          Approved: { text: \"Approved\" },\r\n          Pending: { text: \"Pending\" },\r\n          Block: { text: \"Blocked\" },\r\n          Disable: { text: \"Disabled\" },\r\n          Freeze: { text: \"Freezed\" },\r\n          Reject: { text: \"Rejected\" },\r\n          Submitted: { text: \"Submitted\" },\r\n        },\r\n        iconMap: {\r\n          Approved: AppIcons.ActiveIcon,\r\n          Pending: AppIcons.PendingIcon,\r\n          Block: AppIcons.BlockedIcon,\r\n          Disable: AppIcons.disablethemeIcone,\r\n          Freeze: AppIcons.freezeblueIcone,\r\n          Reject: AppIcons.RejectedIcon,\r\n        }\r\n      },\r\n      inputButtonGroup: {\r\n        isInputButton: true,\r\n        buttonText: 'Add',\r\n        icon: AppIcons.PlusIcon,\r\n        GetByID: OrderInformationField.CustomerName\r\n      }\r\n    },\r\n    {\r\n      id: \"subCustomerMainCustomerId\",\r\n      lable: \"Sub-Customer Name\",\r\n      Field_Name: \"Sub-Customer Name\",\r\n      fieldType: FormFieldTypes.CUSTOMSELECT,\r\n      dataField: \"subCustomerMainCustomerId\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Sub-Customer Name\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n        exemptBoundarySpaces: true,\r\n        validation: [{ type: \"require\" }],\r\n        isEnableOnChange: true,\r\n      },\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-6 col-md-6 col-6 mb-input\",\r\n      },\r\n      dropdownSettings: {\r\n        colorMap: {\r\n          Approved: \"#00b100\",\r\n          Pending: \"#ffd500\",\r\n          Block: \"#6444d8\",\r\n          Disable: \"#808080\",\r\n          Freeze: \"#867bf2\",\r\n          Reject: \"#ff4c51\",\r\n          Submitted: \"#06bcd2\"\r\n        },\r\n        textMap: {\r\n          Approved: { text: \"Approved\" },\r\n          Pending: { text: \"Pending\" },\r\n          Block: { text: \"Blocked\" },\r\n          Disable: { text: \"Disabled\" },\r\n          Freeze: { text: \"Freezed\" },\r\n          Reject: { text: \"Rejected\" },\r\n          Submitted: { text: \"Submitted\" },\r\n        },\r\n        iconMap: {\r\n          Approved: AppIcons.ActiveIcon,\r\n          Pending: AppIcons.PendingIcon,\r\n          Block: AppIcons.BlockedIcon,\r\n          Disable: AppIcons.disablethemeIcone,\r\n          Freeze: AppIcons.freezeblueIcone,\r\n          Reject: AppIcons.RejectedIcon,\r\n        }\r\n      },\r\n      inputButtonGroup: {\r\n        isInputButton: true,\r\n        buttonText: 'Add',\r\n        icon: AppIcons.PlusIcon,\r\n        GetByID: OrderInformationField.SubCustomer\r\n\r\n      }\r\n    },\r\n    {\r\n      id: \"poNumber\",\r\n      lable: \"PO Number \",\r\n      Field_Name: \"PO Number\",\r\n      fieldType: FormFieldTypes.INPUT,\r\n      dataField: \"poNumber\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter PO Number\",\r\n        allowSpace: true,\r\n        maxLength: 50,\r\n        exemptBoundarySpaces: true\r\n      },\r\n      validation: [{ type: \"require\" }, { type: \"uniqueName\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-4 col-4 mb-input\",\r\n      },\r\n      // inputButtonGroup: {\r\n      //   isInputButton: true,\r\n      //   buttonText: 'Verify',\r\n      //   showInformation: {\r\n      //     showInputButton: true,\r\n      //     faIcon: \"fa-search\",\r\n      //     title: \"PO Number\"\r\n      //   }\r\n      // }\r\n      inputButtonGroupConfig: {\r\n        isPrimaryButtonVisible: true,\r\n        primaryButtonText: 'Verify',\r\n        infoButtonConfig: {\r\n          isInfoButtonVisible: true,\r\n          infoButtonIcon: \"fa-search\",\r\n          infoButtonTooltip: \"PO Number\"\r\n        }\r\n      }\r\n    },\r\n    {\r\n      id: \"orderMethodId\",\r\n      lable: \"Order Method \",\r\n      Field_Name: \"Order Method\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"orderMethodId\",\r\n      fieldSetting: {\r\n        isDisabled: false,\r\n        placeholder: \"Select Order Method\",\r\n        isEnableOnChange: true\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-4 col-12 mb-input label-name-small\",\r\n      },\r\n    },\r\n    // {\r\n    //   id: \"orderReceivedDate\",\r\n    //   lable: \"Order Received Date :\",\r\n    //   Field_Name: \"Order Received Date\",\r\n    //   fieldType: FormFieldTypes.DATEPICKER,\r\n    //   dataField: \"orderReceivedDate\",\r\n    //   fieldSetting: {\r\n    //     placeholder: \"Enter Order Received Date\",\r\n    //     options: [],\r\n    //   },\r\n    //   validation: [{ type: \"require\" }, { type: \"text\" }],\r\n    //   style: {\r\n    //     containerCss: \"col-4 mb-2\",\r\n    //   },\r\n    // },\r\n    {\r\n      id: \"orderReceivedDate\",\r\n      lable: \"Order Received Date :\",\r\n      Field_Name: \"Order Received Date\",\r\n      fieldType: FormFieldTypes.DATEPICKER,\r\n      dataField: \"orderReceivedDate\",\r\n      fieldSetting: {\r\n        placeholder: \"Enter Order Received Date\",\r\n        options: [],\r\n      },\r\n      validation: [{ type: \"require\" }, { type: \"text\" }],\r\n      style: {\r\n        containerCss: \"col-4 mb-2\",\r\n      },\r\n    },\r\n    {\r\n      id: \"isBillingId\",\r\n      lable: \"Billing Address \",\r\n      Field_Name: \"Billing Address \",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"isBillingId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Billing Address\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n        isDisabled: false,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-4 col-4 mb-input\",\r\n      },\r\n    },\r\n    {\r\n      id: \"isShippingId\",\r\n      lable: \"Shipping Address \",\r\n      Field_Name: \"shipping Address \",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"isShippingId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Shipping Address\",\r\n        isEnableOnChange: true,\r\n        isMultiSelect: false,\r\n        isDisabled: false,\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-4 col-xl-4 col-md-4 col-4 mb-input\",\r\n      },\r\n      inputButtonGroup: {\r\n        isInputButton: true,\r\n        buttonText: 'Add',\r\n        icon: AppIcons.PlusIcon,\r\n        GetByID: AddressType.SHIPPING\r\n      }\r\n    },\r\n    \r\n  ],\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, {\r\n  useContext,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { orderInformationData } from \"./config/OrderInformation.data\";\r\nimport FormCreator from \"../../../../components/Forms/FormCreator\";\r\nimport SwalAlert from \"../../../../services/swalService/SwalService\";\r\nimport {\r\n  useGetAllSubCustomerByCustomerIdMutation,\r\n  useLazyGetAllCustomersQuery,\r\n  useLazyGetAllAddressesByCustomerIdAndAddressTypeIdQuery,\r\n  useLazyGetAllOrderMethodQuery,\r\n} from \"../../../../app/services/commonAPI\";\r\nimport { setDropDownOptionField } from \"../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport SidebarModel from \"../../../../components/ui/sidebarModel/SidebarModel\";\r\nimport { AppIcons } from \"../../../../data/appIcons\";\r\nimport { addressFormData } from \"../../../../common/features/component/Address/config/AddressForm.data\";\r\nimport { AddressType } from \"../../../../utils/Enums/commonEnums\";\r\nimport NoRecordFound from \"../../../../components/ui/noRecordFound/NoRecordFound\";\r\nimport AddEditAddress from \"../../../../common/features/component/Address/feature/AddEditAddress\";\r\nimport {\r\n  useAddAddressMutation,\r\n  useLazyGetAllAddressTypesQuery,\r\n  useLazyGetCustomerAddresssByAddressIdQuery,\r\n  useUpdateAddAddressMutation,\r\n} from \"../../../../app/services/addressAPI\";\r\nimport AddOrderContext from \"../../../../utils/Order/AddOrderContext\";\r\nimport {\r\n  // useAddEditOrderInformationMutation,\r\n  useCheckPoNumberExistOrNotMutation,\r\n  useLazyGetPoNumberDetailsByPoNumberQuery,\r\n} from \"../../../../app/services/orderAPI\";\r\nimport ToastService from \"../../../../services/toastService/ToastService\";\r\nimport ExistingCustomerSupplierInfo from \"../../../../common/features/component/ExistingInfo/ExistingCustomerSupplierInfo\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst OrderDetails = ({ onHandleOrderInformation }) => {\r\n  const basicInformation = useRef();\r\n  const parentRef = useRef();\r\n  const navigate = useNavigate();\r\n  const [formData, setFormData] = useState(orderInformationData);\r\n  const [isSubCustomerDropdownVisible, setIsSubCustomerDropdownVisible] =\r\n    useState(false);\r\n  const { blocked } = SwalAlert();\r\n  const [\r\n    getAllCustomers,\r\n    {\r\n      isFetching: isGetAllCustomersFetching,\r\n      isSuccess: isGetAllCustomersSuccess,\r\n      data: isGetAllCustomersData,\r\n    },\r\n  ] = useLazyGetAllCustomersQuery();\r\n  const [\r\n    getAllSubCustomerByCustomerId,\r\n    {\r\n      isFetching: isGetAllSubCustomersFetching,\r\n      isSuccess: isGetAllSubCustomersSuccess,\r\n      data: isGetAllSubCustomersData,\r\n    },\r\n  ] = useGetAllSubCustomerByCustomerIdMutation();\r\n  const [isModelOpen, setIsModelOpen] = useState(false);\r\n  const [getShippingAddressData, setGetShippingAddressData] = useState(null);\r\n  const [getBillingAddressData, setGetBillingAddressData] = useState(null);\r\n  const [getAddressTypeId, setGetAddressTypeId] = useState(null);\r\n  const [poNumber, setPoNumber] = useState(\"\");\r\n\r\n  const {\r\n    nextStepRef,\r\n    orderCustomerId,\r\n    setOrderCustomerId,\r\n    moveNextPage,\r\n    orderId,\r\n  } = useContext(AddOrderContext);\r\n\r\n  const [\r\n    getAllShippingAddress,\r\n    {\r\n      isFetching: isGetAllShippingAddressFetching,\r\n      isSuccess: isGetAllShippingAddressSuccess,\r\n      data: isGetAllShippingAddressData,\r\n    },\r\n  ] = useLazyGetAllAddressesByCustomerIdAndAddressTypeIdQuery();\r\n  const [\r\n    getAllBillingAddress,\r\n    {\r\n      isFetching: isGetAllBillingAddressFetching,\r\n      isSuccess: isGetAllBillingAddressSuccess,\r\n      data: isGetAllBillingAddressData,\r\n    },\r\n  ] = useLazyGetAllAddressesByCustomerIdAndAddressTypeIdQuery();\r\n  const [\r\n    getAllAddressTypes,\r\n    { isSuccess: isGetAllAddressTypesSucess, data: allGetAllAddressTypesData },\r\n  ] = useLazyGetAllAddressTypesQuery();\r\n  const [\r\n    getAllOrderMethod,\r\n    { isSuccess: isGetAllOrderMethodSucess, data: allGetAllOrderMethodData },\r\n  ] = useLazyGetAllOrderMethodQuery();\r\n  const [\r\n    checkPoNumberExistOrNot,\r\n    {\r\n      isSuccess: isCheckPoNumberExistOrNotSucess,\r\n      data: isCheckPoNumberExistOrNotData,\r\n    },\r\n  ] = useCheckPoNumberExistOrNotMutation();\r\n\r\n  useEffect(() => {\r\n    if (isGetAllAddressTypesSucess && allGetAllAddressTypesData) {\r\n      const filterCondition = (item) => {\r\n        let condition = item.isForCustomers;\r\n        return condition;\r\n      };\r\n      setDropDownOptionField(\r\n        allGetAllAddressTypesData,\r\n        \"addressTypeId\",\r\n        \"type\",\r\n        addressFormData,\r\n        \"addressTypeId\",\r\n        filterCondition\r\n      );\r\n    }\r\n  }, [isGetAllAddressTypesSucess, allGetAllAddressTypesData]);\r\n\r\n  useEffect(() => {\r\n    if (isGetAllOrderMethodSucess && allGetAllOrderMethodData) {\r\n      setDropDownOptionField(\r\n        allGetAllOrderMethodData,\r\n        \"orderMethodId\",\r\n        \"orderMethod\",\r\n        orderInformationData,\r\n        \"orderMethodId\"\r\n      );\r\n    }\r\n  }, [isGetAllOrderMethodSucess, allGetAllOrderMethodData]);\r\n\r\n  useEffect(() => {\r\n    if (orderCustomerId) {\r\n      let req = {\r\n        customerId: orderCustomerId,\r\n        addressTypeId: AddressType.SHIPPING,\r\n      };\r\n      getAllShippingAddress(req);\r\n    }\r\n  }, [orderCustomerId]);\r\n\r\n  useEffect(() => {\r\n    if (orderCustomerId) {\r\n      let req = {\r\n        customerId: orderCustomerId,\r\n        addressTypeId: AddressType.BILLING,\r\n      };\r\n      getAllBillingAddress(req);\r\n    }\r\n  }, [orderCustomerId]);\r\n\r\n  useEffect(() => {\r\n    getAllAddressTypes();\r\n    getAllOrderMethod();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isGetAllShippingAddressFetching &&\r\n      isGetAllShippingAddressSuccess &&\r\n      isGetAllShippingAddressData\r\n    ) {\r\n      const getContact = isGetAllShippingAddressData.map((item) => ({\r\n        value: item.addressId,\r\n        label: item.addressLine1,\r\n      }));\r\n\r\n      // Create a new formData object to trigger re-render\r\n      setFormData((prevFormData) => {\r\n        const newFormData = { ...prevFormData };\r\n        const dropdownField = newFormData.formFields?.find(\r\n          (item) => item.dataField === \"isShippingId\"\r\n        );\r\n        if (dropdownField) {\r\n          dropdownField.fieldSetting.options = getContact;\r\n        }\r\n        return newFormData;\r\n      });\r\n    }\r\n  }, [\r\n    isGetAllShippingAddressFetching,\r\n    isGetAllShippingAddressSuccess,\r\n    isGetAllShippingAddressData,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isGetAllBillingAddressFetching &&\r\n      isGetAllBillingAddressSuccess &&\r\n      isGetAllBillingAddressData\r\n    ) {\r\n      const getContact = isGetAllBillingAddressData.map((item) => ({\r\n        value: item.addressId,\r\n        label: item.addressLine1,\r\n      }));\r\n\r\n      // Create a new formData object to trigger re-render\r\n      setFormData((prevFormData) => {\r\n        const newFormData = { ...prevFormData };\r\n        const dropdownField = newFormData.formFields?.find(\r\n          (item) => item.dataField === \"isBillingId\"\r\n        );\r\n        if (dropdownField) {\r\n          dropdownField.fieldSetting.options = getContact;\r\n        }\r\n        return newFormData;\r\n      });\r\n    }\r\n  }, [\r\n    isGetAllBillingAddressFetching,\r\n    isGetAllBillingAddressSuccess,\r\n    isGetAllBillingAddressData,\r\n  ]);\r\n\r\n  const onSidebarClose = () => {\r\n    setIsModelOpen(false);\r\n  };\r\n\r\n  const handleOrderInfoRepeatCall = () => {\r\n    let req = {\r\n      customerId: orderCustomerId,\r\n      addressTypeId: AddressType.SHIPPING,\r\n    };\r\n    getAllShippingAddress(req);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllCustomers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isGetAllCustomersFetching &&\r\n      isGetAllCustomersSuccess &&\r\n      isGetAllCustomersData\r\n    ) {\r\n      const customerData = isGetAllCustomersData.map((item) => ({\r\n        value: item.customerId,\r\n        label: item.name,\r\n        date: item.createdAt,\r\n        status: item.statusName,\r\n        isBuyingForThirdParty: item.isBuyingForThirdParty,\r\n      }));\r\n      let data = { ...formData };\r\n      const dropdownField = data?.formFields?.find(\r\n        (item) => item.dataField === \"customerId\"\r\n      );\r\n      dropdownField.fieldSetting.options = customerData;\r\n      setFormData(data);\r\n    }\r\n  }, [\r\n    isGetAllCustomersFetching,\r\n    isGetAllCustomersSuccess,\r\n    isGetAllCustomersData,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isGetAllSubCustomersFetching &&\r\n      isGetAllSubCustomersSuccess &&\r\n      isGetAllSubCustomersData\r\n    ) {\r\n      // if (isGetAllSubCustomersData.length === 0) {\r\n      //   setFormData((prevFormData) => ({\r\n      //     ...prevFormData,\r\n      //     formFields: prevFormData.formFields.filter((field) => field.dataField !== \"subCustomerMainCustomerId\"),\r\n      //   }));\r\n      // } else {\r\n      const subcustomerOptions = isGetAllSubCustomersData.map((item) => ({\r\n        value: item.subCustomerId,\r\n        label: item.subCustomerName,\r\n      }));\r\n      setFormData((prevFormData) => {\r\n        const updatedFormData = { ...prevFormData };\r\n        const dropdownField = updatedFormData.formFields?.find((item) => item.dataField === \"subCustomerMainCustomerId\");\r\n        if (dropdownField) {\r\n          dropdownField.fieldSetting.options = subcustomerOptions;\r\n        }\r\n        return updatedFormData;\r\n      });\r\n    }\r\n    // }\r\n  }, [\r\n    isGetAllSubCustomersFetching,\r\n    isGetAllSubCustomersSuccess,\r\n    isGetAllSubCustomersData,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (!isSubCustomerDropdownVisible) {\r\n      setFormData((prevFormData) => ({\r\n        ...prevFormData,\r\n        formFields: prevFormData.formFields.filter((field) => field.dataField !== \"subCustomerMainCustomerId\"),\r\n      }));\r\n    }\r\n  }, [isSubCustomerDropdownVisible]);\r\n\r\n  const handleChangeDropdownList = async (data, dataField) => {\r\n\r\n    const blockedOptionValue = \"Block\";\r\n    if (data.status === blockedOptionValue) {\r\n      const result = await blocked(\r\n        \"Blocked !\",\r\n        \"The selected customer is currently blocked. Please choose a different customer\",\r\n        \"OK\",\r\n        \"Cancel\"\r\n      );\r\n      if (result) {\r\n        return; // Exit the function if blocked\r\n      }\r\n    }\r\n\r\n    if (dataField === \"customerId\") {\r\n      setOrderCustomerId(data.value);\r\n      if (data.isBuyingForThirdParty) {\r\n        setIsSubCustomerDropdownVisible(true);\r\n        getAllSubCustomerByCustomerId(data.value);\r\n        setFormData({ ...orderInformationData });\r\n        basicInformation.current.updateFormFieldValue({\r\n          customerId: data.value,\r\n          subCustomerMainCustomerId: null,\r\n          isBillingId: null,\r\n          isShippingId: null,\r\n        });\r\n        setGetShippingAddressData(null)\r\n        setGetBillingAddressData(null)\r\n      } else {\r\n        setIsSubCustomerDropdownVisible(false);\r\n      }\r\n    }\r\n\r\n    if (data.value && dataField === \"isShippingId\") {\r\n      const finalData = isGetAllShippingAddressData?.filter(\r\n        (item) => item.addressId === data.value\r\n      );\r\n      setGetShippingAddressData(finalData.length ? finalData[0] : null);\r\n    }\r\n    if (data.value && dataField === \"isBillingId\") {\r\n      const finalData = isGetAllBillingAddressData?.filter(\r\n        (item) => item.addressId === data.value\r\n      );\r\n      setGetBillingAddressData(finalData.length ? finalData[0] : null);\r\n    }\r\n  };\r\n\r\n  const formActionHandler = {\r\n    DDL_CHANGED: handleChangeDropdownList,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isCheckPoNumberExistOrNotSucess && isCheckPoNumberExistOrNotData) {\r\n      if (isCheckPoNumberExistOrNotData.errorMessage.includes(\"exists\")) {\r\n        ToastService.warning(isCheckPoNumberExistOrNotData.errorMessage);\r\n        return;\r\n      }\r\n    }\r\n  }, [isCheckPoNumberExistOrNotSucess, isCheckPoNumberExistOrNotData]);\r\n\r\n  const handleInputGroupButton = (id) => {\r\n    if (orderCustomerId) {\r\n      if (typeof id === \"number\" && id > 0) {\r\n        setGetAddressTypeId(id);\r\n        setIsModelOpen(!isModelOpen);\r\n      } else if (\r\n        typeof id !== \"number\" &&\r\n        id.target &&\r\n        id.target.textContent === \"Verify\"\r\n      ) {\r\n        if (poNumber !== \"\") {\r\n          let request = {\r\n            customerId: orderCustomerId,\r\n            poNumber: poNumber,\r\n          };\r\n          checkPoNumberExistOrNot(request);\r\n        }\r\n      } else if (id === \"CustomerName\" || id === \"SubCustomer\") {\r\n        navigate(`/addCustomer`);\r\n      }\r\n    } else if (id === \"CustomerName\" || id === \"SubCustomer\") {\r\n      navigate(`/addCustomer`);\r\n    } else {\r\n      ToastService.warning(\"Please select customer\");\r\n    }\r\n  };\r\n\r\n  const updatedFormData = { ...formData };\r\n  if (!isSubCustomerDropdownVisible) {\r\n    updatedFormData.formFields = updatedFormData.formFields.filter(\r\n      (field) => field.dataField !== \"subCustomerMainCustomerId\"\r\n    );\r\n  }\r\n\r\n  const handleExistingInfo = () => {\r\n    if (poNumber !== \"\" && poNumber.trim().length >= 3) {\r\n      if (parentRef.current) {\r\n        parentRef.current.callChildFunction(poNumber);\r\n      }\r\n    } else {\r\n      ToastService.warning(\"Please enter at least three characters.\");\r\n    }\r\n  };\r\n\r\n  const handleInputFields = (data, dataField) => {\r\n    if (dataField === \"poNumber\") {\r\n      const trimCustomerName = data.replace(/\\s+/g, \"\");\r\n      setPoNumber(trimCustomerName);\r\n    }\r\n  };\r\n\r\n  const formInputHandler = {\r\n    INPUT_CHANGED: handleInputFields,\r\n  };\r\n\r\n  useImperativeHandle(nextStepRef, () => ({\r\n    handleAddOrderInformation,\r\n  }));\r\n\r\n const handleAddOrderInformation = async () => {\r\n    let data = basicInformation.current.getFormData();\r\n    if (data && data.customerId && data.poNumber) {\r\n        let checkPoRequest = {\r\n            customerId: data.customerId && typeof data.customerId === \"object\"\r\n                ? data.customerId.value\r\n                : data.customerId,\r\n            poNumber: data.poNumber\r\n        };\r\n\r\n        let responseData = await checkPoNumberExistOrNot(checkPoRequest);\r\n        if (responseData.data) {\r\n            if (responseData.data.errorMessage.includes(\"PO Number already exists\")) {\r\n              return ;\r\n            } else {\r\n                let req = {\r\n                    orderId: orderId ? orderId : 0,\r\n                    orderMethodId: data.orderMethodId && typeof data.orderMethodId === \"object\"\r\n                        ? data.orderMethodId.value\r\n                        : data.orderMethodId,\r\n                    orderReceivedDate: data.orderReceivedDate,\r\n                    orderAddressId: 0,\r\n                    customerId: data.customerId && typeof data.customerId === \"object\"\r\n                        ? data.customerId.value\r\n                        : data.customerId,\r\n                    subCustomerId: data.subCustomerMainCustomerId &&\r\n                        typeof data.subCustomerMainCustomerId === \"object\"\r\n                        ? data.subCustomerMainCustomerId.value\r\n                        : data.subCustomerMainCustomerId,\r\n                    poNumber: data.poNumber,\r\n                    billingAddressId: data.isBillingId && typeof data.isBillingId === \"object\"\r\n                        ? data.isBillingId.value\r\n                        : data.isBillingId,\r\n                    shippingAddressId: data.isShippingId && typeof data.isShippingId === \"object\"\r\n                        ? data.isShippingId.value\r\n                        : data.isShippingId\r\n                };\r\n                onHandleOrderInformation(req);\r\n                moveNextPage();\r\n            }\r\n        } \r\n    }\r\n};\r\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <FormCreator\r\n          config={formData}\r\n          ref={basicInformation}\r\n          {...formData}\r\n          onActionChange={formActionHandler}\r\n          handleInputGroupButton={handleInputGroupButton}\r\n          onInputChange={formInputHandler}\r\n          onClick={handleAddOrderInformation}\r\n          handleInputShowInfo={handleExistingInfo}\r\n        />\r\n      </div>\r\n      <div className=\"row address-group\">\r\n        {getBillingAddressData &&\r\n          <div className=\"col-4\">\r\n            <h6>Billing Address</h6>\r\n            <div className=\"address\">\r\n              {getBillingAddressData ? (\r\n                <>\r\n                  <div>{getBillingAddressData.addressLine1}</div>\r\n                  <div>{getBillingAddressData.addressLine2}</div>\r\n                  <div>{getBillingAddressData.cityName}</div>\r\n                  <div>{getBillingAddressData.stateName}</div>\r\n                  <div>\r\n                    {getBillingAddressData.countryName},{\" \"}\r\n                    {getBillingAddressData.zipCode}\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <NoRecordFound message=\"No Address Found\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n        }\r\n        {getShippingAddressData &&\r\n          <div className=\"col-4\">\r\n            <h6>Shipping Address</h6>\r\n            <div className=\"address\">\r\n              {getShippingAddressData ? (\r\n                <>\r\n                  <div>{getShippingAddressData.addressLine1}</div>\r\n                  <div>{getShippingAddressData.addressLine2}</div>\r\n                  <div>{getShippingAddressData.cityName}</div>\r\n                  <div>{getShippingAddressData.stateName}</div>\r\n                  <div>\r\n                    {getShippingAddressData.countryName},{\" \"}\r\n                    {getShippingAddressData.zipCode}\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <NoRecordFound message=\"No Address Found\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n        }\r\n      </div>\r\n\r\n      <ExistingCustomerSupplierInfo\r\n        parentRef={parentRef}\r\n        isOrderManage={true}\r\n        isSupplier={false}\r\n        getExistingInfoByName={useLazyGetPoNumberDetailsByPoNumberQuery}\r\n      />\r\n\r\n      <SidebarModel\r\n        modalTitle=\"Add/Edit Address\"\r\n        contentClass=\"content-35\"\r\n        onClose={onSidebarClose}\r\n        modalTitleIcon={AppIcons.AddIcon}\r\n        isOpen={isModelOpen}\r\n      >\r\n        {/* <div className=\"mt-2\">\r\n          <FormCreator\r\n            config={formAddressData}\r\n            ref={ref}\r\n            {...formAddressData}\r\n          />\r\n        </div> */}\r\n        <AddEditAddress\r\n          // editRef={editRef}\r\n          // isSupplier={isSupplier}\r\n          isModelOpen={isModelOpen}\r\n          // editMode={editMode}\r\n          // keyId={keyId}\r\n          // isButtonDisable={isButtonDisable}\r\n          isOrderManage={true}\r\n          updateAddress={useUpdateAddAddressMutation}\r\n          addAddress={useAddAddressMutation}\r\n          getAddresssById={useLazyGetCustomerAddresssByAddressIdQuery}\r\n          onSidebarClose={onSidebarClose}\r\n          getAddressTypeIdOrder={getAddressTypeId}\r\n          orderCustomerId={orderCustomerId}\r\n          onHandleOrderInfoRepeatCall={handleOrderInfoRepeatCall}\r\n        />\r\n      </SidebarModel>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrderDetails;\r\n","export const getLabelClass = (value) => {\r\n    switch (value) {\r\n      case \"Active\":\r\n        return \"status-btn badge-gradient-success\";\r\n      case \"Open\":\r\n        return \"status-btn badge-gradient-info\";\r\n      case \"In Active\":\r\n        return \"status-btn badge-gradient-danger\";\r\n      case \"Pending\":\r\n        return \"status-btn badge-gradient-Pending\";\r\n      case \"In progress\":\r\n        return \"status-btn badge-gradient-theme\";\r\n      case \"Submitted\":\r\n        return \"status-btn badge-gradient-Submitted\";\r\n      case \"Approved\":\r\n        return \"status-btn badge-gradient-Approved\";\r\n      case \"Freeze\":\r\n        return \"status-btn badge-gradient-Frozen\";\r\n      case \"Block\":\r\n        return \"status-btn badge-gradient-Blocked\";\r\n      case \"Reject\":\r\n        return \"status-btn badge-gradient-reject\";\r\n      case \"Disable\":\r\n        return \"status-btn badge-gradient-disabled\";\r\n      default:\r\n        return \"status-btn badge-gradient-info\";\r\n    }\r\n  };"],"names":["addressFormData","initialState","addressTypeId","addressLine1","addressLine2","addressLine3","addressLine4","addressLine5","countryId","stateId","zipCode","cityId","supplierId","isPreferredBilling","isShippingAndBilling","isPreferredShipping","stateName","cityName","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","SELECT","dataField","fieldSetting","placeholder","isEnableOnChange","isMultiSelect","validation","type","style","containerCss","INPUT","allowSpace","maxLength","isDisable","isText","EDITABLEDROPDOWN","isDependDropdown","CHECKBOX","formSetting","isViewOnly","SetInitialCountry","label","value","forwardRef","_ref","keyId","isSupplier","updateAddress","addAddress","getAddresssById","isModelOpen","editMode","isButtonDisable","getCompletionCount","onSidebarClose","editRef","isOrderManage","getAddressTypeIdOrder","onHandleOrderInfoRepeatCall","orderCustomerId","isEditablePage","customerStatusId","ref","useRef","formData","setFormData","useState","shouldRerenderFormCreator","setShouldRerenderFormCreator","selectedCheckboxFeild","setSelectedCheckboxFeild","selectedCheckbox","setSelectedCheckbox","addressEditTableId","setAddressEditTableId","add","isLoading","isAddLoading","isSuccess","isAddSuccess","data","isAddData","update","isUpdateLoading","isUpdateSuccess","isUpdateData","getById","isFetching","isGetByIdFetching","isGetByIdSuccess","isGetByIdData","getAllCities","isGetAllCitiesSucess","isFetchingCities","allGetAllCitiesData","useLazyGetAllCitiesQuery","getAllStates","allGetAllStatesData","useLazyGetAllStatesQuery","getAllCountries","isGetAllCountriesSucess","allGetAllCountriesData","useLazyGetAllCountriesQuery","getAllAddressTypes","isGetAllAddressTypesSucess","allGetAllAddressTypesData","useLazyGetAllAddressTypesQuery","useEffect","async","Promise","all","fetchData","setFieldSetting","FieldSettingType","DISABLED","form","AddressType","BILLING","removeFormFields","SHIPPING","handleResponse","success","handleAddressResponse","MULTISELECT","onResetForm","setDropDownOptionField","_data$formFields","cities","map","item","name","dropdownField","find","options","filterCondition","isForSuppliers","isForCustomers","prevState","addressId","customerId","setInitialValue","updatedFormData","handleChangeDropdownList","responseData","errorMessage","includes","ToastService","warning","buildTransformedData","addressTypeIdValue","getAddressTypeId","String","Array","isArray","join","transformLocationData","locationData","nameField","isNew","text","extractValue","field","handleEdit","manageData","current","updateFormFieldValue","filteredFormFields","filter","useImperativeHandle","callChildEditFunction","formActionHandler","DDL_CHANGED","CHECK_CHANGE","handleCheckboxChanges","DA_CHANGED","handleDropdownAction","ISTEXT","_jsxs","className","children","_createElement","FormCreator","config","onActionChange","onDropdownAction","onCheckBoxChange","key","_jsx","Buttons","buttonTypeClassName","buttonText","onClick","getFormData","transformedData","updateData","buildUpdateData","customerAddressId","getCustomerAddressId","supplierAddressId","getSupplierAddressId","req","basicInfoData","columns","fieldName","colType","GridColumnType","CUSTOM","colStyle","width","renderCustomCol","rowData","_Fragment","matchPercentage","allowShort","LABLE","colSettings","valueField","getLableClass","getLabelClass","ACTION","defaultAction","allowEdit","allowDisable","OrderBasicInfoData","DATE","isUTC","format","textAlign","justifyContent","validateNameEmailWebsiteGrid","parentRef","getExistingInfoByName","molGridRef","isExistingModel","setIsExistingModel","existingInfoData","setExistingInfoData","isClickOpenModle","setIsClickOpenModle","checkExistingInformation","isGetSupplierDetailsBySupplierNameFetching","isGetSupplierDetailsBySupplierNameSucess","isGetSupplierDetailsBySupplierNameData","length","info","ErrorMessage","NoFound","onHandleExistingInfo","actionHandler","EDIT","url","encryptUrlData","window","open","callChildFunction","SidebarModel","modalTitle","contentClass","onClose","sidebarClose","isOpen","CardSection","FinalMolGrid","configuration","dataSource","orderInformationData","subCustomerMainCustomerId","poNumber","isBillingId","isShippingId","orderMethodId","orderReceivedDate","Date","CUSTOMSELECT","exemptBoundarySpaces","dropdownSettings","colorMap","Approved","Pending","Block","Disable","Freeze","Reject","Submitted","textMap","iconMap","AppIcons","ActiveIcon","PendingIcon","BlockedIcon","disablethemeIcone","freezeblueIcone","RejectedIcon","inputButtonGroup","isInputButton","icon","PlusIcon","GetByID","OrderInformationField","CustomerName","SubCustomer","inputButtonGroupConfig","isPrimaryButtonVisible","primaryButtonText","infoButtonConfig","isInfoButtonVisible","infoButtonIcon","infoButtonTooltip","isDisabled","DATEPICKER","onHandleOrderInformation","basicInformation","navigate","useNavigate","isSubCustomerDropdownVisible","setIsSubCustomerDropdownVisible","blocked","SwalAlert","getAllCustomers","isGetAllCustomersFetching","isGetAllCustomersSuccess","isGetAllCustomersData","useLazyGetAllCustomersQuery","getAllSubCustomerByCustomerId","isGetAllSubCustomersFetching","isGetAllSubCustomersSuccess","isGetAllSubCustomersData","useGetAllSubCustomerByCustomerIdMutation","setIsModelOpen","getShippingAddressData","setGetShippingAddressData","getBillingAddressData","setGetBillingAddressData","setGetAddressTypeId","setPoNumber","nextStepRef","setOrderCustomerId","moveNextPage","orderId","useContext","AddOrderContext","getAllShippingAddress","isGetAllShippingAddressFetching","isGetAllShippingAddressSuccess","isGetAllShippingAddressData","useLazyGetAllAddressesByCustomerIdAndAddressTypeIdQuery","getAllBillingAddress","isGetAllBillingAddressFetching","isGetAllBillingAddressSuccess","isGetAllBillingAddressData","getAllOrderMethod","isGetAllOrderMethodSucess","allGetAllOrderMethodData","useLazyGetAllOrderMethodQuery","checkPoNumberExistOrNot","isCheckPoNumberExistOrNotSucess","isCheckPoNumberExistOrNotData","useCheckPoNumberExistOrNotMutation","getContact","prevFormData","_newFormData$formFiel","newFormData","_newFormData$formFiel2","customerData","date","createdAt","status","statusName","isBuyingForThirdParty","subcustomerOptions","subCustomerId","subCustomerName","_updatedFormData$form","finalData","formInputHandler","INPUT_CHANGED","handleInputFields","trimCustomerName","replace","handleAddOrderInformation","checkPoRequest","orderAddressId","billingAddressId","shippingAddressId","handleInputGroupButton","target","textContent","onInputChange","handleInputShowInfo","handleExistingInfo","trim","countryName","NoRecordFound","message","ExistingCustomerSupplierInfo","useLazyGetPoNumberDetailsByPoNumberQuery","modalTitleIcon","AddIcon","AddEditAddress","useUpdateAddAddressMutation","useAddAddressMutation","useLazyGetCustomerAddresssByAddressIdQuery","handleOrderInfoRepeatCall"],"sourceRoot":""}