{"version":3,"file":"static/js/9212.92f91183.chunk.js","mappings":"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","sources":["common/features/component/SubCustomer/config/SubCustomer.data.js","common/features/component/SubCustomer/feature/AddEditSubCustomer.js","common/features/component/SubCustomer/feature/SubCustomerList.js","common/features/component/SubCustomer/SubCustomerGrid.js","pages/customerDetail/feature/customerSubCustomerDetail/CustomerSubCustomerDetail.js"],"sourcesContent":["import { AppIcons } from \"../../../../../data/appIcons\";\r\nimport { FormFieldTypes } from \"../../../../../data/formFieldType\";\r\nimport { GridColumnType } from \"../../../../../data/gridColumnType\";\r\n\r\nexport const SubCustomerFormData = {\r\n  name: \"SubCustomer From\",\r\n  initialState: { customerId: \"\" },\r\n  formFields: [\r\n    {\r\n      id: \"customerId\",\r\n      lable: \"Link Customer \",\r\n      Field_Name: \"Link Customer\",\r\n      fieldType: FormFieldTypes.SELECT,\r\n      dataField: \"customerId\",\r\n      fieldSetting: {\r\n        placeholder: \"Select Customer \",\r\n        isMultiSelect: true,\r\n        options: []\r\n      },\r\n      validation: [{ type: \"require\" }],\r\n      style: {\r\n        containerCss: \"col-xxl-6 col-xl-12 col-md-12 col-12 col-12 mb-input\",\r\n      },\r\n    },],\r\n  formSetting: {\r\n    isViewOnly: false\r\n  }\r\n}\r\n\r\nexport const SubCustomerGridConfig = {\r\n  columns: [\r\n\r\n    {\r\n      name: \"Customer\",\r\n      fieldName: \"subCustomerName\",\r\n      colStyle: {\r\n        width: \"30%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Country\",\r\n      fieldName: \"countryName\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n\r\n    {\r\n      name: \"Tax Id\",\r\n      fieldName: \"taxId\",\r\n      colStyle: {\r\n        width: \"25%\",\r\n      },\r\n      allowShort: true,\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      colStyle: {\r\n        width: \"20%\",\r\n      },\r\n      colType: GridColumnType.ACTION,\r\n      defaultAction: {\r\n        allowDelete: true,\r\n      },\r\n      customAction: [\r\n        {\r\n          name: \"VIEWCUSTOMER\",\r\n          iconName: \"lets-icons:view\",\r\n          title: \"View Customer\",\r\n          className: \"view-icon\"\r\n        },\r\n      ],\r\n\r\n    },\r\n  ],\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useImperativeHandle, useState,useRef,useEffect } from \"react\";\r\nimport FormCreator from \"../../../../../components/Forms/FormCreator\";\r\nimport Buttons from \"../../../../../components/ui/button/Buttons\";\r\nimport { SubCustomerFormData } from \"../config/SubCustomer.data\";\r\nimport PropTypes from \"prop-types\";\r\nimport { setDropDownOptionField } from \"../../../../../utils/FormFields/FieldsSetting/SetFieldSetting\";\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\nimport { onResetForm } from \"../../../../../utils/FormFields/ResetForm/handleResetForm\";\r\nimport { useAddSubCustomerMutation, useLazyGetAllApproveCustomerForLinkingQuery } from \"../../../../../app/services/customerSubCustomerAPI\";\r\n\r\nconst AddEditSubCustomer = (props) => {\r\n\r\n  const subcustomerRef = useRef();\r\n  const [subCustomerFormData, setSubCustomerFormData] = useState(SubCustomerFormData);\r\n  const [shouldRerenderFormCreator, setShouldRerenderFormCreator] = useState(false);\r\n\r\n  const [getLinkCustomer, { isSuccess: isGetLinkCustomerSuccess, data: isGetLinkCustomerData }] = useLazyGetAllApproveCustomerForLinkingQuery();\r\n  const [addSubCustomer, { isLoading: isAddSubCustomerLoading, isSuccess: isAddSubCustomerSuccess, data: isAddSubCustomerData }] = useAddSubCustomerMutation();\r\n\r\n  useEffect(() => {\r\n    if (isGetLinkCustomerSuccess && isGetLinkCustomerData) {\r\n      setDropDownOptionField(isGetLinkCustomerData, 'customerId', 'name', subCustomerFormData, 'customerId');\r\n      setShouldRerenderFormCreator((prevState) => !prevState);\r\n    }\r\n  }, [isGetLinkCustomerSuccess, isGetLinkCustomerData]);\r\n\r\n  useEffect(() => {\r\n    getAllLinkCustomer();\r\n  }, [props.customerId]);\r\n\r\n  const getAllLinkCustomer = () => {\r\n    if (props.customerId > 0) {\r\n      getLinkCustomer(props.customerId);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isAddSubCustomerSuccess && isAddSubCustomerData) {\r\n      props.onSuccess()\r\n      ToastService.success(isAddSubCustomerData.errorMessage);\r\n      onResetForm(SubCustomerFormData, setSubCustomerFormData, null);\r\n      getAllLinkCustomer();\r\n    }\r\n  }, [isAddSubCustomerSuccess, isAddSubCustomerData]);\r\n\r\n  const onhandleEditSubcustomer = () => {\r\n    const formData = subcustomerRef.current.getFormData();\r\n\r\n    if (formData && !formData.subCompanyMainCompanyId) {\r\n      const customerIdList = formData.customerId.map((item) => ({ customerId: item }));\r\n      let subCustomerId = customerIdList.map((item) => item.customerId).join(\",\");\r\n      const request = {\r\n        ...formData,\r\n        customerId: props.customerId,\r\n        subCustomerId: subCustomerId,\r\n      }\r\n      addSubCustomer(request);\r\n    }\r\n  }\r\n\r\n  useImperativeHandle(props.getLinkCustomerRef, () => ({\r\n    callChildFunction: getAllLinkCustomer\r\n  }));\r\n\r\n  return (\r\n    <div className=\"row\">\r\n\r\n      <FormCreator\r\n        config={subCustomerFormData}\r\n        ref={subcustomerRef}\r\n        key={shouldRerenderFormCreator}\r\n        {...subCustomerFormData}\r\n      />\r\n      <div className=\"col-xxl-6 col-xl-12 col-md-12 col-12 col-12 mt-2 d-flex align-items-center\">\r\n        <Buttons\r\n          buttonTypeClassName=\"theme-button\"\r\n          buttonText=\"Assign\"\r\n          onClick={onhandleEditSubcustomer}\r\n          isLoading={isAddSubCustomerLoading}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nAddEditSubCustomer.propTypes = {\r\n  customerId: PropTypes.number.isRequired,  \r\n  onSuccess: PropTypes.func.isRequired,\r\n  getLinkCustomerRef: PropTypes.object.isRequired,  \r\n};\r\nexport default AddEditSubCustomer;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useRef, useEffect, useState,useImperativeHandle } from \"react\";\r\nimport { SubCustomerGridConfig } from \"../config/SubCustomer.data\";\r\nimport ToastService from \"../../../../../services/toastService/ToastService\";\r\nimport SwalAlert from \"../../../../../services/swalService/SwalService\";\r\nimport { encryptUrlData } from \"../../../../../services/CryptoService\";\r\nimport { useDeleteSubCustomerMutation, useGetSubCustomerByCustomerIdMutation } from \"../../../../../app/services/customerSubCustomerAPI\";\r\nimport PropTypes from 'prop-types';\r\nimport FinalMolGrid from \"../../../../../components/FinalMolGrid/FinalMolGrid\";\r\n\r\nconst SubCustomerList = (props) => {\r\n  const molGridRef = useRef();\r\n  const [listData, setListData] = useState();\r\n  const [totalRowCount, setTotalRowCount] = useState(0);\r\n  const { confirm } = SwalAlert();\r\n  const [getSubCustomerByCustomerId, { isLoading: isGetSubCustomerByCustomerIdLoading, isSuccess: isGetSubCustomerByCustomerIdSuccess, data: isGetSubCustomerByCustomerIdData },] = useGetSubCustomerByCustomerIdMutation();\r\n  const [deleteSubCustomer, { isSuccess: isDeleteSubCustomerSuccess, data: isDeleteSubCustomerData },] = useDeleteSubCustomerMutation();\r\n  const getLists = (pageObject, sortingString) => {\r\n    const request = {\r\n      pagination: {\r\n        pageNumber: pageObject.pageNumber,\r\n        pageSize: pageObject.pageSize,\r\n      },\r\n      filters: { searchText: \"\" },\r\n      sortString: sortingString,\r\n      customerId: props.customerId,\r\n    };\r\n    getSubCustomerByCustomerId(request);\r\n  };\r\n\r\n  const handlePageChange = (page) => {\r\n    getLists(page, molGridRef.current.generateSortingString());\r\n  };\r\n  const handleSorting = (shortString) => {\r\n    getLists(molGridRef.current.getCurrentPageObject(), shortString);\r\n  }\r\n  const onGetData = () => {\r\n    if (molGridRef.current) {\r\n      const defaultPageObject = molGridRef.current.getCurrentPageObject();\r\n      getLists(defaultPageObject, molGridRef.current.generateSortingString());\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isDeleteSubCustomerSuccess && isDeleteSubCustomerData) {\r\n      ToastService.success(isDeleteSubCustomerData.errorMessage);\r\n      const currentPageObject = molGridRef.current.getCurrentPageObject();\r\n      handlePageChange(currentPageObject);\r\n      props.onGetLinkCustomer();\r\n    }\r\n  }, [isDeleteSubCustomerSuccess, isDeleteSubCustomerData]);\r\n\r\n  const handleDeleteClick = (data) => {\r\n\r\n    confirm(\"Delete?\", \"Are you sure you want to Delete?\", \"Delete\", \"Cancel\")\r\n      .then((confirmed) => {\r\n        if (confirmed) {\r\n          deleteSubCustomer(data.subCustomerMainCustomerId);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    onGetData()\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isGetSubCustomerByCustomerIdSuccess && isGetSubCustomerByCustomerIdData) {\r\n\r\n      if (isGetSubCustomerByCustomerIdData) {\r\n        setListData(isGetSubCustomerByCustomerIdData.dataSource);\r\n      }\r\n      if (isGetSubCustomerByCustomerIdData.totalRecord) {\r\n        setTotalRowCount(isGetSubCustomerByCustomerIdData.totalRecord);\r\n      }\r\n    }\r\n  }, [isGetSubCustomerByCustomerIdSuccess, isGetSubCustomerByCustomerIdData]);\r\n\r\n\r\n  const handleViewClick = (data) => {\r\n    window.open(`/CustomerDetails/${encryptUrlData(data.subCustomerId)}`, '_blank');\r\n  };\r\n  const actionHandler = {\r\n    VIEWCUSTOMER: handleViewClick,\r\n    DELETE: handleDeleteClick,\r\n  };\r\n\r\n  useImperativeHandle(props.childRef, () => ({\r\n    callChildFunction: onGetData\r\n  }));\r\n  return (\r\n     \r\n      <div className=\"row\">\r\n        <div className=\"col-md-12 table-striped p-3\">\r\n          <FinalMolGrid\r\n            ref={molGridRef}\r\n            configuration={SubCustomerGridConfig}\r\n            dataSource={listData}\r\n            allowPagination={true}\r\n            pagination={{\r\n              totalCount: totalRowCount,\r\n              pageSize: 20,\r\n              currentPage: 1,\r\n            }}\r\n            onPageChange={handlePageChange}\r\n            onSorting={handleSorting}\r\n            isLoading={isGetSubCustomerByCustomerIdLoading}\r\n            onActionChange={actionHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n  \r\n  );\r\n};\r\nSubCustomerList.propTypes = {\r\n  customerId: PropTypes.number.isRequired,\r\n  onGetLinkCustomer: PropTypes.func.isRequired,\r\n  childRef: PropTypes.object\r\n};\r\nexport default SubCustomerList;\r\n","import { useRef } from \"react\";\r\nimport CardSection from \"../../../../components/ui/card/CardSection\";\r\nimport AddEditSubCustomer from \"./feature/AddEditSubCustomer\";\r\nimport SubCustomerList from \"./feature/SubCustomerList\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SubCustomerGrid = ({ customerId }) => {\r\n  const childRef = useRef();\r\n  const getLinkCustomerRef = useRef();\r\n\r\n  const onSuccess = () => {\r\n    if (childRef.current) {\r\n      childRef.current.callChildFunction();\r\n    }\r\n  };\r\n\r\n  const onGetLinkCustomer = () => {\r\n    if (getLinkCustomerRef.current) {\r\n      getLinkCustomerRef.current.callChildFunction();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"link-customer\">\r\n      <CardSection cardTitle=\"Link Customer\" buttonClassName=\"theme-button\">\r\n        <AddEditSubCustomer\r\n          customerId={customerId}\r\n          onSuccess={onSuccess}\r\n          getLinkCustomerRef={getLinkCustomerRef}\r\n        />\r\n        <SubCustomerList\r\n          customerId={customerId}\r\n          childRef={childRef}\r\n          onGetLinkCustomer={onGetLinkCustomer}\r\n        />\r\n      </CardSection>\r\n    </div>\r\n  );\r\n};\r\n\r\nSubCustomerGrid.propTypes = {\r\n  customerId: PropTypes.number.isRequired,\r\n};\r\nexport default SubCustomerGrid;\r\n","import { useContext } from \"react\";\r\nimport SubCustomerGrid from \"../../../../common/features/component/SubCustomer/SubCustomerGrid\";\r\nimport BasicDetailContext from \"../../../../utils/ContextAPIs/Customer/BasicDetailContext\";\r\n\r\n\r\nconst CustomerSubCustomerDetail = () => {\r\n\r\n    const { customerId } = useContext(BasicDetailContext);\r\n\r\n    return (\r\n        <SubCustomerGrid customerId={customerId} />\r\n    )\r\n}\r\nexport default CustomerSubCustomerDetail;"],"names":["SubCustomerFormData","name","initialState","customerId","formFields","id","lable","Field_Name","fieldType","FormFieldTypes","SELECT","dataField","fieldSetting","placeholder","isMultiSelect","options","validation","type","style","containerCss","formSetting","isViewOnly","SubCustomerGridConfig","columns","fieldName","colStyle","width","allowShort","colType","GridColumnType","ACTION","defaultAction","allowDelete","customAction","iconName","title","className","props","subcustomerRef","useRef","subCustomerFormData","setSubCustomerFormData","useState","shouldRerenderFormCreator","setShouldRerenderFormCreator","getLinkCustomer","isSuccess","isGetLinkCustomerSuccess","data","isGetLinkCustomerData","useLazyGetAllApproveCustomerForLinkingQuery","addSubCustomer","isLoading","isAddSubCustomerLoading","isAddSubCustomerSuccess","isAddSubCustomerData","useAddSubCustomerMutation","useEffect","setDropDownOptionField","prevState","getAllLinkCustomer","onSuccess","ToastService","success","errorMessage","onResetForm","useImperativeHandle","getLinkCustomerRef","callChildFunction","_jsxs","children","_jsx","FormCreator","config","ref","Buttons","buttonTypeClassName","buttonText","onClick","onhandleEditSubcustomer","formData","current","getFormData","subCompanyMainCompanyId","subCustomerId","map","item","join","request","molGridRef","listData","setListData","totalRowCount","setTotalRowCount","confirm","SwalAlert","getSubCustomerByCustomerId","isGetSubCustomerByCustomerIdLoading","isGetSubCustomerByCustomerIdSuccess","isGetSubCustomerByCustomerIdData","useGetSubCustomerByCustomerIdMutation","deleteSubCustomer","isDeleteSubCustomerSuccess","isDeleteSubCustomerData","useDeleteSubCustomerMutation","getLists","pageObject","sortingString","pagination","pageNumber","pageSize","filters","searchText","sortString","handlePageChange","page","generateSortingString","onGetData","defaultPageObject","getCurrentPageObject","currentPageObject","onGetLinkCustomer","dataSource","totalRecord","actionHandler","VIEWCUSTOMER","window","open","encryptUrlData","DELETE","then","confirmed","subCustomerMainCustomerId","childRef","FinalMolGrid","configuration","allowPagination","totalCount","currentPage","onPageChange","onSorting","shortString","onActionChange","_ref","CardSection","cardTitle","buttonClassName","AddEditSubCustomer","SubCustomerList","CustomerSubCustomerDetail","useContext","BasicDetailContext","SubCustomerGrid"],"sourceRoot":""}