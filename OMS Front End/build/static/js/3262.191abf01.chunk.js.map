{"version":3,"file":"static/js/3262.191abf01.chunk.js","mappings":"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","sources":["components/ApprovalCheckList/feature/ApprovalInformation/ContactInfo.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ContactType } from \"../../../../utils/Enums/commonEnums\";\r\nimport Checkbox from \"../../../ui/inputs/checkBox/CheckBox\";\r\nimport PropTypes from \"prop-types\";\r\nimport Iconify from \"../../../ui/iconify/Iconify\";\r\n\r\nconst ContactInformation = ({\r\n  isModelOpen,\r\n  mainId,\r\n  getContactById,\r\n  approvalChekedData,\r\n  handleCheckbox,\r\n  isSupplierApproval,\r\n}) => {\r\n  //** State */\r\n  const [contactInformation, setContactInformation] = useState([]);\r\n  const [isChecked, setIsChecked] = useState(approvalChekedData?.isChecked || false);\r\n\r\n  const [openSections, setOpenSections] = useState([true]);\r\n  //** API Call's */\r\n  const [\r\n    getContactList,\r\n    {\r\n      isFetching: isGetContactFetching,\r\n      isSuccess: isGetContactSucess,\r\n      data: isGetcontactItem,\r\n    },\r\n  ] = getContactById();\r\n\r\n  useEffect(() => {\r\n    if (isModelOpen && mainId) {\r\n      const type = !isSupplierApproval ? [ContactType.INVOICESUBMISSION, ContactType.AP] : [ContactType.ACCOUNTSRECEIVABLE];\r\n      let req = {\r\n        id: mainId,\r\n        searchText: \"\",\r\n        contactType: type,\r\n      };\r\n      getContactList(req);\r\n    }\r\n  }, [isModelOpen, mainId]);\r\n\r\n  useEffect(() => {\r\n    if (!isGetContactFetching && isGetContactSucess && isGetcontactItem) {\r\n      const filter = isGetcontactItem.filter((data) => data.isPrimary).map(data => ({ ...data, isChecked: false }));;\r\n      setContactInformation(filter);\r\n    }\r\n  }, [isGetContactFetching, isGetContactSucess, isGetcontactItem]);\r\n\r\n  useEffect(() => {\r\n    if (contactInformation && contactInformation.length > 0) {\r\n      const allChildChecked = contactInformation.every(data => data.isChecked);\r\n      if (allChildChecked) {\r\n        setIsChecked(true);\r\n        handleCheckbox(\"contactInformation\", true);\r\n      } else {\r\n        setIsChecked(false);\r\n        handleCheckbox(\"contactInformation\", false);\r\n      }\r\n    }\r\n  }, [contactInformation]);\r\n\r\n  const handleChange = (name, value) => {\r\n    const modifyData = contactInformation.map((item) =>\r\n      item.contactId === name ? { ...item, isChecked: value } : item\r\n    )\r\n    setContactInformation(modifyData);\r\n  };\r\n\r\n  // Toggle active section\r\n  const toggleSection = (index) => {\r\n    const updatedSections = [...openSections];\r\n    updatedSections[index] = !updatedSections[index]; // Toggle the clicked section\r\n    setOpenSections(updatedSections);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <>\r\n        <div className={`card-top-title ${openSections[0] ? 'active' : ''}`} onClick={() => toggleSection(0)}>\r\n          <div className=\"d-flex align-items-center mr-2\">\r\n            <span>\r\n              <Iconify icon=\"ep:arrow-down-bold\" className=\"open-bar\" />\r\n            </span>\r\n            <h5> Contact Information </h5>\r\n          </div>\r\n          {/* <div className=\"checkbox-part\">\r\n            <Checkbox\r\n              name={\"contactInformation\"}\r\n              dataField={\"contactInformation\"}\r\n              checked={isChecked || false}\r\n              // onChange={handleChange}\r\n              isDisable={true}\r\n            />\r\n          </div> */}\r\n        </div>\r\n        {openSections[0] && (\r\n          <div className=\"card-info-checklist\">\r\n            {contactInformation &&\r\n              contactInformation.map((contact, index) => (\r\n                <div className=\"card-part\" key={index}>\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <h6 className=\"title\">{contact.type}</h6>\r\n                    <Checkbox\r\n                      name={contact.contactId}\r\n                      dataField={contact.contactId}\r\n                      checked={contact.isChecked}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </div>\r\n                  <h6\r\n                    className={`name-title ${contact.isPrimary ? \"is-primary\" : \"\"\r\n                      }`}\r\n                  >\r\n                    <span className=\"label\">Name :</span>\r\n                    <p className=\"name-desc\">\r\n                      {contact.firstName} {contact.lastName}\r\n                    </p>\r\n                  </h6>\r\n                  <h6 className=\"name-title\">\r\n                    <span className=\"label\">Email :</span>\r\n                    <div className=\"title-desc\">\r\n                      {contact.emailAddressList &&\r\n                        contact.emailAddressList.map((emails) => (\r\n                          <div className=\"email-primary\">\r\n                            <h6 className=\"name-desc\">{emails.emailAddress}</h6>\r\n                            <span\r\n                              className={emails.isPrimary ? \"is-primary\" : \"\"}\r\n                            ></span>\r\n                          </div>\r\n                        ))}\r\n                    </div>\r\n                  </h6>\r\n                  <h6 className=\"name-title number-sec\">\r\n                    <span className=\"label\">Phone :</span>\r\n                    <div className=\"name-desc-sec\">\r\n                      {contact.phoneNumberList &&\r\n                        contact.phoneNumberList.map((phoneData) => (\r\n                          <>\r\n                            <h6\r\n                              className={`name-desc d-flex ${phoneData.phoneType === \"Home\"\r\n                                ? \"home\"\r\n                                : phoneData.phoneType === \"Work\"\r\n                                  ? \"work\"\r\n                                  : \"home\"\r\n                                } ${phoneData.isPrimary ? \"is-primary\" : \"\"}`}\r\n                            >\r\n                              ({phoneData.phoneCode}) {phoneData.phoneNumber}\r\n                              {phoneData.extension\r\n                                ? `, ${phoneData.extension}`\r\n                                : \"\"}\r\n                            </h6>\r\n                          </>\r\n                        ))}\r\n                    </div>\r\n                  </h6>\r\n                </div>\r\n              ))}\r\n          </div>\r\n        )}\r\n      </>\r\n    </React.Fragment>\r\n  );\r\n};\r\nContactInformation.propTypes = {\r\n  isModelOpen: PropTypes.bool.isRequired,\r\n  mainId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  getContactById: PropTypes.func.isRequired,\r\n  approvalChekedData: PropTypes.shape({\r\n    isChecked: PropTypes.bool,\r\n  }),\r\n  handleCheckbox: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactInformation;\r\n"],"names":["_ref","isModelOpen","mainId","getContactById","approvalChekedData","handleCheckbox","isSupplierApproval","contactInformation","setContactInformation","useState","isChecked","setIsChecked","openSections","setOpenSections","getContactList","isFetching","isGetContactFetching","isSuccess","isGetContactSucess","data","isGetcontactItem","useEffect","type","ContactType","ACCOUNTSRECEIVABLE","INVOICESUBMISSION","AP","id","searchText","contactType","filter","isPrimary","map","length","every","handleChange","name","value","modifyData","item","contactId","_jsx","React","children","_jsxs","_Fragment","className","onClick","index","updatedSections","toggleSection","Iconify","icon","contact","Checkbox","dataField","checked","onChange","firstName","lastName","emailAddressList","emails","emailAddress","phoneNumberList","phoneData","phoneType","phoneCode","phoneNumber","extension"],"sourceRoot":""}